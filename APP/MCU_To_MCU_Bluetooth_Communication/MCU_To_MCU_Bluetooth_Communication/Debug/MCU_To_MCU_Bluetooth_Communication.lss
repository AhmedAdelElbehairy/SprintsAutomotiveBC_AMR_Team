
MCU_To_MCU_Bluetooth_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00001fc2  00002056  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  0080008e  0080008e  00002084  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c40  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf8  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a4d  00000000  00000000  00005d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009c4  00000000  00000000  00008770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001413  00000000  00000000  00009134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001406  00000000  00000000  0000a547  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000b94d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_7>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	ff 08       	sbc	r15, r15
      56:	0b 09       	sbc	r16, r11
      58:	17 09       	sbc	r17, r7
      5a:	23 09       	sbc	r18, r3
      5c:	2f 09       	sbc	r18, r15
      5e:	3b 09       	sbc	r19, r11
      60:	47 09       	sbc	r20, r7

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e2 ec       	ldi	r30, 0xC2	; 194
      76:	ff e1       	ldi	r31, 0x1F	; 31
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ae 38       	cpi	r26, 0x8E	; 142
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	ae e8       	ldi	r26, 0x8E	; 142
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ad 3c       	cpi	r26, 0xCD	; 205
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <main>
      98:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <vPortYieldFromTick>:
	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
	TIMSK = ucLowByte;
}
      a0:	0f 92       	push	r0
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	0f 92       	push	r0
      a8:	1f 92       	push	r1
      aa:	11 24       	eor	r1, r1
      ac:	2f 92       	push	r2
      ae:	3f 92       	push	r3
      b0:	4f 92       	push	r4
      b2:	5f 92       	push	r5
      b4:	6f 92       	push	r6
      b6:	7f 92       	push	r7
      b8:	8f 92       	push	r8
      ba:	9f 92       	push	r9
      bc:	af 92       	push	r10
      be:	bf 92       	push	r11
      c0:	cf 92       	push	r12
      c2:	df 92       	push	r13
      c4:	ef 92       	push	r14
      c6:	ff 92       	push	r15
      c8:	0f 93       	push	r16
      ca:	1f 93       	push	r17
      cc:	2f 93       	push	r18
      ce:	3f 93       	push	r19
      d0:	4f 93       	push	r20
      d2:	5f 93       	push	r21
      d4:	6f 93       	push	r22
      d6:	7f 93       	push	r23
      d8:	8f 93       	push	r24
      da:	9f 93       	push	r25
      dc:	af 93       	push	r26
      de:	bf 93       	push	r27
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	ef 93       	push	r30
      e6:	ff 93       	push	r31
      e8:	a0 91 8e 00 	lds	r26, 0x008E	; 0x80008e <__data_end>
      ec:	b0 91 8f 00 	lds	r27, 0x008F	; 0x80008f <__data_end+0x1>
      f0:	0d b6       	in	r0, 0x3d	; 61
      f2:	0d 92       	st	X+, r0
      f4:	0e b6       	in	r0, 0x3e	; 62
      f6:	0d 92       	st	X+, r0
      f8:	0e 94 b2 00 	call	0x164	; 0x164 <xTaskIncrementTick>
      fc:	88 23       	and	r24, r24
      fe:	11 f0       	breq	.+4      	; 0x104 <vPortYieldFromTick+0x64>
     100:	0e 94 81 02 	call	0x502	; 0x502 <vTaskSwitchContext>
     104:	a0 91 8e 00 	lds	r26, 0x008E	; 0x80008e <__data_end>
     108:	b0 91 8f 00 	lds	r27, 0x008F	; 0x80008f <__data_end+0x1>
     10c:	cd 91       	ld	r28, X+
     10e:	cd bf       	out	0x3d, r28	; 61
     110:	dd 91       	ld	r29, X+
     112:	de bf       	out	0x3e, r29	; 62
     114:	ff 91       	pop	r31
     116:	ef 91       	pop	r30
     118:	df 91       	pop	r29
     11a:	cf 91       	pop	r28
     11c:	bf 91       	pop	r27
     11e:	af 91       	pop	r26
     120:	9f 91       	pop	r25
     122:	8f 91       	pop	r24
     124:	7f 91       	pop	r23
     126:	6f 91       	pop	r22
     128:	5f 91       	pop	r21
     12a:	4f 91       	pop	r20
     12c:	3f 91       	pop	r19
     12e:	2f 91       	pop	r18
     130:	1f 91       	pop	r17
     132:	0f 91       	pop	r16
     134:	ff 90       	pop	r15
     136:	ef 90       	pop	r14
     138:	df 90       	pop	r13
     13a:	cf 90       	pop	r12
     13c:	bf 90       	pop	r11
     13e:	af 90       	pop	r10
     140:	9f 90       	pop	r9
     142:	8f 90       	pop	r8
     144:	7f 90       	pop	r7
     146:	6f 90       	pop	r6
     148:	5f 90       	pop	r5
     14a:	4f 90       	pop	r4
     14c:	3f 90       	pop	r3
     14e:	2f 90       	pop	r2
     150:	1f 90       	pop	r1
     152:	0f 90       	pop	r0
     154:	0f be       	out	0x3f, r0	; 63
     156:	0f 90       	pop	r0
     158:	08 95       	ret
	...

0000015c <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     15c:	0e 94 50 00 	call	0xa0	; 0xa0 <vPortYieldFromTick>
		asm volatile ( "reti" );
     160:	18 95       	reti
	...

00000164 <xTaskIncrementTick>:
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	2f 97       	sbiw	r28, 0x0f	; 15
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	19 82       	std	Y+1, r1	; 0x01
     17a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <uxSchedulerSuspended>
     17e:	88 23       	and	r24, r24
     180:	09 f0       	breq	.+2      	; 0x184 <xTaskIncrementTick+0x20>
     182:	ac c1       	rjmp	.+856    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
     184:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <xTickCount>
     188:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <xTickCount+0x1>
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	9b 83       	std	Y+3, r25	; 0x03
     190:	8a 83       	std	Y+2, r24	; 0x02
     192:	8a 81       	ldd	r24, Y+2	; 0x02
     194:	9b 81       	ldd	r25, Y+3	; 0x03
     196:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <xTickCount+0x1>
     19a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <xTickCount>
     19e:	8a 81       	ldd	r24, Y+2	; 0x02
     1a0:	9b 81       	ldd	r25, Y+3	; 0x03
     1a2:	89 2b       	or	r24, r25
     1a4:	d9 f4       	brne	.+54     	; 0x1dc <xTaskIncrementTick+0x78>
     1a6:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <pxDelayedTaskList>
     1aa:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <pxDelayedTaskList+0x1>
     1ae:	9d 83       	std	Y+5, r25	; 0x05
     1b0:	8c 83       	std	Y+4, r24	; 0x04
     1b2:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <pxOverflowDelayedTaskList>
     1b6:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <pxOverflowDelayedTaskList+0x1>
     1ba:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <pxDelayedTaskList+0x1>
     1be:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <pxDelayedTaskList>
     1c2:	8c 81       	ldd	r24, Y+4	; 0x04
     1c4:	9d 81       	ldd	r25, Y+5	; 0x05
     1c6:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <pxOverflowDelayedTaskList+0x1>
     1ca:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <pxOverflowDelayedTaskList>
     1ce:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <xNumOfOverflows>
     1d2:	8f 5f       	subi	r24, 0xFF	; 255
     1d4:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <xNumOfOverflows>
     1d8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <prvResetNextTaskUnblockTime>
     1dc:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <xNextTaskUnblockTime>
     1e0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <xNextTaskUnblockTime+0x1>
     1e4:	2a 81       	ldd	r18, Y+2	; 0x02
     1e6:	3b 81       	ldd	r19, Y+3	; 0x03
     1e8:	28 17       	cp	r18, r24
     1ea:	39 07       	cpc	r19, r25
     1ec:	08 f4       	brcc	.+2      	; 0x1f0 <xTaskIncrementTick+0x8c>
     1ee:	56 c1       	rjmp	.+684    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     1f0:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <pxDelayedTaskList>
     1f4:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <pxDelayedTaskList+0x1>
     1f8:	fc 01       	movw	r30, r24
     1fa:	80 81       	ld	r24, Z
     1fc:	88 23       	and	r24, r24
     1fe:	39 f4       	brne	.+14     	; 0x20e <xTaskIncrementTick+0xaa>
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	9f ef       	ldi	r25, 0xFF	; 255
     204:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <xNextTaskUnblockTime+0x1>
     208:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <xNextTaskUnblockTime>
     20c:	47 c1       	rjmp	.+654    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     20e:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <pxDelayedTaskList>
     212:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <pxDelayedTaskList+0x1>
     216:	fc 01       	movw	r30, r24
     218:	85 81       	ldd	r24, Z+5	; 0x05
     21a:	96 81       	ldd	r25, Z+6	; 0x06
     21c:	fc 01       	movw	r30, r24
     21e:	86 81       	ldd	r24, Z+6	; 0x06
     220:	97 81       	ldd	r25, Z+7	; 0x07
     222:	9f 83       	std	Y+7, r25	; 0x07
     224:	8e 83       	std	Y+6, r24	; 0x06
     226:	8e 81       	ldd	r24, Y+6	; 0x06
     228:	9f 81       	ldd	r25, Y+7	; 0x07
     22a:	fc 01       	movw	r30, r24
     22c:	82 81       	ldd	r24, Z+2	; 0x02
     22e:	93 81       	ldd	r25, Z+3	; 0x03
     230:	99 87       	std	Y+9, r25	; 0x09
     232:	88 87       	std	Y+8, r24	; 0x08
     234:	2a 81       	ldd	r18, Y+2	; 0x02
     236:	3b 81       	ldd	r19, Y+3	; 0x03
     238:	88 85       	ldd	r24, Y+8	; 0x08
     23a:	99 85       	ldd	r25, Y+9	; 0x09
     23c:	28 17       	cp	r18, r24
     23e:	39 07       	cpc	r19, r25
     240:	38 f4       	brcc	.+14     	; 0x250 <xTaskIncrementTick+0xec>
     242:	88 85       	ldd	r24, Y+8	; 0x08
     244:	99 85       	ldd	r25, Y+9	; 0x09
     246:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <xNextTaskUnblockTime+0x1>
     24a:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <xNextTaskUnblockTime>
     24e:	26 c1       	rjmp	.+588    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     250:	8e 81       	ldd	r24, Y+6	; 0x06
     252:	9f 81       	ldd	r25, Y+7	; 0x07
     254:	fc 01       	movw	r30, r24
     256:	82 85       	ldd	r24, Z+10	; 0x0a
     258:	93 85       	ldd	r25, Z+11	; 0x0b
     25a:	9b 87       	std	Y+11, r25	; 0x0b
     25c:	8a 87       	std	Y+10, r24	; 0x0a
     25e:	8e 81       	ldd	r24, Y+6	; 0x06
     260:	9f 81       	ldd	r25, Y+7	; 0x07
     262:	fc 01       	movw	r30, r24
     264:	84 81       	ldd	r24, Z+4	; 0x04
     266:	95 81       	ldd	r25, Z+5	; 0x05
     268:	2e 81       	ldd	r18, Y+6	; 0x06
     26a:	3f 81       	ldd	r19, Y+7	; 0x07
     26c:	f9 01       	movw	r30, r18
     26e:	26 81       	ldd	r18, Z+6	; 0x06
     270:	37 81       	ldd	r19, Z+7	; 0x07
     272:	fc 01       	movw	r30, r24
     274:	35 83       	std	Z+5, r19	; 0x05
     276:	24 83       	std	Z+4, r18	; 0x04
     278:	8e 81       	ldd	r24, Y+6	; 0x06
     27a:	9f 81       	ldd	r25, Y+7	; 0x07
     27c:	fc 01       	movw	r30, r24
     27e:	86 81       	ldd	r24, Z+6	; 0x06
     280:	97 81       	ldd	r25, Z+7	; 0x07
     282:	2e 81       	ldd	r18, Y+6	; 0x06
     284:	3f 81       	ldd	r19, Y+7	; 0x07
     286:	f9 01       	movw	r30, r18
     288:	24 81       	ldd	r18, Z+4	; 0x04
     28a:	35 81       	ldd	r19, Z+5	; 0x05
     28c:	fc 01       	movw	r30, r24
     28e:	33 83       	std	Z+3, r19	; 0x03
     290:	22 83       	std	Z+2, r18	; 0x02
     292:	8a 85       	ldd	r24, Y+10	; 0x0a
     294:	9b 85       	ldd	r25, Y+11	; 0x0b
     296:	fc 01       	movw	r30, r24
     298:	21 81       	ldd	r18, Z+1	; 0x01
     29a:	32 81       	ldd	r19, Z+2	; 0x02
     29c:	8e 81       	ldd	r24, Y+6	; 0x06
     29e:	9f 81       	ldd	r25, Y+7	; 0x07
     2a0:	02 96       	adiw	r24, 0x02	; 2
     2a2:	28 17       	cp	r18, r24
     2a4:	39 07       	cpc	r19, r25
     2a6:	51 f4       	brne	.+20     	; 0x2bc <xTaskIncrementTick+0x158>
     2a8:	8e 81       	ldd	r24, Y+6	; 0x06
     2aa:	9f 81       	ldd	r25, Y+7	; 0x07
     2ac:	fc 01       	movw	r30, r24
     2ae:	26 81       	ldd	r18, Z+6	; 0x06
     2b0:	37 81       	ldd	r19, Z+7	; 0x07
     2b2:	8a 85       	ldd	r24, Y+10	; 0x0a
     2b4:	9b 85       	ldd	r25, Y+11	; 0x0b
     2b6:	fc 01       	movw	r30, r24
     2b8:	32 83       	std	Z+2, r19	; 0x02
     2ba:	21 83       	std	Z+1, r18	; 0x01
     2bc:	8e 81       	ldd	r24, Y+6	; 0x06
     2be:	9f 81       	ldd	r25, Y+7	; 0x07
     2c0:	fc 01       	movw	r30, r24
     2c2:	13 86       	std	Z+11, r1	; 0x0b
     2c4:	12 86       	std	Z+10, r1	; 0x0a
     2c6:	8a 85       	ldd	r24, Y+10	; 0x0a
     2c8:	9b 85       	ldd	r25, Y+11	; 0x0b
     2ca:	fc 01       	movw	r30, r24
     2cc:	80 81       	ld	r24, Z
     2ce:	2f ef       	ldi	r18, 0xFF	; 255
     2d0:	28 0f       	add	r18, r24
     2d2:	8a 85       	ldd	r24, Y+10	; 0x0a
     2d4:	9b 85       	ldd	r25, Y+11	; 0x0b
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
     2da:	8e 81       	ldd	r24, Y+6	; 0x06
     2dc:	9f 81       	ldd	r25, Y+7	; 0x07
     2de:	fc 01       	movw	r30, r24
     2e0:	84 89       	ldd	r24, Z+20	; 0x14
     2e2:	95 89       	ldd	r25, Z+21	; 0x15
     2e4:	89 2b       	or	r24, r25
     2e6:	09 f4       	brne	.+2      	; 0x2ea <xTaskIncrementTick+0x186>
     2e8:	45 c0       	rjmp	.+138    	; 0x374 <xTaskIncrementTick+0x210>
     2ea:	8e 81       	ldd	r24, Y+6	; 0x06
     2ec:	9f 81       	ldd	r25, Y+7	; 0x07
     2ee:	fc 01       	movw	r30, r24
     2f0:	84 89       	ldd	r24, Z+20	; 0x14
     2f2:	95 89       	ldd	r25, Z+21	; 0x15
     2f4:	9d 87       	std	Y+13, r25	; 0x0d
     2f6:	8c 87       	std	Y+12, r24	; 0x0c
     2f8:	8e 81       	ldd	r24, Y+6	; 0x06
     2fa:	9f 81       	ldd	r25, Y+7	; 0x07
     2fc:	fc 01       	movw	r30, r24
     2fe:	86 85       	ldd	r24, Z+14	; 0x0e
     300:	97 85       	ldd	r25, Z+15	; 0x0f
     302:	2e 81       	ldd	r18, Y+6	; 0x06
     304:	3f 81       	ldd	r19, Y+7	; 0x07
     306:	f9 01       	movw	r30, r18
     308:	20 89       	ldd	r18, Z+16	; 0x10
     30a:	31 89       	ldd	r19, Z+17	; 0x11
     30c:	fc 01       	movw	r30, r24
     30e:	35 83       	std	Z+5, r19	; 0x05
     310:	24 83       	std	Z+4, r18	; 0x04
     312:	8e 81       	ldd	r24, Y+6	; 0x06
     314:	9f 81       	ldd	r25, Y+7	; 0x07
     316:	fc 01       	movw	r30, r24
     318:	80 89       	ldd	r24, Z+16	; 0x10
     31a:	91 89       	ldd	r25, Z+17	; 0x11
     31c:	2e 81       	ldd	r18, Y+6	; 0x06
     31e:	3f 81       	ldd	r19, Y+7	; 0x07
     320:	f9 01       	movw	r30, r18
     322:	26 85       	ldd	r18, Z+14	; 0x0e
     324:	37 85       	ldd	r19, Z+15	; 0x0f
     326:	fc 01       	movw	r30, r24
     328:	33 83       	std	Z+3, r19	; 0x03
     32a:	22 83       	std	Z+2, r18	; 0x02
     32c:	8c 85       	ldd	r24, Y+12	; 0x0c
     32e:	9d 85       	ldd	r25, Y+13	; 0x0d
     330:	fc 01       	movw	r30, r24
     332:	21 81       	ldd	r18, Z+1	; 0x01
     334:	32 81       	ldd	r19, Z+2	; 0x02
     336:	8e 81       	ldd	r24, Y+6	; 0x06
     338:	9f 81       	ldd	r25, Y+7	; 0x07
     33a:	0c 96       	adiw	r24, 0x0c	; 12
     33c:	28 17       	cp	r18, r24
     33e:	39 07       	cpc	r19, r25
     340:	51 f4       	brne	.+20     	; 0x356 <xTaskIncrementTick+0x1f2>
     342:	8e 81       	ldd	r24, Y+6	; 0x06
     344:	9f 81       	ldd	r25, Y+7	; 0x07
     346:	fc 01       	movw	r30, r24
     348:	20 89       	ldd	r18, Z+16	; 0x10
     34a:	31 89       	ldd	r19, Z+17	; 0x11
     34c:	8c 85       	ldd	r24, Y+12	; 0x0c
     34e:	9d 85       	ldd	r25, Y+13	; 0x0d
     350:	fc 01       	movw	r30, r24
     352:	32 83       	std	Z+2, r19	; 0x02
     354:	21 83       	std	Z+1, r18	; 0x01
     356:	8e 81       	ldd	r24, Y+6	; 0x06
     358:	9f 81       	ldd	r25, Y+7	; 0x07
     35a:	fc 01       	movw	r30, r24
     35c:	15 8a       	std	Z+21, r1	; 0x15
     35e:	14 8a       	std	Z+20, r1	; 0x14
     360:	8c 85       	ldd	r24, Y+12	; 0x0c
     362:	9d 85       	ldd	r25, Y+13	; 0x0d
     364:	fc 01       	movw	r30, r24
     366:	80 81       	ld	r24, Z
     368:	2f ef       	ldi	r18, 0xFF	; 255
     36a:	28 0f       	add	r18, r24
     36c:	8c 85       	ldd	r24, Y+12	; 0x0c
     36e:	9d 85       	ldd	r25, Y+13	; 0x0d
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
     374:	8e 81       	ldd	r24, Y+6	; 0x06
     376:	9f 81       	ldd	r25, Y+7	; 0x07
     378:	fc 01       	movw	r30, r24
     37a:	96 89       	ldd	r25, Z+22	; 0x16
     37c:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <uxTopReadyPriority>
     380:	89 17       	cp	r24, r25
     382:	30 f4       	brcc	.+12     	; 0x390 <xTaskIncrementTick+0x22c>
     384:	8e 81       	ldd	r24, Y+6	; 0x06
     386:	9f 81       	ldd	r25, Y+7	; 0x07
     388:	fc 01       	movw	r30, r24
     38a:	86 89       	ldd	r24, Z+22	; 0x16
     38c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <uxTopReadyPriority>
     390:	8e 81       	ldd	r24, Y+6	; 0x06
     392:	9f 81       	ldd	r25, Y+7	; 0x07
     394:	fc 01       	movw	r30, r24
     396:	86 89       	ldd	r24, Z+22	; 0x16
     398:	28 2f       	mov	r18, r24
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	c9 01       	movw	r24, r18
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	88 0f       	add	r24, r24
     3a8:	99 1f       	adc	r25, r25
     3aa:	82 0f       	add	r24, r18
     3ac:	93 1f       	adc	r25, r19
     3ae:	8f 56       	subi	r24, 0x6F	; 111
     3b0:	9f 4f       	sbci	r25, 0xFF	; 255
     3b2:	fc 01       	movw	r30, r24
     3b4:	80 81       	ld	r24, Z
     3b6:	91 81       	ldd	r25, Z+1	; 0x01
     3b8:	9f 87       	std	Y+15, r25	; 0x0f
     3ba:	8e 87       	std	Y+14, r24	; 0x0e
     3bc:	8e 81       	ldd	r24, Y+6	; 0x06
     3be:	9f 81       	ldd	r25, Y+7	; 0x07
     3c0:	2e 85       	ldd	r18, Y+14	; 0x0e
     3c2:	3f 85       	ldd	r19, Y+15	; 0x0f
     3c4:	fc 01       	movw	r30, r24
     3c6:	35 83       	std	Z+5, r19	; 0x05
     3c8:	24 83       	std	Z+4, r18	; 0x04
     3ca:	8e 85       	ldd	r24, Y+14	; 0x0e
     3cc:	9f 85       	ldd	r25, Y+15	; 0x0f
     3ce:	fc 01       	movw	r30, r24
     3d0:	24 81       	ldd	r18, Z+4	; 0x04
     3d2:	35 81       	ldd	r19, Z+5	; 0x05
     3d4:	8e 81       	ldd	r24, Y+6	; 0x06
     3d6:	9f 81       	ldd	r25, Y+7	; 0x07
     3d8:	fc 01       	movw	r30, r24
     3da:	37 83       	std	Z+7, r19	; 0x07
     3dc:	26 83       	std	Z+6, r18	; 0x06
     3de:	8e 85       	ldd	r24, Y+14	; 0x0e
     3e0:	9f 85       	ldd	r25, Y+15	; 0x0f
     3e2:	fc 01       	movw	r30, r24
     3e4:	84 81       	ldd	r24, Z+4	; 0x04
     3e6:	95 81       	ldd	r25, Z+5	; 0x05
     3e8:	2e 81       	ldd	r18, Y+6	; 0x06
     3ea:	3f 81       	ldd	r19, Y+7	; 0x07
     3ec:	2e 5f       	subi	r18, 0xFE	; 254
     3ee:	3f 4f       	sbci	r19, 0xFF	; 255
     3f0:	fc 01       	movw	r30, r24
     3f2:	33 83       	std	Z+3, r19	; 0x03
     3f4:	22 83       	std	Z+2, r18	; 0x02
     3f6:	8e 81       	ldd	r24, Y+6	; 0x06
     3f8:	9f 81       	ldd	r25, Y+7	; 0x07
     3fa:	9c 01       	movw	r18, r24
     3fc:	2e 5f       	subi	r18, 0xFE	; 254
     3fe:	3f 4f       	sbci	r19, 0xFF	; 255
     400:	8e 85       	ldd	r24, Y+14	; 0x0e
     402:	9f 85       	ldd	r25, Y+15	; 0x0f
     404:	fc 01       	movw	r30, r24
     406:	35 83       	std	Z+5, r19	; 0x05
     408:	24 83       	std	Z+4, r18	; 0x04
     40a:	8e 81       	ldd	r24, Y+6	; 0x06
     40c:	9f 81       	ldd	r25, Y+7	; 0x07
     40e:	fc 01       	movw	r30, r24
     410:	86 89       	ldd	r24, Z+22	; 0x16
     412:	28 2f       	mov	r18, r24
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	c9 01       	movw	r24, r18
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	82 0f       	add	r24, r18
     426:	93 1f       	adc	r25, r19
     428:	9c 01       	movw	r18, r24
     42a:	20 57       	subi	r18, 0x70	; 112
     42c:	3f 4f       	sbci	r19, 0xFF	; 255
     42e:	8e 81       	ldd	r24, Y+6	; 0x06
     430:	9f 81       	ldd	r25, Y+7	; 0x07
     432:	fc 01       	movw	r30, r24
     434:	33 87       	std	Z+11, r19	; 0x0b
     436:	22 87       	std	Z+10, r18	; 0x0a
     438:	8e 81       	ldd	r24, Y+6	; 0x06
     43a:	9f 81       	ldd	r25, Y+7	; 0x07
     43c:	fc 01       	movw	r30, r24
     43e:	86 89       	ldd	r24, Z+22	; 0x16
     440:	28 2f       	mov	r18, r24
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	c9 01       	movw	r24, r18
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	88 0f       	add	r24, r24
     450:	99 1f       	adc	r25, r25
     452:	82 0f       	add	r24, r18
     454:	93 1f       	adc	r25, r19
     456:	80 57       	subi	r24, 0x70	; 112
     458:	9f 4f       	sbci	r25, 0xFF	; 255
     45a:	fc 01       	movw	r30, r24
     45c:	80 81       	ld	r24, Z
     45e:	41 e0       	ldi	r20, 0x01	; 1
     460:	48 0f       	add	r20, r24
     462:	c9 01       	movw	r24, r18
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	82 0f       	add	r24, r18
     472:	93 1f       	adc	r25, r19
     474:	80 57       	subi	r24, 0x70	; 112
     476:	9f 4f       	sbci	r25, 0xFF	; 255
     478:	fc 01       	movw	r30, r24
     47a:	40 83       	st	Z, r20
     47c:	8e 81       	ldd	r24, Y+6	; 0x06
     47e:	9f 81       	ldd	r25, Y+7	; 0x07
     480:	fc 01       	movw	r30, r24
     482:	26 89       	ldd	r18, Z+22	; 0x16
     484:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
     488:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
     48c:	fc 01       	movw	r30, r24
     48e:	86 89       	ldd	r24, Z+22	; 0x16
     490:	28 17       	cp	r18, r24
     492:	08 f4       	brcc	.+2      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     494:	ad ce       	rjmp	.-678    	; 0x1f0 <xTaskIncrementTick+0x8c>
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	89 83       	std	Y+1, r24	; 0x01
     49a:	aa ce       	rjmp	.-684    	; 0x1f0 <xTaskIncrementTick+0x8c>
     49c:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
     4a0:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
     4a4:	fc 01       	movw	r30, r24
     4a6:	86 89       	ldd	r24, Z+22	; 0x16
     4a8:	28 2f       	mov	r18, r24
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	c9 01       	movw	r24, r18
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	82 0f       	add	r24, r18
     4bc:	93 1f       	adc	r25, r19
     4be:	80 57       	subi	r24, 0x70	; 112
     4c0:	9f 4f       	sbci	r25, 0xFF	; 255
     4c2:	fc 01       	movw	r30, r24
     4c4:	80 81       	ld	r24, Z
     4c6:	82 30       	cpi	r24, 0x02	; 2
     4c8:	10 f0       	brcs	.+4      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	89 83       	std	Y+1, r24	; 0x01
     4ce:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <xYieldPending>
     4d2:	88 23       	and	r24, r24
     4d4:	61 f0       	breq	.+24     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	89 83       	std	Y+1, r24	; 0x01
     4da:	09 c0       	rjmp	.+18     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     4dc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <xPendedTicks>
     4e0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <xPendedTicks+0x1>
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <xPendedTicks+0x1>
     4ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <xPendedTicks>
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	2f 96       	adiw	r28, 0x0f	; 15
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <vTaskSwitchContext>:
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	00 d0       	rcall	.+0      	; 0x508 <vTaskSwitchContext+0x6>
     508:	1f 92       	push	r1
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <uxSchedulerSuspended>
     512:	88 23       	and	r24, r24
     514:	21 f0       	breq	.+8      	; 0x51e <vTaskSwitchContext+0x1c>
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <xYieldPending>
     51c:	5f c0       	rjmp	.+190    	; 0x5dc <vTaskSwitchContext+0xda>
     51e:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <xYieldPending>
     522:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <uxTopReadyPriority>
     526:	89 83       	std	Y+1, r24	; 0x01
     528:	03 c0       	rjmp	.+6      	; 0x530 <vTaskSwitchContext+0x2e>
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	81 50       	subi	r24, 0x01	; 1
     52e:	89 83       	std	Y+1, r24	; 0x01
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	28 2f       	mov	r18, r24
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	c9 01       	movw	r24, r18
     538:	88 0f       	add	r24, r24
     53a:	99 1f       	adc	r25, r25
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	82 0f       	add	r24, r18
     546:	93 1f       	adc	r25, r19
     548:	80 57       	subi	r24, 0x70	; 112
     54a:	9f 4f       	sbci	r25, 0xFF	; 255
     54c:	fc 01       	movw	r30, r24
     54e:	80 81       	ld	r24, Z
     550:	88 23       	and	r24, r24
     552:	59 f3       	breq	.-42     	; 0x52a <vTaskSwitchContext+0x28>
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	28 2f       	mov	r18, r24
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	c9 01       	movw	r24, r18
     55c:	88 0f       	add	r24, r24
     55e:	99 1f       	adc	r25, r25
     560:	88 0f       	add	r24, r24
     562:	99 1f       	adc	r25, r25
     564:	88 0f       	add	r24, r24
     566:	99 1f       	adc	r25, r25
     568:	82 0f       	add	r24, r18
     56a:	93 1f       	adc	r25, r19
     56c:	80 57       	subi	r24, 0x70	; 112
     56e:	9f 4f       	sbci	r25, 0xFF	; 255
     570:	9b 83       	std	Y+3, r25	; 0x03
     572:	8a 83       	std	Y+2, r24	; 0x02
     574:	8a 81       	ldd	r24, Y+2	; 0x02
     576:	9b 81       	ldd	r25, Y+3	; 0x03
     578:	fc 01       	movw	r30, r24
     57a:	81 81       	ldd	r24, Z+1	; 0x01
     57c:	92 81       	ldd	r25, Z+2	; 0x02
     57e:	fc 01       	movw	r30, r24
     580:	22 81       	ldd	r18, Z+2	; 0x02
     582:	33 81       	ldd	r19, Z+3	; 0x03
     584:	8a 81       	ldd	r24, Y+2	; 0x02
     586:	9b 81       	ldd	r25, Y+3	; 0x03
     588:	fc 01       	movw	r30, r24
     58a:	32 83       	std	Z+2, r19	; 0x02
     58c:	21 83       	std	Z+1, r18	; 0x01
     58e:	8a 81       	ldd	r24, Y+2	; 0x02
     590:	9b 81       	ldd	r25, Y+3	; 0x03
     592:	fc 01       	movw	r30, r24
     594:	21 81       	ldd	r18, Z+1	; 0x01
     596:	32 81       	ldd	r19, Z+2	; 0x02
     598:	8a 81       	ldd	r24, Y+2	; 0x02
     59a:	9b 81       	ldd	r25, Y+3	; 0x03
     59c:	03 96       	adiw	r24, 0x03	; 3
     59e:	28 17       	cp	r18, r24
     5a0:	39 07       	cpc	r19, r25
     5a2:	69 f4       	brne	.+26     	; 0x5be <vTaskSwitchContext+0xbc>
     5a4:	8a 81       	ldd	r24, Y+2	; 0x02
     5a6:	9b 81       	ldd	r25, Y+3	; 0x03
     5a8:	fc 01       	movw	r30, r24
     5aa:	81 81       	ldd	r24, Z+1	; 0x01
     5ac:	92 81       	ldd	r25, Z+2	; 0x02
     5ae:	fc 01       	movw	r30, r24
     5b0:	22 81       	ldd	r18, Z+2	; 0x02
     5b2:	33 81       	ldd	r19, Z+3	; 0x03
     5b4:	8a 81       	ldd	r24, Y+2	; 0x02
     5b6:	9b 81       	ldd	r25, Y+3	; 0x03
     5b8:	fc 01       	movw	r30, r24
     5ba:	32 83       	std	Z+2, r19	; 0x02
     5bc:	21 83       	std	Z+1, r18	; 0x01
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	9b 81       	ldd	r25, Y+3	; 0x03
     5c2:	fc 01       	movw	r30, r24
     5c4:	81 81       	ldd	r24, Z+1	; 0x01
     5c6:	92 81       	ldd	r25, Z+2	; 0x02
     5c8:	fc 01       	movw	r30, r24
     5ca:	86 81       	ldd	r24, Z+6	; 0x06
     5cc:	97 81       	ldd	r25, Z+7	; 0x07
     5ce:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__data_end+0x1>
     5d2:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <uxTopReadyPriority>
     5dc:	00 00       	nop
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     5f2:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <pxDelayedTaskList>
     5f6:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <pxDelayedTaskList+0x1>
     5fa:	fc 01       	movw	r30, r24
     5fc:	80 81       	ld	r24, Z
     5fe:	88 23       	and	r24, r24
     600:	39 f4       	brne	.+14     	; 0x610 <prvResetNextTaskUnblockTime+0x26>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
     602:	8f ef       	ldi	r24, 0xFF	; 255
     604:	9f ef       	ldi	r25, 0xFF	; 255
     606:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <xNextTaskUnblockTime+0x1>
     60a:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <xNextTaskUnblockTime>
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
     60e:	0e c0       	rjmp	.+28     	; 0x62c <prvResetNextTaskUnblockTime+0x42>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
     610:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <pxDelayedTaskList>
     614:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <pxDelayedTaskList+0x1>
     618:	fc 01       	movw	r30, r24
     61a:	85 81       	ldd	r24, Z+5	; 0x05
     61c:	96 81       	ldd	r25, Z+6	; 0x06
     61e:	fc 01       	movw	r30, r24
     620:	80 81       	ld	r24, Z
     622:	91 81       	ldd	r25, Z+1	; 0x01
     624:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <xNextTaskUnblockTime+0x1>
     628:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <xNextTaskUnblockTime>
    }
}
     62c:	00 00       	nop
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <LCD_SendCommand>:
/*Externed global variables*/
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];
extern const STR_LCD_8_config_t gastr_LCD_8_Config[LCD_NUMBER];
/*functions Implementations*/
ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	00 d0       	rcall	.+0      	; 0x63a <LCD_SendCommand+0x6>
     63a:	1f 92       	push	r1
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	8b 83       	std	Y+3, r24	; 0x03
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	89 83       	std	Y+1, r24	; 0x01
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	8a 83       	std	Y+2, r24	; 0x02
	}
	/************************************************************************/
	/*						IF LCD is IN 8_BIT MODE                         */
	/************************************************************************/
	#else
	switch (State)
     64a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     64e:	88 2f       	mov	r24, r24
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	85 31       	cpi	r24, 0x15	; 21
     654:	91 05       	cpc	r25, r1
     656:	09 f4       	brne	.+2      	; 0x65a <LCD_SendCommand+0x26>
     658:	d9 c0       	rjmp	.+434    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     65a:	8f 3f       	cpi	r24, 0xFF	; 255
     65c:	91 05       	cpc	r25, r1
     65e:	21 f0       	breq	.+8      	; 0x668 <LCD_SendCommand+0x34>
     660:	44 97       	sbiw	r24, 0x14	; 20
     662:	09 f4       	brne	.+2      	; 0x666 <LCD_SendCommand+0x32>
     664:	af c0       	rjmp	.+350    	; 0x7c4 <LCD_SendCommand+0x190>
     666:	ec c0       	rjmp	.+472    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
	{
		case OperationStarted:
			/*sending control signals with configurations of selection of control reg. and write process*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     668:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <gastr_LCD_Config+0x1>
     66c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gastr_LCD_Config>
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	69 2f       	mov	r22, r25
     674:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     678:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gastr_LCD_Config+0x2>
     67c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gastr_LCD_Config>
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	69 2f       	mov	r22, r25
     684:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			/*Setting the lcd pins*/
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0,READ_BIT(CMD,BIT_0));
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	28 2f       	mov	r18, r24
     68c:	21 70       	andi	r18, 0x01	; 1
     68e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <gastr_LCD_8_Config+0xc>
     692:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     696:	42 2f       	mov	r20, r18
     698:	69 2f       	mov	r22, r25
     69a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1,READ_BIT(CMD,BIT_1));
     69e:	8b 81       	ldd	r24, Y+3	; 0x03
     6a0:	88 2f       	mov	r24, r24
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	82 70       	andi	r24, 0x02	; 2
     6a6:	99 27       	eor	r25, r25
     6a8:	95 95       	asr	r25
     6aa:	87 95       	ror	r24
     6ac:	28 2f       	mov	r18, r24
     6ae:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <gastr_LCD_8_Config+0xb>
     6b2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     6b6:	42 2f       	mov	r20, r18
     6b8:	69 2f       	mov	r22, r25
     6ba:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2,READ_BIT(CMD,BIT_2));
     6be:	8b 81       	ldd	r24, Y+3	; 0x03
     6c0:	88 2f       	mov	r24, r24
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	84 70       	andi	r24, 0x04	; 4
     6c6:	99 27       	eor	r25, r25
     6c8:	95 95       	asr	r25
     6ca:	87 95       	ror	r24
     6cc:	95 95       	asr	r25
     6ce:	87 95       	ror	r24
     6d0:	28 2f       	mov	r18, r24
     6d2:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <gastr_LCD_8_Config+0xa>
     6d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     6da:	42 2f       	mov	r20, r18
     6dc:	69 2f       	mov	r22, r25
     6de:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3,READ_BIT(CMD,BIT_3));
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	88 2f       	mov	r24, r24
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	88 70       	andi	r24, 0x08	; 8
     6ea:	99 27       	eor	r25, r25
     6ec:	95 95       	asr	r25
     6ee:	87 95       	ror	r24
     6f0:	95 95       	asr	r25
     6f2:	87 95       	ror	r24
     6f4:	95 95       	asr	r25
     6f6:	87 95       	ror	r24
     6f8:	28 2f       	mov	r18, r24
     6fa:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <gastr_LCD_8_Config+0x9>
     6fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     702:	42 2f       	mov	r20, r18
     704:	69 2f       	mov	r22, r25
     706:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(CMD,BIT_4));
     70a:	8b 81       	ldd	r24, Y+3	; 0x03
     70c:	88 2f       	mov	r24, r24
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	80 71       	andi	r24, 0x10	; 16
     712:	99 27       	eor	r25, r25
     714:	95 95       	asr	r25
     716:	87 95       	ror	r24
     718:	95 95       	asr	r25
     71a:	87 95       	ror	r24
     71c:	95 95       	asr	r25
     71e:	87 95       	ror	r24
     720:	95 95       	asr	r25
     722:	87 95       	ror	r24
     724:	28 2f       	mov	r18, r24
     726:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gastr_LCD_8_Config+0x8>
     72a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     72e:	42 2f       	mov	r20, r18
     730:	69 2f       	mov	r22, r25
     732:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(CMD,BIT_5));
     736:	8b 81       	ldd	r24, Y+3	; 0x03
     738:	88 2f       	mov	r24, r24
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	80 72       	andi	r24, 0x20	; 32
     73e:	99 27       	eor	r25, r25
     740:	95 95       	asr	r25
     742:	87 95       	ror	r24
     744:	95 95       	asr	r25
     746:	87 95       	ror	r24
     748:	95 95       	asr	r25
     74a:	87 95       	ror	r24
     74c:	95 95       	asr	r25
     74e:	87 95       	ror	r24
     750:	95 95       	asr	r25
     752:	87 95       	ror	r24
     754:	28 2f       	mov	r18, r24
     756:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <gastr_LCD_8_Config+0x7>
     75a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     75e:	42 2f       	mov	r20, r18
     760:	69 2f       	mov	r22, r25
     762:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(CMD,BIT_6));
     766:	8b 81       	ldd	r24, Y+3	; 0x03
     768:	88 2f       	mov	r24, r24
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	80 74       	andi	r24, 0x40	; 64
     76e:	99 27       	eor	r25, r25
     770:	08 2e       	mov	r0, r24
     772:	89 2f       	mov	r24, r25
     774:	00 0c       	add	r0, r0
     776:	88 1f       	adc	r24, r24
     778:	99 0b       	sbc	r25, r25
     77a:	00 0c       	add	r0, r0
     77c:	88 1f       	adc	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	28 2f       	mov	r18, r24
     782:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <gastr_LCD_8_Config+0x6>
     786:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     78a:	42 2f       	mov	r20, r18
     78c:	69 2f       	mov	r22, r25
     78e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_7));
     792:	8b 81       	ldd	r24, Y+3	; 0x03
     794:	28 2f       	mov	r18, r24
     796:	22 1f       	adc	r18, r18
     798:	22 27       	eor	r18, r18
     79a:	22 1f       	adc	r18, r18
     79c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <gastr_LCD_8_Config+0x5>
     7a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     7a4:	42 2f       	mov	r20, r18
     7a6:	69 2f       	mov	r22, r25
     7a8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			/*writing data to the register by pulling the enable pin high for 1 Us*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     7ac:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <gastr_LCD_Config+0x3>
     7b0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gastr_LCD_Config>
     7b4:	41 e0       	ldi	r20, 0x01	; 1
     7b6:	69 2f       	mov	r22, r25
     7b8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			State = CMD_Sending;
     7bc:	84 e1       	ldi	r24, 0x14	; 20
     7be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
     7c2:	44 c0       	rjmp	.+136    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
		case CMD_Sending:
			/*start timer delay in background*/
			if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     7c4:	6a e1       	ldi	r22, 0x1A	; 26
     7c6:	73 e0       	ldi	r23, 0x03	; 3
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <TIM_DelayStatus>
     7ce:	8b 3f       	cpi	r24, 0xFB	; 251
     7d0:	d1 f5       	brne	.+116    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
			{
				TIM_DelayUs(TIMER_2, 1,(void (*)(void)) LCD_SendCommand);
     7d2:	2a e1       	ldi	r18, 0x1A	; 26
     7d4:	33 e0       	ldi	r19, 0x03	; 3
     7d6:	41 e0       	ldi	r20, 0x01	; 1
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	82 e0       	ldi	r24, 0x02	; 2
     7e0:	0e 94 ad 0b 	call	0x175a	; 0x175a <TIM_DelayUs>
				while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     7e4:	00 00       	nop
     7e6:	6a e1       	ldi	r22, 0x1A	; 26
     7e8:	73 e0       	ldi	r23, 0x03	; 3
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <TIM_DelayStatus>
     7f0:	88 23       	and	r24, r24
     7f2:	c9 f7       	brne	.-14     	; 0x7e6 <LCD_SendCommand+0x1b2>
				/*if timer delay function finished correctly pull enable pin low*/
				DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     7f4:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <gastr_LCD_Config+0x3>
     7f8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gastr_LCD_Config>
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	69 2f       	mov	r22, r25
     800:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
				/*update the function's state*/
				State = CMD_Sent;
     804:	85 e1       	ldi	r24, 0x15	; 21
     806:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			break;
     80a:	1d c0       	rjmp	.+58     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
		case CMD_Sent:
			/*start timer delay in background*/
			TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
     80c:	6a e1       	ldi	r22, 0x1A	; 26
     80e:	73 e0       	ldi	r23, 0x03	; 3
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <TIM_DelayStatus>
     816:	8a 83       	std	Y+2, r24	; 0x02
			if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     818:	8a 81       	ldd	r24, Y+2	; 0x02
     81a:	8b 3f       	cpi	r24, 0xFB	; 251
     81c:	49 f4       	brne	.+18     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
			{
				TIM_DelayMs(TIMER_2,2, (void (*)(void))LCD_SendCommand);
     81e:	2a e1       	ldi	r18, 0x1A	; 26
     820:	33 e0       	ldi	r19, 0x03	; 3
     822:	42 e0       	ldi	r20, 0x02	; 2
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TIM_DelayMs>
			}
			if(TimerRetVal == ((uint8_t)ERROR_OK))
     830:	8a 81       	ldd	r24, Y+2	; 0x02
     832:	88 23       	and	r24, r24
     834:	51 f4       	brne	.+20     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
			{
				ErrRetVal = OperationSuccess;
     836:	19 82       	std	Y+1, r1	; 0x01
				State = OperationStarted;
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			break;
     83e:	05 c0       	rjmp	.+10     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
		default:
			ErrRetVal = OperationFail;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	89 83       	std	Y+1, r24	; 0x01
			break;
     844:	03 c0       	rjmp	.+6      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
				/*if timer delay function finished correctly pull enable pin low*/
				DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
				/*update the function's state*/
				State = CMD_Sent;
			}
			break;
     846:	00 00       	nop
     848:	01 c0       	rjmp	.+2      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
			if(TimerRetVal == ((uint8_t)ERROR_OK))
			{
				ErrRetVal = OperationSuccess;
				State = OperationStarted;
			}
			break;
     84a:	00 00       	nop
			ErrRetVal = OperationFail;
			break;
	}
	#endif
	/*return from function*/
	return ErrRetVal;
     84c:	89 81       	ldd	r24, Y+1	; 0x01
}
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <LCD_SendData>:
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	00 d0       	rcall	.+0      	; 0x860 <__stack+0x1>
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	8a 83       	std	Y+2, r24	; 0x02
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	89 83       	std	Y+1, r24	; 0x01
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	#else
	switch (State)
     86a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <State.1749>
     86e:	88 2f       	mov	r24, r24
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	84 31       	cpi	r24, 0x14	; 20
     874:	91 05       	cpc	r25, r1
     876:	09 f4       	brne	.+2      	; 0x87a <__stack+0x1b>
     878:	b2 c0       	rjmp	.+356    	; 0x9de <__stack+0x17f>
     87a:	8f 3f       	cpi	r24, 0xFF	; 255
     87c:	91 05       	cpc	r25, r1
     87e:	09 f0       	breq	.+2      	; 0x882 <__stack+0x23>
     880:	d3 c0       	rjmp	.+422    	; 0xa28 <__stack+0x1c9>
	{
		case OperationStarted:
			/*sending control signals with configurations of selection of control reg. and write process*/
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     882:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <gastr_LCD_8_Config+0x2>
     886:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gastr_LCD_8_Config>
     88a:	41 e0       	ldi	r20, 0x01	; 1
     88c:	69 2f       	mov	r22, r25
     88e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     892:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gastr_LCD_8_Config+0x3>
     896:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gastr_LCD_8_Config>
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	69 2f       	mov	r22, r25
     89e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			/*Setting the lcd pins*/
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0,READ_BIT(Character,BIT_0));
     8a2:	8a 81       	ldd	r24, Y+2	; 0x02
     8a4:	28 2f       	mov	r18, r24
     8a6:	21 70       	andi	r18, 0x01	; 1
     8a8:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <gastr_LCD_8_Config+0xc>
     8ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     8b0:	42 2f       	mov	r20, r18
     8b2:	69 2f       	mov	r22, r25
     8b4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1,READ_BIT(Character,BIT_1));
     8b8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ba:	88 2f       	mov	r24, r24
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	82 70       	andi	r24, 0x02	; 2
     8c0:	99 27       	eor	r25, r25
     8c2:	95 95       	asr	r25
     8c4:	87 95       	ror	r24
     8c6:	28 2f       	mov	r18, r24
     8c8:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <gastr_LCD_8_Config+0xb>
     8cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     8d0:	42 2f       	mov	r20, r18
     8d2:	69 2f       	mov	r22, r25
     8d4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2,READ_BIT(Character,BIT_2));
     8d8:	8a 81       	ldd	r24, Y+2	; 0x02
     8da:	88 2f       	mov	r24, r24
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	84 70       	andi	r24, 0x04	; 4
     8e0:	99 27       	eor	r25, r25
     8e2:	95 95       	asr	r25
     8e4:	87 95       	ror	r24
     8e6:	95 95       	asr	r25
     8e8:	87 95       	ror	r24
     8ea:	28 2f       	mov	r18, r24
     8ec:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <gastr_LCD_8_Config+0xa>
     8f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     8f4:	42 2f       	mov	r20, r18
     8f6:	69 2f       	mov	r22, r25
     8f8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3,READ_BIT(Character,BIT_3));
     8fc:	8a 81       	ldd	r24, Y+2	; 0x02
     8fe:	88 2f       	mov	r24, r24
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	88 70       	andi	r24, 0x08	; 8
     904:	99 27       	eor	r25, r25
     906:	95 95       	asr	r25
     908:	87 95       	ror	r24
     90a:	95 95       	asr	r25
     90c:	87 95       	ror	r24
     90e:	95 95       	asr	r25
     910:	87 95       	ror	r24
     912:	28 2f       	mov	r18, r24
     914:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <gastr_LCD_8_Config+0x9>
     918:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     91c:	42 2f       	mov	r20, r18
     91e:	69 2f       	mov	r22, r25
     920:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(Character,BIT_4));
     924:	8a 81       	ldd	r24, Y+2	; 0x02
     926:	88 2f       	mov	r24, r24
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	80 71       	andi	r24, 0x10	; 16
     92c:	99 27       	eor	r25, r25
     92e:	95 95       	asr	r25
     930:	87 95       	ror	r24
     932:	95 95       	asr	r25
     934:	87 95       	ror	r24
     936:	95 95       	asr	r25
     938:	87 95       	ror	r24
     93a:	95 95       	asr	r25
     93c:	87 95       	ror	r24
     93e:	28 2f       	mov	r18, r24
     940:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gastr_LCD_8_Config+0x8>
     944:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     948:	42 2f       	mov	r20, r18
     94a:	69 2f       	mov	r22, r25
     94c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(Character,BIT_5));
     950:	8a 81       	ldd	r24, Y+2	; 0x02
     952:	88 2f       	mov	r24, r24
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	80 72       	andi	r24, 0x20	; 32
     958:	99 27       	eor	r25, r25
     95a:	95 95       	asr	r25
     95c:	87 95       	ror	r24
     95e:	95 95       	asr	r25
     960:	87 95       	ror	r24
     962:	95 95       	asr	r25
     964:	87 95       	ror	r24
     966:	95 95       	asr	r25
     968:	87 95       	ror	r24
     96a:	95 95       	asr	r25
     96c:	87 95       	ror	r24
     96e:	28 2f       	mov	r18, r24
     970:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <gastr_LCD_8_Config+0x7>
     974:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     978:	42 2f       	mov	r20, r18
     97a:	69 2f       	mov	r22, r25
     97c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(Character,BIT_6));
     980:	8a 81       	ldd	r24, Y+2	; 0x02
     982:	88 2f       	mov	r24, r24
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	80 74       	andi	r24, 0x40	; 64
     988:	99 27       	eor	r25, r25
     98a:	08 2e       	mov	r0, r24
     98c:	89 2f       	mov	r24, r25
     98e:	00 0c       	add	r0, r0
     990:	88 1f       	adc	r24, r24
     992:	99 0b       	sbc	r25, r25
     994:	00 0c       	add	r0, r0
     996:	88 1f       	adc	r24, r24
     998:	99 1f       	adc	r25, r25
     99a:	28 2f       	mov	r18, r24
     99c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <gastr_LCD_8_Config+0x6>
     9a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     9a4:	42 2f       	mov	r20, r18
     9a6:	69 2f       	mov	r22, r25
     9a8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(Character,BIT_7));
     9ac:	8a 81       	ldd	r24, Y+2	; 0x02
     9ae:	28 2f       	mov	r18, r24
     9b0:	22 1f       	adc	r18, r18
     9b2:	22 27       	eor	r18, r18
     9b4:	22 1f       	adc	r18, r18
     9b6:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <gastr_LCD_8_Config+0x5>
     9ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     9be:	42 2f       	mov	r20, r18
     9c0:	69 2f       	mov	r22, r25
     9c2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			/*writing data to the register by pulling the enable pin high for 1 Us*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     9c6:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <gastr_LCD_Config+0x3>
     9ca:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gastr_LCD_Config>
     9ce:	41 e0       	ldi	r20, 0x01	; 1
     9d0:	69 2f       	mov	r22, r25
     9d2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
			State = CMD_Sending;
     9d6:	84 e1       	ldi	r24, 0x14	; 20
     9d8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1749>
			break;
     9dc:	29 c0       	rjmp	.+82     	; 0xa30 <__stack+0x1d1>
		case CMD_Sending:
			/*start timer delay in background*/
			if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendData))
     9de:	6d e2       	ldi	r22, 0x2D	; 45
     9e0:	74 e0       	ldi	r23, 0x04	; 4
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <TIM_DelayStatus>
     9e8:	8b 3f       	cpi	r24, 0xFB	; 251
     9ea:	09 f5       	brne	.+66     	; 0xa2e <__stack+0x1cf>
			{
				TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendData);
     9ec:	2d e2       	ldi	r18, 0x2D	; 45
     9ee:	34 e0       	ldi	r19, 0x04	; 4
     9f0:	41 e0       	ldi	r20, 0x01	; 1
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	0e 94 ad 0b 	call	0x175a	; 0x175a <TIM_DelayUs>
				while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendData));
     9fe:	00 00       	nop
     a00:	6d e2       	ldi	r22, 0x2D	; 45
     a02:	74 e0       	ldi	r23, 0x04	; 4
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <TIM_DelayStatus>
     a0a:	88 23       	and	r24, r24
     a0c:	c9 f7       	brne	.-14     	; 0xa00 <__stack+0x1a1>
				/*if timer delay function finished correctly pull enable pin low*/
				DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     a0e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <gastr_LCD_Config+0x3>
     a12:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gastr_LCD_Config>
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	69 2f       	mov	r22, r25
     a1a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
				/*reset the function's state*/
				State = OperationStarted;
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1749>
				/*process finished successfully*/
				ErrRetVal = OperationSuccess;
     a24:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     a26:	03 c0       	rjmp	.+6      	; 0xa2e <__stack+0x1cf>
		default:
		ErrRetVal = OperationFail;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	89 83       	std	Y+1, r24	; 0x01
		break;
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <__stack+0x1d1>
				/*reset the function's state*/
				State = OperationStarted;
				/*process finished successfully*/
				ErrRetVal = OperationSuccess;
			}
			break;
     a2e:	00 00       	nop
		ErrRetVal = OperationFail;
		break;
	}
	#endif
	/*return from function*/
	return ErrRetVal;
     a30:	89 81       	ldd	r24, Y+1	; 0x01

}
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <LCD_Init>:
ERROR_STATE_t LCD_Init()
{
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	00 d0       	rcall	.+0      	; 0xa42 <LCD_Init+0x6>
     a42:	1f 92       	push	r1
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	89 83       	std	Y+1, r24	; 0x01
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t LCD_SendCommandRetVal = OperationStarted;
     a50:	8f ef       	ldi	r24, 0xFF	; 255
     a52:	8b 83       	std	Y+3, r24	; 0x03
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	#else
	/*Starting the initialization sequence*/
	switch(State)
     a54:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <State.1763>
     a58:	88 2f       	mov	r24, r24
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	8b 30       	cpi	r24, 0x0B	; 11
     a5e:	91 05       	cpc	r25, r1
     a60:	09 f4       	brne	.+2      	; 0xa64 <LCD_Init+0x28>
     a62:	19 c1       	rjmp	.+562    	; 0xc96 <LCD_Init+0x25a>
     a64:	8c 30       	cpi	r24, 0x0C	; 12
     a66:	91 05       	cpc	r25, r1
     a68:	bc f4       	brge	.+46     	; 0xa98 <LCD_Init+0x5c>
     a6a:	88 30       	cpi	r24, 0x08	; 8
     a6c:	91 05       	cpc	r25, r1
     a6e:	09 f4       	brne	.+2      	; 0xa72 <LCD_Init+0x36>
     a70:	ee c0       	rjmp	.+476    	; 0xc4e <LCD_Init+0x212>
     a72:	89 30       	cpi	r24, 0x09	; 9
     a74:	91 05       	cpc	r25, r1
     a76:	44 f4       	brge	.+16     	; 0xa88 <LCD_Init+0x4c>
     a78:	85 30       	cpi	r24, 0x05	; 5
     a7a:	91 05       	cpc	r25, r1
     a7c:	09 f4       	brne	.+2      	; 0xa80 <LCD_Init+0x44>
     a7e:	c1 c0       	rjmp	.+386    	; 0xc02 <LCD_Init+0x1c6>
     a80:	06 97       	sbiw	r24, 0x06	; 6
     a82:	09 f4       	brne	.+2      	; 0xa86 <LCD_Init+0x4a>
     a84:	d8 c0       	rjmp	.+432    	; 0xc36 <LCD_Init+0x1fa>
     a86:	40 c1       	rjmp	.+640    	; 0xd08 <LCD_Init+0x2cc>
     a88:	89 30       	cpi	r24, 0x09	; 9
     a8a:	91 05       	cpc	r25, r1
     a8c:	09 f4       	brne	.+2      	; 0xa90 <LCD_Init+0x54>
     a8e:	eb c0       	rjmp	.+470    	; 0xc66 <LCD_Init+0x22a>
     a90:	0a 97       	sbiw	r24, 0x0a	; 10
     a92:	09 f4       	brne	.+2      	; 0xa96 <LCD_Init+0x5a>
     a94:	f4 c0       	rjmp	.+488    	; 0xc7e <LCD_Init+0x242>
     a96:	38 c1       	rjmp	.+624    	; 0xd08 <LCD_Init+0x2cc>
     a98:	8e 30       	cpi	r24, 0x0E	; 14
     a9a:	91 05       	cpc	r25, r1
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <LCD_Init+0x64>
     a9e:	1d c1       	rjmp	.+570    	; 0xcda <LCD_Init+0x29e>
     aa0:	8f 30       	cpi	r24, 0x0F	; 15
     aa2:	91 05       	cpc	r25, r1
     aa4:	44 f4       	brge	.+16     	; 0xab6 <LCD_Init+0x7a>
     aa6:	8c 30       	cpi	r24, 0x0C	; 12
     aa8:	91 05       	cpc	r25, r1
     aaa:	09 f4       	brne	.+2      	; 0xaae <LCD_Init+0x72>
     aac:	00 c1       	rjmp	.+512    	; 0xcae <LCD_Init+0x272>
     aae:	0d 97       	sbiw	r24, 0x0d	; 13
     ab0:	09 f4       	brne	.+2      	; 0xab4 <LCD_Init+0x78>
     ab2:	08 c1       	rjmp	.+528    	; 0xcc4 <LCD_Init+0x288>
     ab4:	29 c1       	rjmp	.+594    	; 0xd08 <LCD_Init+0x2cc>
     ab6:	8f 30       	cpi	r24, 0x0F	; 15
     ab8:	91 05       	cpc	r25, r1
     aba:	09 f4       	brne	.+2      	; 0xabe <LCD_Init+0x82>
     abc:	19 c1       	rjmp	.+562    	; 0xcf0 <LCD_Init+0x2b4>
     abe:	8f 3f       	cpi	r24, 0xFF	; 255
     ac0:	91 05       	cpc	r25, r1
     ac2:	09 f0       	breq	.+2      	; 0xac6 <LCD_Init+0x8a>
     ac4:	21 c1       	rjmp	.+578    	; 0xd08 <LCD_Init+0x2cc>
	{
		case OperationStarted:
		/*Initialize timer2*/
		TIM_Init(TIMER_2);
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <TIM_Init>
		/*Initializing the LCD Data Pins*/
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     acc:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <gastr_LCD_8_Config+0x5>
     ad0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     ad4:	41 e0       	ldi	r20, 0x01	; 1
     ad6:	69 2f       	mov	r22, r25
     ad8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     adc:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <gastr_LCD_8_Config+0x6>
     ae0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     ae4:	41 e0       	ldi	r20, 0x01	; 1
     ae6:	69 2f       	mov	r22, r25
     ae8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     aec:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <gastr_LCD_8_Config+0x7>
     af0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     af4:	41 e0       	ldi	r20, 0x01	; 1
     af6:	69 2f       	mov	r22, r25
     af8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     afc:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gastr_LCD_8_Config+0x8>
     b00:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	69 2f       	mov	r22, r25
     b08:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3, PIN_OUTPUT);
     b0c:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <gastr_LCD_8_Config+0x9>
     b10:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     b14:	41 e0       	ldi	r20, 0x01	; 1
     b16:	69 2f       	mov	r22, r25
     b18:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2, PIN_OUTPUT);
     b1c:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <gastr_LCD_8_Config+0xa>
     b20:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     b24:	41 e0       	ldi	r20, 0x01	; 1
     b26:	69 2f       	mov	r22, r25
     b28:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1, PIN_OUTPUT);
     b2c:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <gastr_LCD_8_Config+0xb>
     b30:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     b34:	41 e0       	ldi	r20, 0x01	; 1
     b36:	69 2f       	mov	r22, r25
     b38:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0, PIN_OUTPUT);
     b3c:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <gastr_LCD_8_Config+0xc>
     b40:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     b44:	41 e0       	ldi	r20, 0x01	; 1
     b46:	69 2f       	mov	r22, r25
     b48:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_SetPinDirection>
		/*Initializing the LCD CTRL Pins*/
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     b4c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <gastr_LCD_8_Config+0x2>
     b50:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gastr_LCD_8_Config>
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	69 2f       	mov	r22, r25
     b58:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     b5c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gastr_LCD_8_Config+0x3>
     b60:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gastr_LCD_8_Config>
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	69 2f       	mov	r22, r25
     b68:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     b6c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <gastr_LCD_8_Config+0x4>
     b70:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gastr_LCD_8_Config>
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	69 2f       	mov	r22, r25
     b78:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
     b7c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <gastr_LCD_8_Config+0x5>
     b80:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     b84:	40 e0       	ldi	r20, 0x00	; 0
     b86:	69 2f       	mov	r22, r25
     b88:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
     b8c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <gastr_LCD_8_Config+0x6>
     b90:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	69 2f       	mov	r22, r25
     b98:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
     b9c:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <gastr_LCD_8_Config+0x7>
     ba0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	69 2f       	mov	r22, r25
     ba8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
     bac:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gastr_LCD_8_Config+0x8>
     bb0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	69 2f       	mov	r22, r25
     bb8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3, PIN_LOW);
     bbc:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <gastr_LCD_8_Config+0x9>
     bc0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	69 2f       	mov	r22, r25
     bc8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2, PIN_LOW);
     bcc:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <gastr_LCD_8_Config+0xa>
     bd0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	69 2f       	mov	r22, r25
     bd8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1, PIN_LOW);
     bdc:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <gastr_LCD_8_Config+0xb>
     be0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	69 2f       	mov	r22, r25
     be8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0, PIN_LOW);
     bec:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <gastr_LCD_8_Config+0xc>
     bf0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gastr_LCD_8_Config+0x1>
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	69 2f       	mov	r22, r25
     bf8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_WritePin>
		State = LCD_Pin_Initializing;
     bfc:	85 e0       	ldi	r24, 0x05	; 5
     bfe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
     c02:	6a e1       	ldi	r22, 0x1A	; 26
     c04:	73 e0       	ldi	r23, 0x03	; 3
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <TIM_DelayStatus>
     c0c:	8a 83       	std	Y+2, r24	; 0x02
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     c0e:	8a 81       	ldd	r24, Y+2	; 0x02
     c10:	8b 3f       	cpi	r24, 0xFB	; 251
     c12:	49 f4       	brne	.+18     	; 0xc26 <LCD_Init+0x1ea>
		{
			TIM_DelayMs(TIMER_2,15, (void (*)(void))LCD_SendCommand);
     c14:	2a e1       	ldi	r18, 0x1A	; 26
     c16:	33 e0       	ldi	r19, 0x03	; 3
     c18:	4f e0       	ldi	r20, 0x0F	; 15
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TIM_DelayMs>
		}
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     c26:	8a 81       	ldd	r24, Y+2	; 0x02
     c28:	88 23       	and	r24, r24
     c2a:	09 f0       	breq	.+2      	; 0xc2e <LCD_Init+0x1f2>
     c2c:	70 c0       	rjmp	.+224    	; 0xd0e <LCD_Init+0x2d2>
		{
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
     c2e:	86 e0       	ldi	r24, 0x06	; 6
     c30:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     c34:	6c c0       	rjmp	.+216    	; 0xd0e <LCD_Init+0x2d2>
		case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     c36:	80 e3       	ldi	r24, 0x30	; 48
     c38:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     c3c:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	88 23       	and	r24, r24
     c42:	09 f0       	breq	.+2      	; 0xc46 <LCD_Init+0x20a>
     c44:	66 c0       	rjmp	.+204    	; 0xd12 <LCD_Init+0x2d6>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     c46:	88 e0       	ldi	r24, 0x08	; 8
     c48:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     c4c:	62 c0       	rjmp	.+196    	; 0xd12 <LCD_Init+0x2d6>
		case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     c4e:	80 e3       	ldi	r24, 0x30	; 48
     c50:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     c54:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	88 23       	and	r24, r24
     c5a:	09 f0       	breq	.+2      	; 0xc5e <LCD_Init+0x222>
     c5c:	5c c0       	rjmp	.+184    	; 0xd16 <LCD_Init+0x2da>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     c5e:	89 e0       	ldi	r24, 0x09	; 9
     c60:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     c64:	58 c0       	rjmp	.+176    	; 0xd16 <LCD_Init+0x2da>
		case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     c66:	80 e3       	ldi	r24, 0x30	; 48
     c68:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     c6c:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	88 23       	and	r24, r24
     c72:	09 f0       	breq	.+2      	; 0xc76 <LCD_Init+0x23a>
     c74:	52 c0       	rjmp	.+164    	; 0xd1a <LCD_Init+0x2de>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     c76:	8a e0       	ldi	r24, 0x0A	; 10
     c78:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     c7c:	4e c0       	rjmp	.+156    	; 0xd1a <LCD_Init+0x2de>
		case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_3);//LCD_HOME
     c7e:	88 e3       	ldi	r24, 0x38	; 56
     c80:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     c84:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	88 23       	and	r24, r24
     c8a:	09 f0       	breq	.+2      	; 0xc8e <LCD_Init+0x252>
     c8c:	48 c0       	rjmp	.+144    	; 0xd1e <LCD_Init+0x2e2>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     c8e:	8b e0       	ldi	r24, 0x0B	; 11
     c90:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     c94:	44 c0       	rjmp	.+136    	; 0xd1e <LCD_Init+0x2e2>
		case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
     c96:	8c e0       	ldi	r24, 0x0C	; 12
     c98:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     c9c:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	88 23       	and	r24, r24
     ca2:	09 f0       	breq	.+2      	; 0xca6 <LCD_Init+0x26a>
     ca4:	3e c0       	rjmp	.+124    	; 0xd22 <LCD_Init+0x2e6>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     ca6:	8c e0       	ldi	r24, 0x0C	; 12
     ca8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     cac:	3a c0       	rjmp	.+116    	; 0xd22 <LCD_Init+0x2e6>
		case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     cb4:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	88 23       	and	r24, r24
     cba:	a9 f5       	brne	.+106    	; 0xd26 <LCD_Init+0x2ea>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     cbc:	8d e0       	ldi	r24, 0x0D	; 13
     cbe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     cc2:	31 c0       	rjmp	.+98     	; 0xd26 <LCD_Init+0x2ea>
		case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     cca:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	88 23       	and	r24, r24
     cd0:	61 f5       	brne	.+88     	; 0xd2a <LCD_Init+0x2ee>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     cd2:	8e e0       	ldi	r24, 0x0E	; 14
     cd4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     cd8:	28 c0       	rjmp	.+80     	; 0xd2a <LCD_Init+0x2ee>
		case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     cda:	80 e8       	ldi	r24, 0x80	; 128
     cdc:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     ce0:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	88 23       	and	r24, r24
     ce6:	19 f5       	brne	.+70     	; 0xd2e <LCD_Init+0x2f2>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     ce8:	8f e0       	ldi	r24, 0x0F	; 15
     cea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     cee:	1f c0       	rjmp	.+62     	; 0xd2e <LCD_Init+0x2f2>
		case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     cf0:	80 e8       	ldi	r24, 0x80	; 128
     cf2:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     cf6:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	88 23       	and	r24, r24
     cfc:	d1 f4       	brne	.+52     	; 0xd32 <LCD_Init+0x2f6>
		{
			State = OperationStarted;
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
			ErrRetVal = OperationSuccess;
     d04:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
     d06:	15 c0       	rjmp	.+42     	; 0xd32 <LCD_Init+0x2f6>
		default:
		ErrRetVal = OperationFail;
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	89 83       	std	Y+1, r24	; 0x01
		break;
     d0c:	13 c0       	rjmp	.+38     	; 0xd34 <LCD_Init+0x2f8>
		if(TimerRetVal == ((uint8_t)ERROR_OK))
		{
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
     d0e:	00 00       	nop
     d10:	11 c0       	rjmp	.+34     	; 0xd34 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d12:	00 00       	nop
     d14:	0f c0       	rjmp	.+30     	; 0xd34 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d16:	00 00       	nop
     d18:	0d c0       	rjmp	.+26     	; 0xd34 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d1a:	00 00       	nop
     d1c:	0b c0       	rjmp	.+22     	; 0xd34 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_3);//LCD_HOME
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d1e:	00 00       	nop
     d20:	09 c0       	rjmp	.+18     	; 0xd34 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d22:	00 00       	nop
     d24:	07 c0       	rjmp	.+14     	; 0xd34 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d26:	00 00       	nop
     d28:	05 c0       	rjmp	.+10     	; 0xd34 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d2a:	00 00       	nop
     d2c:	03 c0       	rjmp	.+6      	; 0xd34 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d2e:	00 00       	nop
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <LCD_Init+0x2f8>
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = OperationStarted;
			ErrRetVal = OperationSuccess;
		}
		break;
     d32:	00 00       	nop
		default:
		ErrRetVal = OperationFail;
		break;
	}
	#endif
	return ErrRetVal;
     d34:	89 81       	ldd	r24, Y+1	; 0x01
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	08 95       	ret

00000d42 <LCD_SendString>:
ERROR_STATE_t LCD_SendString(const uint8_t* String)
{
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	00 d0       	rcall	.+0      	; 0xd48 <LCD_SendString+0x6>
     d48:	00 d0       	rcall	.+0      	; 0xd4a <LCD_SendString+0x8>
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	9c 83       	std	Y+4, r25	; 0x04
     d50:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     d52:	8f ef       	ldi	r24, 0xFF	; 255
     d54:	89 83       	std	Y+1, r24	; 0x01
	uint8_t LCD_SendDataRetVal = OperationStarted;
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	8a 83       	std	Y+2, r24	; 0x02
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	89 2b       	or	r24, r25
     d60:	41 f1       	breq	.+80     	; 0xdb2 <LCD_SendString+0x70>
		if (String[Number] != NULL_TERMINATOR ) {
     d62:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <Number.1786>
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	2b 81       	ldd	r18, Y+3	; 0x03
     d6c:	3c 81       	ldd	r19, Y+4	; 0x04
     d6e:	82 0f       	add	r24, r18
     d70:	93 1f       	adc	r25, r19
     d72:	fc 01       	movw	r30, r24
     d74:	80 81       	ld	r24, Z
     d76:	88 23       	and	r24, r24
     d78:	c1 f0       	breq	.+48     	; 0xdaa <LCD_SendString+0x68>
			ErrRetVal = OperationRunning;
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	89 83       	std	Y+1, r24	; 0x01
			LCD_SendDataRetVal = LCD_SendData(String[Number]);
     d7e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <Number.1786>
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	2b 81       	ldd	r18, Y+3	; 0x03
     d88:	3c 81       	ldd	r19, Y+4	; 0x04
     d8a:	82 0f       	add	r24, r18
     d8c:	93 1f       	adc	r25, r19
     d8e:	fc 01       	movw	r30, r24
     d90:	80 81       	ld	r24, Z
     d92:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_SendData>
     d96:	8a 83       	std	Y+2, r24	; 0x02
			if(LCD_SendDataRetVal == OperationSuccess)
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	88 23       	and	r24, r24
     d9c:	61 f4       	brne	.+24     	; 0xdb6 <LCD_SendString+0x74>
			{
				Number++;
     d9e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <Number.1786>
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <Number.1786>
     da8:	06 c0       	rjmp	.+12     	; 0xdb6 <LCD_SendString+0x74>
			}
		}
		else
		{
			Number = 0;
     daa:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <Number.1786>
			ErrRetVal = OperationSuccess;
     dae:	19 82       	std	Y+1, r1	; 0x01
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <LCD_SendString+0x74>
		}
	} else {
		ErrRetVal = OperationFail;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     db6:	89 81       	ldd	r24, Y+1	; 0x01
}
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <DIO_SetPinDirection>:

#include "MC_REGISTERS.h"
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	00 d0       	rcall	.+0      	; 0xdcc <DIO_SetPinDirection+0x6>
     dcc:	00 d0       	rcall	.+0      	; 0xdce <DIO_SetPinDirection+0x8>
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	8a 83       	std	Y+2, r24	; 0x02
     dd4:	6b 83       	std	Y+3, r22	; 0x03
     dd6:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState=ERROR_OK;
     dd8:	19 82       	std	Y+1, r1	; 0x01
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	88 23       	and	r24, r24
     dde:	31 f0       	breq	.+12     	; 0xdec <DIO_SetPinDirection+0x26>
     de0:	8c 81       	ldd	r24, Y+4	; 0x04
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	19 f0       	breq	.+6      	; 0xdec <DIO_SetPinDirection+0x26>
	{
		u8_ErrorState=ERROR_NOK;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	a9 c0       	rjmp	.+338    	; 0xf3e <DIO_SetPinDirection+0x178>
	}
	else if(PinNo>PIN7)
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	88 30       	cpi	r24, 0x08	; 8
     df0:	18 f0       	brcs	.+6      	; 0xdf8 <DIO_SetPinDirection+0x32>
	{
		u8_ErrorState=ERROR_NOK;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	a3 c0       	rjmp	.+326    	; 0xf3e <DIO_SetPinDirection+0x178>
	}
	else
	{
		switch(PortName)
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	91 05       	cpc	r25, r1
     e02:	89 f1       	breq	.+98     	; 0xe66 <DIO_SetPinDirection+0xa0>
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	91 05       	cpc	r25, r1
     e08:	1c f4       	brge	.+6      	; 0xe10 <DIO_SetPinDirection+0x4a>
     e0a:	89 2b       	or	r24, r25
     e0c:	49 f0       	breq	.+18     	; 0xe20 <DIO_SetPinDirection+0x5a>
     e0e:	94 c0       	rjmp	.+296    	; 0xf38 <DIO_SetPinDirection+0x172>
     e10:	82 30       	cpi	r24, 0x02	; 2
     e12:	91 05       	cpc	r25, r1
     e14:	09 f4       	brne	.+2      	; 0xe18 <DIO_SetPinDirection+0x52>
     e16:	4a c0       	rjmp	.+148    	; 0xeac <DIO_SetPinDirection+0xe6>
     e18:	03 97       	sbiw	r24, 0x03	; 3
     e1a:	09 f4       	brne	.+2      	; 0xe1e <DIO_SetPinDirection+0x58>
     e1c:	6a c0       	rjmp	.+212    	; 0xef2 <DIO_SetPinDirection+0x12c>
     e1e:	8c c0       	rjmp	.+280    	; 0xf38 <DIO_SetPinDirection+0x172>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
     e20:	8a e3       	ldi	r24, 0x3A	; 58
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	2a e3       	ldi	r18, 0x3A	; 58
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	f9 01       	movw	r30, r18
     e2a:	20 81       	ld	r18, Z
     e2c:	62 2f       	mov	r22, r18
     e2e:	2b 81       	ldd	r18, Y+3	; 0x03
     e30:	42 2f       	mov	r20, r18
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	21 e0       	ldi	r18, 0x01	; 1
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_SetPinDirection+0x78>
     e3a:	22 0f       	add	r18, r18
     e3c:	33 1f       	adc	r19, r19
     e3e:	4a 95       	dec	r20
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_SetPinDirection+0x74>
     e42:	20 95       	com	r18
     e44:	62 23       	and	r22, r18
     e46:	2c 81       	ldd	r18, Y+4	; 0x04
     e48:	22 2f       	mov	r18, r18
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	4b 81       	ldd	r20, Y+3	; 0x03
     e4e:	44 2f       	mov	r20, r20
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_SetPinDirection+0x92>
     e54:	22 0f       	add	r18, r18
     e56:	33 1f       	adc	r19, r19
     e58:	4a 95       	dec	r20
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_SetPinDirection+0x8e>
     e5c:	26 2b       	or	r18, r22
     e5e:	fc 01       	movw	r30, r24
     e60:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
     e62:	19 82       	std	Y+1, r1	; 0x01
				break;
     e64:	6c c0       	rjmp	.+216    	; 0xf3e <DIO_SetPinDirection+0x178>
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
     e66:	87 e3       	ldi	r24, 0x37	; 55
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	27 e3       	ldi	r18, 0x37	; 55
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	f9 01       	movw	r30, r18
     e70:	20 81       	ld	r18, Z
     e72:	62 2f       	mov	r22, r18
     e74:	2b 81       	ldd	r18, Y+3	; 0x03
     e76:	42 2f       	mov	r20, r18
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_SetPinDirection+0xbe>
     e80:	22 0f       	add	r18, r18
     e82:	33 1f       	adc	r19, r19
     e84:	4a 95       	dec	r20
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_SetPinDirection+0xba>
     e88:	20 95       	com	r18
     e8a:	62 23       	and	r22, r18
     e8c:	2c 81       	ldd	r18, Y+4	; 0x04
     e8e:	22 2f       	mov	r18, r18
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	4b 81       	ldd	r20, Y+3	; 0x03
     e94:	44 2f       	mov	r20, r20
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_SetPinDirection+0xd8>
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	4a 95       	dec	r20
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_SetPinDirection+0xd4>
     ea2:	26 2b       	or	r18, r22
     ea4:	fc 01       	movw	r30, r24
     ea6:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
     ea8:	19 82       	std	Y+1, r1	; 0x01
				break;
     eaa:	49 c0       	rjmp	.+146    	; 0xf3e <DIO_SetPinDirection+0x178>
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
     eac:	84 e3       	ldi	r24, 0x34	; 52
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	24 e3       	ldi	r18, 0x34	; 52
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	f9 01       	movw	r30, r18
     eb6:	20 81       	ld	r18, Z
     eb8:	62 2f       	mov	r22, r18
     eba:	2b 81       	ldd	r18, Y+3	; 0x03
     ebc:	42 2f       	mov	r20, r18
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	21 e0       	ldi	r18, 0x01	; 1
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_SetPinDirection+0x104>
     ec6:	22 0f       	add	r18, r18
     ec8:	33 1f       	adc	r19, r19
     eca:	4a 95       	dec	r20
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_SetPinDirection+0x100>
     ece:	20 95       	com	r18
     ed0:	62 23       	and	r22, r18
     ed2:	2c 81       	ldd	r18, Y+4	; 0x04
     ed4:	22 2f       	mov	r18, r18
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	4b 81       	ldd	r20, Y+3	; 0x03
     eda:	44 2f       	mov	r20, r20
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_SetPinDirection+0x11e>
     ee0:	22 0f       	add	r18, r18
     ee2:	33 1f       	adc	r19, r19
     ee4:	4a 95       	dec	r20
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_SetPinDirection+0x11a>
     ee8:	26 2b       	or	r18, r22
     eea:	fc 01       	movw	r30, r24
     eec:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
     eee:	19 82       	std	Y+1, r1	; 0x01
				break;
     ef0:	26 c0       	rjmp	.+76     	; 0xf3e <DIO_SetPinDirection+0x178>
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
     ef2:	81 e3       	ldi	r24, 0x31	; 49
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	21 e3       	ldi	r18, 0x31	; 49
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	f9 01       	movw	r30, r18
     efc:	20 81       	ld	r18, Z
     efe:	62 2f       	mov	r22, r18
     f00:	2b 81       	ldd	r18, Y+3	; 0x03
     f02:	42 2f       	mov	r20, r18
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	21 e0       	ldi	r18, 0x01	; 1
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_SetPinDirection+0x14a>
     f0c:	22 0f       	add	r18, r18
     f0e:	33 1f       	adc	r19, r19
     f10:	4a 95       	dec	r20
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DIO_SetPinDirection+0x146>
     f14:	20 95       	com	r18
     f16:	62 23       	and	r22, r18
     f18:	2c 81       	ldd	r18, Y+4	; 0x04
     f1a:	22 2f       	mov	r18, r18
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	4b 81       	ldd	r20, Y+3	; 0x03
     f20:	44 2f       	mov	r20, r20
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_SetPinDirection+0x164>
     f26:	22 0f       	add	r18, r18
     f28:	33 1f       	adc	r19, r19
     f2a:	4a 95       	dec	r20
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_SetPinDirection+0x160>
     f2e:	26 2b       	or	r18, r22
     f30:	fc 01       	movw	r30, r24
     f32:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
     f34:	19 82       	std	Y+1, r1	; 0x01
				break;
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <DIO_SetPinDirection+0x178>
			default:
				u8_ErrorState=ERROR_NOK;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	89 83       	std	Y+1, r24	; 0x01
				break;
     f3c:	00 00       	nop
		}		
	}
	return u8_ErrorState;
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	00 d0       	rcall	.+0      	; 0xf54 <DIO_WritePin+0x6>
     f54:	00 d0       	rcall	.+0      	; 0xf56 <DIO_WritePin+0x8>
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	8a 83       	std	Y+2, r24	; 0x02
     f5c:	6b 83       	std	Y+3, r22	; 0x03
     f5e:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState=ERROR_OK;
     f60:	19 82       	std	Y+1, r1	; 0x01
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
     f62:	8c 81       	ldd	r24, Y+4	; 0x04
     f64:	88 23       	and	r24, r24
     f66:	31 f0       	breq	.+12     	; 0xf74 <DIO_WritePin+0x26>
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	19 f0       	breq	.+6      	; 0xf74 <DIO_WritePin+0x26>
	{
		u8_ErrorState=ERROR_NOK;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	a9 c0       	rjmp	.+338    	; 0x10c6 <DIO_WritePin+0x178>
	}
	else if(PinNo>PIN7)
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	88 30       	cpi	r24, 0x08	; 8
     f78:	18 f0       	brcs	.+6      	; 0xf80 <DIO_WritePin+0x32>
	{
		u8_ErrorState=ERROR_NOK;
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	a3 c0       	rjmp	.+326    	; 0x10c6 <DIO_WritePin+0x178>
	}
	else
	{
		switch(PortName)
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	91 05       	cpc	r25, r1
     f8a:	89 f1       	breq	.+98     	; 0xfee <DIO_WritePin+0xa0>
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	91 05       	cpc	r25, r1
     f90:	1c f4       	brge	.+6      	; 0xf98 <DIO_WritePin+0x4a>
     f92:	89 2b       	or	r24, r25
     f94:	49 f0       	breq	.+18     	; 0xfa8 <DIO_WritePin+0x5a>
     f96:	94 c0       	rjmp	.+296    	; 0x10c0 <DIO_WritePin+0x172>
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <DIO_WritePin+0x52>
     f9e:	4a c0       	rjmp	.+148    	; 0x1034 <DIO_WritePin+0xe6>
     fa0:	03 97       	sbiw	r24, 0x03	; 3
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <DIO_WritePin+0x58>
     fa4:	6a c0       	rjmp	.+212    	; 0x107a <DIO_WritePin+0x12c>
     fa6:	8c c0       	rjmp	.+280    	; 0x10c0 <DIO_WritePin+0x172>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
     fa8:	8b e3       	ldi	r24, 0x3B	; 59
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	2b e3       	ldi	r18, 0x3B	; 59
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	f9 01       	movw	r30, r18
     fb2:	20 81       	ld	r18, Z
     fb4:	62 2f       	mov	r22, r18
     fb6:	2b 81       	ldd	r18, Y+3	; 0x03
     fb8:	42 2f       	mov	r20, r18
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	21 e0       	ldi	r18, 0x01	; 1
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_WritePin+0x78>
     fc2:	22 0f       	add	r18, r18
     fc4:	33 1f       	adc	r19, r19
     fc6:	4a 95       	dec	r20
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_WritePin+0x74>
     fca:	20 95       	com	r18
     fcc:	62 23       	and	r22, r18
     fce:	2c 81       	ldd	r18, Y+4	; 0x04
     fd0:	22 2f       	mov	r18, r18
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	4b 81       	ldd	r20, Y+3	; 0x03
     fd6:	44 2f       	mov	r20, r20
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_WritePin+0x92>
     fdc:	22 0f       	add	r18, r18
     fde:	33 1f       	adc	r19, r19
     fe0:	4a 95       	dec	r20
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_WritePin+0x8e>
     fe4:	26 2b       	or	r18, r22
     fe6:	fc 01       	movw	r30, r24
     fe8:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
     fea:	19 82       	std	Y+1, r1	; 0x01
				break;
     fec:	6c c0       	rjmp	.+216    	; 0x10c6 <DIO_WritePin+0x178>
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
     fee:	88 e3       	ldi	r24, 0x38	; 56
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	28 e3       	ldi	r18, 0x38	; 56
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	f9 01       	movw	r30, r18
     ff8:	20 81       	ld	r18, Z
     ffa:	62 2f       	mov	r22, r18
     ffc:	2b 81       	ldd	r18, Y+3	; 0x03
     ffe:	42 2f       	mov	r20, r18
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	21 e0       	ldi	r18, 0x01	; 1
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_WritePin+0xbe>
    1008:	22 0f       	add	r18, r18
    100a:	33 1f       	adc	r19, r19
    100c:	4a 95       	dec	r20
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_WritePin+0xba>
    1010:	20 95       	com	r18
    1012:	62 23       	and	r22, r18
    1014:	2c 81       	ldd	r18, Y+4	; 0x04
    1016:	22 2f       	mov	r18, r18
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	4b 81       	ldd	r20, Y+3	; 0x03
    101c:	44 2f       	mov	r20, r20
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_WritePin+0xd8>
    1022:	22 0f       	add	r18, r18
    1024:	33 1f       	adc	r19, r19
    1026:	4a 95       	dec	r20
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_WritePin+0xd4>
    102a:	26 2b       	or	r18, r22
    102c:	fc 01       	movw	r30, r24
    102e:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    1030:	19 82       	std	Y+1, r1	; 0x01
				break;
    1032:	49 c0       	rjmp	.+146    	; 0x10c6 <DIO_WritePin+0x178>
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
    1034:	85 e3       	ldi	r24, 0x35	; 53
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	25 e3       	ldi	r18, 0x35	; 53
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	f9 01       	movw	r30, r18
    103e:	20 81       	ld	r18, Z
    1040:	62 2f       	mov	r22, r18
    1042:	2b 81       	ldd	r18, Y+3	; 0x03
    1044:	42 2f       	mov	r20, r18
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	21 e0       	ldi	r18, 0x01	; 1
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_WritePin+0x104>
    104e:	22 0f       	add	r18, r18
    1050:	33 1f       	adc	r19, r19
    1052:	4a 95       	dec	r20
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_WritePin+0x100>
    1056:	20 95       	com	r18
    1058:	62 23       	and	r22, r18
    105a:	2c 81       	ldd	r18, Y+4	; 0x04
    105c:	22 2f       	mov	r18, r18
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	4b 81       	ldd	r20, Y+3	; 0x03
    1062:	44 2f       	mov	r20, r20
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_WritePin+0x11e>
    1068:	22 0f       	add	r18, r18
    106a:	33 1f       	adc	r19, r19
    106c:	4a 95       	dec	r20
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_WritePin+0x11a>
    1070:	26 2b       	or	r18, r22
    1072:	fc 01       	movw	r30, r24
    1074:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    1076:	19 82       	std	Y+1, r1	; 0x01
				break;
    1078:	26 c0       	rjmp	.+76     	; 0x10c6 <DIO_WritePin+0x178>
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
    107a:	82 e3       	ldi	r24, 0x32	; 50
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	22 e3       	ldi	r18, 0x32	; 50
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	f9 01       	movw	r30, r18
    1084:	20 81       	ld	r18, Z
    1086:	62 2f       	mov	r22, r18
    1088:	2b 81       	ldd	r18, Y+3	; 0x03
    108a:	42 2f       	mov	r20, r18
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	21 e0       	ldi	r18, 0x01	; 1
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_WritePin+0x14a>
    1094:	22 0f       	add	r18, r18
    1096:	33 1f       	adc	r19, r19
    1098:	4a 95       	dec	r20
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_WritePin+0x146>
    109c:	20 95       	com	r18
    109e:	62 23       	and	r22, r18
    10a0:	2c 81       	ldd	r18, Y+4	; 0x04
    10a2:	22 2f       	mov	r18, r18
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	4b 81       	ldd	r20, Y+3	; 0x03
    10a8:	44 2f       	mov	r20, r20
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_WritePin+0x164>
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	4a 95       	dec	r20
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_WritePin+0x160>
    10b6:	26 2b       	or	r18, r22
    10b8:	fc 01       	movw	r30, r24
    10ba:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    10bc:	19 82       	std	Y+1, r1	; 0x01
				break;
    10be:	03 c0       	rjmp	.+6      	; 0x10c6 <DIO_WritePin+0x178>
			default:
				u8_ErrorState=ERROR_NOK;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	89 83       	std	Y+1, r24	; 0x01
				break;
    10c4:	00 00       	nop
		}
	}	
	return u8_ErrorState;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <GetFreqPrescaleRatio>:
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	00 d0       	rcall	.+0      	; 0x10dc <GetFreqPrescaleRatio+0x6>
    10dc:	1f 92       	push	r1
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	7b 83       	std	Y+3, r23	; 0x03
    10e6:	6a 83       	std	Y+2, r22	; 0x02
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	88 23       	and	r24, r24
    10ec:	21 f0       	breq	.+8      	; 0x10f6 <GetFreqPrescaleRatio+0x20>
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <GetFreqPrescaleRatio+0x20>
    10f4:	5f c0       	rjmp	.+190    	; 0x11b4 <GetFreqPrescaleRatio+0xde>
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	c9 01       	movw	r24, r18
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	82 0f       	add	r24, r18
    1104:	93 1f       	adc	r25, r19
    1106:	8a 57       	subi	r24, 0x7A	; 122
    1108:	9f 4f       	sbci	r25, 0xFF	; 255
    110a:	fc 01       	movw	r30, r24
    110c:	80 81       	ld	r24, Z
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	83 30       	cpi	r24, 0x03	; 3
    1114:	91 05       	cpc	r25, r1
    1116:	39 f1       	breq	.+78     	; 0x1166 <GetFreqPrescaleRatio+0x90>
    1118:	84 30       	cpi	r24, 0x04	; 4
    111a:	91 05       	cpc	r25, r1
    111c:	34 f4       	brge	.+12     	; 0x112a <GetFreqPrescaleRatio+0x54>
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	91 05       	cpc	r25, r1
    1122:	49 f0       	breq	.+18     	; 0x1136 <GetFreqPrescaleRatio+0x60>
    1124:	02 97       	sbiw	r24, 0x02	; 2
    1126:	99 f0       	breq	.+38     	; 0x114e <GetFreqPrescaleRatio+0x78>
    1128:	42 c0       	rjmp	.+132    	; 0x11ae <GetFreqPrescaleRatio+0xd8>
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	91 05       	cpc	r25, r1
    112e:	39 f1       	breq	.+78     	; 0x117e <GetFreqPrescaleRatio+0xa8>
    1130:	05 97       	sbiw	r24, 0x05	; 5
    1132:	89 f1       	breq	.+98     	; 0x1196 <GetFreqPrescaleRatio+0xc0>
    1134:	3c c0       	rjmp	.+120    	; 0x11ae <GetFreqPrescaleRatio+0xd8>
    1136:	2a 81       	ldd	r18, Y+2	; 0x02
    1138:	3b 81       	ldd	r19, Y+3	; 0x03
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	a0 e8       	ldi	r26, 0x80	; 128
    1140:	bd e3       	ldi	r27, 0x3D	; 61
    1142:	f9 01       	movw	r30, r18
    1144:	80 83       	st	Z, r24
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	a2 83       	std	Z+2, r26	; 0x02
    114a:	b3 83       	std	Z+3, r27	; 0x03
    114c:	32 c0       	rjmp	.+100    	; 0x11b2 <GetFreqPrescaleRatio+0xdc>
    114e:	2a 81       	ldd	r18, Y+2	; 0x02
    1150:	3b 81       	ldd	r19, Y+3	; 0x03
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	bf e3       	ldi	r27, 0x3F	; 63
    115a:	f9 01       	movw	r30, r18
    115c:	80 83       	st	Z, r24
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	a2 83       	std	Z+2, r26	; 0x02
    1162:	b3 83       	std	Z+3, r27	; 0x03
    1164:	26 c0       	rjmp	.+76     	; 0x11b2 <GetFreqPrescaleRatio+0xdc>
    1166:	2a 81       	ldd	r18, Y+2	; 0x02
    1168:	3b 81       	ldd	r19, Y+3	; 0x03
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a0 e8       	ldi	r26, 0x80	; 128
    1170:	b0 e4       	ldi	r27, 0x40	; 64
    1172:	f9 01       	movw	r30, r18
    1174:	80 83       	st	Z, r24
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	a2 83       	std	Z+2, r26	; 0x02
    117a:	b3 83       	std	Z+3, r27	; 0x03
    117c:	1a c0       	rjmp	.+52     	; 0x11b2 <GetFreqPrescaleRatio+0xdc>
    117e:	2a 81       	ldd	r18, Y+2	; 0x02
    1180:	3b 81       	ldd	r19, Y+3	; 0x03
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	a0 e8       	ldi	r26, 0x80	; 128
    1188:	b1 e4       	ldi	r27, 0x41	; 65
    118a:	f9 01       	movw	r30, r18
    118c:	80 83       	st	Z, r24
    118e:	91 83       	std	Z+1, r25	; 0x01
    1190:	a2 83       	std	Z+2, r26	; 0x02
    1192:	b3 83       	std	Z+3, r27	; 0x03
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GetFreqPrescaleRatio+0xdc>
    1196:	2a 81       	ldd	r18, Y+2	; 0x02
    1198:	3b 81       	ldd	r19, Y+3	; 0x03
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	a0 e8       	ldi	r26, 0x80	; 128
    11a0:	b2 e4       	ldi	r27, 0x42	; 66
    11a2:	f9 01       	movw	r30, r18
    11a4:	80 83       	st	Z, r24
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	a2 83       	std	Z+2, r26	; 0x02
    11aa:	b3 83       	std	Z+3, r27	; 0x03
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <GetFreqPrescaleRatio+0xdc>
    11ae:	8c ef       	ldi	r24, 0xFC	; 252
    11b0:	7d c0       	rjmp	.+250    	; 0x12ac <GetFreqPrescaleRatio+0x1d6>
    11b2:	7b c0       	rjmp	.+246    	; 0x12aa <GetFreqPrescaleRatio+0x1d4>
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	09 f0       	breq	.+2      	; 0x11bc <GetFreqPrescaleRatio+0xe6>
    11ba:	77 c0       	rjmp	.+238    	; 0x12aa <GetFreqPrescaleRatio+0x1d4>
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	c9 01       	movw	r24, r18
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	82 0f       	add	r24, r18
    11ca:	93 1f       	adc	r25, r19
    11cc:	8a 57       	subi	r24, 0x7A	; 122
    11ce:	9f 4f       	sbci	r25, 0xFF	; 255
    11d0:	fc 01       	movw	r30, r24
    11d2:	80 81       	ld	r24, Z
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	09 2e       	mov	r0, r25
    11da:	00 0c       	add	r0, r0
    11dc:	aa 0b       	sbc	r26, r26
    11de:	bb 0b       	sbc	r27, r27
    11e0:	41 e0       	ldi	r20, 0x01	; 1
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	26 e0       	ldi	r18, 0x06	; 6
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	84 1b       	sub	r24, r20
    11ea:	95 0b       	sbc	r25, r21
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	08 f4       	brcc	.+2      	; 0x11f4 <GetFreqPrescaleRatio+0x11e>
    11f2:	59 c0       	rjmp	.+178    	; 0x12a6 <GetFreqPrescaleRatio+0x1d0>
    11f4:	86 5d       	subi	r24, 0xD6	; 214
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	fc 01       	movw	r30, r24
    11fa:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__tablejump2__>
    11fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1200:	3b 81       	ldd	r19, Y+3	; 0x03
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a0 e8       	ldi	r26, 0x80	; 128
    1208:	bd e3       	ldi	r27, 0x3D	; 61
    120a:	f9 01       	movw	r30, r18
    120c:	80 83       	st	Z, r24
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	a2 83       	std	Z+2, r26	; 0x02
    1212:	b3 83       	std	Z+3, r27	; 0x03
    1214:	4a c0       	rjmp	.+148    	; 0x12aa <GetFreqPrescaleRatio+0x1d4>
    1216:	2a 81       	ldd	r18, Y+2	; 0x02
    1218:	3b 81       	ldd	r19, Y+3	; 0x03
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a0 e0       	ldi	r26, 0x00	; 0
    1220:	bf e3       	ldi	r27, 0x3F	; 63
    1222:	f9 01       	movw	r30, r18
    1224:	80 83       	st	Z, r24
    1226:	91 83       	std	Z+1, r25	; 0x01
    1228:	a2 83       	std	Z+2, r26	; 0x02
    122a:	b3 83       	std	Z+3, r27	; 0x03
    122c:	3e c0       	rjmp	.+124    	; 0x12aa <GetFreqPrescaleRatio+0x1d4>
    122e:	2a 81       	ldd	r18, Y+2	; 0x02
    1230:	3b 81       	ldd	r19, Y+3	; 0x03
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a0 e0       	ldi	r26, 0x00	; 0
    1238:	b0 e4       	ldi	r27, 0x40	; 64
    123a:	f9 01       	movw	r30, r18
    123c:	80 83       	st	Z, r24
    123e:	91 83       	std	Z+1, r25	; 0x01
    1240:	a2 83       	std	Z+2, r26	; 0x02
    1242:	b3 83       	std	Z+3, r27	; 0x03
    1244:	32 c0       	rjmp	.+100    	; 0x12aa <GetFreqPrescaleRatio+0x1d4>
    1246:	2a 81       	ldd	r18, Y+2	; 0x02
    1248:	3b 81       	ldd	r19, Y+3	; 0x03
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a0 e8       	ldi	r26, 0x80	; 128
    1250:	b0 e4       	ldi	r27, 0x40	; 64
    1252:	f9 01       	movw	r30, r18
    1254:	80 83       	st	Z, r24
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	a2 83       	std	Z+2, r26	; 0x02
    125a:	b3 83       	std	Z+3, r27	; 0x03
    125c:	26 c0       	rjmp	.+76     	; 0x12aa <GetFreqPrescaleRatio+0x1d4>
    125e:	2a 81       	ldd	r18, Y+2	; 0x02
    1260:	3b 81       	ldd	r19, Y+3	; 0x03
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	a0 e0       	ldi	r26, 0x00	; 0
    1268:	b1 e4       	ldi	r27, 0x41	; 65
    126a:	f9 01       	movw	r30, r18
    126c:	80 83       	st	Z, r24
    126e:	91 83       	std	Z+1, r25	; 0x01
    1270:	a2 83       	std	Z+2, r26	; 0x02
    1272:	b3 83       	std	Z+3, r27	; 0x03
    1274:	1a c0       	rjmp	.+52     	; 0x12aa <GetFreqPrescaleRatio+0x1d4>
    1276:	2a 81       	ldd	r18, Y+2	; 0x02
    1278:	3b 81       	ldd	r19, Y+3	; 0x03
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a0 e8       	ldi	r26, 0x80	; 128
    1280:	b1 e4       	ldi	r27, 0x41	; 65
    1282:	f9 01       	movw	r30, r18
    1284:	80 83       	st	Z, r24
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	a2 83       	std	Z+2, r26	; 0x02
    128a:	b3 83       	std	Z+3, r27	; 0x03
    128c:	0e c0       	rjmp	.+28     	; 0x12aa <GetFreqPrescaleRatio+0x1d4>
    128e:	2a 81       	ldd	r18, Y+2	; 0x02
    1290:	3b 81       	ldd	r19, Y+3	; 0x03
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a0 e8       	ldi	r26, 0x80	; 128
    1298:	b2 e4       	ldi	r27, 0x42	; 66
    129a:	f9 01       	movw	r30, r18
    129c:	80 83       	st	Z, r24
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	a2 83       	std	Z+2, r26	; 0x02
    12a2:	b3 83       	std	Z+3, r27	; 0x03
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <GetFreqPrescaleRatio+0x1d4>
    12a6:	8c ef       	ldi	r24, 0xFC	; 252
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <GetFreqPrescaleRatio+0x1d6>
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	08 95       	ret

000012b8 <TIM_Init>:
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	1f 92       	push	r1
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	88 2f       	mov	r24, r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	b1 f1       	breq	.+108    	; 0x133c <TIM_Init+0x84>
    12d0:	82 30       	cpi	r24, 0x02	; 2
    12d2:	91 05       	cpc	r25, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <TIM_Init+0x20>
    12d6:	6a c0       	rjmp	.+212    	; 0x13ac <TIM_Init+0xf4>
    12d8:	89 2b       	or	r24, r25
    12da:	09 f0       	breq	.+2      	; 0x12de <TIM_Init+0x26>
    12dc:	a2 c0       	rjmp	.+324    	; 0x1422 <TIM_Init+0x16a>
    12de:	43 e5       	ldi	r20, 0x53	; 83
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	c9 01       	movw	r24, r18
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	82 0f       	add	r24, r18
    12f0:	93 1f       	adc	r25, r19
    12f2:	8c 57       	subi	r24, 0x7C	; 124
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	fc 01       	movw	r30, r24
    12f8:	80 81       	ld	r24, Z
    12fa:	fa 01       	movw	r30, r20
    12fc:	80 83       	st	Z, r24
    12fe:	89 e5       	ldi	r24, 0x59	; 89
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	29 e5       	ldi	r18, 0x59	; 89
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	f9 01       	movw	r30, r18
    1308:	20 81       	ld	r18, Z
    130a:	2c 7f       	andi	r18, 0xFC	; 252
    130c:	fc 01       	movw	r30, r24
    130e:	20 83       	st	Z, r18
    1310:	49 e5       	ldi	r20, 0x59	; 89
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	89 e5       	ldi	r24, 0x59	; 89
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	fc 01       	movw	r30, r24
    131a:	60 81       	ld	r22, Z
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	c9 01       	movw	r24, r18
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	82 0f       	add	r24, r18
    132a:	93 1f       	adc	r25, r19
    132c:	8b 57       	subi	r24, 0x7B	; 123
    132e:	9f 4f       	sbci	r25, 0xFF	; 255
    1330:	fc 01       	movw	r30, r24
    1332:	80 81       	ld	r24, Z
    1334:	86 2b       	or	r24, r22
    1336:	fa 01       	movw	r30, r20
    1338:	80 83       	st	Z, r24
    133a:	75 c0       	rjmp	.+234    	; 0x1426 <TIM_Init+0x16e>
    133c:	4e e4       	ldi	r20, 0x4E	; 78
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	c9 01       	movw	r24, r18
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	82 0f       	add	r24, r18
    134e:	93 1f       	adc	r25, r19
    1350:	8c 57       	subi	r24, 0x7C	; 124
    1352:	9f 4f       	sbci	r25, 0xFF	; 255
    1354:	fc 01       	movw	r30, r24
    1356:	80 81       	ld	r24, Z
    1358:	fa 01       	movw	r30, r20
    135a:	80 83       	st	Z, r24
    135c:	89 e5       	ldi	r24, 0x59	; 89
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	29 e5       	ldi	r18, 0x59	; 89
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	f9 01       	movw	r30, r18
    1366:	20 81       	ld	r18, Z
    1368:	27 7e       	andi	r18, 0xE7	; 231
    136a:	fc 01       	movw	r30, r24
    136c:	20 83       	st	Z, r18
    136e:	49 e5       	ldi	r20, 0x59	; 89
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	89 e5       	ldi	r24, 0x59	; 89
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	fc 01       	movw	r30, r24
    1378:	80 81       	ld	r24, Z
    137a:	68 2f       	mov	r22, r24
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	c9 01       	movw	r24, r18
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	82 0f       	add	r24, r18
    138a:	93 1f       	adc	r25, r19
    138c:	8b 57       	subi	r24, 0x7B	; 123
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	fc 01       	movw	r30, r24
    1392:	80 81       	ld	r24, Z
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	86 2b       	or	r24, r22
    13a6:	fa 01       	movw	r30, r20
    13a8:	80 83       	st	Z, r24
    13aa:	3d c0       	rjmp	.+122    	; 0x1426 <TIM_Init+0x16e>
    13ac:	45 e4       	ldi	r20, 0x45	; 69
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	c9 01       	movw	r24, r18
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	82 0f       	add	r24, r18
    13be:	93 1f       	adc	r25, r19
    13c0:	8c 57       	subi	r24, 0x7C	; 124
    13c2:	9f 4f       	sbci	r25, 0xFF	; 255
    13c4:	fc 01       	movw	r30, r24
    13c6:	80 81       	ld	r24, Z
    13c8:	fa 01       	movw	r30, r20
    13ca:	80 83       	st	Z, r24
    13cc:	89 e5       	ldi	r24, 0x59	; 89
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	29 e5       	ldi	r18, 0x59	; 89
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	f9 01       	movw	r30, r18
    13d6:	20 81       	ld	r18, Z
    13d8:	2f 73       	andi	r18, 0x3F	; 63
    13da:	fc 01       	movw	r30, r24
    13dc:	20 83       	st	Z, r18
    13de:	49 e5       	ldi	r20, 0x59	; 89
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	89 e5       	ldi	r24, 0x59	; 89
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	fc 01       	movw	r30, r24
    13e8:	80 81       	ld	r24, Z
    13ea:	68 2f       	mov	r22, r24
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	c9 01       	movw	r24, r18
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	82 0f       	add	r24, r18
    13fa:	93 1f       	adc	r25, r19
    13fc:	8b 57       	subi	r24, 0x7B	; 123
    13fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1400:	fc 01       	movw	r30, r24
    1402:	80 81       	ld	r24, Z
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	00 24       	eor	r0, r0
    140a:	96 95       	lsr	r25
    140c:	87 95       	ror	r24
    140e:	07 94       	ror	r0
    1410:	96 95       	lsr	r25
    1412:	87 95       	ror	r24
    1414:	07 94       	ror	r0
    1416:	98 2f       	mov	r25, r24
    1418:	80 2d       	mov	r24, r0
    141a:	86 2b       	or	r24, r22
    141c:	fa 01       	movw	r30, r20
    141e:	80 83       	st	Z, r24
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <TIM_Init+0x16e>
    1422:	8e ef       	ldi	r24, 0xFE	; 254
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <TIM_Init+0x170>
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	0f 90       	pop	r0
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <TIM_Start>:
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	27 97       	sbiw	r28, 0x07	; 7
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	7f 83       	std	Y+7, r23	; 0x07
    1448:	6e 83       	std	Y+6, r22	; 0x06
    144a:	1a 82       	std	Y+2, r1	; 0x02
    144c:	19 82       	std	Y+1, r1	; 0x01
    144e:	1c 82       	std	Y+4, r1	; 0x04
    1450:	1b 82       	std	Y+3, r1	; 0x03
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	91 05       	cpc	r25, r1
    145c:	71 f0       	breq	.+28     	; 0x147a <TIM_Start+0x4a>
    145e:	82 30       	cpi	r24, 0x02	; 2
    1460:	91 05       	cpc	r25, r1
    1462:	a1 f0       	breq	.+40     	; 0x148c <TIM_Start+0x5c>
    1464:	89 2b       	or	r24, r25
    1466:	d9 f4       	brne	.+54     	; 0x149e <TIM_Start+0x6e>
    1468:	83 e5       	ldi	r24, 0x53	; 83
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	82 e5       	ldi	r24, 0x52	; 82
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9c 83       	std	Y+4, r25	; 0x04
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	14 c0       	rjmp	.+40     	; 0x14a2 <TIM_Start+0x72>
    147a:	8e e4       	ldi	r24, 0x4E	; 78
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	8c e4       	ldi	r24, 0x4C	; 76
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9c 83       	std	Y+4, r25	; 0x04
    1488:	8b 83       	std	Y+3, r24	; 0x03
    148a:	0b c0       	rjmp	.+22     	; 0x14a2 <TIM_Start+0x72>
    148c:	85 e4       	ldi	r24, 0x45	; 69
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9a 83       	std	Y+2, r25	; 0x02
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	84 e4       	ldi	r24, 0x44	; 68
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	9c 83       	std	Y+4, r25	; 0x04
    149a:	8b 83       	std	Y+3, r24	; 0x03
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <TIM_Start+0x72>
    149e:	8e ef       	ldi	r24, 0xFE	; 254
    14a0:	1e c0       	rjmp	.+60     	; 0x14de <TIM_Start+0xae>
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	2e 81       	ldd	r18, Y+6	; 0x06
    14a8:	3f 81       	ldd	r19, Y+7	; 0x07
    14aa:	fc 01       	movw	r30, r24
    14ac:	31 83       	std	Z+1, r19	; 0x01
    14ae:	20 83       	st	Z, r18
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	9a 81       	ldd	r25, Y+2	; 0x02
    14b4:	fc 01       	movw	r30, r24
    14b6:	40 81       	ld	r20, Z
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	c9 01       	movw	r24, r18
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	82 0f       	add	r24, r18
    14c6:	93 1f       	adc	r25, r19
    14c8:	8a 57       	subi	r24, 0x7A	; 122
    14ca:	9f 4f       	sbci	r25, 0xFF	; 255
    14cc:	fc 01       	movw	r30, r24
    14ce:	80 81       	ld	r24, Z
    14d0:	24 2f       	mov	r18, r20
    14d2:	28 2b       	or	r18, r24
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	fc 01       	movw	r30, r24
    14da:	20 83       	st	Z, r18
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	27 96       	adiw	r28, 0x07	; 7
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	08 95       	ret

000014f0 <TIM_GetStatus>:
* @param [out] FlagStatus  -  pointer to the variable to save the timer status in it.
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <TIM_GetStatus+0x6>
    14f6:	1f 92       	push	r1
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	7b 83       	std	Y+3, r23	; 0x03
    1500:	6a 83       	std	Y+2, r22	; 0x02
   if(NULL_PTR == FlagStatus)
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	9b 81       	ldd	r25, Y+3	; 0x03
    1506:	89 2b       	or	r24, r25
    1508:	11 f4       	brne	.+4      	; 0x150e <TIM_GetStatus+0x1e>
   {
      return TIMER_E_NULL_PTR;
    150a:	8f ef       	ldi	r24, 0xFF	; 255
    150c:	20 c1       	rjmp	.+576    	; 0x174e <TIM_GetStatus+0x25e>
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <TIM_GetStatus+0x2c>
    151a:	59 c0       	rjmp	.+178    	; 0x15ce <TIM_GetStatus+0xde>
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	91 05       	cpc	r25, r1
    1520:	09 f4       	brne	.+2      	; 0x1524 <TIM_GetStatus+0x34>
    1522:	c0 c0       	rjmp	.+384    	; 0x16a4 <TIM_GetStatus+0x1b4>
    1524:	89 2b       	or	r24, r25
    1526:	09 f0       	breq	.+2      	; 0x152a <TIM_GetStatus+0x3a>
    1528:	0a c1       	rjmp	.+532    	; 0x173e <TIM_GetStatus+0x24e>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	c9 01       	movw	r24, r18
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	82 0f       	add	r24, r18
    1538:	93 1f       	adc	r25, r19
    153a:	8c 57       	subi	r24, 0x7C	; 124
    153c:	9f 4f       	sbci	r25, 0xFF	; 255
    153e:	fc 01       	movw	r30, r24
    1540:	80 81       	ld	r24, Z
    1542:	88 23       	and	r24, r24
    1544:	d1 f4       	brne	.+52     	; 0x157a <TIM_GetStatus+0x8a>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
    1546:	88 e5       	ldi	r24, 0x58	; 88
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	fc 01       	movw	r30, r24
    154c:	80 81       	ld	r24, Z
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	81 70       	andi	r24, 0x01	; 1
    1554:	99 27       	eor	r25, r25
    1556:	89 2b       	or	r24, r25
    1558:	71 f0       	breq	.+28     	; 0x1576 <TIM_GetStatus+0x86>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	9b 81       	ldd	r25, Y+3	; 0x03
    155e:	fc 01       	movw	r30, r24
    1560:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
    1562:	88 e5       	ldi	r24, 0x58	; 88
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	28 e5       	ldi	r18, 0x58	; 88
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	f9 01       	movw	r30, r18
    156c:	20 81       	ld	r18, Z
    156e:	21 60       	ori	r18, 0x01	; 1
    1570:	fc 01       	movw	r30, r24
    1572:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    1574:	e6 c0       	rjmp	.+460    	; 0x1742 <TIM_GetStatus+0x252>
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1576:	8d ef       	ldi	r24, 0xFD	; 253
    1578:	ea c0       	rjmp	.+468    	; 0x174e <TIM_GetStatus+0x25e>
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	c9 01       	movw	r24, r18
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	82 0f       	add	r24, r18
    1588:	93 1f       	adc	r25, r19
    158a:	8c 57       	subi	r24, 0x7C	; 124
    158c:	9f 4f       	sbci	r25, 0xFF	; 255
    158e:	fc 01       	movw	r30, r24
    1590:	80 81       	ld	r24, Z
    1592:	88 30       	cpi	r24, 0x08	; 8
    1594:	09 f0       	breq	.+2      	; 0x1598 <TIM_GetStatus+0xa8>
    1596:	d5 c0       	rjmp	.+426    	; 0x1742 <TIM_GetStatus+0x252>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
    1598:	88 e5       	ldi	r24, 0x58	; 88
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	fc 01       	movw	r30, r24
    159e:	80 81       	ld	r24, Z
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	82 70       	andi	r24, 0x02	; 2
    15a6:	99 27       	eor	r25, r25
    15a8:	89 2b       	or	r24, r25
    15aa:	79 f0       	breq	.+30     	; 0x15ca <TIM_GetStatus+0xda>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	9b 81       	ldd	r25, Y+3	; 0x03
    15b0:	21 e0       	ldi	r18, 0x01	; 1
    15b2:	fc 01       	movw	r30, r24
    15b4:	20 83       	st	Z, r18
               TIFR |= TIMER_0_COMPARE_FLAG;
    15b6:	88 e5       	ldi	r24, 0x58	; 88
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	28 e5       	ldi	r18, 0x58	; 88
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	f9 01       	movw	r30, r18
    15c0:	20 81       	ld	r18, Z
    15c2:	22 60       	ori	r18, 0x02	; 2
    15c4:	fc 01       	movw	r30, r24
    15c6:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    15c8:	bc c0       	rjmp	.+376    	; 0x1742 <TIM_GetStatus+0x252>
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    15ca:	8d ef       	ldi	r24, 0xFD	; 253
    15cc:	c0 c0       	rjmp	.+384    	; 0x174e <TIM_GetStatus+0x25e>
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	c9 01       	movw	r24, r18
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	82 0f       	add	r24, r18
    15dc:	93 1f       	adc	r25, r19
    15de:	8c 57       	subi	r24, 0x7C	; 124
    15e0:	9f 4f       	sbci	r25, 0xFF	; 255
    15e2:	fc 01       	movw	r30, r24
    15e4:	80 81       	ld	r24, Z
    15e6:	88 23       	and	r24, r24
    15e8:	d1 f4       	brne	.+52     	; 0x161e <TIM_GetStatus+0x12e>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
    15ea:	88 e5       	ldi	r24, 0x58	; 88
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	fc 01       	movw	r30, r24
    15f0:	80 81       	ld	r24, Z
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	84 70       	andi	r24, 0x04	; 4
    15f8:	99 27       	eor	r25, r25
    15fa:	89 2b       	or	r24, r25
    15fc:	71 f0       	breq	.+28     	; 0x161a <TIM_GetStatus+0x12a>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	9b 81       	ldd	r25, Y+3	; 0x03
    1602:	fc 01       	movw	r30, r24
    1604:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
    1606:	88 e5       	ldi	r24, 0x58	; 88
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	28 e5       	ldi	r18, 0x58	; 88
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	f9 01       	movw	r30, r18
    1610:	20 81       	ld	r18, Z
    1612:	24 60       	ori	r18, 0x04	; 4
    1614:	fc 01       	movw	r30, r24
    1616:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    1618:	96 c0       	rjmp	.+300    	; 0x1746 <TIM_GetStatus+0x256>
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    161a:	8d ef       	ldi	r24, 0xFD	; 253
    161c:	98 c0       	rjmp	.+304    	; 0x174e <TIM_GetStatus+0x25e>
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	c9 01       	movw	r24, r18
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	82 0f       	add	r24, r18
    162c:	93 1f       	adc	r25, r19
    162e:	8c 57       	subi	r24, 0x7C	; 124
    1630:	9f 4f       	sbci	r25, 0xFF	; 255
    1632:	fc 01       	movw	r30, r24
    1634:	80 81       	ld	r24, Z
    1636:	88 30       	cpi	r24, 0x08	; 8
    1638:	09 f0       	breq	.+2      	; 0x163c <TIM_GetStatus+0x14c>
    163a:	85 c0       	rjmp	.+266    	; 0x1746 <TIM_GetStatus+0x256>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
    163c:	88 e5       	ldi	r24, 0x58	; 88
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	fc 01       	movw	r30, r24
    1642:	80 81       	ld	r24, Z
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	80 71       	andi	r24, 0x10	; 16
    164a:	99 27       	eor	r25, r25
    164c:	89 2b       	or	r24, r25
    164e:	79 f0       	breq	.+30     	; 0x166e <TIM_GetStatus+0x17e>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	9b 81       	ldd	r25, Y+3	; 0x03
    1654:	21 e0       	ldi	r18, 0x01	; 1
    1656:	fc 01       	movw	r30, r24
    1658:	20 83       	st	Z, r18
               TIFR |= TIMER_1A_COMPARE_FLAG;
    165a:	88 e5       	ldi	r24, 0x58	; 88
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	28 e5       	ldi	r18, 0x58	; 88
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	f9 01       	movw	r30, r18
    1664:	20 81       	ld	r18, Z
    1666:	20 61       	ori	r18, 0x10	; 16
    1668:	fc 01       	movw	r30, r24
    166a:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    166c:	6c c0       	rjmp	.+216    	; 0x1746 <TIM_GetStatus+0x256>
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
    166e:	88 e5       	ldi	r24, 0x58	; 88
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	fc 01       	movw	r30, r24
    1674:	80 81       	ld	r24, Z
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	88 70       	andi	r24, 0x08	; 8
    167c:	99 27       	eor	r25, r25
    167e:	89 2b       	or	r24, r25
    1680:	79 f0       	breq	.+30     	; 0x16a0 <TIM_GetStatus+0x1b0>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	9b 81       	ldd	r25, Y+3	; 0x03
    1686:	21 e0       	ldi	r18, 0x01	; 1
    1688:	fc 01       	movw	r30, r24
    168a:	20 83       	st	Z, r18
               TIFR |= TIMER_1B_COMPARE_FLAG;
    168c:	88 e5       	ldi	r24, 0x58	; 88
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	28 e5       	ldi	r18, 0x58	; 88
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	f9 01       	movw	r30, r18
    1696:	20 81       	ld	r18, Z
    1698:	28 60       	ori	r18, 0x08	; 8
    169a:	fc 01       	movw	r30, r24
    169c:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    169e:	53 c0       	rjmp	.+166    	; 0x1746 <TIM_GetStatus+0x256>
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    16a0:	8d ef       	ldi	r24, 0xFD	; 253
    16a2:	55 c0       	rjmp	.+170    	; 0x174e <TIM_GetStatus+0x25e>
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	c9 01       	movw	r24, r18
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	82 0f       	add	r24, r18
    16b2:	93 1f       	adc	r25, r19
    16b4:	8c 57       	subi	r24, 0x7C	; 124
    16b6:	9f 4f       	sbci	r25, 0xFF	; 255
    16b8:	fc 01       	movw	r30, r24
    16ba:	80 81       	ld	r24, Z
    16bc:	88 23       	and	r24, r24
    16be:	d1 f4       	brne	.+52     	; 0x16f4 <TIM_GetStatus+0x204>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
    16c0:	88 e5       	ldi	r24, 0x58	; 88
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	fc 01       	movw	r30, r24
    16c6:	80 81       	ld	r24, Z
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	80 74       	andi	r24, 0x40	; 64
    16ce:	99 27       	eor	r25, r25
    16d0:	89 2b       	or	r24, r25
    16d2:	71 f0       	breq	.+28     	; 0x16f0 <TIM_GetStatus+0x200>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	9b 81       	ldd	r25, Y+3	; 0x03
    16d8:	fc 01       	movw	r30, r24
    16da:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
    16dc:	88 e5       	ldi	r24, 0x58	; 88
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	28 e5       	ldi	r18, 0x58	; 88
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	f9 01       	movw	r30, r18
    16e6:	20 81       	ld	r18, Z
    16e8:	20 64       	ori	r18, 0x40	; 64
    16ea:	fc 01       	movw	r30, r24
    16ec:	20 83       	st	Z, r18
            {
               return TIMER_E_PENDING;
            }
         }
         
         break;
    16ee:	2d c0       	rjmp	.+90     	; 0x174a <TIM_GetStatus+0x25a>
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    16f0:	8d ef       	ldi	r24, 0xFD	; 253
    16f2:	2d c0       	rjmp	.+90     	; 0x174e <TIM_GetStatus+0x25e>
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	c9 01       	movw	r24, r18
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	82 0f       	add	r24, r18
    1702:	93 1f       	adc	r25, r19
    1704:	8c 57       	subi	r24, 0x7C	; 124
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	fc 01       	movw	r30, r24
    170a:	80 81       	ld	r24, Z
    170c:	88 30       	cpi	r24, 0x08	; 8
    170e:	e9 f4       	brne	.+58     	; 0x174a <TIM_GetStatus+0x25a>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
    1710:	88 e5       	ldi	r24, 0x58	; 88
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	fc 01       	movw	r30, r24
    1716:	80 81       	ld	r24, Z
    1718:	88 23       	and	r24, r24
    171a:	7c f4       	brge	.+30     	; 0x173a <TIM_GetStatus+0x24a>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	9b 81       	ldd	r25, Y+3	; 0x03
    1720:	21 e0       	ldi	r18, 0x01	; 1
    1722:	fc 01       	movw	r30, r24
    1724:	20 83       	st	Z, r18
               TIFR |= TIMER_2_COMPARE_FLAG;
    1726:	88 e5       	ldi	r24, 0x58	; 88
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	28 e5       	ldi	r18, 0x58	; 88
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	f9 01       	movw	r30, r18
    1730:	20 81       	ld	r18, Z
    1732:	20 68       	ori	r18, 0x80	; 128
    1734:	fc 01       	movw	r30, r24
    1736:	20 83       	st	Z, r18
            {
               return TIMER_E_PENDING;
            }
         }
         
         break;
    1738:	08 c0       	rjmp	.+16     	; 0x174a <TIM_GetStatus+0x25a>
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    173a:	8d ef       	ldi	r24, 0xFD	; 253
    173c:	08 c0       	rjmp	.+16     	; 0x174e <TIM_GetStatus+0x25e>
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    173e:	8e ef       	ldi	r24, 0xFE	; 254
    1740:	06 c0       	rjmp	.+12     	; 0x174e <TIM_GetStatus+0x25e>
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    1742:	00 00       	nop
    1744:	03 c0       	rjmp	.+6      	; 0x174c <TIM_GetStatus+0x25c>
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    1746:	00 00       	nop
    1748:	01 c0       	rjmp	.+2      	; 0x174c <TIM_GetStatus+0x25c>
            {
               return TIMER_E_PENDING;
            }
         }
         
         break;
    174a:	00 00       	nop
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    174c:	80 e0       	ldi	r24, 0x00	; 0
}
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	08 95       	ret

0000175a <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    175a:	ef 92       	push	r14
    175c:	ff 92       	push	r15
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	2c 97       	sbiw	r28, 0x0c	; 12
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	8e 83       	std	Y+6, r24	; 0x06
    1778:	4f 83       	std	Y+7, r20	; 0x07
    177a:	58 87       	std	Y+8, r21	; 0x08
    177c:	69 87       	std	Y+9, r22	; 0x09
    177e:	7a 87       	std	Y+10, r23	; 0x0a
    1780:	3c 87       	std	Y+12, r19	; 0x0c
    1782:	2b 87       	std	Y+11, r18	; 0x0b
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1784:	8e 81       	ldd	r24, Y+6	; 0x06
    1786:	83 30       	cpi	r24, 0x03	; 3
    1788:	10 f0       	brcs	.+4      	; 0x178e <TIM_DelayUs+0x34>
   {
      return TIMER_E_INVALID_CH_NUM;
    178a:	8e ef       	ldi	r24, 0xFE	; 254
    178c:	7e c0       	rjmp	.+252    	; 0x188a <TIM_DelayUs+0x130>
   }
   
   if(NULL_PTR == DelayRequester)
    178e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1790:	9c 85       	ldd	r25, Y+12	; 0x0c
    1792:	89 2b       	or	r24, r25
    1794:	11 f4       	brne	.+4      	; 0x179a <TIM_DelayUs+0x40>
   {
      return ERROR_NOK;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	78 c0       	rjmp	.+240    	; 0x188a <TIM_DelayUs+0x130>
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    179a:	8b 85       	ldd	r24, Y+11	; 0x0b
    179c:	9c 85       	ldd	r25, Y+12	; 0x0c
    179e:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <gptr_CallerFunc+0x1>
    17a2:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <gptr_CallerFunc>
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    17a6:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <gEnu_State>
    17aa:	88 23       	and	r24, r24
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <TIM_DelayUs+0x56>
    17ae:	6c c0       	rjmp	.+216    	; 0x1888 <TIM_DelayUs+0x12e>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    17b0:	ce 01       	movw	r24, r28
    17b2:	02 96       	adiw	r24, 0x02	; 2
    17b4:	bc 01       	movw	r22, r24
    17b6:	8e 81       	ldd	r24, Y+6	; 0x06
    17b8:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GetFreqPrescaleRatio>
    17bc:	89 83       	std	Y+1, r24	; 0x01
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	8c 3f       	cpi	r24, 0xFC	; 252
    17c2:	11 f4       	brne	.+4      	; 0x17c8 <TIM_DelayUs+0x6e>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    17c4:	8c ef       	ldi	r24, 0xFC	; 252
    17c6:	61 c0       	rjmp	.+194    	; 0x188a <TIM_DelayUs+0x130>
      }
      
      if(f32_FreqRatio != 0)
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	9b 81       	ldd	r25, Y+3	; 0x03
    17cc:	ac 81       	ldd	r26, Y+4	; 0x04
    17ce:	bd 81       	ldd	r27, Y+5	; 0x05
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	a9 01       	movw	r20, r18
    17d6:	bc 01       	movw	r22, r24
    17d8:	cd 01       	movw	r24, r26
    17da:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__cmpsf2>
    17de:	88 23       	and	r24, r24
    17e0:	f1 f0       	breq	.+60     	; 0x181e <TIM_DelayUs+0xc4>
      {
         TIM_Delay /= f32_FreqRatio;
    17e2:	6f 81       	ldd	r22, Y+7	; 0x07
    17e4:	78 85       	ldd	r23, Y+8	; 0x08
    17e6:	89 85       	ldd	r24, Y+9	; 0x09
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__floatunsisf>
    17ee:	7b 01       	movw	r14, r22
    17f0:	8c 01       	movw	r16, r24
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	9b 81       	ldd	r25, Y+3	; 0x03
    17f6:	ac 81       	ldd	r26, Y+4	; 0x04
    17f8:	bd 81       	ldd	r27, Y+5	; 0x05
    17fa:	9c 01       	movw	r18, r24
    17fc:	ad 01       	movw	r20, r26
    17fe:	c8 01       	movw	r24, r16
    1800:	b7 01       	movw	r22, r14
    1802:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__divsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	8f 83       	std	Y+7, r24	; 0x07
    1818:	98 87       	std	Y+8, r25	; 0x08
    181a:	a9 87       	std	Y+9, r26	; 0x09
    181c:	ba 87       	std	Y+10, r27	; 0x0a
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    181e:	8f 81       	ldd	r24, Y+7	; 0x07
    1820:	98 85       	ldd	r25, Y+8	; 0x08
    1822:	a9 85       	ldd	r26, Y+9	; 0x09
    1824:	ba 85       	ldd	r27, Y+10	; 0x0a
    1826:	89 2f       	mov	r24, r25
    1828:	9a 2f       	mov	r25, r26
    182a:	ab 2f       	mov	r26, r27
    182c:	bb 27       	eor	r27, r27
    182e:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <gu32_Overflows>
    1832:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <gu32_Overflows+0x1>
    1836:	a0 93 c5 00 	sts	0x00C5, r26	; 0x8000c5 <gu32_Overflows+0x2>
    183a:	b0 93 c6 00 	sts	0x00C6, r27	; 0x8000c6 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    183e:	8f 81       	ldd	r24, Y+7	; 0x07
    1840:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    1844:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <gu32_Overflows>
    1848:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <gu32_Overflows+0x1>
    184c:	a0 91 c5 00 	lds	r26, 0x00C5	; 0x8000c5 <gu32_Overflows+0x2>
    1850:	b0 91 c6 00 	lds	r27, 0x00C6	; 0x8000c6 <gu32_Overflows+0x3>
    1854:	89 2b       	or	r24, r25
    1856:	8a 2b       	or	r24, r26
    1858:	8b 2b       	or	r24, r27
    185a:	61 f4       	brne	.+24     	; 0x1874 <TIM_DelayUs+0x11a>
      {
         gu8_OverflowsComplete = HIGH;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    1862:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gu8_Remindar>
    1866:	88 2f       	mov	r24, r24
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	bc 01       	movw	r22, r24
    186c:	8e 81       	ldd	r24, Y+6	; 0x06
    186e:	0e 94 18 0a 	call	0x1430	; 0x1430 <TIM_Start>
    1872:	05 c0       	rjmp	.+10     	; 0x187e <TIM_DelayUs+0x124>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1874:	6f ef       	ldi	r22, 0xFF	; 255
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	8e 81       	ldd	r24, Y+6	; 0x06
    187a:	0e 94 18 0a 	call	0x1430	; 0x1430 <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <gEnu_State>
      return TIMER_E_PENDING;
    1884:	8d ef       	ldi	r24, 0xFD	; 253
    1886:	01 c0       	rjmp	.+2      	; 0x188a <TIM_DelayUs+0x130>
   }
   
   return ERROR_NOK;            
    1888:	81 e0       	ldi	r24, 0x01	; 1
}
    188a:	2c 96       	adiw	r28, 0x0c	; 12
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	08 95       	ret

000018a4 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    18a4:	ef 92       	push	r14
    18a6:	ff 92       	push	r15
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	2c 97       	sbiw	r28, 0x0c	; 12
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	8e 83       	std	Y+6, r24	; 0x06
    18c2:	4f 83       	std	Y+7, r20	; 0x07
    18c4:	58 87       	std	Y+8, r21	; 0x08
    18c6:	69 87       	std	Y+9, r22	; 0x09
    18c8:	7a 87       	std	Y+10, r23	; 0x0a
    18ca:	3c 87       	std	Y+12, r19	; 0x0c
    18cc:	2b 87       	std	Y+11, r18	; 0x0b
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    18ce:	8e 81       	ldd	r24, Y+6	; 0x06
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	10 f0       	brcs	.+4      	; 0x18d8 <TIM_DelayMs+0x34>
   {
      return TIMER_E_INVALID_CH_NUM;
    18d4:	8e ef       	ldi	r24, 0xFE	; 254
    18d6:	89 c0       	rjmp	.+274    	; 0x19ea <TIM_DelayMs+0x146>
   }
   
   if(NULL_PTR == DelayRequester)
    18d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    18da:	9c 85       	ldd	r25, Y+12	; 0x0c
    18dc:	89 2b       	or	r24, r25
    18de:	11 f4       	brne	.+4      	; 0x18e4 <TIM_DelayMs+0x40>
   {
      return ERROR_NOK;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	83 c0       	rjmp	.+262    	; 0x19ea <TIM_DelayMs+0x146>
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    18e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    18e8:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <gptr_CallerFunc+0x1>
    18ec:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <gptr_CallerFunc>
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    18f0:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <gEnu_State>
    18f4:	88 23       	and	r24, r24
    18f6:	09 f0       	breq	.+2      	; 0x18fa <TIM_DelayMs+0x56>
    18f8:	77 c0       	rjmp	.+238    	; 0x19e8 <TIM_DelayMs+0x144>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    18fa:	ce 01       	movw	r24, r28
    18fc:	02 96       	adiw	r24, 0x02	; 2
    18fe:	bc 01       	movw	r22, r24
    1900:	8e 81       	ldd	r24, Y+6	; 0x06
    1902:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GetFreqPrescaleRatio>
    1906:	89 83       	std	Y+1, r24	; 0x01
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	8c 3f       	cpi	r24, 0xFC	; 252
    190c:	11 f4       	brne	.+4      	; 0x1912 <TIM_DelayMs+0x6e>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    190e:	8c ef       	ldi	r24, 0xFC	; 252
    1910:	6c c0       	rjmp	.+216    	; 0x19ea <TIM_DelayMs+0x146>
      }
      
      if(f32_FreqRatio != 0)
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	9b 81       	ldd	r25, Y+3	; 0x03
    1916:	ac 81       	ldd	r26, Y+4	; 0x04
    1918:	bd 81       	ldd	r27, Y+5	; 0x05
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	a9 01       	movw	r20, r18
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__cmpsf2>
    1928:	88 23       	and	r24, r24
    192a:	f1 f0       	breq	.+60     	; 0x1968 <TIM_DelayMs+0xc4>
      {
         TIM_Delay /= f32_FreqRatio;
    192c:	6f 81       	ldd	r22, Y+7	; 0x07
    192e:	78 85       	ldd	r23, Y+8	; 0x08
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	9a 85       	ldd	r25, Y+10	; 0x0a
    1934:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__floatunsisf>
    1938:	7b 01       	movw	r14, r22
    193a:	8c 01       	movw	r16, r24
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	9b 81       	ldd	r25, Y+3	; 0x03
    1940:	ac 81       	ldd	r26, Y+4	; 0x04
    1942:	bd 81       	ldd	r27, Y+5	; 0x05
    1944:	9c 01       	movw	r18, r24
    1946:	ad 01       	movw	r20, r26
    1948:	c8 01       	movw	r24, r16
    194a:	b7 01       	movw	r22, r14
    194c:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__divsf3>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	bc 01       	movw	r22, r24
    1956:	cd 01       	movw	r24, r26
    1958:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	8f 83       	std	Y+7, r24	; 0x07
    1962:	98 87       	std	Y+8, r25	; 0x08
    1964:	a9 87       	std	Y+9, r26	; 0x09
    1966:	ba 87       	std	Y+10, r27	; 0x0a
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    1968:	2f 81       	ldd	r18, Y+7	; 0x07
    196a:	38 85       	ldd	r19, Y+8	; 0x08
    196c:	49 85       	ldd	r20, Y+9	; 0x09
    196e:	5a 85       	ldd	r21, Y+10	; 0x0a
    1970:	88 ee       	ldi	r24, 0xE8	; 232
    1972:	93 e0       	ldi	r25, 0x03	; 3
    1974:	dc 01       	movw	r26, r24
    1976:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__muluhisi3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	89 2f       	mov	r24, r25
    1980:	9a 2f       	mov	r25, r26
    1982:	ab 2f       	mov	r26, r27
    1984:	bb 27       	eor	r27, r27
    1986:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <gu32_Overflows>
    198a:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <gu32_Overflows+0x1>
    198e:	a0 93 c5 00 	sts	0x00C5, r26	; 0x8000c5 <gu32_Overflows+0x2>
    1992:	b0 93 c6 00 	sts	0x00C6, r27	; 0x8000c6 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    1996:	9f 81       	ldd	r25, Y+7	; 0x07
    1998:	88 ee       	ldi	r24, 0xE8	; 232
    199a:	98 9f       	mul	r25, r24
    199c:	80 2d       	mov	r24, r0
    199e:	11 24       	eor	r1, r1
    19a0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    19a4:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <gu32_Overflows>
    19a8:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <gu32_Overflows+0x1>
    19ac:	a0 91 c5 00 	lds	r26, 0x00C5	; 0x8000c5 <gu32_Overflows+0x2>
    19b0:	b0 91 c6 00 	lds	r27, 0x00C6	; 0x8000c6 <gu32_Overflows+0x3>
    19b4:	89 2b       	or	r24, r25
    19b6:	8a 2b       	or	r24, r26
    19b8:	8b 2b       	or	r24, r27
    19ba:	61 f4       	brne	.+24     	; 0x19d4 <TIM_DelayMs+0x130>
      {
         gu8_OverflowsComplete = HIGH;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    19c2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gu8_Remindar>
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	bc 01       	movw	r22, r24
    19cc:	8e 81       	ldd	r24, Y+6	; 0x06
    19ce:	0e 94 18 0a 	call	0x1430	; 0x1430 <TIM_Start>
    19d2:	05 c0       	rjmp	.+10     	; 0x19de <TIM_DelayMs+0x13a>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    19d4:	6f ef       	ldi	r22, 0xFF	; 255
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	8e 81       	ldd	r24, Y+6	; 0x06
    19da:	0e 94 18 0a 	call	0x1430	; 0x1430 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <gEnu_State>
      return TIMER_E_PENDING;
    19e4:	8d ef       	ldi	r24, 0xFD	; 253
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <TIM_DelayMs+0x146>
   }
   
   return ERROR_NOK;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
}
    19ea:	2c 96       	adiw	r28, 0x0c	; 12
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	ff 90       	pop	r15
    1a00:	ef 90       	pop	r14
    1a02:	08 95       	ret

00001a04 <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <TIM_DelayStatus+0x6>
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <TIM_DelayStatus+0x8>
    1a0c:	1f 92       	push	r1
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	8b 83       	std	Y+3, r24	; 0x03
    1a14:	7d 83       	std	Y+5, r23	; 0x05
    1a16:	6c 83       	std	Y+4, r22	; 0x04
   if(DelayReady == gEnu_State)
    1a18:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <gEnu_State>
    1a1c:	88 23       	and	r24, r24
    1a1e:	11 f4       	brne	.+4      	; 0x1a24 <TIM_DelayStatus+0x20>
   {
      return TIMER_E_DELAY_EMPTY;
    1a20:	8b ef       	ldi	r24, 0xFB	; 251
    1a22:	5c c0       	rjmp	.+184    	; 0x1adc <TIM_DelayStatus+0xd8>
   }
   
   if(DelayRequester != gptr_CallerFunc)
    1a24:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <gptr_CallerFunc>
    1a28:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <gptr_CallerFunc+0x1>
    1a2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a30:	28 17       	cp	r18, r24
    1a32:	39 07       	cpc	r19, r25
    1a34:	11 f0       	breq	.+4      	; 0x1a3a <TIM_DelayStatus+0x36>
   {
      return ERROR_NOK;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	51 c0       	rjmp	.+162    	; 0x1adc <TIM_DelayStatus+0xd8>
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    1a3a:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <gEnu_State>
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <TIM_DelayStatus+0x40>
    1a42:	49 c0       	rjmp	.+146    	; 0x1ad6 <TIM_DelayStatus+0xd2>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    1a44:	ce 01       	movw	r24, r28
    1a46:	02 96       	adiw	r24, 0x02	; 2
    1a48:	bc 01       	movw	r22, r24
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <TIM_GetStatus>
    1a50:	89 83       	std	Y+1, r24	; 0x01
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	88 23       	and	r24, r24
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <TIM_DelayStatus+0x56>
    1a58:	40 c0       	rjmp	.+128    	; 0x1ada <TIM_DelayStatus+0xd6>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    1a5a:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <gu8_OverflowsComplete>
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	41 f4       	brne	.+16     	; 0x1a72 <TIM_DelayStatus+0x6e>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    1a62:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <gEnu_State>
            gu8_OverflowsComplete = LOW;
    1a66:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <gu8_OverflowsComplete>
            gu8_Remindar = 0;
    1a6a:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <gu8_Remindar>
            /* return success message. */
            return ERROR_OK;
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	35 c0       	rjmp	.+106    	; 0x1adc <TIM_DelayStatus+0xd8>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    1a72:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <gu32_Overflows>
    1a76:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <gu32_Overflows+0x1>
    1a7a:	a0 91 c5 00 	lds	r26, 0x00C5	; 0x8000c5 <gu32_Overflows+0x2>
    1a7e:	b0 91 c6 00 	lds	r27, 0x00C6	; 0x8000c6 <gu32_Overflows+0x3>
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	a1 09       	sbc	r26, r1
    1a86:	b1 09       	sbc	r27, r1
    1a88:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <gu32_Overflows>
    1a8c:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <gu32_Overflows+0x1>
    1a90:	a0 93 c5 00 	sts	0x00C5, r26	; 0x8000c5 <gu32_Overflows+0x2>
    1a94:	b0 93 c6 00 	sts	0x00C6, r27	; 0x8000c6 <gu32_Overflows+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    1a98:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <gu32_Overflows>
    1a9c:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <gu32_Overflows+0x1>
    1aa0:	a0 91 c5 00 	lds	r26, 0x00C5	; 0x8000c5 <gu32_Overflows+0x2>
    1aa4:	b0 91 c6 00 	lds	r27, 0x00C6	; 0x8000c6 <gu32_Overflows+0x3>
    1aa8:	89 2b       	or	r24, r25
    1aaa:	8a 2b       	or	r24, r26
    1aac:	8b 2b       	or	r24, r27
    1aae:	61 f4       	brne	.+24     	; 0x1ac8 <TIM_DelayStatus+0xc4>
         {
            gu8_OverflowsComplete = HIGH;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <gu8_OverflowsComplete>
            TIM_Start(TIM_channel, gu8_Remindar);
    1ab6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gu8_Remindar>
    1aba:	88 2f       	mov	r24, r24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	bc 01       	movw	r22, r24
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	0e 94 18 0a 	call	0x1430	; 0x1430 <TIM_Start>
    1ac6:	05 c0       	rjmp	.+10     	; 0x1ad2 <TIM_DelayStatus+0xce>
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    1ac8:	6f ef       	ldi	r22, 0xFF	; 255
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	0e 94 18 0a 	call	0x1430	; 0x1430 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    1ad2:	8d ef       	ldi	r24, 0xFD	; 253
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <TIM_DelayStatus+0xd8>
      }
   }
   else
   {
      return ERROR_NOK;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	01 c0       	rjmp	.+2      	; 0x1adc <TIM_DelayStatus+0xd8>
   }
   return 0;
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	08 95       	ret

00001aec <DISPLAY_ShiftAndDisplay>:
void DISPLAY_MainFunction(void)
{
	
}
void DISPLAY_ShiftAndDisplay(uint8_t StringLength, uint8_t* StringPTR)
{
    1aec:	cf 93       	push	r28
    1aee:	df 93       	push	r29
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <DISPLAY_ShiftAndDisplay+0x6>
    1af2:	1f 92       	push	r1
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	7b 83       	std	Y+3, r23	; 0x03
    1afc:	6a 83       	std	Y+2, r22	; 0x02
	uint8_t static State = OperationStarted;
	
	switch(State)
    1afe:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <State.1737>
    1b02:	88 2f       	mov	r24, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	82 30       	cpi	r24, 0x02	; 2
    1b08:	91 05       	cpc	r25, r1
    1b0a:	a9 f1       	breq	.+106    	; 0x1b76 <DISPLAY_ShiftAndDisplay+0x8a>
    1b0c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b0e:	91 05       	cpc	r25, r1
    1b10:	21 f0       	breq	.+8      	; 0x1b1a <DISPLAY_ShiftAndDisplay+0x2e>
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <DISPLAY_ShiftAndDisplay+0x2c>
    1b16:	66 c0       	rjmp	.+204    	; 0x1be4 <DISPLAY_ShiftAndDisplay+0xf8>
			while(LCD_SendCommand(0x80|Position) != OperationSuccess);
			while(LCD_SendString(StringPTR) != OperationSuccess);
			while(LCD_SendData(' ')!= OperationSuccess);
			break;
		default:
			break;
    1b18:	87 c0       	rjmp	.+270    	; 0x1c28 <DISPLAY_ShiftAndDisplay+0x13c>
	uint8_t static State = OperationStarted;
	
	switch(State)
	{
		case OperationStarted:
			if(Position<16-StringLength)
    1b1a:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Position>
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	88 2f       	mov	r24, r24
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	40 e1       	ldi	r20, 0x10	; 16
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	ba 01       	movw	r22, r20
    1b2e:	68 1b       	sub	r22, r24
    1b30:	79 0b       	sbc	r23, r25
    1b32:	cb 01       	movw	r24, r22
    1b34:	28 17       	cp	r18, r24
    1b36:	39 07       	cpc	r19, r25
    1b38:	24 f4       	brge	.+8      	; 0x1b42 <DISPLAY_ShiftAndDisplay+0x56>
			{
				State = ShiftingRight;
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1737>
			else
			{
				Position = 0;
				State = ShiftingRight;
			}
			break;
    1b40:	73 c0       	rjmp	.+230    	; 0x1c28 <DISPLAY_ShiftAndDisplay+0x13c>
		case OperationStarted:
			if(Position<16-StringLength)
			{
				State = ShiftingRight;
			}
			else if (Position == 15-StringLength)
    1b42:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Position>
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	88 2f       	mov	r24, r24
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	4f e0       	ldi	r20, 0x0F	; 15
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	ba 01       	movw	r22, r20
    1b56:	68 1b       	sub	r22, r24
    1b58:	79 0b       	sbc	r23, r25
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	28 17       	cp	r18, r24
    1b5e:	39 07       	cpc	r19, r25
    1b60:	21 f4       	brne	.+8      	; 0x1b6a <DISPLAY_ShiftAndDisplay+0x7e>
			{
				State = ShiftingLeft;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1737>
			else
			{
				Position = 0;
				State = ShiftingRight;
			}
			break;
    1b68:	5f c0       	rjmp	.+190    	; 0x1c28 <DISPLAY_ShiftAndDisplay+0x13c>
			{
				State = ShiftingLeft;
			}
			else
			{
				Position = 0;
    1b6a:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <Position>
				State = ShiftingRight;
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1737>
			}
			break;
    1b74:	59 c0       	rjmp	.+178    	; 0x1c28 <DISPLAY_ShiftAndDisplay+0x13c>
		case ShiftingRight:
			while(LCD_SendCommand(0x80|Position) != OperationSuccess);
    1b76:	00 00       	nop
    1b78:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Position>
    1b7c:	80 68       	ori	r24, 0x80	; 128
    1b7e:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
    1b82:	88 23       	and	r24, r24
    1b84:	c9 f7       	brne	.-14     	; 0x1b78 <DISPLAY_ShiftAndDisplay+0x8c>
			while(LCD_SendString(StringPTR) != OperationSuccess);
    1b86:	00 00       	nop
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8c:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_SendString>
    1b90:	88 23       	and	r24, r24
    1b92:	d1 f7       	brne	.-12     	; 0x1b88 <DISPLAY_ShiftAndDisplay+0x9c>
			while(LCD_SendCommand(0x80|(Position-1)) != OperationSuccess);
    1b94:	00 00       	nop
    1b96:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Position>
    1b9a:	81 50       	subi	r24, 0x01	; 1
    1b9c:	80 68       	ori	r24, 0x80	; 128
    1b9e:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
    1ba2:	88 23       	and	r24, r24
    1ba4:	c1 f7       	brne	.-16     	; 0x1b96 <DISPLAY_ShiftAndDisplay+0xaa>
			while(LCD_SendData(' ')!= OperationSuccess);
    1ba6:	00 00       	nop
    1ba8:	80 e2       	ldi	r24, 0x20	; 32
    1baa:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_SendData>
    1bae:	88 23       	and	r24, r24
    1bb0:	d9 f7       	brne	.-10     	; 0x1ba8 <DISPLAY_ShiftAndDisplay+0xbc>
			if (Position == 16-StringLength)
    1bb2:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Position>
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	40 e1       	ldi	r20, 0x10	; 16
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	ba 01       	movw	r22, r20
    1bc6:	68 1b       	sub	r22, r24
    1bc8:	79 0b       	sbc	r23, r25
    1bca:	cb 01       	movw	r24, r22
    1bcc:	28 17       	cp	r18, r24
    1bce:	39 07       	cpc	r19, r25
    1bd0:	19 f4       	brne	.+6      	; 0x1bd8 <DISPLAY_ShiftAndDisplay+0xec>
			{
				 State = ShiftingLeft;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1737>
			}
			Position++;
    1bd8:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Position>
    1bdc:	8f 5f       	subi	r24, 0xFF	; 255
    1bde:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <Position>
			break;
    1be2:	22 c0       	rjmp	.+68     	; 0x1c28 <DISPLAY_ShiftAndDisplay+0x13c>
		case ShiftingLeft:
			Position--;
    1be4:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Position>
    1be8:	81 50       	subi	r24, 0x01	; 1
    1bea:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <Position>
			if (Position == 0)
    1bee:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Position>
    1bf2:	88 23       	and	r24, r24
    1bf4:	19 f4       	brne	.+6      	; 0x1bfc <DISPLAY_ShiftAndDisplay+0x110>
			{
				State = ShiftingRight;
    1bf6:	82 e0       	ldi	r24, 0x02	; 2
    1bf8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1737>
			}
			while(LCD_SendCommand(0x80|Position) != OperationSuccess);
    1bfc:	00 00       	nop
    1bfe:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Position>
    1c02:	80 68       	ori	r24, 0x80	; 128
    1c04:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
    1c08:	88 23       	and	r24, r24
    1c0a:	c9 f7       	brne	.-14     	; 0x1bfe <DISPLAY_ShiftAndDisplay+0x112>
			while(LCD_SendString(StringPTR) != OperationSuccess);
    1c0c:	00 00       	nop
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	9b 81       	ldd	r25, Y+3	; 0x03
    1c12:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_SendString>
    1c16:	88 23       	and	r24, r24
    1c18:	d1 f7       	brne	.-12     	; 0x1c0e <DISPLAY_ShiftAndDisplay+0x122>
			while(LCD_SendData(' ')!= OperationSuccess);
    1c1a:	00 00       	nop
    1c1c:	80 e2       	ldi	r24, 0x20	; 32
    1c1e:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_SendData>
    1c22:	88 23       	and	r24, r24
    1c24:	d9 f7       	brne	.-10     	; 0x1c1c <DISPLAY_ShiftAndDisplay+0x130>
			break;
    1c26:	00 00       	nop
		default:
			break;
	}
}
    1c28:	00 00       	nop
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	08 95       	ret

00001c36 <main>:
		vTaskDelay(2);
	}
}*/

int main(void)
{
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	28 97       	sbiw	r28, 0x08	; 8
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
	//DIO_SetPinDirection(PORT_D,PIN0,PIN_OUTPUT);
	//EEPROM_Write('A',5);
	
	while(LCD_Init()!= OperationSuccess);
    1c4a:	00 00       	nop
    1c4c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <LCD_Init>
    1c50:	88 23       	and	r24, r24
    1c52:	e1 f7       	brne	.-8      	; 0x1c4c <main+0x16>
    //LCD_ReadDispLoc(1,&x);
	//EEPROM_write(5, 'A');
	//x=EEPROM_read(5);
	while (1) 
    {
		DISPLAY_ShiftAndDisplay(5,(uint8_t*)"AHMED");
    1c54:	64 e6       	ldi	r22, 0x64	; 100
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	85 e0       	ldi	r24, 0x05	; 5
    1c5a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <DISPLAY_ShiftAndDisplay>
		//if(x=='A')
		//DIO_WritePin(PORT_D,PIN0,PIN_HIGH);
		//LCD_SendCommand(0x1C);
		for(volatile uint32_t i = 0; i<100000;i++);
    1c5e:	19 82       	std	Y+1, r1	; 0x01
    1c60:	1a 82       	std	Y+2, r1	; 0x02
    1c62:	1b 82       	std	Y+3, r1	; 0x03
    1c64:	1c 82       	std	Y+4, r1	; 0x04
    1c66:	0b c0       	rjmp	.+22     	; 0x1c7e <main+0x48>
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6c:	ab 81       	ldd	r26, Y+3	; 0x03
    1c6e:	bc 81       	ldd	r27, Y+4	; 0x04
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	a1 1d       	adc	r26, r1
    1c74:	b1 1d       	adc	r27, r1
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	ab 83       	std	Y+3, r26	; 0x03
    1c7c:	bc 83       	std	Y+4, r27	; 0x04
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	ab 81       	ldd	r26, Y+3	; 0x03
    1c84:	bc 81       	ldd	r27, Y+4	; 0x04
    1c86:	80 3a       	cpi	r24, 0xA0	; 160
    1c88:	96 48       	sbci	r25, 0x86	; 134
    1c8a:	a1 40       	sbci	r26, 0x01	; 1
    1c8c:	b1 05       	cpc	r27, r1
    1c8e:	60 f3       	brcs	.-40     	; 0x1c68 <main+0x32>
		DISPLAY_ShiftAndDisplay(5,(uint8_t*)"ADEL");
    1c90:	6a e6       	ldi	r22, 0x6A	; 106
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	85 e0       	ldi	r24, 0x05	; 5
    1c96:	0e 94 76 0d 	call	0x1aec	; 0x1aec <DISPLAY_ShiftAndDisplay>
		for(volatile uint32_t i = 0; i<100000;i++);
    1c9a:	1d 82       	std	Y+5, r1	; 0x05
    1c9c:	1e 82       	std	Y+6, r1	; 0x06
    1c9e:	1f 82       	std	Y+7, r1	; 0x07
    1ca0:	18 86       	std	Y+8, r1	; 0x08
    1ca2:	0b c0       	rjmp	.+22     	; 0x1cba <main+0x84>
    1ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca8:	af 81       	ldd	r26, Y+7	; 0x07
    1caa:	b8 85       	ldd	r27, Y+8	; 0x08
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	a1 1d       	adc	r26, r1
    1cb0:	b1 1d       	adc	r27, r1
    1cb2:	8d 83       	std	Y+5, r24	; 0x05
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	af 83       	std	Y+7, r26	; 0x07
    1cb8:	b8 87       	std	Y+8, r27	; 0x08
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	af 81       	ldd	r26, Y+7	; 0x07
    1cc0:	b8 85       	ldd	r27, Y+8	; 0x08
    1cc2:	80 3a       	cpi	r24, 0xA0	; 160
    1cc4:	96 48       	sbci	r25, 0x86	; 134
    1cc6:	a1 40       	sbci	r26, 0x01	; 1
    1cc8:	b1 05       	cpc	r27, r1
    1cca:	60 f3       	brcs	.-40     	; 0x1ca4 <main+0x6e>
		//LCD_ReadDispLoc(LCD_CURS_Position0,&x);
		
    }
    1ccc:	c3 cf       	rjmp	.-122    	; 0x1c54 <main+0x1e>

00001cce <__cmpsf2>:
    1cce:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fp_cmp>
    1cd2:	08 f4       	brcc	.+2      	; 0x1cd6 <__cmpsf2+0x8>
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	08 95       	ret

00001cd8 <__divsf3>:
    1cd8:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__divsf3x>
    1cdc:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__fp_round>
    1ce0:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__fp_pscB>
    1ce4:	58 f0       	brcs	.+22     	; 0x1cfc <__divsf3+0x24>
    1ce6:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__fp_pscA>
    1cea:	40 f0       	brcs	.+16     	; 0x1cfc <__divsf3+0x24>
    1cec:	29 f4       	brne	.+10     	; 0x1cf8 <__divsf3+0x20>
    1cee:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf0:	29 f0       	breq	.+10     	; 0x1cfc <__divsf3+0x24>
    1cf2:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__fp_inf>
    1cf6:	51 11       	cpse	r21, r1
    1cf8:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__fp_szero>
    1cfc:	0c 94 74 0f 	jmp	0x1ee8	; 0x1ee8 <__fp_nan>

00001d00 <__divsf3x>:
    1d00:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__fp_split3>
    1d04:	68 f3       	brcs	.-38     	; 0x1ce0 <__divsf3+0x8>

00001d06 <__divsf3_pse>:
    1d06:	99 23       	and	r25, r25
    1d08:	b1 f3       	breq	.-20     	; 0x1cf6 <__divsf3+0x1e>
    1d0a:	55 23       	and	r21, r21
    1d0c:	91 f3       	breq	.-28     	; 0x1cf2 <__divsf3+0x1a>
    1d0e:	95 1b       	sub	r25, r21
    1d10:	55 0b       	sbc	r21, r21
    1d12:	bb 27       	eor	r27, r27
    1d14:	aa 27       	eor	r26, r26
    1d16:	62 17       	cp	r22, r18
    1d18:	73 07       	cpc	r23, r19
    1d1a:	84 07       	cpc	r24, r20
    1d1c:	38 f0       	brcs	.+14     	; 0x1d2c <__divsf3_pse+0x26>
    1d1e:	9f 5f       	subi	r25, 0xFF	; 255
    1d20:	5f 4f       	sbci	r21, 0xFF	; 255
    1d22:	22 0f       	add	r18, r18
    1d24:	33 1f       	adc	r19, r19
    1d26:	44 1f       	adc	r20, r20
    1d28:	aa 1f       	adc	r26, r26
    1d2a:	a9 f3       	breq	.-22     	; 0x1d16 <__divsf3_pse+0x10>
    1d2c:	35 d0       	rcall	.+106    	; 0x1d98 <__divsf3_pse+0x92>
    1d2e:	0e 2e       	mov	r0, r30
    1d30:	3a f0       	brmi	.+14     	; 0x1d40 <__divsf3_pse+0x3a>
    1d32:	e0 e8       	ldi	r30, 0x80	; 128
    1d34:	32 d0       	rcall	.+100    	; 0x1d9a <__divsf3_pse+0x94>
    1d36:	91 50       	subi	r25, 0x01	; 1
    1d38:	50 40       	sbci	r21, 0x00	; 0
    1d3a:	e6 95       	lsr	r30
    1d3c:	00 1c       	adc	r0, r0
    1d3e:	ca f7       	brpl	.-14     	; 0x1d32 <__divsf3_pse+0x2c>
    1d40:	2b d0       	rcall	.+86     	; 0x1d98 <__divsf3_pse+0x92>
    1d42:	fe 2f       	mov	r31, r30
    1d44:	29 d0       	rcall	.+82     	; 0x1d98 <__divsf3_pse+0x92>
    1d46:	66 0f       	add	r22, r22
    1d48:	77 1f       	adc	r23, r23
    1d4a:	88 1f       	adc	r24, r24
    1d4c:	bb 1f       	adc	r27, r27
    1d4e:	26 17       	cp	r18, r22
    1d50:	37 07       	cpc	r19, r23
    1d52:	48 07       	cpc	r20, r24
    1d54:	ab 07       	cpc	r26, r27
    1d56:	b0 e8       	ldi	r27, 0x80	; 128
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <__divsf3_pse+0x56>
    1d5a:	bb 0b       	sbc	r27, r27
    1d5c:	80 2d       	mov	r24, r0
    1d5e:	bf 01       	movw	r22, r30
    1d60:	ff 27       	eor	r31, r31
    1d62:	93 58       	subi	r25, 0x83	; 131
    1d64:	5f 4f       	sbci	r21, 0xFF	; 255
    1d66:	3a f0       	brmi	.+14     	; 0x1d76 <__divsf3_pse+0x70>
    1d68:	9e 3f       	cpi	r25, 0xFE	; 254
    1d6a:	51 05       	cpc	r21, r1
    1d6c:	78 f0       	brcs	.+30     	; 0x1d8c <__divsf3_pse+0x86>
    1d6e:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__fp_inf>
    1d72:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__fp_szero>
    1d76:	5f 3f       	cpi	r21, 0xFF	; 255
    1d78:	e4 f3       	brlt	.-8      	; 0x1d72 <__divsf3_pse+0x6c>
    1d7a:	98 3e       	cpi	r25, 0xE8	; 232
    1d7c:	d4 f3       	brlt	.-12     	; 0x1d72 <__divsf3_pse+0x6c>
    1d7e:	86 95       	lsr	r24
    1d80:	77 95       	ror	r23
    1d82:	67 95       	ror	r22
    1d84:	b7 95       	ror	r27
    1d86:	f7 95       	ror	r31
    1d88:	9f 5f       	subi	r25, 0xFF	; 255
    1d8a:	c9 f7       	brne	.-14     	; 0x1d7e <__divsf3_pse+0x78>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	91 1d       	adc	r25, r1
    1d90:	96 95       	lsr	r25
    1d92:	87 95       	ror	r24
    1d94:	97 f9       	bld	r25, 7
    1d96:	08 95       	ret
    1d98:	e1 e0       	ldi	r30, 0x01	; 1
    1d9a:	66 0f       	add	r22, r22
    1d9c:	77 1f       	adc	r23, r23
    1d9e:	88 1f       	adc	r24, r24
    1da0:	bb 1f       	adc	r27, r27
    1da2:	62 17       	cp	r22, r18
    1da4:	73 07       	cpc	r23, r19
    1da6:	84 07       	cpc	r24, r20
    1da8:	ba 07       	cpc	r27, r26
    1daa:	20 f0       	brcs	.+8      	; 0x1db4 <__divsf3_pse+0xae>
    1dac:	62 1b       	sub	r22, r18
    1dae:	73 0b       	sbc	r23, r19
    1db0:	84 0b       	sbc	r24, r20
    1db2:	ba 0b       	sbc	r27, r26
    1db4:	ee 1f       	adc	r30, r30
    1db6:	88 f7       	brcc	.-30     	; 0x1d9a <__divsf3_pse+0x94>
    1db8:	e0 95       	com	r30
    1dba:	08 95       	ret

00001dbc <__fixunssfsi>:
    1dbc:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__fp_splitA>
    1dc0:	88 f0       	brcs	.+34     	; 0x1de4 <__fixunssfsi+0x28>
    1dc2:	9f 57       	subi	r25, 0x7F	; 127
    1dc4:	98 f0       	brcs	.+38     	; 0x1dec <__fixunssfsi+0x30>
    1dc6:	b9 2f       	mov	r27, r25
    1dc8:	99 27       	eor	r25, r25
    1dca:	b7 51       	subi	r27, 0x17	; 23
    1dcc:	b0 f0       	brcs	.+44     	; 0x1dfa <__fixunssfsi+0x3e>
    1dce:	e1 f0       	breq	.+56     	; 0x1e08 <__fixunssfsi+0x4c>
    1dd0:	66 0f       	add	r22, r22
    1dd2:	77 1f       	adc	r23, r23
    1dd4:	88 1f       	adc	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	1a f0       	brmi	.+6      	; 0x1de0 <__fixunssfsi+0x24>
    1dda:	ba 95       	dec	r27
    1ddc:	c9 f7       	brne	.-14     	; 0x1dd0 <__fixunssfsi+0x14>
    1dde:	14 c0       	rjmp	.+40     	; 0x1e08 <__fixunssfsi+0x4c>
    1de0:	b1 30       	cpi	r27, 0x01	; 1
    1de2:	91 f0       	breq	.+36     	; 0x1e08 <__fixunssfsi+0x4c>
    1de4:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__fp_zero>
    1de8:	b1 e0       	ldi	r27, 0x01	; 1
    1dea:	08 95       	ret
    1dec:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_zero>
    1df0:	67 2f       	mov	r22, r23
    1df2:	78 2f       	mov	r23, r24
    1df4:	88 27       	eor	r24, r24
    1df6:	b8 5f       	subi	r27, 0xF8	; 248
    1df8:	39 f0       	breq	.+14     	; 0x1e08 <__fixunssfsi+0x4c>
    1dfa:	b9 3f       	cpi	r27, 0xF9	; 249
    1dfc:	cc f3       	brlt	.-14     	; 0x1df0 <__fixunssfsi+0x34>
    1dfe:	86 95       	lsr	r24
    1e00:	77 95       	ror	r23
    1e02:	67 95       	ror	r22
    1e04:	b3 95       	inc	r27
    1e06:	d9 f7       	brne	.-10     	; 0x1dfe <__fixunssfsi+0x42>
    1e08:	3e f4       	brtc	.+14     	; 0x1e18 <__fixunssfsi+0x5c>
    1e0a:	90 95       	com	r25
    1e0c:	80 95       	com	r24
    1e0e:	70 95       	com	r23
    1e10:	61 95       	neg	r22
    1e12:	7f 4f       	sbci	r23, 0xFF	; 255
    1e14:	8f 4f       	sbci	r24, 0xFF	; 255
    1e16:	9f 4f       	sbci	r25, 0xFF	; 255
    1e18:	08 95       	ret

00001e1a <__floatunsisf>:
    1e1a:	e8 94       	clt
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <__floatsisf+0x12>

00001e1e <__floatsisf>:
    1e1e:	97 fb       	bst	r25, 7
    1e20:	3e f4       	brtc	.+14     	; 0x1e30 <__floatsisf+0x12>
    1e22:	90 95       	com	r25
    1e24:	80 95       	com	r24
    1e26:	70 95       	com	r23
    1e28:	61 95       	neg	r22
    1e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e30:	99 23       	and	r25, r25
    1e32:	a9 f0       	breq	.+42     	; 0x1e5e <__floatsisf+0x40>
    1e34:	f9 2f       	mov	r31, r25
    1e36:	96 e9       	ldi	r25, 0x96	; 150
    1e38:	bb 27       	eor	r27, r27
    1e3a:	93 95       	inc	r25
    1e3c:	f6 95       	lsr	r31
    1e3e:	87 95       	ror	r24
    1e40:	77 95       	ror	r23
    1e42:	67 95       	ror	r22
    1e44:	b7 95       	ror	r27
    1e46:	f1 11       	cpse	r31, r1
    1e48:	f8 cf       	rjmp	.-16     	; 0x1e3a <__floatsisf+0x1c>
    1e4a:	fa f4       	brpl	.+62     	; 0x1e8a <__floatsisf+0x6c>
    1e4c:	bb 0f       	add	r27, r27
    1e4e:	11 f4       	brne	.+4      	; 0x1e54 <__floatsisf+0x36>
    1e50:	60 ff       	sbrs	r22, 0
    1e52:	1b c0       	rjmp	.+54     	; 0x1e8a <__floatsisf+0x6c>
    1e54:	6f 5f       	subi	r22, 0xFF	; 255
    1e56:	7f 4f       	sbci	r23, 0xFF	; 255
    1e58:	8f 4f       	sbci	r24, 0xFF	; 255
    1e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5c:	16 c0       	rjmp	.+44     	; 0x1e8a <__floatsisf+0x6c>
    1e5e:	88 23       	and	r24, r24
    1e60:	11 f0       	breq	.+4      	; 0x1e66 <__floatsisf+0x48>
    1e62:	96 e9       	ldi	r25, 0x96	; 150
    1e64:	11 c0       	rjmp	.+34     	; 0x1e88 <__floatsisf+0x6a>
    1e66:	77 23       	and	r23, r23
    1e68:	21 f0       	breq	.+8      	; 0x1e72 <__floatsisf+0x54>
    1e6a:	9e e8       	ldi	r25, 0x8E	; 142
    1e6c:	87 2f       	mov	r24, r23
    1e6e:	76 2f       	mov	r23, r22
    1e70:	05 c0       	rjmp	.+10     	; 0x1e7c <__floatsisf+0x5e>
    1e72:	66 23       	and	r22, r22
    1e74:	71 f0       	breq	.+28     	; 0x1e92 <__floatsisf+0x74>
    1e76:	96 e8       	ldi	r25, 0x86	; 134
    1e78:	86 2f       	mov	r24, r22
    1e7a:	70 e0       	ldi	r23, 0x00	; 0
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	2a f0       	brmi	.+10     	; 0x1e8a <__floatsisf+0x6c>
    1e80:	9a 95       	dec	r25
    1e82:	66 0f       	add	r22, r22
    1e84:	77 1f       	adc	r23, r23
    1e86:	88 1f       	adc	r24, r24
    1e88:	da f7       	brpl	.-10     	; 0x1e80 <__floatsisf+0x62>
    1e8a:	88 0f       	add	r24, r24
    1e8c:	96 95       	lsr	r25
    1e8e:	87 95       	ror	r24
    1e90:	97 f9       	bld	r25, 7
    1e92:	08 95       	ret

00001e94 <__fp_cmp>:
    1e94:	99 0f       	add	r25, r25
    1e96:	00 08       	sbc	r0, r0
    1e98:	55 0f       	add	r21, r21
    1e9a:	aa 0b       	sbc	r26, r26
    1e9c:	e0 e8       	ldi	r30, 0x80	; 128
    1e9e:	fe ef       	ldi	r31, 0xFE	; 254
    1ea0:	16 16       	cp	r1, r22
    1ea2:	17 06       	cpc	r1, r23
    1ea4:	e8 07       	cpc	r30, r24
    1ea6:	f9 07       	cpc	r31, r25
    1ea8:	c0 f0       	brcs	.+48     	; 0x1eda <__fp_cmp+0x46>
    1eaa:	12 16       	cp	r1, r18
    1eac:	13 06       	cpc	r1, r19
    1eae:	e4 07       	cpc	r30, r20
    1eb0:	f5 07       	cpc	r31, r21
    1eb2:	98 f0       	brcs	.+38     	; 0x1eda <__fp_cmp+0x46>
    1eb4:	62 1b       	sub	r22, r18
    1eb6:	73 0b       	sbc	r23, r19
    1eb8:	84 0b       	sbc	r24, r20
    1eba:	95 0b       	sbc	r25, r21
    1ebc:	39 f4       	brne	.+14     	; 0x1ecc <__fp_cmp+0x38>
    1ebe:	0a 26       	eor	r0, r26
    1ec0:	61 f0       	breq	.+24     	; 0x1eda <__fp_cmp+0x46>
    1ec2:	23 2b       	or	r18, r19
    1ec4:	24 2b       	or	r18, r20
    1ec6:	25 2b       	or	r18, r21
    1ec8:	21 f4       	brne	.+8      	; 0x1ed2 <__fp_cmp+0x3e>
    1eca:	08 95       	ret
    1ecc:	0a 26       	eor	r0, r26
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <__fp_cmp+0x3e>
    1ed0:	a1 40       	sbci	r26, 0x01	; 1
    1ed2:	a6 95       	lsr	r26
    1ed4:	8f ef       	ldi	r24, 0xFF	; 255
    1ed6:	81 1d       	adc	r24, r1
    1ed8:	81 1d       	adc	r24, r1
    1eda:	08 95       	ret

00001edc <__fp_inf>:
    1edc:	97 f9       	bld	r25, 7
    1ede:	9f 67       	ori	r25, 0x7F	; 127
    1ee0:	80 e8       	ldi	r24, 0x80	; 128
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	08 95       	ret

00001ee8 <__fp_nan>:
    1ee8:	9f ef       	ldi	r25, 0xFF	; 255
    1eea:	80 ec       	ldi	r24, 0xC0	; 192
    1eec:	08 95       	ret

00001eee <__fp_pscA>:
    1eee:	00 24       	eor	r0, r0
    1ef0:	0a 94       	dec	r0
    1ef2:	16 16       	cp	r1, r22
    1ef4:	17 06       	cpc	r1, r23
    1ef6:	18 06       	cpc	r1, r24
    1ef8:	09 06       	cpc	r0, r25
    1efa:	08 95       	ret

00001efc <__fp_pscB>:
    1efc:	00 24       	eor	r0, r0
    1efe:	0a 94       	dec	r0
    1f00:	12 16       	cp	r1, r18
    1f02:	13 06       	cpc	r1, r19
    1f04:	14 06       	cpc	r1, r20
    1f06:	05 06       	cpc	r0, r21
    1f08:	08 95       	ret

00001f0a <__fp_round>:
    1f0a:	09 2e       	mov	r0, r25
    1f0c:	03 94       	inc	r0
    1f0e:	00 0c       	add	r0, r0
    1f10:	11 f4       	brne	.+4      	; 0x1f16 <__fp_round+0xc>
    1f12:	88 23       	and	r24, r24
    1f14:	52 f0       	brmi	.+20     	; 0x1f2a <__fp_round+0x20>
    1f16:	bb 0f       	add	r27, r27
    1f18:	40 f4       	brcc	.+16     	; 0x1f2a <__fp_round+0x20>
    1f1a:	bf 2b       	or	r27, r31
    1f1c:	11 f4       	brne	.+4      	; 0x1f22 <__fp_round+0x18>
    1f1e:	60 ff       	sbrs	r22, 0
    1f20:	04 c0       	rjmp	.+8      	; 0x1f2a <__fp_round+0x20>
    1f22:	6f 5f       	subi	r22, 0xFF	; 255
    1f24:	7f 4f       	sbci	r23, 0xFF	; 255
    1f26:	8f 4f       	sbci	r24, 0xFF	; 255
    1f28:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2a:	08 95       	ret

00001f2c <__fp_split3>:
    1f2c:	57 fd       	sbrc	r21, 7
    1f2e:	90 58       	subi	r25, 0x80	; 128
    1f30:	44 0f       	add	r20, r20
    1f32:	55 1f       	adc	r21, r21
    1f34:	59 f0       	breq	.+22     	; 0x1f4c <__fp_splitA+0x10>
    1f36:	5f 3f       	cpi	r21, 0xFF	; 255
    1f38:	71 f0       	breq	.+28     	; 0x1f56 <__fp_splitA+0x1a>
    1f3a:	47 95       	ror	r20

00001f3c <__fp_splitA>:
    1f3c:	88 0f       	add	r24, r24
    1f3e:	97 fb       	bst	r25, 7
    1f40:	99 1f       	adc	r25, r25
    1f42:	61 f0       	breq	.+24     	; 0x1f5c <__fp_splitA+0x20>
    1f44:	9f 3f       	cpi	r25, 0xFF	; 255
    1f46:	79 f0       	breq	.+30     	; 0x1f66 <__fp_splitA+0x2a>
    1f48:	87 95       	ror	r24
    1f4a:	08 95       	ret
    1f4c:	12 16       	cp	r1, r18
    1f4e:	13 06       	cpc	r1, r19
    1f50:	14 06       	cpc	r1, r20
    1f52:	55 1f       	adc	r21, r21
    1f54:	f2 cf       	rjmp	.-28     	; 0x1f3a <__fp_split3+0xe>
    1f56:	46 95       	lsr	r20
    1f58:	f1 df       	rcall	.-30     	; 0x1f3c <__fp_splitA>
    1f5a:	08 c0       	rjmp	.+16     	; 0x1f6c <__fp_splitA+0x30>
    1f5c:	16 16       	cp	r1, r22
    1f5e:	17 06       	cpc	r1, r23
    1f60:	18 06       	cpc	r1, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	f1 cf       	rjmp	.-30     	; 0x1f48 <__fp_splitA+0xc>
    1f66:	86 95       	lsr	r24
    1f68:	71 05       	cpc	r23, r1
    1f6a:	61 05       	cpc	r22, r1
    1f6c:	08 94       	sec
    1f6e:	08 95       	ret

00001f70 <__fp_zero>:
    1f70:	e8 94       	clt

00001f72 <__fp_szero>:
    1f72:	bb 27       	eor	r27, r27
    1f74:	66 27       	eor	r22, r22
    1f76:	77 27       	eor	r23, r23
    1f78:	cb 01       	movw	r24, r22
    1f7a:	97 f9       	bld	r25, 7
    1f7c:	08 95       	ret

00001f7e <__tablejump2__>:
    1f7e:	ee 0f       	add	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	05 90       	lpm	r0, Z+
    1f84:	f4 91       	lpm	r31, Z
    1f86:	e0 2d       	mov	r30, r0
    1f88:	09 94       	ijmp

00001f8a <__muluhisi3>:
    1f8a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__umulhisi3>
    1f8e:	a5 9f       	mul	r26, r21
    1f90:	90 0d       	add	r25, r0
    1f92:	b4 9f       	mul	r27, r20
    1f94:	90 0d       	add	r25, r0
    1f96:	a4 9f       	mul	r26, r20
    1f98:	80 0d       	add	r24, r0
    1f9a:	91 1d       	adc	r25, r1
    1f9c:	11 24       	eor	r1, r1
    1f9e:	08 95       	ret

00001fa0 <__umulhisi3>:
    1fa0:	a2 9f       	mul	r26, r18
    1fa2:	b0 01       	movw	r22, r0
    1fa4:	b3 9f       	mul	r27, r19
    1fa6:	c0 01       	movw	r24, r0
    1fa8:	a3 9f       	mul	r26, r19
    1faa:	70 0d       	add	r23, r0
    1fac:	81 1d       	adc	r24, r1
    1fae:	11 24       	eor	r1, r1
    1fb0:	91 1d       	adc	r25, r1
    1fb2:	b2 9f       	mul	r27, r18
    1fb4:	70 0d       	add	r23, r0
    1fb6:	81 1d       	adc	r24, r1
    1fb8:	11 24       	eor	r1, r1
    1fba:	91 1d       	adc	r25, r1
    1fbc:	08 95       	ret

00001fbe <_exit>:
    1fbe:	f8 94       	cli

00001fc0 <__stop_program>:
    1fc0:	ff cf       	rjmp	.-2      	; 0x1fc0 <__stop_program>
