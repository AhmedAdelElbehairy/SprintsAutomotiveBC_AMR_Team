
MCU_To_MCU_Bluetooth_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  00001172  00001206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  00800160  00800160  00001306  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001306  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002829  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0c  00000000  00000000  00003dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bb1  00000000  00000000  000048d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000740  00000000  00000000  0000648c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001050  00000000  00000000  00006bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027c4  00000000  00000000  00007c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 36       	cpi	r26, 0x60	; 96
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e6       	ldi	r26, 0x60	; 96
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8b 08 	call	0x1116	; 0x1116 <main>
      8a:	0c 94 b7 08 	jmp	0x116e	; 0x116e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
      92:	0f 92       	push	r0
      94:	0f b6       	in	r0, 0x3f	; 63
      96:	f8 94       	cli
      98:	0f 92       	push	r0
      9a:	1f 92       	push	r1
      9c:	11 24       	eor	r1, r1
      9e:	2f 92       	push	r2
      a0:	3f 92       	push	r3
      a2:	4f 92       	push	r4
      a4:	5f 92       	push	r5
      a6:	6f 92       	push	r6
      a8:	7f 92       	push	r7
      aa:	8f 92       	push	r8
      ac:	9f 92       	push	r9
      ae:	af 92       	push	r10
      b0:	bf 92       	push	r11
      b2:	cf 92       	push	r12
      b4:	df 92       	push	r13
      b6:	ef 92       	push	r14
      b8:	ff 92       	push	r15
      ba:	0f 93       	push	r16
      bc:	1f 93       	push	r17
      be:	2f 93       	push	r18
      c0:	3f 93       	push	r19
      c2:	4f 93       	push	r20
      c4:	5f 93       	push	r21
      c6:	6f 93       	push	r22
      c8:	7f 93       	push	r23
      ca:	8f 93       	push	r24
      cc:	9f 93       	push	r25
      ce:	af 93       	push	r26
      d0:	bf 93       	push	r27
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	ef 93       	push	r30
      d8:	ff 93       	push	r31
      da:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <pxCurrentTCB>
      de:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <pxCurrentTCB+0x1>
      e2:	0d b6       	in	r0, 0x3d	; 61
      e4:	0d 92       	st	X+, r0
      e6:	0e b6       	in	r0, 0x3e	; 62
      e8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
      ea:	0e 94 c4 00 	call	0x188	; 0x188 <xTaskIncrementTick>
      ee:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
      f0:	0e 94 de 01 	call	0x3bc	; 0x3bc <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
      f4:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <pxCurrentTCB>
      f8:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <pxCurrentTCB+0x1>
      fc:	cd 91       	ld	r28, X+
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	dd 91       	ld	r29, X+
     102:	de bf       	out	0x3e, r29	; 62
     104:	ff 91       	pop	r31
     106:	ef 91       	pop	r30
     108:	df 91       	pop	r29
     10a:	cf 91       	pop	r28
     10c:	bf 91       	pop	r27
     10e:	af 91       	pop	r26
     110:	9f 91       	pop	r25
     112:	8f 91       	pop	r24
     114:	7f 91       	pop	r23
     116:	6f 91       	pop	r22
     118:	5f 91       	pop	r21
     11a:	4f 91       	pop	r20
     11c:	3f 91       	pop	r19
     11e:	2f 91       	pop	r18
     120:	1f 91       	pop	r17
     122:	0f 91       	pop	r16
     124:	ff 90       	pop	r15
     126:	ef 90       	pop	r14
     128:	df 90       	pop	r13
     12a:	cf 90       	pop	r12
     12c:	bf 90       	pop	r11
     12e:	af 90       	pop	r10
     130:	9f 90       	pop	r9
     132:	8f 90       	pop	r8
     134:	7f 90       	pop	r7
     136:	6f 90       	pop	r6
     138:	5f 90       	pop	r5
     13a:	4f 90       	pop	r4
     13c:	3f 90       	pop	r3
     13e:	2f 90       	pop	r2
     140:	1f 90       	pop	r1
     142:	0f 90       	pop	r0
     144:	0f be       	out	0x3f, r0	; 63
     146:	0f 90       	pop	r0

	asm volatile ( "ret" );
     148:	08 95       	ret

0000014a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     14a:	0e 94 49 00 	call	0x92	; 0x92 <vPortYieldFromTick>
		asm volatile ( "reti" );
     14e:	18 95       	reti

00000150 <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     150:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <pxDelayedTaskList>
     154:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
     158:	80 81       	ld	r24, Z
     15a:	81 11       	cpse	r24, r1
     15c:	07 c0       	rjmp	.+14     	; 0x16c <prvResetNextTaskUnblockTime+0x1c>
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	9f ef       	ldi	r25, 0xFF	; 255
     162:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <xNextTaskUnblockTime+0x1>
     166:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <xNextTaskUnblockTime>
     16a:	08 95       	ret
     16c:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <pxDelayedTaskList>
     170:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
     174:	05 80       	ldd	r0, Z+5	; 0x05
     176:	f6 81       	ldd	r31, Z+6	; 0x06
     178:	e0 2d       	mov	r30, r0
     17a:	80 81       	ld	r24, Z
     17c:	91 81       	ldd	r25, Z+1	; 0x01
     17e:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <xNextTaskUnblockTime+0x1>
     182:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <xNextTaskUnblockTime>
     186:	08 95       	ret

00000188 <xTaskIncrementTick>:
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
     194:	81 11       	cpse	r24, r1
     196:	01 c1       	rjmp	.+514    	; 0x39a <xTaskIncrementTick+0x212>
     198:	c0 91 68 01 	lds	r28, 0x0168	; 0x800168 <xTickCount>
     19c:	d0 91 69 01 	lds	r29, 0x0169	; 0x800169 <xTickCount+0x1>
     1a0:	8e 01       	movw	r16, r28
     1a2:	0f 5f       	subi	r16, 0xFF	; 255
     1a4:	1f 4f       	sbci	r17, 0xFF	; 255
     1a6:	10 93 69 01 	sts	0x0169, r17	; 0x800169 <xTickCount+0x1>
     1aa:	00 93 68 01 	sts	0x0168, r16	; 0x800168 <xTickCount>
     1ae:	01 15       	cp	r16, r1
     1b0:	11 05       	cpc	r17, r1
     1b2:	b9 f4       	brne	.+46     	; 0x1e2 <xTaskIncrementTick+0x5a>
     1b4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <pxDelayedTaskList>
     1b8:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
     1bc:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <pxOverflowDelayedTaskList>
     1c0:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <pxOverflowDelayedTaskList+0x1>
     1c4:	30 93 6d 01 	sts	0x016D, r19	; 0x80016d <pxDelayedTaskList+0x1>
     1c8:	20 93 6c 01 	sts	0x016C, r18	; 0x80016c <pxDelayedTaskList>
     1cc:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <pxOverflowDelayedTaskList+0x1>
     1d0:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <pxOverflowDelayedTaskList>
     1d4:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <xNumOfOverflows>
     1d8:	8f 5f       	subi	r24, 0xFF	; 255
     1da:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <xNumOfOverflows>
     1de:	0e 94 a8 00 	call	0x150	; 0x150 <prvResetNextTaskUnblockTime>
     1e2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <xNextTaskUnblockTime>
     1e6:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <xNextTaskUnblockTime+0x1>
     1ea:	08 17       	cp	r16, r24
     1ec:	19 07       	cpc	r17, r25
     1ee:	20 f4       	brcc	.+8      	; 0x1f8 <xTaskIncrementTick+0x70>
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	b8 c0       	rjmp	.+368    	; 0x364 <xTaskIncrementTick+0x1dc>
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <xTaskIncrementTick+0x72>
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <pxDelayedTaskList>
     1fe:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
     202:	90 81       	ld	r25, Z
     204:	91 11       	cpse	r25, r1
     206:	07 c0       	rjmp	.+14     	; 0x216 <xTaskIncrementTick+0x8e>
     208:	2f ef       	ldi	r18, 0xFF	; 255
     20a:	3f ef       	ldi	r19, 0xFF	; 255
     20c:	30 93 62 01 	sts	0x0162, r19	; 0x800162 <xNextTaskUnblockTime+0x1>
     210:	20 93 61 01 	sts	0x0161, r18	; 0x800161 <xNextTaskUnblockTime>
     214:	a7 c0       	rjmp	.+334    	; 0x364 <xTaskIncrementTick+0x1dc>
     216:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <pxDelayedTaskList>
     21a:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
     21e:	05 80       	ldd	r0, Z+5	; 0x05
     220:	f6 81       	ldd	r31, Z+6	; 0x06
     222:	e0 2d       	mov	r30, r0
     224:	06 80       	ldd	r0, Z+6	; 0x06
     226:	f7 81       	ldd	r31, Z+7	; 0x07
     228:	e0 2d       	mov	r30, r0
     22a:	22 81       	ldd	r18, Z+2	; 0x02
     22c:	33 81       	ldd	r19, Z+3	; 0x03
     22e:	02 17       	cp	r16, r18
     230:	13 07       	cpc	r17, r19
     232:	28 f4       	brcc	.+10     	; 0x23e <xTaskIncrementTick+0xb6>
     234:	30 93 62 01 	sts	0x0162, r19	; 0x800162 <xNextTaskUnblockTime+0x1>
     238:	20 93 61 01 	sts	0x0161, r18	; 0x800161 <xNextTaskUnblockTime>
     23c:	93 c0       	rjmp	.+294    	; 0x364 <xTaskIncrementTick+0x1dc>
     23e:	a2 85       	ldd	r26, Z+10	; 0x0a
     240:	b3 85       	ldd	r27, Z+11	; 0x0b
     242:	24 81       	ldd	r18, Z+4	; 0x04
     244:	35 81       	ldd	r19, Z+5	; 0x05
     246:	46 81       	ldd	r20, Z+6	; 0x06
     248:	57 81       	ldd	r21, Z+7	; 0x07
     24a:	e9 01       	movw	r28, r18
     24c:	5d 83       	std	Y+5, r21	; 0x05
     24e:	4c 83       	std	Y+4, r20	; 0x04
     250:	26 81       	ldd	r18, Z+6	; 0x06
     252:	37 81       	ldd	r19, Z+7	; 0x07
     254:	44 81       	ldd	r20, Z+4	; 0x04
     256:	55 81       	ldd	r21, Z+5	; 0x05
     258:	e9 01       	movw	r28, r18
     25a:	5b 83       	std	Y+3, r21	; 0x03
     25c:	4a 83       	std	Y+2, r20	; 0x02
     25e:	11 96       	adiw	r26, 0x01	; 1
     260:	2d 91       	ld	r18, X+
     262:	3c 91       	ld	r19, X
     264:	12 97       	sbiw	r26, 0x02	; 2
     266:	af 01       	movw	r20, r30
     268:	4e 5f       	subi	r20, 0xFE	; 254
     26a:	5f 4f       	sbci	r21, 0xFF	; 255
     26c:	24 17       	cp	r18, r20
     26e:	35 07       	cpc	r19, r21
     270:	31 f4       	brne	.+12     	; 0x27e <xTaskIncrementTick+0xf6>
     272:	26 81       	ldd	r18, Z+6	; 0x06
     274:	37 81       	ldd	r19, Z+7	; 0x07
     276:	12 96       	adiw	r26, 0x02	; 2
     278:	3c 93       	st	X, r19
     27a:	2e 93       	st	-X, r18
     27c:	11 97       	sbiw	r26, 0x01	; 1
     27e:	13 86       	std	Z+11, r1	; 0x0b
     280:	12 86       	std	Z+10, r1	; 0x0a
     282:	9c 91       	ld	r25, X
     284:	91 50       	subi	r25, 0x01	; 1
     286:	9c 93       	st	X, r25
     288:	a4 89       	ldd	r26, Z+20	; 0x14
     28a:	b5 89       	ldd	r27, Z+21	; 0x15
     28c:	10 97       	sbiw	r26, 0x00	; 0
     28e:	19 f1       	breq	.+70     	; 0x2d6 <xTaskIncrementTick+0x14e>
     290:	26 85       	ldd	r18, Z+14	; 0x0e
     292:	37 85       	ldd	r19, Z+15	; 0x0f
     294:	60 89       	ldd	r22, Z+16	; 0x10
     296:	71 89       	ldd	r23, Z+17	; 0x11
     298:	e9 01       	movw	r28, r18
     29a:	7d 83       	std	Y+5, r23	; 0x05
     29c:	6c 83       	std	Y+4, r22	; 0x04
     29e:	20 89       	ldd	r18, Z+16	; 0x10
     2a0:	31 89       	ldd	r19, Z+17	; 0x11
     2a2:	66 85       	ldd	r22, Z+14	; 0x0e
     2a4:	77 85       	ldd	r23, Z+15	; 0x0f
     2a6:	e9 01       	movw	r28, r18
     2a8:	7b 83       	std	Y+3, r23	; 0x03
     2aa:	6a 83       	std	Y+2, r22	; 0x02
     2ac:	11 96       	adiw	r26, 0x01	; 1
     2ae:	6d 91       	ld	r22, X+
     2b0:	7c 91       	ld	r23, X
     2b2:	12 97       	sbiw	r26, 0x02	; 2
     2b4:	9f 01       	movw	r18, r30
     2b6:	24 5f       	subi	r18, 0xF4	; 244
     2b8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ba:	62 17       	cp	r22, r18
     2bc:	73 07       	cpc	r23, r19
     2be:	31 f4       	brne	.+12     	; 0x2cc <xTaskIncrementTick+0x144>
     2c0:	20 89       	ldd	r18, Z+16	; 0x10
     2c2:	31 89       	ldd	r19, Z+17	; 0x11
     2c4:	12 96       	adiw	r26, 0x02	; 2
     2c6:	3c 93       	st	X, r19
     2c8:	2e 93       	st	-X, r18
     2ca:	11 97       	sbiw	r26, 0x01	; 1
     2cc:	15 8a       	std	Z+21, r1	; 0x15
     2ce:	14 8a       	std	Z+20, r1	; 0x14
     2d0:	9c 91       	ld	r25, X
     2d2:	91 50       	subi	r25, 0x01	; 1
     2d4:	9c 93       	st	X, r25
     2d6:	26 89       	ldd	r18, Z+22	; 0x16
     2d8:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <uxTopReadyPriority>
     2dc:	92 17       	cp	r25, r18
     2de:	10 f4       	brcc	.+4      	; 0x2e4 <xTaskIncrementTick+0x15c>
     2e0:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <uxTopReadyPriority>
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	d9 01       	movw	r26, r18
     2e8:	aa 0f       	add	r26, r26
     2ea:	bb 1f       	adc	r27, r27
     2ec:	aa 0f       	add	r26, r26
     2ee:	bb 1f       	adc	r27, r27
     2f0:	aa 0f       	add	r26, r26
     2f2:	bb 1f       	adc	r27, r27
     2f4:	2a 0f       	add	r18, r26
     2f6:	3b 1f       	adc	r19, r27
     2f8:	d9 01       	movw	r26, r18
     2fa:	a2 59       	subi	r26, 0x92	; 146
     2fc:	be 4f       	sbci	r27, 0xFE	; 254
     2fe:	11 96       	adiw	r26, 0x01	; 1
     300:	0d 90       	ld	r0, X+
     302:	bc 91       	ld	r27, X
     304:	a0 2d       	mov	r26, r0
     306:	b5 83       	std	Z+5, r27	; 0x05
     308:	a4 83       	std	Z+4, r26	; 0x04
     30a:	14 96       	adiw	r26, 0x04	; 4
     30c:	2d 91       	ld	r18, X+
     30e:	3c 91       	ld	r19, X
     310:	15 97       	sbiw	r26, 0x05	; 5
     312:	37 83       	std	Z+7, r19	; 0x07
     314:	26 83       	std	Z+6, r18	; 0x06
     316:	14 96       	adiw	r26, 0x04	; 4
     318:	2d 91       	ld	r18, X+
     31a:	3c 91       	ld	r19, X
     31c:	15 97       	sbiw	r26, 0x05	; 5
     31e:	e9 01       	movw	r28, r18
     320:	5b 83       	std	Y+3, r21	; 0x03
     322:	4a 83       	std	Y+2, r20	; 0x02
     324:	15 96       	adiw	r26, 0x05	; 5
     326:	5c 93       	st	X, r21
     328:	4e 93       	st	-X, r20
     32a:	14 97       	sbiw	r26, 0x04	; 4
     32c:	a6 89       	ldd	r26, Z+22	; 0x16
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	9d 01       	movw	r18, r26
     332:	22 0f       	add	r18, r18
     334:	33 1f       	adc	r19, r19
     336:	22 0f       	add	r18, r18
     338:	33 1f       	adc	r19, r19
     33a:	22 0f       	add	r18, r18
     33c:	33 1f       	adc	r19, r19
     33e:	a2 0f       	add	r26, r18
     340:	b3 1f       	adc	r27, r19
     342:	a2 59       	subi	r26, 0x92	; 146
     344:	be 4f       	sbci	r27, 0xFE	; 254
     346:	b3 87       	std	Z+11, r27	; 0x0b
     348:	a2 87       	std	Z+10, r26	; 0x0a
     34a:	9c 91       	ld	r25, X
     34c:	9f 5f       	subi	r25, 0xFF	; 255
     34e:	9c 93       	st	X, r25
     350:	26 89       	ldd	r18, Z+22	; 0x16
     352:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <pxCurrentTCB>
     356:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <pxCurrentTCB+0x1>
     35a:	96 89       	ldd	r25, Z+22	; 0x16
     35c:	29 17       	cp	r18, r25
     35e:	08 f0       	brcs	.+2      	; 0x362 <xTaskIncrementTick+0x1da>
     360:	49 cf       	rjmp	.-366    	; 0x1f4 <xTaskIncrementTick+0x6c>
     362:	4b cf       	rjmp	.-362    	; 0x1fa <xTaskIncrementTick+0x72>
     364:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <pxCurrentTCB>
     368:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <pxCurrentTCB+0x1>
     36c:	26 89       	ldd	r18, Z+22	; 0x16
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	f9 01       	movw	r30, r18
     372:	ee 0f       	add	r30, r30
     374:	ff 1f       	adc	r31, r31
     376:	ee 0f       	add	r30, r30
     378:	ff 1f       	adc	r31, r31
     37a:	ee 0f       	add	r30, r30
     37c:	ff 1f       	adc	r31, r31
     37e:	2e 0f       	add	r18, r30
     380:	3f 1f       	adc	r19, r31
     382:	f9 01       	movw	r30, r18
     384:	e2 59       	subi	r30, 0x92	; 146
     386:	fe 4f       	sbci	r31, 0xFE	; 254
     388:	90 81       	ld	r25, Z
     38a:	92 30       	cpi	r25, 0x02	; 2
     38c:	08 f0       	brcs	.+2      	; 0x390 <xTaskIncrementTick+0x208>
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <xYieldPending>
     394:	91 11       	cpse	r25, r1
     396:	0c c0       	rjmp	.+24     	; 0x3b0 <xTaskIncrementTick+0x228>
     398:	0c c0       	rjmp	.+24     	; 0x3b2 <xTaskIncrementTick+0x22a>
     39a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <xPendedTicks>
     39e:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <xPendedTicks+0x1>
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <xPendedTicks+0x1>
     3a8:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <xPendedTicks>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <xTaskIncrementTick+0x22a>
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	08 95       	ret

000003bc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     3bc:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
     3c0:	88 23       	and	r24, r24
     3c2:	21 f0       	breq	.+8      	; 0x3cc <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <xYieldPending>
     3ca:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     3cc:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     3d0:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <uxTopReadyPriority>
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <vTaskSwitchContext+0x1c>
     3d6:	21 50       	subi	r18, 0x01	; 1
     3d8:	82 2f       	mov	r24, r18
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	fc 01       	movw	r30, r24
     3de:	ee 0f       	add	r30, r30
     3e0:	ff 1f       	adc	r31, r31
     3e2:	ee 0f       	add	r30, r30
     3e4:	ff 1f       	adc	r31, r31
     3e6:	ee 0f       	add	r30, r30
     3e8:	ff 1f       	adc	r31, r31
     3ea:	e8 0f       	add	r30, r24
     3ec:	f9 1f       	adc	r31, r25
     3ee:	e2 59       	subi	r30, 0x92	; 146
     3f0:	fe 4f       	sbci	r31, 0xFE	; 254
     3f2:	30 81       	ld	r19, Z
     3f4:	33 23       	and	r19, r19
     3f6:	79 f3       	breq	.-34     	; 0x3d6 <vTaskSwitchContext+0x1a>
     3f8:	ac 01       	movw	r20, r24
     3fa:	44 0f       	add	r20, r20
     3fc:	55 1f       	adc	r21, r21
     3fe:	44 0f       	add	r20, r20
     400:	55 1f       	adc	r21, r21
     402:	44 0f       	add	r20, r20
     404:	55 1f       	adc	r21, r21
     406:	48 0f       	add	r20, r24
     408:	59 1f       	adc	r21, r25
     40a:	df 01       	movw	r26, r30
     40c:	01 80       	ldd	r0, Z+1	; 0x01
     40e:	f2 81       	ldd	r31, Z+2	; 0x02
     410:	e0 2d       	mov	r30, r0
     412:	02 80       	ldd	r0, Z+2	; 0x02
     414:	f3 81       	ldd	r31, Z+3	; 0x03
     416:	e0 2d       	mov	r30, r0
     418:	12 96       	adiw	r26, 0x02	; 2
     41a:	fc 93       	st	X, r31
     41c:	ee 93       	st	-X, r30
     41e:	11 97       	sbiw	r26, 0x01	; 1
     420:	4f 58       	subi	r20, 0x8F	; 143
     422:	5e 4f       	sbci	r21, 0xFE	; 254
     424:	e4 17       	cp	r30, r20
     426:	f5 07       	cpc	r31, r21
     428:	29 f4       	brne	.+10     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     42a:	42 81       	ldd	r20, Z+2	; 0x02
     42c:	53 81       	ldd	r21, Z+3	; 0x03
     42e:	fd 01       	movw	r30, r26
     430:	52 83       	std	Z+2, r21	; 0x02
     432:	41 83       	std	Z+1, r20	; 0x01
     434:	fc 01       	movw	r30, r24
     436:	ee 0f       	add	r30, r30
     438:	ff 1f       	adc	r31, r31
     43a:	ee 0f       	add	r30, r30
     43c:	ff 1f       	adc	r31, r31
     43e:	ee 0f       	add	r30, r30
     440:	ff 1f       	adc	r31, r31
     442:	8e 0f       	add	r24, r30
     444:	9f 1f       	adc	r25, r31
     446:	fc 01       	movw	r30, r24
     448:	e2 59       	subi	r30, 0x92	; 146
     44a:	fe 4f       	sbci	r31, 0xFE	; 254
     44c:	01 80       	ldd	r0, Z+1	; 0x01
     44e:	f2 81       	ldd	r31, Z+2	; 0x02
     450:	e0 2d       	mov	r30, r0
     452:	86 81       	ldd	r24, Z+6	; 0x06
     454:	97 81       	ldd	r25, Z+7	; 0x07
     456:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <pxCurrentTCB+0x1>
     45a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <pxCurrentTCB>
     45e:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <uxTopReadyPriority>
     462:	08 95       	ret

00000464 <STR_Length>:
		}while(Number);
		*String = NULL_TERMINATOR;
	}
	STR_StringReverse(SringCpy);
	return 0;
}
     464:	fc 01       	movw	r30, r24
     466:	db 01       	movw	r26, r22
     468:	11 96       	adiw	r26, 0x01	; 1
     46a:	1c 92       	st	X, r1
     46c:	1e 92       	st	-X, r1
     46e:	09 c0       	rjmp	.+18     	; 0x482 <STR_Length+0x1e>
     470:	2d 91       	ld	r18, X+
     472:	3c 91       	ld	r19, X
     474:	11 97       	sbiw	r26, 0x01	; 1
     476:	2f 5f       	subi	r18, 0xFF	; 255
     478:	3f 4f       	sbci	r19, 0xFF	; 255
     47a:	11 96       	adiw	r26, 0x01	; 1
     47c:	3c 93       	st	X, r19
     47e:	2e 93       	st	-X, r18
     480:	31 96       	adiw	r30, 0x01	; 1
     482:	80 81       	ld	r24, Z
     484:	81 11       	cpse	r24, r1
     486:	f4 cf       	rjmp	.-24     	; 0x470 <STR_Length+0xc>
     488:	08 95       	ret

0000048a <CRC_16_Calc>:
https://rndtool.info/CRC-step-by-step-calculator/
https://www.lammertbies.nl/comm/info/crc-calculation
https://www.youtube.com/watch?v=izG7qT0EpBw
*/
uint8_t CRC_16_Calc (uint8_t* STRING, uint16_t* CalculatedCRC)
{
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	c7 50       	subi	r28, 0x07	; 7
     49c:	d1 40       	sbci	r29, 0x01	; 1
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	7c 01       	movw	r14, r24
     4aa:	8b 01       	movw	r16, r22
	/*change array of character to array of bits*/
	/*initialize the array of bits*/
	uint8_t volatile BitArr[255] = {0};
     4ac:	fe 01       	movw	r30, r28
     4ae:	31 96       	adiw	r30, 0x01	; 1
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	df 01       	movw	r26, r30
     4b4:	1d 92       	st	X+, r1
     4b6:	8a 95       	dec	r24
     4b8:	e9 f7       	brne	.-6      	; 0x4b4 <CRC_16_Calc+0x2a>
	/*flag used for breaking through outer loop*/
	uint8_t volatile Flag = 0;
     4ba:	c0 50       	subi	r28, 0x00	; 0
     4bc:	df 4f       	sbci	r29, 0xFF	; 255
     4be:	18 82       	st	Y, r1
     4c0:	c0 50       	subi	r28, 0x00	; 0
     4c2:	d1 40       	sbci	r29, 0x01	; 1
	const uint16_t polynomial = 0b1000000000000101;
	/*variable that holds the value to be XORED and SHIFTED*/
	uint16_t volatile Window_16_Element; 
	/*initialize the variable that holds the number of characters to which CRC is calculated*/
	/*number of characters in the inserted string*/
	uint16_t StrLength =0;
     4c4:	cd 5f       	subi	r28, 0xFD	; 253
     4c6:	de 4f       	sbci	r29, 0xFE	; 254
     4c8:	19 82       	std	Y+1, r1	; 0x01
     4ca:	18 82       	st	Y, r1
     4cc:	c3 50       	subi	r28, 0x03	; 3
     4ce:	d1 40       	sbci	r29, 0x01	; 1
	/*initialize the variable that holds the number of bits in the inserted string*/
	uint8_t volatile BitArr_Size = 0;
     4d0:	cb 5f       	subi	r28, 0xFB	; 251
     4d2:	de 4f       	sbci	r29, 0xFE	; 254
     4d4:	18 82       	st	Y, r1
     4d6:	c5 50       	subi	r28, 0x05	; 5
     4d8:	d1 40       	sbci	r29, 0x01	; 1
	/*using STR_Length() function to calculate Number of characters in the inserted String*/
	STR_Length(STRING, &StrLength);
     4da:	be 01       	movw	r22, r28
     4dc:	6d 5f       	subi	r22, 0xFD	; 253
     4de:	7e 4f       	sbci	r23, 0xFE	; 254
     4e0:	c7 01       	movw	r24, r14
     4e2:	0e 94 32 02 	call	0x464	; 0x464 <STR_Length>
	/*initializing the iterator for the array of bits of the inserted Character string*/
	uint8_t volatile iterator_of_BitArr = 0;
     4e6:	ca 5f       	subi	r28, 0xFA	; 250
     4e8:	de 4f       	sbci	r29, 0xFE	; 254
     4ea:	18 82       	st	Y, r1
     4ec:	c6 50       	subi	r28, 0x06	; 6
     4ee:	d1 40       	sbci	r29, 0x01	; 1
	/*initializing the iterator for the array of the inserted Characters in the string*/
	uint8_t volatile iterator_of_characters = 0;
     4f0:	c9 5f       	subi	r28, 0xF9	; 249
     4f2:	de 4f       	sbci	r29, 0xFE	; 254
     4f4:	18 82       	st	Y, r1
     4f6:	c7 50       	subi	r28, 0x07	; 7
     4f8:	d1 40       	sbci	r29, 0x01	; 1
	/*assigning the bits of the character in the passed string to the array of bits*/
	/*bits are arranged in the array the form of an extra long number"Index 0:MSB,..,..,..,. . .,Index N:LSB"*/
	for(iterator_of_characters = 0; iterator_of_characters < StrLength; iterator_of_characters++)
     4fa:	c9 5f       	subi	r28, 0xF9	; 249
     4fc:	de 4f       	sbci	r29, 0xFE	; 254
     4fe:	18 82       	st	Y, r1
     500:	c7 50       	subi	r28, 0x07	; 7
     502:	d1 40       	sbci	r29, 0x01	; 1
     504:	41 c1       	rjmp	.+642    	; 0x788 <CRC_16_Calc+0x2fe>
	{
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_7);
     506:	ca 5f       	subi	r28, 0xFA	; 250
     508:	de 4f       	sbci	r29, 0xFE	; 254
     50a:	98 81       	ld	r25, Y
     50c:	c6 50       	subi	r28, 0x06	; 6
     50e:	d1 40       	sbci	r29, 0x01	; 1
     510:	c9 5f       	subi	r28, 0xF9	; 249
     512:	de 4f       	sbci	r29, 0xFE	; 254
     514:	88 81       	ld	r24, Y
     516:	c7 50       	subi	r28, 0x07	; 7
     518:	d1 40       	sbci	r29, 0x01	; 1
     51a:	f7 01       	movw	r30, r14
     51c:	e8 0f       	add	r30, r24
     51e:	f1 1d       	adc	r31, r1
     520:	80 81       	ld	r24, Z
     522:	88 1f       	adc	r24, r24
     524:	88 27       	eor	r24, r24
     526:	88 1f       	adc	r24, r24
     528:	e1 e0       	ldi	r30, 0x01	; 1
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	ec 0f       	add	r30, r28
     52e:	fd 1f       	adc	r31, r29
     530:	e9 0f       	add	r30, r25
     532:	f1 1d       	adc	r31, r1
     534:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     536:	ca 5f       	subi	r28, 0xFA	; 250
     538:	de 4f       	sbci	r29, 0xFE	; 254
     53a:	88 81       	ld	r24, Y
     53c:	c6 50       	subi	r28, 0x06	; 6
     53e:	d1 40       	sbci	r29, 0x01	; 1
     540:	8f 5f       	subi	r24, 0xFF	; 255
     542:	ca 5f       	subi	r28, 0xFA	; 250
     544:	de 4f       	sbci	r29, 0xFE	; 254
     546:	88 83       	st	Y, r24
     548:	c6 50       	subi	r28, 0x06	; 6
     54a:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_6);
     54c:	ca 5f       	subi	r28, 0xFA	; 250
     54e:	de 4f       	sbci	r29, 0xFE	; 254
     550:	28 81       	ld	r18, Y
     552:	c6 50       	subi	r28, 0x06	; 6
     554:	d1 40       	sbci	r29, 0x01	; 1
     556:	c9 5f       	subi	r28, 0xF9	; 249
     558:	de 4f       	sbci	r29, 0xFE	; 254
     55a:	88 81       	ld	r24, Y
     55c:	c7 50       	subi	r28, 0x07	; 7
     55e:	d1 40       	sbci	r29, 0x01	; 1
     560:	f7 01       	movw	r30, r14
     562:	e8 0f       	add	r30, r24
     564:	f1 1d       	adc	r31, r1
     566:	80 81       	ld	r24, Z
     568:	80 74       	andi	r24, 0x40	; 64
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	08 2e       	mov	r0, r24
     56e:	89 2f       	mov	r24, r25
     570:	00 0c       	add	r0, r0
     572:	88 1f       	adc	r24, r24
     574:	99 0b       	sbc	r25, r25
     576:	00 0c       	add	r0, r0
     578:	88 1f       	adc	r24, r24
     57a:	99 1f       	adc	r25, r25
     57c:	e1 e0       	ldi	r30, 0x01	; 1
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	ec 0f       	add	r30, r28
     582:	fd 1f       	adc	r31, r29
     584:	e2 0f       	add	r30, r18
     586:	f1 1d       	adc	r31, r1
     588:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     58a:	ca 5f       	subi	r28, 0xFA	; 250
     58c:	de 4f       	sbci	r29, 0xFE	; 254
     58e:	88 81       	ld	r24, Y
     590:	c6 50       	subi	r28, 0x06	; 6
     592:	d1 40       	sbci	r29, 0x01	; 1
     594:	8f 5f       	subi	r24, 0xFF	; 255
     596:	ca 5f       	subi	r28, 0xFA	; 250
     598:	de 4f       	sbci	r29, 0xFE	; 254
     59a:	88 83       	st	Y, r24
     59c:	c6 50       	subi	r28, 0x06	; 6
     59e:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_5);
     5a0:	ca 5f       	subi	r28, 0xFA	; 250
     5a2:	de 4f       	sbci	r29, 0xFE	; 254
     5a4:	28 81       	ld	r18, Y
     5a6:	c6 50       	subi	r28, 0x06	; 6
     5a8:	d1 40       	sbci	r29, 0x01	; 1
     5aa:	c9 5f       	subi	r28, 0xF9	; 249
     5ac:	de 4f       	sbci	r29, 0xFE	; 254
     5ae:	88 81       	ld	r24, Y
     5b0:	c7 50       	subi	r28, 0x07	; 7
     5b2:	d1 40       	sbci	r29, 0x01	; 1
     5b4:	f7 01       	movw	r30, r14
     5b6:	e8 0f       	add	r30, r24
     5b8:	f1 1d       	adc	r31, r1
     5ba:	80 81       	ld	r24, Z
     5bc:	80 72       	andi	r24, 0x20	; 32
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	95 95       	asr	r25
     5c2:	87 95       	ror	r24
     5c4:	95 95       	asr	r25
     5c6:	87 95       	ror	r24
     5c8:	95 95       	asr	r25
     5ca:	87 95       	ror	r24
     5cc:	95 95       	asr	r25
     5ce:	87 95       	ror	r24
     5d0:	95 95       	asr	r25
     5d2:	87 95       	ror	r24
     5d4:	e1 e0       	ldi	r30, 0x01	; 1
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	ec 0f       	add	r30, r28
     5da:	fd 1f       	adc	r31, r29
     5dc:	e2 0f       	add	r30, r18
     5de:	f1 1d       	adc	r31, r1
     5e0:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     5e2:	ca 5f       	subi	r28, 0xFA	; 250
     5e4:	de 4f       	sbci	r29, 0xFE	; 254
     5e6:	88 81       	ld	r24, Y
     5e8:	c6 50       	subi	r28, 0x06	; 6
     5ea:	d1 40       	sbci	r29, 0x01	; 1
     5ec:	8f 5f       	subi	r24, 0xFF	; 255
     5ee:	ca 5f       	subi	r28, 0xFA	; 250
     5f0:	de 4f       	sbci	r29, 0xFE	; 254
     5f2:	88 83       	st	Y, r24
     5f4:	c6 50       	subi	r28, 0x06	; 6
     5f6:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_4);
     5f8:	ca 5f       	subi	r28, 0xFA	; 250
     5fa:	de 4f       	sbci	r29, 0xFE	; 254
     5fc:	28 81       	ld	r18, Y
     5fe:	c6 50       	subi	r28, 0x06	; 6
     600:	d1 40       	sbci	r29, 0x01	; 1
     602:	c9 5f       	subi	r28, 0xF9	; 249
     604:	de 4f       	sbci	r29, 0xFE	; 254
     606:	88 81       	ld	r24, Y
     608:	c7 50       	subi	r28, 0x07	; 7
     60a:	d1 40       	sbci	r29, 0x01	; 1
     60c:	f7 01       	movw	r30, r14
     60e:	e8 0f       	add	r30, r24
     610:	f1 1d       	adc	r31, r1
     612:	80 81       	ld	r24, Z
     614:	80 71       	andi	r24, 0x10	; 16
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	95 95       	asr	r25
     61a:	87 95       	ror	r24
     61c:	95 95       	asr	r25
     61e:	87 95       	ror	r24
     620:	95 95       	asr	r25
     622:	87 95       	ror	r24
     624:	95 95       	asr	r25
     626:	87 95       	ror	r24
     628:	e1 e0       	ldi	r30, 0x01	; 1
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	ec 0f       	add	r30, r28
     62e:	fd 1f       	adc	r31, r29
     630:	e2 0f       	add	r30, r18
     632:	f1 1d       	adc	r31, r1
     634:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     636:	ca 5f       	subi	r28, 0xFA	; 250
     638:	de 4f       	sbci	r29, 0xFE	; 254
     63a:	88 81       	ld	r24, Y
     63c:	c6 50       	subi	r28, 0x06	; 6
     63e:	d1 40       	sbci	r29, 0x01	; 1
     640:	8f 5f       	subi	r24, 0xFF	; 255
     642:	ca 5f       	subi	r28, 0xFA	; 250
     644:	de 4f       	sbci	r29, 0xFE	; 254
     646:	88 83       	st	Y, r24
     648:	c6 50       	subi	r28, 0x06	; 6
     64a:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_3);
     64c:	ca 5f       	subi	r28, 0xFA	; 250
     64e:	de 4f       	sbci	r29, 0xFE	; 254
     650:	28 81       	ld	r18, Y
     652:	c6 50       	subi	r28, 0x06	; 6
     654:	d1 40       	sbci	r29, 0x01	; 1
     656:	c9 5f       	subi	r28, 0xF9	; 249
     658:	de 4f       	sbci	r29, 0xFE	; 254
     65a:	88 81       	ld	r24, Y
     65c:	c7 50       	subi	r28, 0x07	; 7
     65e:	d1 40       	sbci	r29, 0x01	; 1
     660:	f7 01       	movw	r30, r14
     662:	e8 0f       	add	r30, r24
     664:	f1 1d       	adc	r31, r1
     666:	80 81       	ld	r24, Z
     668:	88 70       	andi	r24, 0x08	; 8
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	95 95       	asr	r25
     66e:	87 95       	ror	r24
     670:	95 95       	asr	r25
     672:	87 95       	ror	r24
     674:	95 95       	asr	r25
     676:	87 95       	ror	r24
     678:	e1 e0       	ldi	r30, 0x01	; 1
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	ec 0f       	add	r30, r28
     67e:	fd 1f       	adc	r31, r29
     680:	e2 0f       	add	r30, r18
     682:	f1 1d       	adc	r31, r1
     684:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     686:	ca 5f       	subi	r28, 0xFA	; 250
     688:	de 4f       	sbci	r29, 0xFE	; 254
     68a:	88 81       	ld	r24, Y
     68c:	c6 50       	subi	r28, 0x06	; 6
     68e:	d1 40       	sbci	r29, 0x01	; 1
     690:	8f 5f       	subi	r24, 0xFF	; 255
     692:	ca 5f       	subi	r28, 0xFA	; 250
     694:	de 4f       	sbci	r29, 0xFE	; 254
     696:	88 83       	st	Y, r24
     698:	c6 50       	subi	r28, 0x06	; 6
     69a:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_2);
     69c:	ca 5f       	subi	r28, 0xFA	; 250
     69e:	de 4f       	sbci	r29, 0xFE	; 254
     6a0:	28 81       	ld	r18, Y
     6a2:	c6 50       	subi	r28, 0x06	; 6
     6a4:	d1 40       	sbci	r29, 0x01	; 1
     6a6:	c9 5f       	subi	r28, 0xF9	; 249
     6a8:	de 4f       	sbci	r29, 0xFE	; 254
     6aa:	88 81       	ld	r24, Y
     6ac:	c7 50       	subi	r28, 0x07	; 7
     6ae:	d1 40       	sbci	r29, 0x01	; 1
     6b0:	f7 01       	movw	r30, r14
     6b2:	e8 0f       	add	r30, r24
     6b4:	f1 1d       	adc	r31, r1
     6b6:	80 81       	ld	r24, Z
     6b8:	84 70       	andi	r24, 0x04	; 4
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	95 95       	asr	r25
     6be:	87 95       	ror	r24
     6c0:	95 95       	asr	r25
     6c2:	87 95       	ror	r24
     6c4:	e1 e0       	ldi	r30, 0x01	; 1
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	ec 0f       	add	r30, r28
     6ca:	fd 1f       	adc	r31, r29
     6cc:	e2 0f       	add	r30, r18
     6ce:	f1 1d       	adc	r31, r1
     6d0:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     6d2:	ca 5f       	subi	r28, 0xFA	; 250
     6d4:	de 4f       	sbci	r29, 0xFE	; 254
     6d6:	88 81       	ld	r24, Y
     6d8:	c6 50       	subi	r28, 0x06	; 6
     6da:	d1 40       	sbci	r29, 0x01	; 1
     6dc:	8f 5f       	subi	r24, 0xFF	; 255
     6de:	ca 5f       	subi	r28, 0xFA	; 250
     6e0:	de 4f       	sbci	r29, 0xFE	; 254
     6e2:	88 83       	st	Y, r24
     6e4:	c6 50       	subi	r28, 0x06	; 6
     6e6:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_1);
     6e8:	ca 5f       	subi	r28, 0xFA	; 250
     6ea:	de 4f       	sbci	r29, 0xFE	; 254
     6ec:	28 81       	ld	r18, Y
     6ee:	c6 50       	subi	r28, 0x06	; 6
     6f0:	d1 40       	sbci	r29, 0x01	; 1
     6f2:	c9 5f       	subi	r28, 0xF9	; 249
     6f4:	de 4f       	sbci	r29, 0xFE	; 254
     6f6:	88 81       	ld	r24, Y
     6f8:	c7 50       	subi	r28, 0x07	; 7
     6fa:	d1 40       	sbci	r29, 0x01	; 1
     6fc:	f7 01       	movw	r30, r14
     6fe:	e8 0f       	add	r30, r24
     700:	f1 1d       	adc	r31, r1
     702:	80 81       	ld	r24, Z
     704:	82 70       	andi	r24, 0x02	; 2
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	95 95       	asr	r25
     70a:	87 95       	ror	r24
     70c:	e1 e0       	ldi	r30, 0x01	; 1
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	ec 0f       	add	r30, r28
     712:	fd 1f       	adc	r31, r29
     714:	e2 0f       	add	r30, r18
     716:	f1 1d       	adc	r31, r1
     718:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     71a:	ca 5f       	subi	r28, 0xFA	; 250
     71c:	de 4f       	sbci	r29, 0xFE	; 254
     71e:	88 81       	ld	r24, Y
     720:	c6 50       	subi	r28, 0x06	; 6
     722:	d1 40       	sbci	r29, 0x01	; 1
     724:	8f 5f       	subi	r24, 0xFF	; 255
     726:	ca 5f       	subi	r28, 0xFA	; 250
     728:	de 4f       	sbci	r29, 0xFE	; 254
     72a:	88 83       	st	Y, r24
     72c:	c6 50       	subi	r28, 0x06	; 6
     72e:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_0);
     730:	ca 5f       	subi	r28, 0xFA	; 250
     732:	de 4f       	sbci	r29, 0xFE	; 254
     734:	98 81       	ld	r25, Y
     736:	c6 50       	subi	r28, 0x06	; 6
     738:	d1 40       	sbci	r29, 0x01	; 1
     73a:	c9 5f       	subi	r28, 0xF9	; 249
     73c:	de 4f       	sbci	r29, 0xFE	; 254
     73e:	88 81       	ld	r24, Y
     740:	c7 50       	subi	r28, 0x07	; 7
     742:	d1 40       	sbci	r29, 0x01	; 1
     744:	f7 01       	movw	r30, r14
     746:	e8 0f       	add	r30, r24
     748:	f1 1d       	adc	r31, r1
     74a:	80 81       	ld	r24, Z
     74c:	81 70       	andi	r24, 0x01	; 1
     74e:	e1 e0       	ldi	r30, 0x01	; 1
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	ec 0f       	add	r30, r28
     754:	fd 1f       	adc	r31, r29
     756:	e9 0f       	add	r30, r25
     758:	f1 1d       	adc	r31, r1
     75a:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     75c:	ca 5f       	subi	r28, 0xFA	; 250
     75e:	de 4f       	sbci	r29, 0xFE	; 254
     760:	88 81       	ld	r24, Y
     762:	c6 50       	subi	r28, 0x06	; 6
     764:	d1 40       	sbci	r29, 0x01	; 1
     766:	8f 5f       	subi	r24, 0xFF	; 255
     768:	ca 5f       	subi	r28, 0xFA	; 250
     76a:	de 4f       	sbci	r29, 0xFE	; 254
     76c:	88 83       	st	Y, r24
     76e:	c6 50       	subi	r28, 0x06	; 6
     770:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t volatile iterator_of_BitArr = 0;
	/*initializing the iterator for the array of the inserted Characters in the string*/
	uint8_t volatile iterator_of_characters = 0;
	/*assigning the bits of the character in the passed string to the array of bits*/
	/*bits are arranged in the array the form of an extra long number"Index 0:MSB,..,..,..,. . .,Index N:LSB"*/
	for(iterator_of_characters = 0; iterator_of_characters < StrLength; iterator_of_characters++)
     772:	c9 5f       	subi	r28, 0xF9	; 249
     774:	de 4f       	sbci	r29, 0xFE	; 254
     776:	88 81       	ld	r24, Y
     778:	c7 50       	subi	r28, 0x07	; 7
     77a:	d1 40       	sbci	r29, 0x01	; 1
     77c:	8f 5f       	subi	r24, 0xFF	; 255
     77e:	c9 5f       	subi	r28, 0xF9	; 249
     780:	de 4f       	sbci	r29, 0xFE	; 254
     782:	88 83       	st	Y, r24
     784:	c7 50       	subi	r28, 0x07	; 7
     786:	d1 40       	sbci	r29, 0x01	; 1
     788:	c9 5f       	subi	r28, 0xF9	; 249
     78a:	de 4f       	sbci	r29, 0xFE	; 254
     78c:	88 81       	ld	r24, Y
     78e:	c7 50       	subi	r28, 0x07	; 7
     790:	d1 40       	sbci	r29, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	cd 5f       	subi	r28, 0xFD	; 253
     796:	de 4f       	sbci	r29, 0xFE	; 254
     798:	28 81       	ld	r18, Y
     79a:	39 81       	ldd	r19, Y+1	; 0x01
     79c:	c3 50       	subi	r28, 0x03	; 3
     79e:	d1 40       	sbci	r29, 0x01	; 1
     7a0:	82 17       	cp	r24, r18
     7a2:	93 07       	cpc	r25, r19
     7a4:	08 f4       	brcc	.+2      	; 0x7a8 <CRC_16_Calc+0x31e>
     7a6:	af ce       	rjmp	.-674    	; 0x506 <CRC_16_Calc+0x7c>
		iterator_of_BitArr++;
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_0);
		iterator_of_BitArr++;
	}
	/*calculating the size of the array of bits taking into consideration the size of the 16 bits of CRC_16*/
	BitArr_Size = iterator_of_BitArr + 15;
     7a8:	ca 5f       	subi	r28, 0xFA	; 250
     7aa:	de 4f       	sbci	r29, 0xFE	; 254
     7ac:	88 81       	ld	r24, Y
     7ae:	c6 50       	subi	r28, 0x06	; 6
     7b0:	d1 40       	sbci	r29, 0x01	; 1
     7b2:	81 5f       	subi	r24, 0xF1	; 241
     7b4:	cb 5f       	subi	r28, 0xFB	; 251
     7b6:	de 4f       	sbci	r29, 0xFE	; 254
     7b8:	88 83       	st	Y, r24
     7ba:	c5 50       	subi	r28, 0x05	; 5
     7bc:	d1 40       	sbci	r29, 0x01	; 1
	/*reset the iterator of the Bits Array to zero to iterate through the array*/
	iterator_of_BitArr = 0;
     7be:	ca 5f       	subi	r28, 0xFA	; 250
     7c0:	de 4f       	sbci	r29, 0xFE	; 254
     7c2:	18 82       	st	Y, r1
     7c4:	c6 50       	subi	r28, 0x06	; 6
     7c6:	d1 40       	sbci	r29, 0x01	; 1
	/*Moving to the first occurance of high bit to start our CRC calculation*/
	while(BitArr[iterator_of_BitArr]!=1)
     7c8:	0b c0       	rjmp	.+22     	; 0x7e0 <CRC_16_Calc+0x356>
	{
		/*increment the iterator to the first occurance of High bit*/
		iterator_of_BitArr++;
     7ca:	ca 5f       	subi	r28, 0xFA	; 250
     7cc:	de 4f       	sbci	r29, 0xFE	; 254
     7ce:	88 81       	ld	r24, Y
     7d0:	c6 50       	subi	r28, 0x06	; 6
     7d2:	d1 40       	sbci	r29, 0x01	; 1
     7d4:	8f 5f       	subi	r24, 0xFF	; 255
     7d6:	ca 5f       	subi	r28, 0xFA	; 250
     7d8:	de 4f       	sbci	r29, 0xFE	; 254
     7da:	88 83       	st	Y, r24
     7dc:	c6 50       	subi	r28, 0x06	; 6
     7de:	d1 40       	sbci	r29, 0x01	; 1
	/*calculating the size of the array of bits taking into consideration the size of the 16 bits of CRC_16*/
	BitArr_Size = iterator_of_BitArr + 15;
	/*reset the iterator of the Bits Array to zero to iterate through the array*/
	iterator_of_BitArr = 0;
	/*Moving to the first occurance of high bit to start our CRC calculation*/
	while(BitArr[iterator_of_BitArr]!=1)
     7e0:	ca 5f       	subi	r28, 0xFA	; 250
     7e2:	de 4f       	sbci	r29, 0xFE	; 254
     7e4:	88 81       	ld	r24, Y
     7e6:	c6 50       	subi	r28, 0x06	; 6
     7e8:	d1 40       	sbci	r29, 0x01	; 1
     7ea:	e1 e0       	ldi	r30, 0x01	; 1
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	ec 0f       	add	r30, r28
     7f0:	fd 1f       	adc	r31, r29
     7f2:	e8 0f       	add	r30, r24
     7f4:	f1 1d       	adc	r31, r1
     7f6:	80 81       	ld	r24, Z
     7f8:	81 30       	cpi	r24, 0x01	; 1
     7fa:	39 f7       	brne	.-50     	; 0x7ca <CRC_16_Calc+0x340>
	{
		/*increment the iterator to the first occurance of High bit*/
		iterator_of_BitArr++;
	}
	/*increment by one to the first element after the first high bit in the array of bits*/
	iterator_of_BitArr++;
     7fc:	ca 5f       	subi	r28, 0xFA	; 250
     7fe:	de 4f       	sbci	r29, 0xFE	; 254
     800:	88 81       	ld	r24, Y
     802:	c6 50       	subi	r28, 0x06	; 6
     804:	d1 40       	sbci	r29, 0x01	; 1
     806:	8f 5f       	subi	r24, 0xFF	; 255
     808:	ca 5f       	subi	r28, 0xFA	; 250
     80a:	de 4f       	sbci	r29, 0xFE	; 254
     80c:	88 83       	st	Y, r24
     80e:	c6 50       	subi	r28, 0x06	; 6
     810:	d1 40       	sbci	r29, 0x01	; 1
	/*setting the window value*/
	for (uint8_t i = 0; i<=15; i++)
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	41 c0       	rjmp	.+130    	; 0x898 <__stack+0x39>
	{
		Window_16_Element &=~(1<<(15-i)); 
     816:	86 2f       	mov	r24, r22
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	4f e0       	ldi	r20, 0x0F	; 15
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	48 1b       	sub	r20, r24
     820:	59 0b       	sbc	r21, r25
     822:	21 e0       	ldi	r18, 0x01	; 1
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	04 2e       	mov	r0, r20
     828:	02 c0       	rjmp	.+4      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     82a:	22 0f       	add	r18, r18
     82c:	33 1f       	adc	r19, r19
     82e:	0a 94       	dec	r0
     830:	e2 f7       	brpl	.-8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     832:	20 95       	com	r18
     834:	30 95       	com	r19
     836:	cf 5f       	subi	r28, 0xFF	; 255
     838:	de 4f       	sbci	r29, 0xFE	; 254
     83a:	e8 81       	ld	r30, Y
     83c:	f9 81       	ldd	r31, Y+1	; 0x01
     83e:	c1 50       	subi	r28, 0x01	; 1
     840:	d1 40       	sbci	r29, 0x01	; 1
     842:	2e 23       	and	r18, r30
     844:	3f 23       	and	r19, r31
     846:	cf 5f       	subi	r28, 0xFF	; 255
     848:	de 4f       	sbci	r29, 0xFE	; 254
     84a:	39 83       	std	Y+1, r19	; 0x01
     84c:	28 83       	st	Y, r18
     84e:	c1 50       	subi	r28, 0x01	; 1
     850:	d1 40       	sbci	r29, 0x01	; 1
		Window_16_Element |= (BitArr[iterator_of_BitArr+i]<<(15-i));
     852:	ca 5f       	subi	r28, 0xFA	; 250
     854:	de 4f       	sbci	r29, 0xFE	; 254
     856:	28 81       	ld	r18, Y
     858:	c6 50       	subi	r28, 0x06	; 6
     85a:	d1 40       	sbci	r29, 0x01	; 1
     85c:	82 0f       	add	r24, r18
     85e:	91 1d       	adc	r25, r1
     860:	e1 e0       	ldi	r30, 0x01	; 1
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	ec 0f       	add	r30, r28
     866:	fd 1f       	adc	r31, r29
     868:	e8 0f       	add	r30, r24
     86a:	f9 1f       	adc	r31, r25
     86c:	80 81       	ld	r24, Z
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
     872:	88 0f       	add	r24, r24
     874:	99 1f       	adc	r25, r25
     876:	4a 95       	dec	r20
     878:	e2 f7       	brpl	.-8      	; 0x872 <__stack+0x13>
     87a:	cf 5f       	subi	r28, 0xFF	; 255
     87c:	de 4f       	sbci	r29, 0xFE	; 254
     87e:	28 81       	ld	r18, Y
     880:	39 81       	ldd	r19, Y+1	; 0x01
     882:	c1 50       	subi	r28, 0x01	; 1
     884:	d1 40       	sbci	r29, 0x01	; 1
     886:	82 2b       	or	r24, r18
     888:	93 2b       	or	r25, r19
     88a:	cf 5f       	subi	r28, 0xFF	; 255
     88c:	de 4f       	sbci	r29, 0xFE	; 254
     88e:	99 83       	std	Y+1, r25	; 0x01
     890:	88 83       	st	Y, r24
     892:	c1 50       	subi	r28, 0x01	; 1
     894:	d1 40       	sbci	r29, 0x01	; 1
		iterator_of_BitArr++;
	}
	/*increment by one to the first element after the first high bit in the array of bits*/
	iterator_of_BitArr++;
	/*setting the window value*/
	for (uint8_t i = 0; i<=15; i++)
     896:	6f 5f       	subi	r22, 0xFF	; 255
     898:	60 31       	cpi	r22, 0x10	; 16
     89a:	08 f4       	brcc	.+2      	; 0x89e <__stack+0x3f>
     89c:	bc cf       	rjmp	.-136    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     89e:	dd c0       	rjmp	.+442    	; 0xa5a <__stack+0x1fb>
	}
	/*Start the modulo Operation continues until the polynomial doesn't fit into the reminder*/
	while(iterator_of_BitArr <= BitArr_Size-15)
	{
		/*Xoring operation between the Window and the polynomial*/
		Window_16_Element ^= polynomial;
     8a0:	cf 5f       	subi	r28, 0xFF	; 255
     8a2:	de 4f       	sbci	r29, 0xFE	; 254
     8a4:	88 81       	ld	r24, Y
     8a6:	99 81       	ldd	r25, Y+1	; 0x01
     8a8:	c1 50       	subi	r28, 0x01	; 1
     8aa:	d1 40       	sbci	r29, 0x01	; 1
     8ac:	b5 e0       	ldi	r27, 0x05	; 5
     8ae:	8b 27       	eor	r24, r27
     8b0:	90 58       	subi	r25, 0x80	; 128
     8b2:	cf 5f       	subi	r28, 0xFF	; 255
     8b4:	de 4f       	sbci	r29, 0xFE	; 254
     8b6:	99 83       	std	Y+1, r25	; 0x01
     8b8:	88 83       	st	Y, r24
     8ba:	c1 50       	subi	r28, 0x01	; 1
     8bc:	d1 40       	sbci	r29, 0x01	; 1
		/*checking if the most signifigant Bit in the window is zero*/
		if(READ_BIT(Window_16_Element,15)==0)
     8be:	cf 5f       	subi	r28, 0xFF	; 255
     8c0:	de 4f       	sbci	r29, 0xFE	; 254
     8c2:	88 81       	ld	r24, Y
     8c4:	99 81       	ldd	r25, Y+1	; 0x01
     8c6:	c1 50       	subi	r28, 0x01	; 1
     8c8:	d1 40       	sbci	r29, 0x01	; 1
     8ca:	99 23       	and	r25, r25
     8cc:	0c f0       	brlt	.+2      	; 0x8d0 <__stack+0x71>
     8ce:	4c c0       	rjmp	.+152    	; 0x968 <__stack+0x109>
     8d0:	90 c0       	rjmp	.+288    	; 0x9f2 <__stack+0x193>
		{
			/*shift until we reach the first one*/
			while(READ_BIT(Window_16_Element,15)==0)
			{
				/*check before shifting that you haven't exceeded the limits of shifting*/
				if(iterator_of_BitArr >= BitArr_Size-15)
     8d2:	ca 5f       	subi	r28, 0xFA	; 250
     8d4:	de 4f       	sbci	r29, 0xFE	; 254
     8d6:	28 81       	ld	r18, Y
     8d8:	c6 50       	subi	r28, 0x06	; 6
     8da:	d1 40       	sbci	r29, 0x01	; 1
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	cb 5f       	subi	r28, 0xFB	; 251
     8e0:	de 4f       	sbci	r29, 0xFE	; 254
     8e2:	88 81       	ld	r24, Y
     8e4:	c5 50       	subi	r28, 0x05	; 5
     8e6:	d1 40       	sbci	r29, 0x01	; 1
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0f 97       	sbiw	r24, 0x0f	; 15
     8ec:	28 17       	cp	r18, r24
     8ee:	39 07       	cpc	r19, r25
     8f0:	3c f0       	brlt	.+14     	; 0x900 <__stack+0xa1>
				{
					/*if limits of shifting is about to be exceeded rise a flag to break from the outer loop and break from inner loop*/
					Flag = 1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	c0 50       	subi	r28, 0x00	; 0
     8f6:	df 4f       	sbci	r29, 0xFF	; 255
     8f8:	88 83       	st	Y, r24
     8fa:	c0 50       	subi	r28, 0x00	; 0
     8fc:	d1 40       	sbci	r29, 0x01	; 1
					break;
     8fe:	3d c0       	rjmp	.+122    	; 0x97a <__stack+0x11b>
				}
				/*if the limits of shifting aren't about to be exceeded then shift and add a new element from the array of bits to the window*/
				/*shifting*/
				Window_16_Element <<=1;
     900:	cf 5f       	subi	r28, 0xFF	; 255
     902:	de 4f       	sbci	r29, 0xFE	; 254
     904:	88 81       	ld	r24, Y
     906:	99 81       	ldd	r25, Y+1	; 0x01
     908:	c1 50       	subi	r28, 0x01	; 1
     90a:	d1 40       	sbci	r29, 0x01	; 1
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	cf 5f       	subi	r28, 0xFF	; 255
     912:	de 4f       	sbci	r29, 0xFE	; 254
     914:	99 83       	std	Y+1, r25	; 0x01
     916:	88 83       	st	Y, r24
     918:	c1 50       	subi	r28, 0x01	; 1
     91a:	d1 40       	sbci	r29, 0x01	; 1
				/*Adding new element from the array of bits to the window*/
				Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
     91c:	ca 5f       	subi	r28, 0xFA	; 250
     91e:	de 4f       	sbci	r29, 0xFE	; 254
     920:	e8 81       	ld	r30, Y
     922:	c6 50       	subi	r28, 0x06	; 6
     924:	d1 40       	sbci	r29, 0x01	; 1
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	70 96       	adiw	r30, 0x10	; 16
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	8c 0f       	add	r24, r28
     930:	9d 1f       	adc	r25, r29
     932:	e8 0f       	add	r30, r24
     934:	f9 1f       	adc	r31, r25
     936:	20 81       	ld	r18, Z
     938:	cf 5f       	subi	r28, 0xFF	; 255
     93a:	de 4f       	sbci	r29, 0xFE	; 254
     93c:	88 81       	ld	r24, Y
     93e:	99 81       	ldd	r25, Y+1	; 0x01
     940:	c1 50       	subi	r28, 0x01	; 1
     942:	d1 40       	sbci	r29, 0x01	; 1
     944:	82 2b       	or	r24, r18
     946:	cf 5f       	subi	r28, 0xFF	; 255
     948:	de 4f       	sbci	r29, 0xFE	; 254
     94a:	99 83       	std	Y+1, r25	; 0x01
     94c:	88 83       	st	Y, r24
     94e:	c1 50       	subi	r28, 0x01	; 1
     950:	d1 40       	sbci	r29, 0x01	; 1
				/*increment the iterator of bit array*/
				iterator_of_BitArr++;
     952:	ca 5f       	subi	r28, 0xFA	; 250
     954:	de 4f       	sbci	r29, 0xFE	; 254
     956:	88 81       	ld	r24, Y
     958:	c6 50       	subi	r28, 0x06	; 6
     95a:	d1 40       	sbci	r29, 0x01	; 1
     95c:	8f 5f       	subi	r24, 0xFF	; 255
     95e:	ca 5f       	subi	r28, 0xFA	; 250
     960:	de 4f       	sbci	r29, 0xFE	; 254
     962:	88 83       	st	Y, r24
     964:	c6 50       	subi	r28, 0x06	; 6
     966:	d1 40       	sbci	r29, 0x01	; 1
		Window_16_Element ^= polynomial;
		/*checking if the most signifigant Bit in the window is zero*/
		if(READ_BIT(Window_16_Element,15)==0)
		{
			/*shift until we reach the first one*/
			while(READ_BIT(Window_16_Element,15)==0)
     968:	cf 5f       	subi	r28, 0xFF	; 255
     96a:	de 4f       	sbci	r29, 0xFE	; 254
     96c:	88 81       	ld	r24, Y
     96e:	99 81       	ldd	r25, Y+1	; 0x01
     970:	c1 50       	subi	r28, 0x01	; 1
     972:	d1 40       	sbci	r29, 0x01	; 1
     974:	99 23       	and	r25, r25
     976:	0c f0       	brlt	.+2      	; 0x97a <__stack+0x11b>
     978:	ac cf       	rjmp	.-168    	; 0x8d2 <__stack+0x73>
				Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
				/*increment the iterator of bit array*/
				iterator_of_BitArr++;
			}
			/*checking if the flag is rised to perform a break from the outer loop*/
			if(Flag)
     97a:	c0 50       	subi	r28, 0x00	; 0
     97c:	df 4f       	sbci	r29, 0xFF	; 255
     97e:	88 81       	ld	r24, Y
     980:	c0 50       	subi	r28, 0x00	; 0
     982:	d1 40       	sbci	r29, 0x01	; 1
     984:	81 11       	cpse	r24, r1
     986:	7a c0       	rjmp	.+244    	; 0xa7c <__stack+0x21d>
			{
				break;
			}
			/*shifting*/
			Window_16_Element <<=1;
     988:	cf 5f       	subi	r28, 0xFF	; 255
     98a:	de 4f       	sbci	r29, 0xFE	; 254
     98c:	88 81       	ld	r24, Y
     98e:	99 81       	ldd	r25, Y+1	; 0x01
     990:	c1 50       	subi	r28, 0x01	; 1
     992:	d1 40       	sbci	r29, 0x01	; 1
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	cf 5f       	subi	r28, 0xFF	; 255
     99a:	de 4f       	sbci	r29, 0xFE	; 254
     99c:	99 83       	std	Y+1, r25	; 0x01
     99e:	88 83       	st	Y, r24
     9a0:	c1 50       	subi	r28, 0x01	; 1
     9a2:	d1 40       	sbci	r29, 0x01	; 1
			/*Adding new element from the array of bits to the window*/
			Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
     9a4:	ca 5f       	subi	r28, 0xFA	; 250
     9a6:	de 4f       	sbci	r29, 0xFE	; 254
     9a8:	e8 81       	ld	r30, Y
     9aa:	c6 50       	subi	r28, 0x06	; 6
     9ac:	d1 40       	sbci	r29, 0x01	; 1
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	70 96       	adiw	r30, 0x10	; 16
     9b2:	a1 e0       	ldi	r26, 0x01	; 1
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ac 0f       	add	r26, r28
     9b8:	bd 1f       	adc	r27, r29
     9ba:	ea 0f       	add	r30, r26
     9bc:	fb 1f       	adc	r31, r27
     9be:	20 81       	ld	r18, Z
     9c0:	cf 5f       	subi	r28, 0xFF	; 255
     9c2:	de 4f       	sbci	r29, 0xFE	; 254
     9c4:	88 81       	ld	r24, Y
     9c6:	99 81       	ldd	r25, Y+1	; 0x01
     9c8:	c1 50       	subi	r28, 0x01	; 1
     9ca:	d1 40       	sbci	r29, 0x01	; 1
     9cc:	82 2b       	or	r24, r18
     9ce:	cf 5f       	subi	r28, 0xFF	; 255
     9d0:	de 4f       	sbci	r29, 0xFE	; 254
     9d2:	99 83       	std	Y+1, r25	; 0x01
     9d4:	88 83       	st	Y, r24
     9d6:	c1 50       	subi	r28, 0x01	; 1
     9d8:	d1 40       	sbci	r29, 0x01	; 1
			/*increment the iterator of bit array*/
			iterator_of_BitArr++;
     9da:	ca 5f       	subi	r28, 0xFA	; 250
     9dc:	de 4f       	sbci	r29, 0xFE	; 254
     9de:	88 81       	ld	r24, Y
     9e0:	c6 50       	subi	r28, 0x06	; 6
     9e2:	d1 40       	sbci	r29, 0x01	; 1
     9e4:	8f 5f       	subi	r24, 0xFF	; 255
     9e6:	ca 5f       	subi	r28, 0xFA	; 250
     9e8:	de 4f       	sbci	r29, 0xFE	; 254
     9ea:	88 83       	st	Y, r24
     9ec:	c6 50       	subi	r28, 0x06	; 6
     9ee:	d1 40       	sbci	r29, 0x01	; 1
     9f0:	34 c0       	rjmp	.+104    	; 0xa5a <__stack+0x1fb>
		}
		else
		{
			/*shifting*/
			Window_16_Element <<=1;
     9f2:	cf 5f       	subi	r28, 0xFF	; 255
     9f4:	de 4f       	sbci	r29, 0xFE	; 254
     9f6:	88 81       	ld	r24, Y
     9f8:	99 81       	ldd	r25, Y+1	; 0x01
     9fa:	c1 50       	subi	r28, 0x01	; 1
     9fc:	d1 40       	sbci	r29, 0x01	; 1
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	cf 5f       	subi	r28, 0xFF	; 255
     a04:	de 4f       	sbci	r29, 0xFE	; 254
     a06:	99 83       	std	Y+1, r25	; 0x01
     a08:	88 83       	st	Y, r24
     a0a:	c1 50       	subi	r28, 0x01	; 1
     a0c:	d1 40       	sbci	r29, 0x01	; 1
			/*Adding new element from the array of bits to the window*/
			Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
     a0e:	ca 5f       	subi	r28, 0xFA	; 250
     a10:	de 4f       	sbci	r29, 0xFE	; 254
     a12:	e8 81       	ld	r30, Y
     a14:	c6 50       	subi	r28, 0x06	; 6
     a16:	d1 40       	sbci	r29, 0x01	; 1
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	70 96       	adiw	r30, 0x10	; 16
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	8c 0f       	add	r24, r28
     a22:	9d 1f       	adc	r25, r29
     a24:	e8 0f       	add	r30, r24
     a26:	f9 1f       	adc	r31, r25
     a28:	20 81       	ld	r18, Z
     a2a:	cf 5f       	subi	r28, 0xFF	; 255
     a2c:	de 4f       	sbci	r29, 0xFE	; 254
     a2e:	88 81       	ld	r24, Y
     a30:	99 81       	ldd	r25, Y+1	; 0x01
     a32:	c1 50       	subi	r28, 0x01	; 1
     a34:	d1 40       	sbci	r29, 0x01	; 1
     a36:	82 2b       	or	r24, r18
     a38:	cf 5f       	subi	r28, 0xFF	; 255
     a3a:	de 4f       	sbci	r29, 0xFE	; 254
     a3c:	99 83       	std	Y+1, r25	; 0x01
     a3e:	88 83       	st	Y, r24
     a40:	c1 50       	subi	r28, 0x01	; 1
     a42:	d1 40       	sbci	r29, 0x01	; 1
			/*increment the iterator of bit array*/
			iterator_of_BitArr++;
     a44:	ca 5f       	subi	r28, 0xFA	; 250
     a46:	de 4f       	sbci	r29, 0xFE	; 254
     a48:	88 81       	ld	r24, Y
     a4a:	c6 50       	subi	r28, 0x06	; 6
     a4c:	d1 40       	sbci	r29, 0x01	; 1
     a4e:	8f 5f       	subi	r24, 0xFF	; 255
     a50:	ca 5f       	subi	r28, 0xFA	; 250
     a52:	de 4f       	sbci	r29, 0xFE	; 254
     a54:	88 83       	st	Y, r24
     a56:	c6 50       	subi	r28, 0x06	; 6
     a58:	d1 40       	sbci	r29, 0x01	; 1
	{
		Window_16_Element &=~(1<<(15-i)); 
		Window_16_Element |= (BitArr[iterator_of_BitArr+i]<<(15-i));
	}
	/*Start the modulo Operation continues until the polynomial doesn't fit into the reminder*/
	while(iterator_of_BitArr <= BitArr_Size-15)
     a5a:	ca 5f       	subi	r28, 0xFA	; 250
     a5c:	de 4f       	sbci	r29, 0xFE	; 254
     a5e:	28 81       	ld	r18, Y
     a60:	c6 50       	subi	r28, 0x06	; 6
     a62:	d1 40       	sbci	r29, 0x01	; 1
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	cb 5f       	subi	r28, 0xFB	; 251
     a68:	de 4f       	sbci	r29, 0xFE	; 254
     a6a:	88 81       	ld	r24, Y
     a6c:	c5 50       	subi	r28, 0x05	; 5
     a6e:	d1 40       	sbci	r29, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0f 97       	sbiw	r24, 0x0f	; 15
     a74:	82 17       	cp	r24, r18
     a76:	93 07       	cpc	r25, r19
     a78:	0c f0       	brlt	.+2      	; 0xa7c <__stack+0x21d>
     a7a:	12 cf       	rjmp	.-476    	; 0x8a0 <__stack+0x41>
			/*increment the iterator of bit array*/
			iterator_of_BitArr++;
		}	
	}
	/*return the calculated CRC*/
	*CalculatedCRC = Window_16_Element;
     a7c:	cf 5f       	subi	r28, 0xFF	; 255
     a7e:	de 4f       	sbci	r29, 0xFE	; 254
     a80:	88 81       	ld	r24, Y
     a82:	99 81       	ldd	r25, Y+1	; 0x01
     a84:	c1 50       	subi	r28, 0x01	; 1
     a86:	d1 40       	sbci	r29, 0x01	; 1
     a88:	d8 01       	movw	r26, r16
     a8a:	8d 93       	st	X+, r24
     a8c:	9c 93       	st	X, r25
	/*Add the calculated CRC to the End of the Passed String*/
	STRING[StrLength] = (uint8_t)(Window_16_Element>>8);
     a8e:	cd 5f       	subi	r28, 0xFD	; 253
     a90:	de 4f       	sbci	r29, 0xFE	; 254
     a92:	88 81       	ld	r24, Y
     a94:	99 81       	ldd	r25, Y+1	; 0x01
     a96:	c3 50       	subi	r28, 0x03	; 3
     a98:	d1 40       	sbci	r29, 0x01	; 1
     a9a:	f7 01       	movw	r30, r14
     a9c:	e8 0f       	add	r30, r24
     a9e:	f9 1f       	adc	r31, r25
     aa0:	cf 5f       	subi	r28, 0xFF	; 255
     aa2:	de 4f       	sbci	r29, 0xFE	; 254
     aa4:	28 81       	ld	r18, Y
     aa6:	39 81       	ldd	r19, Y+1	; 0x01
     aa8:	c1 50       	subi	r28, 0x01	; 1
     aaa:	d1 40       	sbci	r29, 0x01	; 1
     aac:	30 83       	st	Z, r19
	STRING[StrLength+1] = (uint8_t)(Window_16_Element&0x00FF);
     aae:	fc 01       	movw	r30, r24
     ab0:	31 96       	adiw	r30, 0x01	; 1
     ab2:	ee 0d       	add	r30, r14
     ab4:	ff 1d       	adc	r31, r15
     ab6:	cf 5f       	subi	r28, 0xFF	; 255
     ab8:	de 4f       	sbci	r29, 0xFE	; 254
     aba:	28 81       	ld	r18, Y
     abc:	39 81       	ldd	r19, Y+1	; 0x01
     abe:	c1 50       	subi	r28, 0x01	; 1
     ac0:	d1 40       	sbci	r29, 0x01	; 1
     ac2:	20 83       	st	Z, r18
	STRING[StrLength+2] = NULL_TERMINATOR;
     ac4:	02 96       	adiw	r24, 0x02	; 2
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 0f       	add	r30, r24
     aca:	f9 1f       	adc	r31, r25
     acc:	10 82       	st	Z, r1
	/*return zero*/
	return 0 ;
}
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	c9 5f       	subi	r28, 0xF9	; 249
     ad2:	de 4f       	sbci	r29, 0xFE	; 254
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	08 95       	ret

00000aec <CRC_16_Chk>:


uint8_t CRC_16_Chk (uint8_t* STRING, uint16_t* CalculatedCRC)
{
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	c7 50       	subi	r28, 0x07	; 7
     afe:	d1 40       	sbci	r29, 0x01	; 1
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	7c 01       	movw	r14, r24
     b0c:	8b 01       	movw	r16, r22
	/*change array of character to array of bits*/
	/*initialize the array of bits*/
	uint8_t volatile BitArr[255] = {0};
     b0e:	fe 01       	movw	r30, r28
     b10:	31 96       	adiw	r30, 0x01	; 1
     b12:	8f ef       	ldi	r24, 0xFF	; 255
     b14:	df 01       	movw	r26, r30
     b16:	1d 92       	st	X+, r1
     b18:	8a 95       	dec	r24
     b1a:	e9 f7       	brne	.-6      	; 0xb16 <CRC_16_Chk+0x2a>
	/*Error Return value*/
	uint8_t ErrRetVal = ERROR_OK;
	/*flag used for breaking through outer loop*/
	uint8_t volatile Flag = 0;
     b1c:	c0 50       	subi	r28, 0x00	; 0
     b1e:	df 4f       	sbci	r29, 0xFF	; 255
     b20:	18 82       	st	Y, r1
     b22:	c0 50       	subi	r28, 0x00	; 0
     b24:	d1 40       	sbci	r29, 0x01	; 1
	const uint16_t polynomial = 0b1000000000000101;
	/*variable that holds the value to be XORED and SHIFTED*/
	uint16_t volatile Window_16_Element;
	/*initialize the variable that holds the number of characters to which CRC is calculated*/
	/*number of characters in the inserted string*/
	uint16_t StrLength = 0;
     b26:	cd 5f       	subi	r28, 0xFD	; 253
     b28:	de 4f       	sbci	r29, 0xFE	; 254
     b2a:	19 82       	std	Y+1, r1	; 0x01
     b2c:	18 82       	st	Y, r1
     b2e:	c3 50       	subi	r28, 0x03	; 3
     b30:	d1 40       	sbci	r29, 0x01	; 1
	/*initialize the variable that holds the number of bits in the inserted string*/
	uint8_t volatile BitArr_Size = 0;
     b32:	cb 5f       	subi	r28, 0xFB	; 251
     b34:	de 4f       	sbci	r29, 0xFE	; 254
     b36:	18 82       	st	Y, r1
     b38:	c5 50       	subi	r28, 0x05	; 5
     b3a:	d1 40       	sbci	r29, 0x01	; 1
	/*using STR_Length() function to calculate Number of characters in the inserted String*/
	STR_Length(STRING, &StrLength);
     b3c:	be 01       	movw	r22, r28
     b3e:	6d 5f       	subi	r22, 0xFD	; 253
     b40:	7e 4f       	sbci	r23, 0xFE	; 254
     b42:	c7 01       	movw	r24, r14
     b44:	0e 94 32 02 	call	0x464	; 0x464 <STR_Length>
	/*initializing the iterator for the array of bits of the inserted Character string*/
	uint8_t volatile iterator_of_BitArr = 0;
     b48:	ca 5f       	subi	r28, 0xFA	; 250
     b4a:	de 4f       	sbci	r29, 0xFE	; 254
     b4c:	18 82       	st	Y, r1
     b4e:	c6 50       	subi	r28, 0x06	; 6
     b50:	d1 40       	sbci	r29, 0x01	; 1
	/*initializing the iterator for the array of the inserted Characters in the string*/
	uint8_t volatile iterator_of_characters = 0;
     b52:	c9 5f       	subi	r28, 0xF9	; 249
     b54:	de 4f       	sbci	r29, 0xFE	; 254
     b56:	18 82       	st	Y, r1
     b58:	c7 50       	subi	r28, 0x07	; 7
     b5a:	d1 40       	sbci	r29, 0x01	; 1
	/*assigning the bits of the character in the passed string to the array of bits*/
	/*bits are arranged in the array the form of an extra long number"Index 0:MSB,..,..,..,. . .,Index N:LSB"*/
	for(; iterator_of_characters < StrLength; iterator_of_characters++)
     b5c:	41 c1       	rjmp	.+642    	; 0xde0 <CRC_16_Chk+0x2f4>
	{
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_7);
     b5e:	ca 5f       	subi	r28, 0xFA	; 250
     b60:	de 4f       	sbci	r29, 0xFE	; 254
     b62:	98 81       	ld	r25, Y
     b64:	c6 50       	subi	r28, 0x06	; 6
     b66:	d1 40       	sbci	r29, 0x01	; 1
     b68:	c9 5f       	subi	r28, 0xF9	; 249
     b6a:	de 4f       	sbci	r29, 0xFE	; 254
     b6c:	88 81       	ld	r24, Y
     b6e:	c7 50       	subi	r28, 0x07	; 7
     b70:	d1 40       	sbci	r29, 0x01	; 1
     b72:	f7 01       	movw	r30, r14
     b74:	e8 0f       	add	r30, r24
     b76:	f1 1d       	adc	r31, r1
     b78:	80 81       	ld	r24, Z
     b7a:	88 1f       	adc	r24, r24
     b7c:	88 27       	eor	r24, r24
     b7e:	88 1f       	adc	r24, r24
     b80:	e1 e0       	ldi	r30, 0x01	; 1
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	ec 0f       	add	r30, r28
     b86:	fd 1f       	adc	r31, r29
     b88:	e9 0f       	add	r30, r25
     b8a:	f1 1d       	adc	r31, r1
     b8c:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     b8e:	ca 5f       	subi	r28, 0xFA	; 250
     b90:	de 4f       	sbci	r29, 0xFE	; 254
     b92:	88 81       	ld	r24, Y
     b94:	c6 50       	subi	r28, 0x06	; 6
     b96:	d1 40       	sbci	r29, 0x01	; 1
     b98:	8f 5f       	subi	r24, 0xFF	; 255
     b9a:	ca 5f       	subi	r28, 0xFA	; 250
     b9c:	de 4f       	sbci	r29, 0xFE	; 254
     b9e:	88 83       	st	Y, r24
     ba0:	c6 50       	subi	r28, 0x06	; 6
     ba2:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_6);
     ba4:	ca 5f       	subi	r28, 0xFA	; 250
     ba6:	de 4f       	sbci	r29, 0xFE	; 254
     ba8:	28 81       	ld	r18, Y
     baa:	c6 50       	subi	r28, 0x06	; 6
     bac:	d1 40       	sbci	r29, 0x01	; 1
     bae:	c9 5f       	subi	r28, 0xF9	; 249
     bb0:	de 4f       	sbci	r29, 0xFE	; 254
     bb2:	88 81       	ld	r24, Y
     bb4:	c7 50       	subi	r28, 0x07	; 7
     bb6:	d1 40       	sbci	r29, 0x01	; 1
     bb8:	f7 01       	movw	r30, r14
     bba:	e8 0f       	add	r30, r24
     bbc:	f1 1d       	adc	r31, r1
     bbe:	80 81       	ld	r24, Z
     bc0:	80 74       	andi	r24, 0x40	; 64
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	08 2e       	mov	r0, r24
     bc6:	89 2f       	mov	r24, r25
     bc8:	00 0c       	add	r0, r0
     bca:	88 1f       	adc	r24, r24
     bcc:	99 0b       	sbc	r25, r25
     bce:	00 0c       	add	r0, r0
     bd0:	88 1f       	adc	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	e1 e0       	ldi	r30, 0x01	; 1
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	ec 0f       	add	r30, r28
     bda:	fd 1f       	adc	r31, r29
     bdc:	e2 0f       	add	r30, r18
     bde:	f1 1d       	adc	r31, r1
     be0:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     be2:	ca 5f       	subi	r28, 0xFA	; 250
     be4:	de 4f       	sbci	r29, 0xFE	; 254
     be6:	88 81       	ld	r24, Y
     be8:	c6 50       	subi	r28, 0x06	; 6
     bea:	d1 40       	sbci	r29, 0x01	; 1
     bec:	8f 5f       	subi	r24, 0xFF	; 255
     bee:	ca 5f       	subi	r28, 0xFA	; 250
     bf0:	de 4f       	sbci	r29, 0xFE	; 254
     bf2:	88 83       	st	Y, r24
     bf4:	c6 50       	subi	r28, 0x06	; 6
     bf6:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_5);
     bf8:	ca 5f       	subi	r28, 0xFA	; 250
     bfa:	de 4f       	sbci	r29, 0xFE	; 254
     bfc:	28 81       	ld	r18, Y
     bfe:	c6 50       	subi	r28, 0x06	; 6
     c00:	d1 40       	sbci	r29, 0x01	; 1
     c02:	c9 5f       	subi	r28, 0xF9	; 249
     c04:	de 4f       	sbci	r29, 0xFE	; 254
     c06:	88 81       	ld	r24, Y
     c08:	c7 50       	subi	r28, 0x07	; 7
     c0a:	d1 40       	sbci	r29, 0x01	; 1
     c0c:	f7 01       	movw	r30, r14
     c0e:	e8 0f       	add	r30, r24
     c10:	f1 1d       	adc	r31, r1
     c12:	80 81       	ld	r24, Z
     c14:	80 72       	andi	r24, 0x20	; 32
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	95 95       	asr	r25
     c1a:	87 95       	ror	r24
     c1c:	95 95       	asr	r25
     c1e:	87 95       	ror	r24
     c20:	95 95       	asr	r25
     c22:	87 95       	ror	r24
     c24:	95 95       	asr	r25
     c26:	87 95       	ror	r24
     c28:	95 95       	asr	r25
     c2a:	87 95       	ror	r24
     c2c:	e1 e0       	ldi	r30, 0x01	; 1
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	ec 0f       	add	r30, r28
     c32:	fd 1f       	adc	r31, r29
     c34:	e2 0f       	add	r30, r18
     c36:	f1 1d       	adc	r31, r1
     c38:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     c3a:	ca 5f       	subi	r28, 0xFA	; 250
     c3c:	de 4f       	sbci	r29, 0xFE	; 254
     c3e:	88 81       	ld	r24, Y
     c40:	c6 50       	subi	r28, 0x06	; 6
     c42:	d1 40       	sbci	r29, 0x01	; 1
     c44:	8f 5f       	subi	r24, 0xFF	; 255
     c46:	ca 5f       	subi	r28, 0xFA	; 250
     c48:	de 4f       	sbci	r29, 0xFE	; 254
     c4a:	88 83       	st	Y, r24
     c4c:	c6 50       	subi	r28, 0x06	; 6
     c4e:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_4);
     c50:	ca 5f       	subi	r28, 0xFA	; 250
     c52:	de 4f       	sbci	r29, 0xFE	; 254
     c54:	28 81       	ld	r18, Y
     c56:	c6 50       	subi	r28, 0x06	; 6
     c58:	d1 40       	sbci	r29, 0x01	; 1
     c5a:	c9 5f       	subi	r28, 0xF9	; 249
     c5c:	de 4f       	sbci	r29, 0xFE	; 254
     c5e:	88 81       	ld	r24, Y
     c60:	c7 50       	subi	r28, 0x07	; 7
     c62:	d1 40       	sbci	r29, 0x01	; 1
     c64:	f7 01       	movw	r30, r14
     c66:	e8 0f       	add	r30, r24
     c68:	f1 1d       	adc	r31, r1
     c6a:	80 81       	ld	r24, Z
     c6c:	80 71       	andi	r24, 0x10	; 16
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	95 95       	asr	r25
     c72:	87 95       	ror	r24
     c74:	95 95       	asr	r25
     c76:	87 95       	ror	r24
     c78:	95 95       	asr	r25
     c7a:	87 95       	ror	r24
     c7c:	95 95       	asr	r25
     c7e:	87 95       	ror	r24
     c80:	e1 e0       	ldi	r30, 0x01	; 1
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	ec 0f       	add	r30, r28
     c86:	fd 1f       	adc	r31, r29
     c88:	e2 0f       	add	r30, r18
     c8a:	f1 1d       	adc	r31, r1
     c8c:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     c8e:	ca 5f       	subi	r28, 0xFA	; 250
     c90:	de 4f       	sbci	r29, 0xFE	; 254
     c92:	88 81       	ld	r24, Y
     c94:	c6 50       	subi	r28, 0x06	; 6
     c96:	d1 40       	sbci	r29, 0x01	; 1
     c98:	8f 5f       	subi	r24, 0xFF	; 255
     c9a:	ca 5f       	subi	r28, 0xFA	; 250
     c9c:	de 4f       	sbci	r29, 0xFE	; 254
     c9e:	88 83       	st	Y, r24
     ca0:	c6 50       	subi	r28, 0x06	; 6
     ca2:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_3);
     ca4:	ca 5f       	subi	r28, 0xFA	; 250
     ca6:	de 4f       	sbci	r29, 0xFE	; 254
     ca8:	28 81       	ld	r18, Y
     caa:	c6 50       	subi	r28, 0x06	; 6
     cac:	d1 40       	sbci	r29, 0x01	; 1
     cae:	c9 5f       	subi	r28, 0xF9	; 249
     cb0:	de 4f       	sbci	r29, 0xFE	; 254
     cb2:	88 81       	ld	r24, Y
     cb4:	c7 50       	subi	r28, 0x07	; 7
     cb6:	d1 40       	sbci	r29, 0x01	; 1
     cb8:	f7 01       	movw	r30, r14
     cba:	e8 0f       	add	r30, r24
     cbc:	f1 1d       	adc	r31, r1
     cbe:	80 81       	ld	r24, Z
     cc0:	88 70       	andi	r24, 0x08	; 8
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	95 95       	asr	r25
     cc6:	87 95       	ror	r24
     cc8:	95 95       	asr	r25
     cca:	87 95       	ror	r24
     ccc:	95 95       	asr	r25
     cce:	87 95       	ror	r24
     cd0:	e1 e0       	ldi	r30, 0x01	; 1
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	ec 0f       	add	r30, r28
     cd6:	fd 1f       	adc	r31, r29
     cd8:	e2 0f       	add	r30, r18
     cda:	f1 1d       	adc	r31, r1
     cdc:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     cde:	ca 5f       	subi	r28, 0xFA	; 250
     ce0:	de 4f       	sbci	r29, 0xFE	; 254
     ce2:	88 81       	ld	r24, Y
     ce4:	c6 50       	subi	r28, 0x06	; 6
     ce6:	d1 40       	sbci	r29, 0x01	; 1
     ce8:	8f 5f       	subi	r24, 0xFF	; 255
     cea:	ca 5f       	subi	r28, 0xFA	; 250
     cec:	de 4f       	sbci	r29, 0xFE	; 254
     cee:	88 83       	st	Y, r24
     cf0:	c6 50       	subi	r28, 0x06	; 6
     cf2:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_2);
     cf4:	ca 5f       	subi	r28, 0xFA	; 250
     cf6:	de 4f       	sbci	r29, 0xFE	; 254
     cf8:	28 81       	ld	r18, Y
     cfa:	c6 50       	subi	r28, 0x06	; 6
     cfc:	d1 40       	sbci	r29, 0x01	; 1
     cfe:	c9 5f       	subi	r28, 0xF9	; 249
     d00:	de 4f       	sbci	r29, 0xFE	; 254
     d02:	88 81       	ld	r24, Y
     d04:	c7 50       	subi	r28, 0x07	; 7
     d06:	d1 40       	sbci	r29, 0x01	; 1
     d08:	f7 01       	movw	r30, r14
     d0a:	e8 0f       	add	r30, r24
     d0c:	f1 1d       	adc	r31, r1
     d0e:	80 81       	ld	r24, Z
     d10:	84 70       	andi	r24, 0x04	; 4
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	95 95       	asr	r25
     d16:	87 95       	ror	r24
     d18:	95 95       	asr	r25
     d1a:	87 95       	ror	r24
     d1c:	e1 e0       	ldi	r30, 0x01	; 1
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	ec 0f       	add	r30, r28
     d22:	fd 1f       	adc	r31, r29
     d24:	e2 0f       	add	r30, r18
     d26:	f1 1d       	adc	r31, r1
     d28:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     d2a:	ca 5f       	subi	r28, 0xFA	; 250
     d2c:	de 4f       	sbci	r29, 0xFE	; 254
     d2e:	88 81       	ld	r24, Y
     d30:	c6 50       	subi	r28, 0x06	; 6
     d32:	d1 40       	sbci	r29, 0x01	; 1
     d34:	8f 5f       	subi	r24, 0xFF	; 255
     d36:	ca 5f       	subi	r28, 0xFA	; 250
     d38:	de 4f       	sbci	r29, 0xFE	; 254
     d3a:	88 83       	st	Y, r24
     d3c:	c6 50       	subi	r28, 0x06	; 6
     d3e:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_1);
     d40:	ca 5f       	subi	r28, 0xFA	; 250
     d42:	de 4f       	sbci	r29, 0xFE	; 254
     d44:	28 81       	ld	r18, Y
     d46:	c6 50       	subi	r28, 0x06	; 6
     d48:	d1 40       	sbci	r29, 0x01	; 1
     d4a:	c9 5f       	subi	r28, 0xF9	; 249
     d4c:	de 4f       	sbci	r29, 0xFE	; 254
     d4e:	88 81       	ld	r24, Y
     d50:	c7 50       	subi	r28, 0x07	; 7
     d52:	d1 40       	sbci	r29, 0x01	; 1
     d54:	f7 01       	movw	r30, r14
     d56:	e8 0f       	add	r30, r24
     d58:	f1 1d       	adc	r31, r1
     d5a:	80 81       	ld	r24, Z
     d5c:	82 70       	andi	r24, 0x02	; 2
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	95 95       	asr	r25
     d62:	87 95       	ror	r24
     d64:	e1 e0       	ldi	r30, 0x01	; 1
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	ec 0f       	add	r30, r28
     d6a:	fd 1f       	adc	r31, r29
     d6c:	e2 0f       	add	r30, r18
     d6e:	f1 1d       	adc	r31, r1
     d70:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     d72:	ca 5f       	subi	r28, 0xFA	; 250
     d74:	de 4f       	sbci	r29, 0xFE	; 254
     d76:	88 81       	ld	r24, Y
     d78:	c6 50       	subi	r28, 0x06	; 6
     d7a:	d1 40       	sbci	r29, 0x01	; 1
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	ca 5f       	subi	r28, 0xFA	; 250
     d80:	de 4f       	sbci	r29, 0xFE	; 254
     d82:	88 83       	st	Y, r24
     d84:	c6 50       	subi	r28, 0x06	; 6
     d86:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_0);
     d88:	ca 5f       	subi	r28, 0xFA	; 250
     d8a:	de 4f       	sbci	r29, 0xFE	; 254
     d8c:	98 81       	ld	r25, Y
     d8e:	c6 50       	subi	r28, 0x06	; 6
     d90:	d1 40       	sbci	r29, 0x01	; 1
     d92:	c9 5f       	subi	r28, 0xF9	; 249
     d94:	de 4f       	sbci	r29, 0xFE	; 254
     d96:	88 81       	ld	r24, Y
     d98:	c7 50       	subi	r28, 0x07	; 7
     d9a:	d1 40       	sbci	r29, 0x01	; 1
     d9c:	f7 01       	movw	r30, r14
     d9e:	e8 0f       	add	r30, r24
     da0:	f1 1d       	adc	r31, r1
     da2:	80 81       	ld	r24, Z
     da4:	81 70       	andi	r24, 0x01	; 1
     da6:	e1 e0       	ldi	r30, 0x01	; 1
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	ec 0f       	add	r30, r28
     dac:	fd 1f       	adc	r31, r29
     dae:	e9 0f       	add	r30, r25
     db0:	f1 1d       	adc	r31, r1
     db2:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     db4:	ca 5f       	subi	r28, 0xFA	; 250
     db6:	de 4f       	sbci	r29, 0xFE	; 254
     db8:	88 81       	ld	r24, Y
     dba:	c6 50       	subi	r28, 0x06	; 6
     dbc:	d1 40       	sbci	r29, 0x01	; 1
     dbe:	8f 5f       	subi	r24, 0xFF	; 255
     dc0:	ca 5f       	subi	r28, 0xFA	; 250
     dc2:	de 4f       	sbci	r29, 0xFE	; 254
     dc4:	88 83       	st	Y, r24
     dc6:	c6 50       	subi	r28, 0x06	; 6
     dc8:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t volatile iterator_of_BitArr = 0;
	/*initializing the iterator for the array of the inserted Characters in the string*/
	uint8_t volatile iterator_of_characters = 0;
	/*assigning the bits of the character in the passed string to the array of bits*/
	/*bits are arranged in the array the form of an extra long number"Index 0:MSB,..,..,..,. . .,Index N:LSB"*/
	for(; iterator_of_characters < StrLength; iterator_of_characters++)
     dca:	c9 5f       	subi	r28, 0xF9	; 249
     dcc:	de 4f       	sbci	r29, 0xFE	; 254
     dce:	88 81       	ld	r24, Y
     dd0:	c7 50       	subi	r28, 0x07	; 7
     dd2:	d1 40       	sbci	r29, 0x01	; 1
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
     dd6:	c9 5f       	subi	r28, 0xF9	; 249
     dd8:	de 4f       	sbci	r29, 0xFE	; 254
     dda:	88 83       	st	Y, r24
     ddc:	c7 50       	subi	r28, 0x07	; 7
     dde:	d1 40       	sbci	r29, 0x01	; 1
     de0:	c9 5f       	subi	r28, 0xF9	; 249
     de2:	de 4f       	sbci	r29, 0xFE	; 254
     de4:	88 81       	ld	r24, Y
     de6:	c7 50       	subi	r28, 0x07	; 7
     de8:	d1 40       	sbci	r29, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	cd 5f       	subi	r28, 0xFD	; 253
     dee:	de 4f       	sbci	r29, 0xFE	; 254
     df0:	28 81       	ld	r18, Y
     df2:	39 81       	ldd	r19, Y+1	; 0x01
     df4:	c3 50       	subi	r28, 0x03	; 3
     df6:	d1 40       	sbci	r29, 0x01	; 1
     df8:	82 17       	cp	r24, r18
     dfa:	93 07       	cpc	r25, r19
     dfc:	08 f4       	brcc	.+2      	; 0xe00 <CRC_16_Chk+0x314>
     dfe:	af ce       	rjmp	.-674    	; 0xb5e <CRC_16_Chk+0x72>
		iterator_of_BitArr++;
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_0);
		iterator_of_BitArr++;
	}
	/*calculating the size of the array of bits taking into consideration the size of the 16 bits of CRC_16*/
	BitArr_Size = iterator_of_BitArr;
     e00:	ca 5f       	subi	r28, 0xFA	; 250
     e02:	de 4f       	sbci	r29, 0xFE	; 254
     e04:	88 81       	ld	r24, Y
     e06:	c6 50       	subi	r28, 0x06	; 6
     e08:	d1 40       	sbci	r29, 0x01	; 1
     e0a:	cb 5f       	subi	r28, 0xFB	; 251
     e0c:	de 4f       	sbci	r29, 0xFE	; 254
     e0e:	88 83       	st	Y, r24
     e10:	c5 50       	subi	r28, 0x05	; 5
     e12:	d1 40       	sbci	r29, 0x01	; 1
	/*reset the iterator of the Bits Array to zero to iterate through the array*/
	iterator_of_BitArr = 0;
     e14:	ca 5f       	subi	r28, 0xFA	; 250
     e16:	de 4f       	sbci	r29, 0xFE	; 254
     e18:	18 82       	st	Y, r1
     e1a:	c6 50       	subi	r28, 0x06	; 6
     e1c:	d1 40       	sbci	r29, 0x01	; 1
	/*Moving to the first occurance of high bit to start our CRC calculation*/
	while(BitArr[iterator_of_BitArr]!=1)
     e1e:	0b c0       	rjmp	.+22     	; 0xe36 <CRC_16_Chk+0x34a>
	{
		/*increment the iterator to the first occurance of High bit*/
		iterator_of_BitArr++;
     e20:	ca 5f       	subi	r28, 0xFA	; 250
     e22:	de 4f       	sbci	r29, 0xFE	; 254
     e24:	88 81       	ld	r24, Y
     e26:	c6 50       	subi	r28, 0x06	; 6
     e28:	d1 40       	sbci	r29, 0x01	; 1
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	ca 5f       	subi	r28, 0xFA	; 250
     e2e:	de 4f       	sbci	r29, 0xFE	; 254
     e30:	88 83       	st	Y, r24
     e32:	c6 50       	subi	r28, 0x06	; 6
     e34:	d1 40       	sbci	r29, 0x01	; 1
	/*calculating the size of the array of bits taking into consideration the size of the 16 bits of CRC_16*/
	BitArr_Size = iterator_of_BitArr;
	/*reset the iterator of the Bits Array to zero to iterate through the array*/
	iterator_of_BitArr = 0;
	/*Moving to the first occurance of high bit to start our CRC calculation*/
	while(BitArr[iterator_of_BitArr]!=1)
     e36:	ca 5f       	subi	r28, 0xFA	; 250
     e38:	de 4f       	sbci	r29, 0xFE	; 254
     e3a:	88 81       	ld	r24, Y
     e3c:	c6 50       	subi	r28, 0x06	; 6
     e3e:	d1 40       	sbci	r29, 0x01	; 1
     e40:	e1 e0       	ldi	r30, 0x01	; 1
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	ec 0f       	add	r30, r28
     e46:	fd 1f       	adc	r31, r29
     e48:	e8 0f       	add	r30, r24
     e4a:	f1 1d       	adc	r31, r1
     e4c:	80 81       	ld	r24, Z
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	39 f7       	brne	.-50     	; 0xe20 <CRC_16_Chk+0x334>
	{
		/*increment the iterator to the first occurance of High bit*/
		iterator_of_BitArr++;
	}
	/*increment by one to the first element after the first high bit in the array of bits*/
	iterator_of_BitArr++;
     e52:	ca 5f       	subi	r28, 0xFA	; 250
     e54:	de 4f       	sbci	r29, 0xFE	; 254
     e56:	88 81       	ld	r24, Y
     e58:	c6 50       	subi	r28, 0x06	; 6
     e5a:	d1 40       	sbci	r29, 0x01	; 1
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	ca 5f       	subi	r28, 0xFA	; 250
     e60:	de 4f       	sbci	r29, 0xFE	; 254
     e62:	88 83       	st	Y, r24
     e64:	c6 50       	subi	r28, 0x06	; 6
     e66:	d1 40       	sbci	r29, 0x01	; 1
	/*setting the window value*/
	for (uint8_t i = 0; i<=15; i++)
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	41 c0       	rjmp	.+130    	; 0xeee <CRC_16_Chk+0x402>
	{
		Window_16_Element &=~(1<<(15-i));
     e6c:	86 2f       	mov	r24, r22
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	4f e0       	ldi	r20, 0x0F	; 15
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	48 1b       	sub	r20, r24
     e76:	59 0b       	sbc	r21, r25
     e78:	21 e0       	ldi	r18, 0x01	; 1
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	04 2e       	mov	r0, r20
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <CRC_16_Chk+0x398>
     e80:	22 0f       	add	r18, r18
     e82:	33 1f       	adc	r19, r19
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <CRC_16_Chk+0x394>
     e88:	20 95       	com	r18
     e8a:	30 95       	com	r19
     e8c:	cf 5f       	subi	r28, 0xFF	; 255
     e8e:	de 4f       	sbci	r29, 0xFE	; 254
     e90:	e8 81       	ld	r30, Y
     e92:	f9 81       	ldd	r31, Y+1	; 0x01
     e94:	c1 50       	subi	r28, 0x01	; 1
     e96:	d1 40       	sbci	r29, 0x01	; 1
     e98:	2e 23       	and	r18, r30
     e9a:	3f 23       	and	r19, r31
     e9c:	cf 5f       	subi	r28, 0xFF	; 255
     e9e:	de 4f       	sbci	r29, 0xFE	; 254
     ea0:	39 83       	std	Y+1, r19	; 0x01
     ea2:	28 83       	st	Y, r18
     ea4:	c1 50       	subi	r28, 0x01	; 1
     ea6:	d1 40       	sbci	r29, 0x01	; 1
		Window_16_Element |= (BitArr[iterator_of_BitArr+i]<<(15-i));
     ea8:	ca 5f       	subi	r28, 0xFA	; 250
     eaa:	de 4f       	sbci	r29, 0xFE	; 254
     eac:	28 81       	ld	r18, Y
     eae:	c6 50       	subi	r28, 0x06	; 6
     eb0:	d1 40       	sbci	r29, 0x01	; 1
     eb2:	82 0f       	add	r24, r18
     eb4:	91 1d       	adc	r25, r1
     eb6:	e1 e0       	ldi	r30, 0x01	; 1
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	ec 0f       	add	r30, r28
     ebc:	fd 1f       	adc	r31, r29
     ebe:	e8 0f       	add	r30, r24
     ec0:	f9 1f       	adc	r31, r25
     ec2:	80 81       	ld	r24, Z
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <CRC_16_Chk+0x3e0>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	4a 95       	dec	r20
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <CRC_16_Chk+0x3dc>
     ed0:	cf 5f       	subi	r28, 0xFF	; 255
     ed2:	de 4f       	sbci	r29, 0xFE	; 254
     ed4:	28 81       	ld	r18, Y
     ed6:	39 81       	ldd	r19, Y+1	; 0x01
     ed8:	c1 50       	subi	r28, 0x01	; 1
     eda:	d1 40       	sbci	r29, 0x01	; 1
     edc:	82 2b       	or	r24, r18
     ede:	93 2b       	or	r25, r19
     ee0:	cf 5f       	subi	r28, 0xFF	; 255
     ee2:	de 4f       	sbci	r29, 0xFE	; 254
     ee4:	99 83       	std	Y+1, r25	; 0x01
     ee6:	88 83       	st	Y, r24
     ee8:	c1 50       	subi	r28, 0x01	; 1
     eea:	d1 40       	sbci	r29, 0x01	; 1
		iterator_of_BitArr++;
	}
	/*increment by one to the first element after the first high bit in the array of bits*/
	iterator_of_BitArr++;
	/*setting the window value*/
	for (uint8_t i = 0; i<=15; i++)
     eec:	6f 5f       	subi	r22, 0xFF	; 255
     eee:	60 31       	cpi	r22, 0x10	; 16
     ef0:	08 f4       	brcc	.+2      	; 0xef4 <CRC_16_Chk+0x408>
     ef2:	bc cf       	rjmp	.-136    	; 0xe6c <CRC_16_Chk+0x380>
     ef4:	dd c0       	rjmp	.+442    	; 0x10b0 <CRC_16_Chk+0x5c4>
	}
	/*Start the modulo Operation continues until the polynomial doesn't fit into the reminder*/
	while(iterator_of_BitArr <= BitArr_Size-15)
	{
		/*Xoring operation between the Window and the polynomial*/
		Window_16_Element ^= polynomial;
     ef6:	cf 5f       	subi	r28, 0xFF	; 255
     ef8:	de 4f       	sbci	r29, 0xFE	; 254
     efa:	88 81       	ld	r24, Y
     efc:	99 81       	ldd	r25, Y+1	; 0x01
     efe:	c1 50       	subi	r28, 0x01	; 1
     f00:	d1 40       	sbci	r29, 0x01	; 1
     f02:	b5 e0       	ldi	r27, 0x05	; 5
     f04:	8b 27       	eor	r24, r27
     f06:	90 58       	subi	r25, 0x80	; 128
     f08:	cf 5f       	subi	r28, 0xFF	; 255
     f0a:	de 4f       	sbci	r29, 0xFE	; 254
     f0c:	99 83       	std	Y+1, r25	; 0x01
     f0e:	88 83       	st	Y, r24
     f10:	c1 50       	subi	r28, 0x01	; 1
     f12:	d1 40       	sbci	r29, 0x01	; 1
		/*checking if the most signifigant Bit in the window is zero*/
		if(READ_BIT(Window_16_Element,15)==0)
     f14:	cf 5f       	subi	r28, 0xFF	; 255
     f16:	de 4f       	sbci	r29, 0xFE	; 254
     f18:	88 81       	ld	r24, Y
     f1a:	99 81       	ldd	r25, Y+1	; 0x01
     f1c:	c1 50       	subi	r28, 0x01	; 1
     f1e:	d1 40       	sbci	r29, 0x01	; 1
     f20:	99 23       	and	r25, r25
     f22:	0c f0       	brlt	.+2      	; 0xf26 <CRC_16_Chk+0x43a>
     f24:	4c c0       	rjmp	.+152    	; 0xfbe <CRC_16_Chk+0x4d2>
     f26:	90 c0       	rjmp	.+288    	; 0x1048 <CRC_16_Chk+0x55c>
		{
			/*shift until we reach the first one*/
			while(READ_BIT(Window_16_Element,15)==0)
			{
				/*check before shifting that you haven't exceeded the limits of shifting*/
				if(iterator_of_BitArr >= BitArr_Size-15)
     f28:	ca 5f       	subi	r28, 0xFA	; 250
     f2a:	de 4f       	sbci	r29, 0xFE	; 254
     f2c:	28 81       	ld	r18, Y
     f2e:	c6 50       	subi	r28, 0x06	; 6
     f30:	d1 40       	sbci	r29, 0x01	; 1
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	cb 5f       	subi	r28, 0xFB	; 251
     f36:	de 4f       	sbci	r29, 0xFE	; 254
     f38:	88 81       	ld	r24, Y
     f3a:	c5 50       	subi	r28, 0x05	; 5
     f3c:	d1 40       	sbci	r29, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0f 97       	sbiw	r24, 0x0f	; 15
     f42:	28 17       	cp	r18, r24
     f44:	39 07       	cpc	r19, r25
     f46:	3c f0       	brlt	.+14     	; 0xf56 <CRC_16_Chk+0x46a>
				{
					/*if limits of shifting is about to be exceeded rise a flag to break from the outer loop and break from inner loop*/
					Flag = 1;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	c0 50       	subi	r28, 0x00	; 0
     f4c:	df 4f       	sbci	r29, 0xFF	; 255
     f4e:	88 83       	st	Y, r24
     f50:	c0 50       	subi	r28, 0x00	; 0
     f52:	d1 40       	sbci	r29, 0x01	; 1
					break;
     f54:	3d c0       	rjmp	.+122    	; 0xfd0 <CRC_16_Chk+0x4e4>
				}
				/*if the limits of shifting aren't about to be exceeded then shift and add a new element from the array of bits to the window*/
				/*shifting*/
				Window_16_Element <<=1;
     f56:	cf 5f       	subi	r28, 0xFF	; 255
     f58:	de 4f       	sbci	r29, 0xFE	; 254
     f5a:	88 81       	ld	r24, Y
     f5c:	99 81       	ldd	r25, Y+1	; 0x01
     f5e:	c1 50       	subi	r28, 0x01	; 1
     f60:	d1 40       	sbci	r29, 0x01	; 1
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	cf 5f       	subi	r28, 0xFF	; 255
     f68:	de 4f       	sbci	r29, 0xFE	; 254
     f6a:	99 83       	std	Y+1, r25	; 0x01
     f6c:	88 83       	st	Y, r24
     f6e:	c1 50       	subi	r28, 0x01	; 1
     f70:	d1 40       	sbci	r29, 0x01	; 1
				/*Adding new element from the array of bits to the window*/
				Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
     f72:	ca 5f       	subi	r28, 0xFA	; 250
     f74:	de 4f       	sbci	r29, 0xFE	; 254
     f76:	e8 81       	ld	r30, Y
     f78:	c6 50       	subi	r28, 0x06	; 6
     f7a:	d1 40       	sbci	r29, 0x01	; 1
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	70 96       	adiw	r30, 0x10	; 16
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	8c 0f       	add	r24, r28
     f86:	9d 1f       	adc	r25, r29
     f88:	e8 0f       	add	r30, r24
     f8a:	f9 1f       	adc	r31, r25
     f8c:	20 81       	ld	r18, Z
     f8e:	cf 5f       	subi	r28, 0xFF	; 255
     f90:	de 4f       	sbci	r29, 0xFE	; 254
     f92:	88 81       	ld	r24, Y
     f94:	99 81       	ldd	r25, Y+1	; 0x01
     f96:	c1 50       	subi	r28, 0x01	; 1
     f98:	d1 40       	sbci	r29, 0x01	; 1
     f9a:	82 2b       	or	r24, r18
     f9c:	cf 5f       	subi	r28, 0xFF	; 255
     f9e:	de 4f       	sbci	r29, 0xFE	; 254
     fa0:	99 83       	std	Y+1, r25	; 0x01
     fa2:	88 83       	st	Y, r24
     fa4:	c1 50       	subi	r28, 0x01	; 1
     fa6:	d1 40       	sbci	r29, 0x01	; 1
				/*increment the iterator of bit array*/
				iterator_of_BitArr++;
     fa8:	ca 5f       	subi	r28, 0xFA	; 250
     faa:	de 4f       	sbci	r29, 0xFE	; 254
     fac:	88 81       	ld	r24, Y
     fae:	c6 50       	subi	r28, 0x06	; 6
     fb0:	d1 40       	sbci	r29, 0x01	; 1
     fb2:	8f 5f       	subi	r24, 0xFF	; 255
     fb4:	ca 5f       	subi	r28, 0xFA	; 250
     fb6:	de 4f       	sbci	r29, 0xFE	; 254
     fb8:	88 83       	st	Y, r24
     fba:	c6 50       	subi	r28, 0x06	; 6
     fbc:	d1 40       	sbci	r29, 0x01	; 1
		Window_16_Element ^= polynomial;
		/*checking if the most signifigant Bit in the window is zero*/
		if(READ_BIT(Window_16_Element,15)==0)
		{
			/*shift until we reach the first one*/
			while(READ_BIT(Window_16_Element,15)==0)
     fbe:	cf 5f       	subi	r28, 0xFF	; 255
     fc0:	de 4f       	sbci	r29, 0xFE	; 254
     fc2:	88 81       	ld	r24, Y
     fc4:	99 81       	ldd	r25, Y+1	; 0x01
     fc6:	c1 50       	subi	r28, 0x01	; 1
     fc8:	d1 40       	sbci	r29, 0x01	; 1
     fca:	99 23       	and	r25, r25
     fcc:	0c f0       	brlt	.+2      	; 0xfd0 <CRC_16_Chk+0x4e4>
     fce:	ac cf       	rjmp	.-168    	; 0xf28 <CRC_16_Chk+0x43c>
				Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
				/*increment the iterator of bit array*/
				iterator_of_BitArr++;
			}
			/*checking if the flag is rised to perform a break from the outer loop*/
			if(Flag)
     fd0:	c0 50       	subi	r28, 0x00	; 0
     fd2:	df 4f       	sbci	r29, 0xFF	; 255
     fd4:	88 81       	ld	r24, Y
     fd6:	c0 50       	subi	r28, 0x00	; 0
     fd8:	d1 40       	sbci	r29, 0x01	; 1
     fda:	81 11       	cpse	r24, r1
     fdc:	7a c0       	rjmp	.+244    	; 0x10d2 <CRC_16_Chk+0x5e6>
			{
				break;
			}
			/*shifting*/
			Window_16_Element <<=1;
     fde:	cf 5f       	subi	r28, 0xFF	; 255
     fe0:	de 4f       	sbci	r29, 0xFE	; 254
     fe2:	88 81       	ld	r24, Y
     fe4:	99 81       	ldd	r25, Y+1	; 0x01
     fe6:	c1 50       	subi	r28, 0x01	; 1
     fe8:	d1 40       	sbci	r29, 0x01	; 1
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	cf 5f       	subi	r28, 0xFF	; 255
     ff0:	de 4f       	sbci	r29, 0xFE	; 254
     ff2:	99 83       	std	Y+1, r25	; 0x01
     ff4:	88 83       	st	Y, r24
     ff6:	c1 50       	subi	r28, 0x01	; 1
     ff8:	d1 40       	sbci	r29, 0x01	; 1
			/*Adding new element from the array of bits to the window*/
			Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
     ffa:	ca 5f       	subi	r28, 0xFA	; 250
     ffc:	de 4f       	sbci	r29, 0xFE	; 254
     ffe:	e8 81       	ld	r30, Y
    1000:	c6 50       	subi	r28, 0x06	; 6
    1002:	d1 40       	sbci	r29, 0x01	; 1
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	70 96       	adiw	r30, 0x10	; 16
    1008:	a1 e0       	ldi	r26, 0x01	; 1
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	ac 0f       	add	r26, r28
    100e:	bd 1f       	adc	r27, r29
    1010:	ea 0f       	add	r30, r26
    1012:	fb 1f       	adc	r31, r27
    1014:	20 81       	ld	r18, Z
    1016:	cf 5f       	subi	r28, 0xFF	; 255
    1018:	de 4f       	sbci	r29, 0xFE	; 254
    101a:	88 81       	ld	r24, Y
    101c:	99 81       	ldd	r25, Y+1	; 0x01
    101e:	c1 50       	subi	r28, 0x01	; 1
    1020:	d1 40       	sbci	r29, 0x01	; 1
    1022:	82 2b       	or	r24, r18
    1024:	cf 5f       	subi	r28, 0xFF	; 255
    1026:	de 4f       	sbci	r29, 0xFE	; 254
    1028:	99 83       	std	Y+1, r25	; 0x01
    102a:	88 83       	st	Y, r24
    102c:	c1 50       	subi	r28, 0x01	; 1
    102e:	d1 40       	sbci	r29, 0x01	; 1
			/*increment the iterator of bit array*/
			iterator_of_BitArr++;
    1030:	ca 5f       	subi	r28, 0xFA	; 250
    1032:	de 4f       	sbci	r29, 0xFE	; 254
    1034:	88 81       	ld	r24, Y
    1036:	c6 50       	subi	r28, 0x06	; 6
    1038:	d1 40       	sbci	r29, 0x01	; 1
    103a:	8f 5f       	subi	r24, 0xFF	; 255
    103c:	ca 5f       	subi	r28, 0xFA	; 250
    103e:	de 4f       	sbci	r29, 0xFE	; 254
    1040:	88 83       	st	Y, r24
    1042:	c6 50       	subi	r28, 0x06	; 6
    1044:	d1 40       	sbci	r29, 0x01	; 1
    1046:	34 c0       	rjmp	.+104    	; 0x10b0 <CRC_16_Chk+0x5c4>
		}
		else
		{
			/*shifting*/
			Window_16_Element <<=1;
    1048:	cf 5f       	subi	r28, 0xFF	; 255
    104a:	de 4f       	sbci	r29, 0xFE	; 254
    104c:	88 81       	ld	r24, Y
    104e:	99 81       	ldd	r25, Y+1	; 0x01
    1050:	c1 50       	subi	r28, 0x01	; 1
    1052:	d1 40       	sbci	r29, 0x01	; 1
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	cf 5f       	subi	r28, 0xFF	; 255
    105a:	de 4f       	sbci	r29, 0xFE	; 254
    105c:	99 83       	std	Y+1, r25	; 0x01
    105e:	88 83       	st	Y, r24
    1060:	c1 50       	subi	r28, 0x01	; 1
    1062:	d1 40       	sbci	r29, 0x01	; 1
			/*Adding new element from the array of bits to the window*/
			Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
    1064:	ca 5f       	subi	r28, 0xFA	; 250
    1066:	de 4f       	sbci	r29, 0xFE	; 254
    1068:	e8 81       	ld	r30, Y
    106a:	c6 50       	subi	r28, 0x06	; 6
    106c:	d1 40       	sbci	r29, 0x01	; 1
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	70 96       	adiw	r30, 0x10	; 16
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	8c 0f       	add	r24, r28
    1078:	9d 1f       	adc	r25, r29
    107a:	e8 0f       	add	r30, r24
    107c:	f9 1f       	adc	r31, r25
    107e:	20 81       	ld	r18, Z
    1080:	cf 5f       	subi	r28, 0xFF	; 255
    1082:	de 4f       	sbci	r29, 0xFE	; 254
    1084:	88 81       	ld	r24, Y
    1086:	99 81       	ldd	r25, Y+1	; 0x01
    1088:	c1 50       	subi	r28, 0x01	; 1
    108a:	d1 40       	sbci	r29, 0x01	; 1
    108c:	82 2b       	or	r24, r18
    108e:	cf 5f       	subi	r28, 0xFF	; 255
    1090:	de 4f       	sbci	r29, 0xFE	; 254
    1092:	99 83       	std	Y+1, r25	; 0x01
    1094:	88 83       	st	Y, r24
    1096:	c1 50       	subi	r28, 0x01	; 1
    1098:	d1 40       	sbci	r29, 0x01	; 1
			/*increment the iterator of bit array*/
			iterator_of_BitArr++;
    109a:	ca 5f       	subi	r28, 0xFA	; 250
    109c:	de 4f       	sbci	r29, 0xFE	; 254
    109e:	88 81       	ld	r24, Y
    10a0:	c6 50       	subi	r28, 0x06	; 6
    10a2:	d1 40       	sbci	r29, 0x01	; 1
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	ca 5f       	subi	r28, 0xFA	; 250
    10a8:	de 4f       	sbci	r29, 0xFE	; 254
    10aa:	88 83       	st	Y, r24
    10ac:	c6 50       	subi	r28, 0x06	; 6
    10ae:	d1 40       	sbci	r29, 0x01	; 1
	{
		Window_16_Element &=~(1<<(15-i));
		Window_16_Element |= (BitArr[iterator_of_BitArr+i]<<(15-i));
	}
	/*Start the modulo Operation continues until the polynomial doesn't fit into the reminder*/
	while(iterator_of_BitArr <= BitArr_Size-15)
    10b0:	ca 5f       	subi	r28, 0xFA	; 250
    10b2:	de 4f       	sbci	r29, 0xFE	; 254
    10b4:	28 81       	ld	r18, Y
    10b6:	c6 50       	subi	r28, 0x06	; 6
    10b8:	d1 40       	sbci	r29, 0x01	; 1
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	cb 5f       	subi	r28, 0xFB	; 251
    10be:	de 4f       	sbci	r29, 0xFE	; 254
    10c0:	88 81       	ld	r24, Y
    10c2:	c5 50       	subi	r28, 0x05	; 5
    10c4:	d1 40       	sbci	r29, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0f 97       	sbiw	r24, 0x0f	; 15
    10ca:	82 17       	cp	r24, r18
    10cc:	93 07       	cpc	r25, r19
    10ce:	0c f0       	brlt	.+2      	; 0x10d2 <CRC_16_Chk+0x5e6>
    10d0:	12 cf       	rjmp	.-476    	; 0xef6 <CRC_16_Chk+0x40a>
			iterator_of_BitArr++;
		}
		
	}
	/*return the calculated CRC*/
	*CalculatedCRC = Window_16_Element;
    10d2:	cf 5f       	subi	r28, 0xFF	; 255
    10d4:	de 4f       	sbci	r29, 0xFE	; 254
    10d6:	88 81       	ld	r24, Y
    10d8:	99 81       	ldd	r25, Y+1	; 0x01
    10da:	c1 50       	subi	r28, 0x01	; 1
    10dc:	d1 40       	sbci	r29, 0x01	; 1
    10de:	d8 01       	movw	r26, r16
    10e0:	8d 93       	st	X+, r24
    10e2:	9c 93       	st	X, r25
	
	if(Window_16_Element != 0)
    10e4:	cf 5f       	subi	r28, 0xFF	; 255
    10e6:	de 4f       	sbci	r29, 0xFE	; 254
    10e8:	88 81       	ld	r24, Y
    10ea:	99 81       	ldd	r25, Y+1	; 0x01
    10ec:	c1 50       	subi	r28, 0x01	; 1
    10ee:	d1 40       	sbci	r29, 0x01	; 1
    10f0:	89 2b       	or	r24, r25
    10f2:	11 f4       	brne	.+4      	; 0x10f8 <CRC_16_Chk+0x60c>
{
	/*change array of character to array of bits*/
	/*initialize the array of bits*/
	uint8_t volatile BitArr[255] = {0};
	/*Error Return value*/
	uint8_t ErrRetVal = ERROR_OK;
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <CRC_16_Chk+0x60e>
	}
	/*return the calculated CRC*/
	*CalculatedCRC = Window_16_Element;
	
	if(Window_16_Element != 0)
		ErrRetVal = ERROR_NOK;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
		
	return ErrRetVal;
    10fa:	c9 5f       	subi	r28, 0xF9	; 249
    10fc:	de 4f       	sbci	r29, 0xFE	; 254
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	08 95       	ret

00001116 <main>:
//Load={'A','L','I','\0'};
//uint8_t *MAC = (uint8_t*)"ALI";
uint8_t MAC[6] = {0x41,0x4C,0x49,0x00,0x27,0xEB};
uint16_t low;
int main(void)
{
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	00 d0       	rcall	.+0      	; 0x111c <main+0x6>
    111c:	00 d0       	rcall	.+0      	; 0x111e <main+0x8>
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
	//uint8_t iterator = 0;
	//while(LCD_Init()!= OperationSuccess);
	//DISPLAY_SetState(SystemLoading);
	//STORAGE_MAC_Save(MAC);
	//STORAGE_MAC_Load(Load);
	CRC_16_Calc(Load,&low);
    1122:	64 e9       	ldi	r22, 0x94	; 148
    1124:	71 e0       	ldi	r23, 0x01	; 1
    1126:	80 e6       	ldi	r24, 0x60	; 96
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 45 02 	call	0x48a	; 0x48a <CRC_16_Calc>
	CRC_16_Chk(Load,&low);
    112e:	64 e9       	ldi	r22, 0x94	; 148
    1130:	71 e0       	ldi	r23, 0x01	; 1
    1132:	80 e6       	ldi	r24, 0x60	; 96
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 76 05 	call	0xaec	; 0xaec <CRC_16_Chk>
		//DISPLAY_MainFunction();
		//iterator ++;
		//if(x=='A')
		//DIO_WritePin(PORT_D,PIN0,PIN_HIGH);
		//LCD_SendCommand(0x1C);
		for(volatile uint32_t i = 0; i<25000;i++);
    113a:	19 82       	std	Y+1, r1	; 0x01
    113c:	1a 82       	std	Y+2, r1	; 0x02
    113e:	1b 82       	std	Y+3, r1	; 0x03
    1140:	1c 82       	std	Y+4, r1	; 0x04
    1142:	0b c0       	rjmp	.+22     	; 0x115a <main+0x44>
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	ab 81       	ldd	r26, Y+3	; 0x03
    114a:	bc 81       	ldd	r27, Y+4	; 0x04
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	a1 1d       	adc	r26, r1
    1150:	b1 1d       	adc	r27, r1
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	ab 83       	std	Y+3, r26	; 0x03
    1158:	bc 83       	std	Y+4, r27	; 0x04
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	9a 81       	ldd	r25, Y+2	; 0x02
    115e:	ab 81       	ldd	r26, Y+3	; 0x03
    1160:	bc 81       	ldd	r27, Y+4	; 0x04
    1162:	88 3a       	cpi	r24, 0xA8	; 168
    1164:	91 46       	sbci	r25, 0x61	; 97
    1166:	a1 05       	cpc	r26, r1
    1168:	b1 05       	cpc	r27, r1
    116a:	60 f3       	brcs	.-40     	; 0x1144 <main+0x2e>
    116c:	e6 cf       	rjmp	.-52     	; 0x113a <main+0x24>

0000116e <_exit>:
    116e:	f8 94       	cli

00001170 <__stop_program>:
    1170:	ff cf       	rjmp	.-2      	; 0x1170 <__stop_program>
