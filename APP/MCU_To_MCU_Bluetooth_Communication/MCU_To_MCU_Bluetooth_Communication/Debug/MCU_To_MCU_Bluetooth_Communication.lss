
MCU_To_MCU_Bluetooth_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002062  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00002062  000020f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  0080007e  0080007e  00002114  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002144  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002adb  00000000  00000000  00002450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6b  00000000  00000000  00004f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a78  00000000  00000000  00005b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000970  00000000  00000000  00008610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013dc  00000000  00000000  00008f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001383  00000000  00000000  0000a35c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000b6df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_7>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	75 09       	sbc	r23, r5
      56:	81 09       	sbc	r24, r1
      58:	8d 09       	sbc	r24, r13
      5a:	99 09       	sbc	r25, r9
      5c:	a5 09       	sbc	r26, r5
      5e:	b1 09       	sbc	r27, r1
      60:	bd 09       	sbc	r27, r13

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e2 e6       	ldi	r30, 0x62	; 98
      76:	f0 e2       	ldi	r31, 0x20	; 32
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ae 37       	cpi	r26, 0x7E	; 126
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	ae e7       	ldi	r26, 0x7E	; 126
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ac 3b       	cpi	r26, 0xBC	; 188
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <main>
      98:	0c 94 2f 10 	jmp	0x205e	; 0x205e <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <vPortYieldFromTick>:
	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
	TIMSK = ucLowByte;
}
      a0:	0f 92       	push	r0
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	0f 92       	push	r0
      a8:	1f 92       	push	r1
      aa:	11 24       	eor	r1, r1
      ac:	2f 92       	push	r2
      ae:	3f 92       	push	r3
      b0:	4f 92       	push	r4
      b2:	5f 92       	push	r5
      b4:	6f 92       	push	r6
      b6:	7f 92       	push	r7
      b8:	8f 92       	push	r8
      ba:	9f 92       	push	r9
      bc:	af 92       	push	r10
      be:	bf 92       	push	r11
      c0:	cf 92       	push	r12
      c2:	df 92       	push	r13
      c4:	ef 92       	push	r14
      c6:	ff 92       	push	r15
      c8:	0f 93       	push	r16
      ca:	1f 93       	push	r17
      cc:	2f 93       	push	r18
      ce:	3f 93       	push	r19
      d0:	4f 93       	push	r20
      d2:	5f 93       	push	r21
      d4:	6f 93       	push	r22
      d6:	7f 93       	push	r23
      d8:	8f 93       	push	r24
      da:	9f 93       	push	r25
      dc:	af 93       	push	r26
      de:	bf 93       	push	r27
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	ef 93       	push	r30
      e6:	ff 93       	push	r31
      e8:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end>
      ec:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x1>
      f0:	0d b6       	in	r0, 0x3d	; 61
      f2:	0d 92       	st	X+, r0
      f4:	0e b6       	in	r0, 0x3e	; 62
      f6:	0d 92       	st	X+, r0
      f8:	0e 94 b2 00 	call	0x164	; 0x164 <xTaskIncrementTick>
      fc:	88 23       	and	r24, r24
      fe:	11 f0       	breq	.+4      	; 0x104 <vPortYieldFromTick+0x64>
     100:	0e 94 81 02 	call	0x502	; 0x502 <vTaskSwitchContext>
     104:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end>
     108:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x1>
     10c:	cd 91       	ld	r28, X+
     10e:	cd bf       	out	0x3d, r28	; 61
     110:	dd 91       	ld	r29, X+
     112:	de bf       	out	0x3e, r29	; 62
     114:	ff 91       	pop	r31
     116:	ef 91       	pop	r30
     118:	df 91       	pop	r29
     11a:	cf 91       	pop	r28
     11c:	bf 91       	pop	r27
     11e:	af 91       	pop	r26
     120:	9f 91       	pop	r25
     122:	8f 91       	pop	r24
     124:	7f 91       	pop	r23
     126:	6f 91       	pop	r22
     128:	5f 91       	pop	r21
     12a:	4f 91       	pop	r20
     12c:	3f 91       	pop	r19
     12e:	2f 91       	pop	r18
     130:	1f 91       	pop	r17
     132:	0f 91       	pop	r16
     134:	ff 90       	pop	r15
     136:	ef 90       	pop	r14
     138:	df 90       	pop	r13
     13a:	cf 90       	pop	r12
     13c:	bf 90       	pop	r11
     13e:	af 90       	pop	r10
     140:	9f 90       	pop	r9
     142:	8f 90       	pop	r8
     144:	7f 90       	pop	r7
     146:	6f 90       	pop	r6
     148:	5f 90       	pop	r5
     14a:	4f 90       	pop	r4
     14c:	3f 90       	pop	r3
     14e:	2f 90       	pop	r2
     150:	1f 90       	pop	r1
     152:	0f 90       	pop	r0
     154:	0f be       	out	0x3f, r0	; 63
     156:	0f 90       	pop	r0
     158:	08 95       	ret
	...

0000015c <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     15c:	0e 94 50 00 	call	0xa0	; 0xa0 <vPortYieldFromTick>
		asm volatile ( "reti" );
     160:	18 95       	reti
	...

00000164 <xTaskIncrementTick>:
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	2f 97       	sbiw	r28, 0x0f	; 15
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	19 82       	std	Y+1, r1	; 0x01
     17a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <uxSchedulerSuspended>
     17e:	88 23       	and	r24, r24
     180:	09 f0       	breq	.+2      	; 0x184 <xTaskIncrementTick+0x20>
     182:	ac c1       	rjmp	.+856    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
     184:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <xTickCount>
     188:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <xTickCount+0x1>
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	9b 83       	std	Y+3, r25	; 0x03
     190:	8a 83       	std	Y+2, r24	; 0x02
     192:	8a 81       	ldd	r24, Y+2	; 0x02
     194:	9b 81       	ldd	r25, Y+3	; 0x03
     196:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <xTickCount+0x1>
     19a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <xTickCount>
     19e:	8a 81       	ldd	r24, Y+2	; 0x02
     1a0:	9b 81       	ldd	r25, Y+3	; 0x03
     1a2:	89 2b       	or	r24, r25
     1a4:	d9 f4       	brne	.+54     	; 0x1dc <xTaskIncrementTick+0x78>
     1a6:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <pxDelayedTaskList>
     1aa:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <pxDelayedTaskList+0x1>
     1ae:	9d 83       	std	Y+5, r25	; 0x05
     1b0:	8c 83       	std	Y+4, r24	; 0x04
     1b2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <pxOverflowDelayedTaskList>
     1b6:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <pxOverflowDelayedTaskList+0x1>
     1ba:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <pxDelayedTaskList+0x1>
     1be:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <pxDelayedTaskList>
     1c2:	8c 81       	ldd	r24, Y+4	; 0x04
     1c4:	9d 81       	ldd	r25, Y+5	; 0x05
     1c6:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <pxOverflowDelayedTaskList+0x1>
     1ca:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <pxOverflowDelayedTaskList>
     1ce:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <xNumOfOverflows>
     1d2:	8f 5f       	subi	r24, 0xFF	; 255
     1d4:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <xNumOfOverflows>
     1d8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <prvResetNextTaskUnblockTime>
     1dc:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <xNextTaskUnblockTime>
     1e0:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <xNextTaskUnblockTime+0x1>
     1e4:	2a 81       	ldd	r18, Y+2	; 0x02
     1e6:	3b 81       	ldd	r19, Y+3	; 0x03
     1e8:	28 17       	cp	r18, r24
     1ea:	39 07       	cpc	r19, r25
     1ec:	08 f4       	brcc	.+2      	; 0x1f0 <xTaskIncrementTick+0x8c>
     1ee:	56 c1       	rjmp	.+684    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     1f0:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <pxDelayedTaskList>
     1f4:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <pxDelayedTaskList+0x1>
     1f8:	fc 01       	movw	r30, r24
     1fa:	80 81       	ld	r24, Z
     1fc:	88 23       	and	r24, r24
     1fe:	39 f4       	brne	.+14     	; 0x20e <xTaskIncrementTick+0xaa>
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	9f ef       	ldi	r25, 0xFF	; 255
     204:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <xNextTaskUnblockTime+0x1>
     208:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <xNextTaskUnblockTime>
     20c:	47 c1       	rjmp	.+654    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     20e:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <pxDelayedTaskList>
     212:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <pxDelayedTaskList+0x1>
     216:	fc 01       	movw	r30, r24
     218:	85 81       	ldd	r24, Z+5	; 0x05
     21a:	96 81       	ldd	r25, Z+6	; 0x06
     21c:	fc 01       	movw	r30, r24
     21e:	86 81       	ldd	r24, Z+6	; 0x06
     220:	97 81       	ldd	r25, Z+7	; 0x07
     222:	9f 83       	std	Y+7, r25	; 0x07
     224:	8e 83       	std	Y+6, r24	; 0x06
     226:	8e 81       	ldd	r24, Y+6	; 0x06
     228:	9f 81       	ldd	r25, Y+7	; 0x07
     22a:	fc 01       	movw	r30, r24
     22c:	82 81       	ldd	r24, Z+2	; 0x02
     22e:	93 81       	ldd	r25, Z+3	; 0x03
     230:	99 87       	std	Y+9, r25	; 0x09
     232:	88 87       	std	Y+8, r24	; 0x08
     234:	2a 81       	ldd	r18, Y+2	; 0x02
     236:	3b 81       	ldd	r19, Y+3	; 0x03
     238:	88 85       	ldd	r24, Y+8	; 0x08
     23a:	99 85       	ldd	r25, Y+9	; 0x09
     23c:	28 17       	cp	r18, r24
     23e:	39 07       	cpc	r19, r25
     240:	38 f4       	brcc	.+14     	; 0x250 <xTaskIncrementTick+0xec>
     242:	88 85       	ldd	r24, Y+8	; 0x08
     244:	99 85       	ldd	r25, Y+9	; 0x09
     246:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <xNextTaskUnblockTime+0x1>
     24a:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <xNextTaskUnblockTime>
     24e:	26 c1       	rjmp	.+588    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     250:	8e 81       	ldd	r24, Y+6	; 0x06
     252:	9f 81       	ldd	r25, Y+7	; 0x07
     254:	fc 01       	movw	r30, r24
     256:	82 85       	ldd	r24, Z+10	; 0x0a
     258:	93 85       	ldd	r25, Z+11	; 0x0b
     25a:	9b 87       	std	Y+11, r25	; 0x0b
     25c:	8a 87       	std	Y+10, r24	; 0x0a
     25e:	8e 81       	ldd	r24, Y+6	; 0x06
     260:	9f 81       	ldd	r25, Y+7	; 0x07
     262:	fc 01       	movw	r30, r24
     264:	84 81       	ldd	r24, Z+4	; 0x04
     266:	95 81       	ldd	r25, Z+5	; 0x05
     268:	2e 81       	ldd	r18, Y+6	; 0x06
     26a:	3f 81       	ldd	r19, Y+7	; 0x07
     26c:	f9 01       	movw	r30, r18
     26e:	26 81       	ldd	r18, Z+6	; 0x06
     270:	37 81       	ldd	r19, Z+7	; 0x07
     272:	fc 01       	movw	r30, r24
     274:	35 83       	std	Z+5, r19	; 0x05
     276:	24 83       	std	Z+4, r18	; 0x04
     278:	8e 81       	ldd	r24, Y+6	; 0x06
     27a:	9f 81       	ldd	r25, Y+7	; 0x07
     27c:	fc 01       	movw	r30, r24
     27e:	86 81       	ldd	r24, Z+6	; 0x06
     280:	97 81       	ldd	r25, Z+7	; 0x07
     282:	2e 81       	ldd	r18, Y+6	; 0x06
     284:	3f 81       	ldd	r19, Y+7	; 0x07
     286:	f9 01       	movw	r30, r18
     288:	24 81       	ldd	r18, Z+4	; 0x04
     28a:	35 81       	ldd	r19, Z+5	; 0x05
     28c:	fc 01       	movw	r30, r24
     28e:	33 83       	std	Z+3, r19	; 0x03
     290:	22 83       	std	Z+2, r18	; 0x02
     292:	8a 85       	ldd	r24, Y+10	; 0x0a
     294:	9b 85       	ldd	r25, Y+11	; 0x0b
     296:	fc 01       	movw	r30, r24
     298:	21 81       	ldd	r18, Z+1	; 0x01
     29a:	32 81       	ldd	r19, Z+2	; 0x02
     29c:	8e 81       	ldd	r24, Y+6	; 0x06
     29e:	9f 81       	ldd	r25, Y+7	; 0x07
     2a0:	02 96       	adiw	r24, 0x02	; 2
     2a2:	28 17       	cp	r18, r24
     2a4:	39 07       	cpc	r19, r25
     2a6:	51 f4       	brne	.+20     	; 0x2bc <xTaskIncrementTick+0x158>
     2a8:	8e 81       	ldd	r24, Y+6	; 0x06
     2aa:	9f 81       	ldd	r25, Y+7	; 0x07
     2ac:	fc 01       	movw	r30, r24
     2ae:	26 81       	ldd	r18, Z+6	; 0x06
     2b0:	37 81       	ldd	r19, Z+7	; 0x07
     2b2:	8a 85       	ldd	r24, Y+10	; 0x0a
     2b4:	9b 85       	ldd	r25, Y+11	; 0x0b
     2b6:	fc 01       	movw	r30, r24
     2b8:	32 83       	std	Z+2, r19	; 0x02
     2ba:	21 83       	std	Z+1, r18	; 0x01
     2bc:	8e 81       	ldd	r24, Y+6	; 0x06
     2be:	9f 81       	ldd	r25, Y+7	; 0x07
     2c0:	fc 01       	movw	r30, r24
     2c2:	13 86       	std	Z+11, r1	; 0x0b
     2c4:	12 86       	std	Z+10, r1	; 0x0a
     2c6:	8a 85       	ldd	r24, Y+10	; 0x0a
     2c8:	9b 85       	ldd	r25, Y+11	; 0x0b
     2ca:	fc 01       	movw	r30, r24
     2cc:	80 81       	ld	r24, Z
     2ce:	2f ef       	ldi	r18, 0xFF	; 255
     2d0:	28 0f       	add	r18, r24
     2d2:	8a 85       	ldd	r24, Y+10	; 0x0a
     2d4:	9b 85       	ldd	r25, Y+11	; 0x0b
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
     2da:	8e 81       	ldd	r24, Y+6	; 0x06
     2dc:	9f 81       	ldd	r25, Y+7	; 0x07
     2de:	fc 01       	movw	r30, r24
     2e0:	84 89       	ldd	r24, Z+20	; 0x14
     2e2:	95 89       	ldd	r25, Z+21	; 0x15
     2e4:	89 2b       	or	r24, r25
     2e6:	09 f4       	brne	.+2      	; 0x2ea <xTaskIncrementTick+0x186>
     2e8:	45 c0       	rjmp	.+138    	; 0x374 <xTaskIncrementTick+0x210>
     2ea:	8e 81       	ldd	r24, Y+6	; 0x06
     2ec:	9f 81       	ldd	r25, Y+7	; 0x07
     2ee:	fc 01       	movw	r30, r24
     2f0:	84 89       	ldd	r24, Z+20	; 0x14
     2f2:	95 89       	ldd	r25, Z+21	; 0x15
     2f4:	9d 87       	std	Y+13, r25	; 0x0d
     2f6:	8c 87       	std	Y+12, r24	; 0x0c
     2f8:	8e 81       	ldd	r24, Y+6	; 0x06
     2fa:	9f 81       	ldd	r25, Y+7	; 0x07
     2fc:	fc 01       	movw	r30, r24
     2fe:	86 85       	ldd	r24, Z+14	; 0x0e
     300:	97 85       	ldd	r25, Z+15	; 0x0f
     302:	2e 81       	ldd	r18, Y+6	; 0x06
     304:	3f 81       	ldd	r19, Y+7	; 0x07
     306:	f9 01       	movw	r30, r18
     308:	20 89       	ldd	r18, Z+16	; 0x10
     30a:	31 89       	ldd	r19, Z+17	; 0x11
     30c:	fc 01       	movw	r30, r24
     30e:	35 83       	std	Z+5, r19	; 0x05
     310:	24 83       	std	Z+4, r18	; 0x04
     312:	8e 81       	ldd	r24, Y+6	; 0x06
     314:	9f 81       	ldd	r25, Y+7	; 0x07
     316:	fc 01       	movw	r30, r24
     318:	80 89       	ldd	r24, Z+16	; 0x10
     31a:	91 89       	ldd	r25, Z+17	; 0x11
     31c:	2e 81       	ldd	r18, Y+6	; 0x06
     31e:	3f 81       	ldd	r19, Y+7	; 0x07
     320:	f9 01       	movw	r30, r18
     322:	26 85       	ldd	r18, Z+14	; 0x0e
     324:	37 85       	ldd	r19, Z+15	; 0x0f
     326:	fc 01       	movw	r30, r24
     328:	33 83       	std	Z+3, r19	; 0x03
     32a:	22 83       	std	Z+2, r18	; 0x02
     32c:	8c 85       	ldd	r24, Y+12	; 0x0c
     32e:	9d 85       	ldd	r25, Y+13	; 0x0d
     330:	fc 01       	movw	r30, r24
     332:	21 81       	ldd	r18, Z+1	; 0x01
     334:	32 81       	ldd	r19, Z+2	; 0x02
     336:	8e 81       	ldd	r24, Y+6	; 0x06
     338:	9f 81       	ldd	r25, Y+7	; 0x07
     33a:	0c 96       	adiw	r24, 0x0c	; 12
     33c:	28 17       	cp	r18, r24
     33e:	39 07       	cpc	r19, r25
     340:	51 f4       	brne	.+20     	; 0x356 <xTaskIncrementTick+0x1f2>
     342:	8e 81       	ldd	r24, Y+6	; 0x06
     344:	9f 81       	ldd	r25, Y+7	; 0x07
     346:	fc 01       	movw	r30, r24
     348:	20 89       	ldd	r18, Z+16	; 0x10
     34a:	31 89       	ldd	r19, Z+17	; 0x11
     34c:	8c 85       	ldd	r24, Y+12	; 0x0c
     34e:	9d 85       	ldd	r25, Y+13	; 0x0d
     350:	fc 01       	movw	r30, r24
     352:	32 83       	std	Z+2, r19	; 0x02
     354:	21 83       	std	Z+1, r18	; 0x01
     356:	8e 81       	ldd	r24, Y+6	; 0x06
     358:	9f 81       	ldd	r25, Y+7	; 0x07
     35a:	fc 01       	movw	r30, r24
     35c:	15 8a       	std	Z+21, r1	; 0x15
     35e:	14 8a       	std	Z+20, r1	; 0x14
     360:	8c 85       	ldd	r24, Y+12	; 0x0c
     362:	9d 85       	ldd	r25, Y+13	; 0x0d
     364:	fc 01       	movw	r30, r24
     366:	80 81       	ld	r24, Z
     368:	2f ef       	ldi	r18, 0xFF	; 255
     36a:	28 0f       	add	r18, r24
     36c:	8c 85       	ldd	r24, Y+12	; 0x0c
     36e:	9d 85       	ldd	r25, Y+13	; 0x0d
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
     374:	8e 81       	ldd	r24, Y+6	; 0x06
     376:	9f 81       	ldd	r25, Y+7	; 0x07
     378:	fc 01       	movw	r30, r24
     37a:	96 89       	ldd	r25, Z+22	; 0x16
     37c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <uxTopReadyPriority>
     380:	89 17       	cp	r24, r25
     382:	30 f4       	brcc	.+12     	; 0x390 <xTaskIncrementTick+0x22c>
     384:	8e 81       	ldd	r24, Y+6	; 0x06
     386:	9f 81       	ldd	r25, Y+7	; 0x07
     388:	fc 01       	movw	r30, r24
     38a:	86 89       	ldd	r24, Z+22	; 0x16
     38c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <uxTopReadyPriority>
     390:	8e 81       	ldd	r24, Y+6	; 0x06
     392:	9f 81       	ldd	r25, Y+7	; 0x07
     394:	fc 01       	movw	r30, r24
     396:	86 89       	ldd	r24, Z+22	; 0x16
     398:	28 2f       	mov	r18, r24
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	c9 01       	movw	r24, r18
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	88 0f       	add	r24, r24
     3a8:	99 1f       	adc	r25, r25
     3aa:	82 0f       	add	r24, r18
     3ac:	93 1f       	adc	r25, r19
     3ae:	8f 57       	subi	r24, 0x7F	; 127
     3b0:	9f 4f       	sbci	r25, 0xFF	; 255
     3b2:	fc 01       	movw	r30, r24
     3b4:	80 81       	ld	r24, Z
     3b6:	91 81       	ldd	r25, Z+1	; 0x01
     3b8:	9f 87       	std	Y+15, r25	; 0x0f
     3ba:	8e 87       	std	Y+14, r24	; 0x0e
     3bc:	8e 81       	ldd	r24, Y+6	; 0x06
     3be:	9f 81       	ldd	r25, Y+7	; 0x07
     3c0:	2e 85       	ldd	r18, Y+14	; 0x0e
     3c2:	3f 85       	ldd	r19, Y+15	; 0x0f
     3c4:	fc 01       	movw	r30, r24
     3c6:	35 83       	std	Z+5, r19	; 0x05
     3c8:	24 83       	std	Z+4, r18	; 0x04
     3ca:	8e 85       	ldd	r24, Y+14	; 0x0e
     3cc:	9f 85       	ldd	r25, Y+15	; 0x0f
     3ce:	fc 01       	movw	r30, r24
     3d0:	24 81       	ldd	r18, Z+4	; 0x04
     3d2:	35 81       	ldd	r19, Z+5	; 0x05
     3d4:	8e 81       	ldd	r24, Y+6	; 0x06
     3d6:	9f 81       	ldd	r25, Y+7	; 0x07
     3d8:	fc 01       	movw	r30, r24
     3da:	37 83       	std	Z+7, r19	; 0x07
     3dc:	26 83       	std	Z+6, r18	; 0x06
     3de:	8e 85       	ldd	r24, Y+14	; 0x0e
     3e0:	9f 85       	ldd	r25, Y+15	; 0x0f
     3e2:	fc 01       	movw	r30, r24
     3e4:	84 81       	ldd	r24, Z+4	; 0x04
     3e6:	95 81       	ldd	r25, Z+5	; 0x05
     3e8:	2e 81       	ldd	r18, Y+6	; 0x06
     3ea:	3f 81       	ldd	r19, Y+7	; 0x07
     3ec:	2e 5f       	subi	r18, 0xFE	; 254
     3ee:	3f 4f       	sbci	r19, 0xFF	; 255
     3f0:	fc 01       	movw	r30, r24
     3f2:	33 83       	std	Z+3, r19	; 0x03
     3f4:	22 83       	std	Z+2, r18	; 0x02
     3f6:	8e 81       	ldd	r24, Y+6	; 0x06
     3f8:	9f 81       	ldd	r25, Y+7	; 0x07
     3fa:	9c 01       	movw	r18, r24
     3fc:	2e 5f       	subi	r18, 0xFE	; 254
     3fe:	3f 4f       	sbci	r19, 0xFF	; 255
     400:	8e 85       	ldd	r24, Y+14	; 0x0e
     402:	9f 85       	ldd	r25, Y+15	; 0x0f
     404:	fc 01       	movw	r30, r24
     406:	35 83       	std	Z+5, r19	; 0x05
     408:	24 83       	std	Z+4, r18	; 0x04
     40a:	8e 81       	ldd	r24, Y+6	; 0x06
     40c:	9f 81       	ldd	r25, Y+7	; 0x07
     40e:	fc 01       	movw	r30, r24
     410:	86 89       	ldd	r24, Z+22	; 0x16
     412:	28 2f       	mov	r18, r24
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	c9 01       	movw	r24, r18
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	82 0f       	add	r24, r18
     426:	93 1f       	adc	r25, r19
     428:	9c 01       	movw	r18, r24
     42a:	20 58       	subi	r18, 0x80	; 128
     42c:	3f 4f       	sbci	r19, 0xFF	; 255
     42e:	8e 81       	ldd	r24, Y+6	; 0x06
     430:	9f 81       	ldd	r25, Y+7	; 0x07
     432:	fc 01       	movw	r30, r24
     434:	33 87       	std	Z+11, r19	; 0x0b
     436:	22 87       	std	Z+10, r18	; 0x0a
     438:	8e 81       	ldd	r24, Y+6	; 0x06
     43a:	9f 81       	ldd	r25, Y+7	; 0x07
     43c:	fc 01       	movw	r30, r24
     43e:	86 89       	ldd	r24, Z+22	; 0x16
     440:	28 2f       	mov	r18, r24
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	c9 01       	movw	r24, r18
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	88 0f       	add	r24, r24
     450:	99 1f       	adc	r25, r25
     452:	82 0f       	add	r24, r18
     454:	93 1f       	adc	r25, r19
     456:	80 58       	subi	r24, 0x80	; 128
     458:	9f 4f       	sbci	r25, 0xFF	; 255
     45a:	fc 01       	movw	r30, r24
     45c:	80 81       	ld	r24, Z
     45e:	41 e0       	ldi	r20, 0x01	; 1
     460:	48 0f       	add	r20, r24
     462:	c9 01       	movw	r24, r18
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	82 0f       	add	r24, r18
     472:	93 1f       	adc	r25, r19
     474:	80 58       	subi	r24, 0x80	; 128
     476:	9f 4f       	sbci	r25, 0xFF	; 255
     478:	fc 01       	movw	r30, r24
     47a:	40 83       	st	Z, r20
     47c:	8e 81       	ldd	r24, Y+6	; 0x06
     47e:	9f 81       	ldd	r25, Y+7	; 0x07
     480:	fc 01       	movw	r30, r24
     482:	26 89       	ldd	r18, Z+22	; 0x16
     484:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
     488:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <__data_end+0x1>
     48c:	fc 01       	movw	r30, r24
     48e:	86 89       	ldd	r24, Z+22	; 0x16
     490:	28 17       	cp	r18, r24
     492:	08 f4       	brcc	.+2      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     494:	ad ce       	rjmp	.-678    	; 0x1f0 <xTaskIncrementTick+0x8c>
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	89 83       	std	Y+1, r24	; 0x01
     49a:	aa ce       	rjmp	.-684    	; 0x1f0 <xTaskIncrementTick+0x8c>
     49c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
     4a0:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <__data_end+0x1>
     4a4:	fc 01       	movw	r30, r24
     4a6:	86 89       	ldd	r24, Z+22	; 0x16
     4a8:	28 2f       	mov	r18, r24
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	c9 01       	movw	r24, r18
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	82 0f       	add	r24, r18
     4bc:	93 1f       	adc	r25, r19
     4be:	80 58       	subi	r24, 0x80	; 128
     4c0:	9f 4f       	sbci	r25, 0xFF	; 255
     4c2:	fc 01       	movw	r30, r24
     4c4:	80 81       	ld	r24, Z
     4c6:	82 30       	cpi	r24, 0x02	; 2
     4c8:	10 f0       	brcs	.+4      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	89 83       	std	Y+1, r24	; 0x01
     4ce:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <xYieldPending>
     4d2:	88 23       	and	r24, r24
     4d4:	61 f0       	breq	.+24     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	89 83       	std	Y+1, r24	; 0x01
     4da:	09 c0       	rjmp	.+18     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     4dc:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <xPendedTicks>
     4e0:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <xPendedTicks+0x1>
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <xPendedTicks+0x1>
     4ea:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <xPendedTicks>
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	2f 96       	adiw	r28, 0x0f	; 15
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <vTaskSwitchContext>:
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	00 d0       	rcall	.+0      	; 0x508 <vTaskSwitchContext+0x6>
     508:	1f 92       	push	r1
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <uxSchedulerSuspended>
     512:	88 23       	and	r24, r24
     514:	21 f0       	breq	.+8      	; 0x51e <vTaskSwitchContext+0x1c>
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <xYieldPending>
     51c:	5f c0       	rjmp	.+190    	; 0x5dc <vTaskSwitchContext+0xda>
     51e:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <xYieldPending>
     522:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <uxTopReadyPriority>
     526:	89 83       	std	Y+1, r24	; 0x01
     528:	03 c0       	rjmp	.+6      	; 0x530 <vTaskSwitchContext+0x2e>
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	81 50       	subi	r24, 0x01	; 1
     52e:	89 83       	std	Y+1, r24	; 0x01
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	28 2f       	mov	r18, r24
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	c9 01       	movw	r24, r18
     538:	88 0f       	add	r24, r24
     53a:	99 1f       	adc	r25, r25
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	82 0f       	add	r24, r18
     546:	93 1f       	adc	r25, r19
     548:	80 58       	subi	r24, 0x80	; 128
     54a:	9f 4f       	sbci	r25, 0xFF	; 255
     54c:	fc 01       	movw	r30, r24
     54e:	80 81       	ld	r24, Z
     550:	88 23       	and	r24, r24
     552:	59 f3       	breq	.-42     	; 0x52a <vTaskSwitchContext+0x28>
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	28 2f       	mov	r18, r24
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	c9 01       	movw	r24, r18
     55c:	88 0f       	add	r24, r24
     55e:	99 1f       	adc	r25, r25
     560:	88 0f       	add	r24, r24
     562:	99 1f       	adc	r25, r25
     564:	88 0f       	add	r24, r24
     566:	99 1f       	adc	r25, r25
     568:	82 0f       	add	r24, r18
     56a:	93 1f       	adc	r25, r19
     56c:	80 58       	subi	r24, 0x80	; 128
     56e:	9f 4f       	sbci	r25, 0xFF	; 255
     570:	9b 83       	std	Y+3, r25	; 0x03
     572:	8a 83       	std	Y+2, r24	; 0x02
     574:	8a 81       	ldd	r24, Y+2	; 0x02
     576:	9b 81       	ldd	r25, Y+3	; 0x03
     578:	fc 01       	movw	r30, r24
     57a:	81 81       	ldd	r24, Z+1	; 0x01
     57c:	92 81       	ldd	r25, Z+2	; 0x02
     57e:	fc 01       	movw	r30, r24
     580:	22 81       	ldd	r18, Z+2	; 0x02
     582:	33 81       	ldd	r19, Z+3	; 0x03
     584:	8a 81       	ldd	r24, Y+2	; 0x02
     586:	9b 81       	ldd	r25, Y+3	; 0x03
     588:	fc 01       	movw	r30, r24
     58a:	32 83       	std	Z+2, r19	; 0x02
     58c:	21 83       	std	Z+1, r18	; 0x01
     58e:	8a 81       	ldd	r24, Y+2	; 0x02
     590:	9b 81       	ldd	r25, Y+3	; 0x03
     592:	fc 01       	movw	r30, r24
     594:	21 81       	ldd	r18, Z+1	; 0x01
     596:	32 81       	ldd	r19, Z+2	; 0x02
     598:	8a 81       	ldd	r24, Y+2	; 0x02
     59a:	9b 81       	ldd	r25, Y+3	; 0x03
     59c:	03 96       	adiw	r24, 0x03	; 3
     59e:	28 17       	cp	r18, r24
     5a0:	39 07       	cpc	r19, r25
     5a2:	69 f4       	brne	.+26     	; 0x5be <vTaskSwitchContext+0xbc>
     5a4:	8a 81       	ldd	r24, Y+2	; 0x02
     5a6:	9b 81       	ldd	r25, Y+3	; 0x03
     5a8:	fc 01       	movw	r30, r24
     5aa:	81 81       	ldd	r24, Z+1	; 0x01
     5ac:	92 81       	ldd	r25, Z+2	; 0x02
     5ae:	fc 01       	movw	r30, r24
     5b0:	22 81       	ldd	r18, Z+2	; 0x02
     5b2:	33 81       	ldd	r19, Z+3	; 0x03
     5b4:	8a 81       	ldd	r24, Y+2	; 0x02
     5b6:	9b 81       	ldd	r25, Y+3	; 0x03
     5b8:	fc 01       	movw	r30, r24
     5ba:	32 83       	std	Z+2, r19	; 0x02
     5bc:	21 83       	std	Z+1, r18	; 0x01
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	9b 81       	ldd	r25, Y+3	; 0x03
     5c2:	fc 01       	movw	r30, r24
     5c4:	81 81       	ldd	r24, Z+1	; 0x01
     5c6:	92 81       	ldd	r25, Z+2	; 0x02
     5c8:	fc 01       	movw	r30, r24
     5ca:	86 81       	ldd	r24, Z+6	; 0x06
     5cc:	97 81       	ldd	r25, Z+7	; 0x07
     5ce:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <__data_end+0x1>
     5d2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <uxTopReadyPriority>
     5dc:	00 00       	nop
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     5f2:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <pxDelayedTaskList>
     5f6:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <pxDelayedTaskList+0x1>
     5fa:	fc 01       	movw	r30, r24
     5fc:	80 81       	ld	r24, Z
     5fe:	88 23       	and	r24, r24
     600:	39 f4       	brne	.+14     	; 0x610 <prvResetNextTaskUnblockTime+0x26>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
     602:	8f ef       	ldi	r24, 0xFF	; 255
     604:	9f ef       	ldi	r25, 0xFF	; 255
     606:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <xNextTaskUnblockTime+0x1>
     60a:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <xNextTaskUnblockTime>
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
     60e:	0e c0       	rjmp	.+28     	; 0x62c <prvResetNextTaskUnblockTime+0x42>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
     610:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <pxDelayedTaskList>
     614:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <pxDelayedTaskList+0x1>
     618:	fc 01       	movw	r30, r24
     61a:	85 81       	ldd	r24, Z+5	; 0x05
     61c:	96 81       	ldd	r25, Z+6	; 0x06
     61e:	fc 01       	movw	r30, r24
     620:	80 81       	ld	r24, Z
     622:	91 81       	ldd	r25, Z+1	; 0x01
     624:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <xNextTaskUnblockTime+0x1>
     628:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <xNextTaskUnblockTime>
    }
}
     62c:	00 00       	nop
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <LCD_SendCommand>:
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];
extern const STR_LCD_8_config_t gastr_LCD_8_Config[LCD_NUMBER];

/*functions Implementations*/
ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	00 d0       	rcall	.+0      	; 0x63a <LCD_SendCommand+0x6>
     63a:	1f 92       	push	r1
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	8b 83       	std	Y+3, r24	; 0x03
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	89 83       	std	Y+1, r24	; 0x01
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	8a 83       	std	Y+2, r24	; 0x02
	#if LCD_4_BIT
	switch(State)
     64a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     64e:	88 2f       	mov	r24, r24
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	83 30       	cpi	r24, 0x03	; 3
     654:	91 05       	cpc	r25, r1
     656:	09 f4       	brne	.+2      	; 0x65a <LCD_SendCommand+0x26>
     658:	02 c1       	rjmp	.+516    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     65a:	84 30       	cpi	r24, 0x04	; 4
     65c:	91 05       	cpc	r25, r1
     65e:	44 f4       	brge	.+16     	; 0x670 <LCD_SendCommand+0x3c>
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	91 05       	cpc	r25, r1
     664:	09 f4       	brne	.+2      	; 0x668 <LCD_SendCommand+0x34>
     666:	79 c0       	rjmp	.+242    	; 0x75a <LCD_SendCommand+0x126>
     668:	02 97       	sbiw	r24, 0x02	; 2
     66a:	09 f4       	brne	.+2      	; 0x66e <LCD_SendCommand+0x3a>
     66c:	9b c0       	rjmp	.+310    	; 0x7a4 <LCD_SendCommand+0x170>
     66e:	35 c1       	rjmp	.+618    	; 0x8da <__stack+0x7b>
     670:	84 30       	cpi	r24, 0x04	; 4
     672:	91 05       	cpc	r25, r1
     674:	09 f4       	brne	.+2      	; 0x678 <LCD_SendCommand+0x44>
     676:	17 c1       	rjmp	.+558    	; 0x8a6 <__stack+0x47>
     678:	8f 3f       	cpi	r24, 0xFF	; 255
     67a:	91 05       	cpc	r25, r1
     67c:	09 f0       	breq	.+2      	; 0x680 <LCD_SendCommand+0x4c>
     67e:	2d c1       	rjmp	.+602    	; 0x8da <__stack+0x7b>
	{
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     680:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <gastr_LCD_Config+0x1>
     684:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	69 2f       	mov	r22, r25
     68c:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     690:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gastr_LCD_Config+0x2>
     694:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	69 2f       	mov	r22, r25
     69c:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(CMD, BIT_4));
     6a0:	8b 81       	ldd	r24, Y+3	; 0x03
     6a2:	88 2f       	mov	r24, r24
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	80 71       	andi	r24, 0x10	; 16
     6a8:	99 27       	eor	r25, r25
     6aa:	95 95       	asr	r25
     6ac:	87 95       	ror	r24
     6ae:	95 95       	asr	r25
     6b0:	87 95       	ror	r24
     6b2:	95 95       	asr	r25
     6b4:	87 95       	ror	r24
     6b6:	95 95       	asr	r25
     6b8:	87 95       	ror	r24
     6ba:	28 2f       	mov	r18, r24
     6bc:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <gastr_LCD_Config+0x7>
     6c0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     6c4:	42 2f       	mov	r20, r18
     6c6:	69 2f       	mov	r22, r25
     6c8:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(CMD, BIT_5));
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	88 2f       	mov	r24, r24
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	80 72       	andi	r24, 0x20	; 32
     6d4:	99 27       	eor	r25, r25
     6d6:	95 95       	asr	r25
     6d8:	87 95       	ror	r24
     6da:	95 95       	asr	r25
     6dc:	87 95       	ror	r24
     6de:	95 95       	asr	r25
     6e0:	87 95       	ror	r24
     6e2:	95 95       	asr	r25
     6e4:	87 95       	ror	r24
     6e6:	95 95       	asr	r25
     6e8:	87 95       	ror	r24
     6ea:	28 2f       	mov	r18, r24
     6ec:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <gastr_LCD_Config+0x6>
     6f0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     6f4:	42 2f       	mov	r20, r18
     6f6:	69 2f       	mov	r22, r25
     6f8:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(CMD, BIT_6));
     6fc:	8b 81       	ldd	r24, Y+3	; 0x03
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	80 74       	andi	r24, 0x40	; 64
     704:	99 27       	eor	r25, r25
     706:	08 2e       	mov	r0, r24
     708:	89 2f       	mov	r24, r25
     70a:	00 0c       	add	r0, r0
     70c:	88 1f       	adc	r24, r24
     70e:	99 0b       	sbc	r25, r25
     710:	00 0c       	add	r0, r0
     712:	88 1f       	adc	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	28 2f       	mov	r18, r24
     718:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <gastr_LCD_Config+0x5>
     71c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     720:	42 2f       	mov	r20, r18
     722:	69 2f       	mov	r22, r25
     724:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(CMD, BIT_7));
     728:	8b 81       	ldd	r24, Y+3	; 0x03
     72a:	28 2f       	mov	r18, r24
     72c:	22 1f       	adc	r18, r18
     72e:	22 27       	eor	r18, r18
     730:	22 1f       	adc	r18, r18
     732:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gastr_LCD_Config+0x4>
     736:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     73a:	42 2f       	mov	r20, r18
     73c:	69 2f       	mov	r22, r25
     73e:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     742:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <gastr_LCD_Config+0x3>
     746:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	69 2f       	mov	r22, r25
     74e:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		#if Timer_Usage
		/*set status of the function*/
		State = First_Nibble_Sent;
		#else
		/*set status of the function*/
		State = Sending_First_Nibble;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		#endif
		break;
     758:	c8 c0       	rjmp	.+400    	; 0x8ea <__stack+0x8b>
	case Sending_First_Nibble:
		/*start timer delay in background*/
		if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     75a:	6a e1       	ldi	r22, 0x1A	; 26
     75c:	73 e0       	ldi	r23, 0x03	; 3
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <TIM_DelayStatus>
     764:	8b 3f       	cpi	r24, 0xFB	; 251
     766:	09 f0       	breq	.+2      	; 0x76a <LCD_SendCommand+0x136>
     768:	bb c0       	rjmp	.+374    	; 0x8e0 <__stack+0x81>
		{
   		TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendCommand);
     76a:	2a e1       	ldi	r18, 0x1A	; 26
     76c:	33 e0       	ldi	r19, 0x03	; 3
     76e:	41 e0       	ldi	r20, 0x01	; 1
     770:	50 e0       	ldi	r21, 0x00	; 0
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	0e 94 23 0c 	call	0x1846	; 0x1846 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     77c:	00 00       	nop
     77e:	6a e1       	ldi	r22, 0x1A	; 26
     780:	73 e0       	ldi	r23, 0x03	; 3
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <TIM_DelayStatus>
     788:	88 23       	and	r24, r24
     78a:	c9 f7       	brne	.-14     	; 0x77e <LCD_SendCommand+0x14a>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     78c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <gastr_LCD_Config+0x3>
     790:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	69 2f       	mov	r22, r25
     798:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		break;
     7a2:	9e c0       	rjmp	.+316    	; 0x8e0 <__stack+0x81>
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs,PIN_LOW);
     7a4:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <gastr_LCD_Config+0x1>
     7a8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	69 2f       	mov	r22, r25
     7b0:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw,PIN_LOW);
     7b4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gastr_LCD_Config+0x2>
     7b8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	69 2f       	mov	r22, r25
     7c0:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		/*copying lower nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(CMD,BIT_0));
     7c4:	8b 81       	ldd	r24, Y+3	; 0x03
     7c6:	28 2f       	mov	r18, r24
     7c8:	21 70       	andi	r18, 0x01	; 1
     7ca:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <gastr_LCD_Config+0x7>
     7ce:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     7d2:	42 2f       	mov	r20, r18
     7d4:	69 2f       	mov	r22, r25
     7d6:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(CMD,BIT_1));
     7da:	8b 81       	ldd	r24, Y+3	; 0x03
     7dc:	88 2f       	mov	r24, r24
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	82 70       	andi	r24, 0x02	; 2
     7e2:	99 27       	eor	r25, r25
     7e4:	95 95       	asr	r25
     7e6:	87 95       	ror	r24
     7e8:	28 2f       	mov	r18, r24
     7ea:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <gastr_LCD_Config+0x6>
     7ee:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     7f2:	42 2f       	mov	r20, r18
     7f4:	69 2f       	mov	r22, r25
     7f6:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(CMD,BIT_2));
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	88 2f       	mov	r24, r24
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	84 70       	andi	r24, 0x04	; 4
     802:	99 27       	eor	r25, r25
     804:	95 95       	asr	r25
     806:	87 95       	ror	r24
     808:	95 95       	asr	r25
     80a:	87 95       	ror	r24
     80c:	28 2f       	mov	r18, r24
     80e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <gastr_LCD_Config+0x5>
     812:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     816:	42 2f       	mov	r20, r18
     818:	69 2f       	mov	r22, r25
     81a:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_3));
     81e:	8b 81       	ldd	r24, Y+3	; 0x03
     820:	88 2f       	mov	r24, r24
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	88 70       	andi	r24, 0x08	; 8
     826:	99 27       	eor	r25, r25
     828:	95 95       	asr	r25
     82a:	87 95       	ror	r24
     82c:	95 95       	asr	r25
     82e:	87 95       	ror	r24
     830:	95 95       	asr	r25
     832:	87 95       	ror	r24
     834:	28 2f       	mov	r18, r24
     836:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gastr_LCD_Config+0x4>
     83a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     83e:	42 2f       	mov	r20, r18
     840:	69 2f       	mov	r22, r25
     842:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
     846:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <gastr_LCD_Config+0x3>
     84a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	69 2f       	mov	r22, r25
     852:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
     85c:	46 c0       	rjmp	.+140    	; 0x8ea <__stack+0x8b>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     85e:	6a e1       	ldi	r22, 0x1A	; 26
     860:	73 e0       	ldi	r23, 0x03	; 3
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <TIM_DelayStatus>
     868:	8b 3f       	cpi	r24, 0xFB	; 251
     86a:	e1 f5       	brne	.+120    	; 0x8e4 <__stack+0x85>
      {
         TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendCommand);
     86c:	2a e1       	ldi	r18, 0x1A	; 26
     86e:	33 e0       	ldi	r19, 0x03	; 3
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	0e 94 23 0c 	call	0x1846	; 0x1846 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     87e:	00 00       	nop
     880:	6a e1       	ldi	r22, 0x1A	; 26
     882:	73 e0       	ldi	r23, 0x03	; 3
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <TIM_DelayStatus>
     88a:	88 23       	and	r24, r24
     88c:	c9 f7       	brne	.-14     	; 0x880 <__stack+0x21>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_LOW);
     88e:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <gastr_LCD_Config+0x3>
     892:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	69 2f       	mov	r22, r25
     89a:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		 #if Timer_Usage
		 /*set status of the function*/
		 State = OperationStarted;
		 #else
         /*reset the function's state*/
         State = Second_Nibble_Sent;
     89e:	84 e0       	ldi	r24, 0x04	; 4
     8a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		 #endif
      }
		break;
     8a4:	1f c0       	rjmp	.+62     	; 0x8e4 <__stack+0x85>
	case Second_Nibble_Sent:
		/*start timer delay in background*/
      TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
     8a6:	6a e1       	ldi	r22, 0x1A	; 26
     8a8:	73 e0       	ldi	r23, 0x03	; 3
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <TIM_DelayStatus>
     8b0:	8a 83       	std	Y+2, r24	; 0x02
      if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     8b2:	8a 81       	ldd	r24, Y+2	; 0x02
     8b4:	8b 3f       	cpi	r24, 0xFB	; 251
     8b6:	49 f4       	brne	.+18     	; 0x8ca <__stack+0x6b>
      {
         TIM_DelayMs(TIMER_2,2, (void (*)(void))LCD_SendCommand);
     8b8:	2a e1       	ldi	r18, 0x1A	; 26
     8ba:	33 e0       	ldi	r19, 0x03	; 3
     8bc:	42 e0       	ldi	r20, 0x02	; 2
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <TIM_DelayMs>
      }         
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     8ca:	8a 81       	ldd	r24, Y+2	; 0x02
     8cc:	88 23       	and	r24, r24
     8ce:	61 f4       	brne	.+24     	; 0x8e8 <__stack+0x89>
		{
			/*reset the function's state*/
			State = OperationStarted;
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
     8d6:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
     8d8:	07 c0       	rjmp	.+14     	; 0x8e8 <__stack+0x89>
	default:
		ErrRetVal = OperationFail;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	05 c0       	rjmp	.+10     	; 0x8ea <__stack+0x8b>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
         /*update the function's state*/
         State = First_Nibble_Sent;
		}
		break;
     8e0:	00 00       	nop
     8e2:	03 c0       	rjmp	.+6      	; 0x8ea <__stack+0x8b>
		 #else
         /*reset the function's state*/
         State = Second_Nibble_Sent;
		 #endif
      }
		break;
     8e4:	00 00       	nop
     8e6:	01 c0       	rjmp	.+2      	; 0x8ea <__stack+0x8b>
			/*reset the function's state*/
			State = OperationStarted;
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
		}
		break;
     8e8:	00 00       	nop
			ErrRetVal = OperationFail;
			break;
	}
	#endif
	/*return from function*/
	return ErrRetVal;
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
}
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <LCD_SendData>:
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	00 d0       	rcall	.+0      	; 0x8fe <LCD_SendData+0x6>
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	8a 83       	std	Y+2, r24	; 0x02
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     904:	8f ef       	ldi	r24, 0xFF	; 255
     906:	89 83       	std	Y+1, r24	; 0x01
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	#if LCD_4_BIT
	switch (State) {
     908:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <State.1761>
     90c:	88 2f       	mov	r24, r24
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	82 30       	cpi	r24, 0x02	; 2
     912:	91 05       	cpc	r25, r1
     914:	09 f4       	brne	.+2      	; 0x918 <LCD_SendData+0x20>
     916:	a1 c0       	rjmp	.+322    	; 0xa5a <LCD_SendData+0x162>
     918:	83 30       	cpi	r24, 0x03	; 3
     91a:	91 05       	cpc	r25, r1
     91c:	24 f4       	brge	.+8      	; 0x926 <LCD_SendData+0x2e>
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	09 f4       	brne	.+2      	; 0x924 <LCD_SendData+0x2c>
     922:	76 c0       	rjmp	.+236    	; 0xa10 <LCD_SendData+0x118>
     924:	1c c1       	rjmp	.+568    	; 0xb5e <LCD_SendData+0x266>
     926:	83 30       	cpi	r24, 0x03	; 3
     928:	91 05       	cpc	r25, r1
     92a:	09 f4       	brne	.+2      	; 0x92e <LCD_SendData+0x36>
     92c:	f3 c0       	rjmp	.+486    	; 0xb14 <LCD_SendData+0x21c>
     92e:	8f 3f       	cpi	r24, 0xFF	; 255
     930:	91 05       	cpc	r25, r1
     932:	09 f0       	breq	.+2      	; 0x936 <LCD_SendData+0x3e>
     934:	14 c1       	rjmp	.+552    	; 0xb5e <LCD_SendData+0x266>
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     936:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <gastr_LCD_Config+0x1>
     93a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	69 2f       	mov	r22, r25
     942:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     946:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gastr_LCD_Config+0x2>
     94a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     94e:	40 e0       	ldi	r20, 0x00	; 0
     950:	69 2f       	mov	r22, r25
     952:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_7));
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	28 2f       	mov	r18, r24
     95a:	22 1f       	adc	r18, r18
     95c:	22 27       	eor	r18, r18
     95e:	22 1f       	adc	r18, r18
     960:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gastr_LCD_Config+0x4>
     964:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     968:	42 2f       	mov	r20, r18
     96a:	69 2f       	mov	r22, r25
     96c:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_6));
     970:	8a 81       	ldd	r24, Y+2	; 0x02
     972:	88 2f       	mov	r24, r24
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	80 74       	andi	r24, 0x40	; 64
     978:	99 27       	eor	r25, r25
     97a:	08 2e       	mov	r0, r24
     97c:	89 2f       	mov	r24, r25
     97e:	00 0c       	add	r0, r0
     980:	88 1f       	adc	r24, r24
     982:	99 0b       	sbc	r25, r25
     984:	00 0c       	add	r0, r0
     986:	88 1f       	adc	r24, r24
     988:	99 1f       	adc	r25, r25
     98a:	28 2f       	mov	r18, r24
     98c:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <gastr_LCD_Config+0x5>
     990:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     994:	42 2f       	mov	r20, r18
     996:	69 2f       	mov	r22, r25
     998:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_5));
     99c:	8a 81       	ldd	r24, Y+2	; 0x02
     99e:	88 2f       	mov	r24, r24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	80 72       	andi	r24, 0x20	; 32
     9a4:	99 27       	eor	r25, r25
     9a6:	95 95       	asr	r25
     9a8:	87 95       	ror	r24
     9aa:	95 95       	asr	r25
     9ac:	87 95       	ror	r24
     9ae:	95 95       	asr	r25
     9b0:	87 95       	ror	r24
     9b2:	95 95       	asr	r25
     9b4:	87 95       	ror	r24
     9b6:	95 95       	asr	r25
     9b8:	87 95       	ror	r24
     9ba:	28 2f       	mov	r18, r24
     9bc:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <gastr_LCD_Config+0x6>
     9c0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     9c4:	42 2f       	mov	r20, r18
     9c6:	69 2f       	mov	r22, r25
     9c8:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_4));
     9cc:	8a 81       	ldd	r24, Y+2	; 0x02
     9ce:	88 2f       	mov	r24, r24
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	80 71       	andi	r24, 0x10	; 16
     9d4:	99 27       	eor	r25, r25
     9d6:	95 95       	asr	r25
     9d8:	87 95       	ror	r24
     9da:	95 95       	asr	r25
     9dc:	87 95       	ror	r24
     9de:	95 95       	asr	r25
     9e0:	87 95       	ror	r24
     9e2:	95 95       	asr	r25
     9e4:	87 95       	ror	r24
     9e6:	28 2f       	mov	r18, r24
     9e8:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <gastr_LCD_Config+0x7>
     9ec:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     9f0:	42 2f       	mov	r20, r18
     9f2:	69 2f       	mov	r22, r25
     9f4:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     9f8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <gastr_LCD_Config+0x3>
     9fc:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     a00:	41 e0       	ldi	r20, 0x01	; 1
     a02:	69 2f       	mov	r22, r25
     a04:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		#if Timer_Usage
		/*set status of the function*/
		State = First_Nibble_Sent;
		#else
		/*set status of the function*/
		State = Sending_First_Nibble;
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1761>
		#endif
		break;
     a0e:	ad c0       	rjmp	.+346    	; 0xb6a <LCD_SendData+0x272>
	case Sending_First_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendData))
     a10:	6c e7       	ldi	r22, 0x7C	; 124
     a12:	74 e0       	ldi	r23, 0x04	; 4
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <TIM_DelayStatus>
     a1a:	8b 3f       	cpi	r24, 0xFB	; 251
     a1c:	09 f0       	breq	.+2      	; 0xa20 <LCD_SendData+0x128>
     a1e:	a2 c0       	rjmp	.+324    	; 0xb64 <LCD_SendData+0x26c>
      {
         TIM_DelayUs(TIMER_2, 1,(void (*)(void)) LCD_SendData);
     a20:	2c e7       	ldi	r18, 0x7C	; 124
     a22:	34 e0       	ldi	r19, 0x04	; 4
     a24:	41 e0       	ldi	r20, 0x01	; 1
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	0e 94 23 0c 	call	0x1846	; 0x1846 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendData));
     a32:	00 00       	nop
     a34:	6c e7       	ldi	r22, 0x7C	; 124
     a36:	74 e0       	ldi	r23, 0x04	; 4
     a38:	82 e0       	ldi	r24, 0x02	; 2
     a3a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <TIM_DelayStatus>
     a3e:	88 23       	and	r24, r24
     a40:	c9 f7       	brne	.-14     	; 0xa34 <LCD_SendData+0x13c>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     a42:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <gastr_LCD_Config+0x3>
     a46:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	69 2f       	mov	r22, r25
     a4e:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1761>
      }
		break;
     a58:	85 c0       	rjmp	.+266    	; 0xb64 <LCD_SendData+0x26c>
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     a5a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <gastr_LCD_Config+0x1>
     a5e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     a62:	41 e0       	ldi	r20, 0x01	; 1
     a64:	69 2f       	mov	r22, r25
     a66:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     a6a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gastr_LCD_Config+0x2>
     a6e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	69 2f       	mov	r22, r25
     a76:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		/*copying lower nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_3));
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	88 2f       	mov	r24, r24
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	88 70       	andi	r24, 0x08	; 8
     a82:	99 27       	eor	r25, r25
     a84:	95 95       	asr	r25
     a86:	87 95       	ror	r24
     a88:	95 95       	asr	r25
     a8a:	87 95       	ror	r24
     a8c:	95 95       	asr	r25
     a8e:	87 95       	ror	r24
     a90:	28 2f       	mov	r18, r24
     a92:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gastr_LCD_Config+0x4>
     a96:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     a9a:	42 2f       	mov	r20, r18
     a9c:	69 2f       	mov	r22, r25
     a9e:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_2));
     aa2:	8a 81       	ldd	r24, Y+2	; 0x02
     aa4:	88 2f       	mov	r24, r24
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	84 70       	andi	r24, 0x04	; 4
     aaa:	99 27       	eor	r25, r25
     aac:	95 95       	asr	r25
     aae:	87 95       	ror	r24
     ab0:	95 95       	asr	r25
     ab2:	87 95       	ror	r24
     ab4:	28 2f       	mov	r18, r24
     ab6:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <gastr_LCD_Config+0x5>
     aba:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     abe:	42 2f       	mov	r20, r18
     ac0:	69 2f       	mov	r22, r25
     ac2:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_1));
     ac6:	8a 81       	ldd	r24, Y+2	; 0x02
     ac8:	88 2f       	mov	r24, r24
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	82 70       	andi	r24, 0x02	; 2
     ace:	99 27       	eor	r25, r25
     ad0:	95 95       	asr	r25
     ad2:	87 95       	ror	r24
     ad4:	28 2f       	mov	r18, r24
     ad6:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <gastr_LCD_Config+0x6>
     ada:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     ade:	42 2f       	mov	r20, r18
     ae0:	69 2f       	mov	r22, r25
     ae2:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_0));
     ae6:	8a 81       	ldd	r24, Y+2	; 0x02
     ae8:	28 2f       	mov	r18, r24
     aea:	21 70       	andi	r18, 0x01	; 1
     aec:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <gastr_LCD_Config+0x7>
     af0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     af4:	42 2f       	mov	r20, r18
     af6:	69 2f       	mov	r22, r25
     af8:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     afc:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <gastr_LCD_Config+0x3>
     b00:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	69 2f       	mov	r22, r25
     b08:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		#if Timer_Usage
		/*set status of the function*/
		State = OperationStarted;
		#else
		/*set status of the function*/
		State = Sending_Second_Nibble;
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1761>
		#endif
		break;
     b12:	2b c0       	rjmp	.+86     	; 0xb6a <LCD_SendData+0x272>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendData))
     b14:	6c e7       	ldi	r22, 0x7C	; 124
     b16:	74 e0       	ldi	r23, 0x04	; 4
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <TIM_DelayStatus>
     b1e:	8b 3f       	cpi	r24, 0xFB	; 251
     b20:	19 f5       	brne	.+70     	; 0xb68 <LCD_SendData+0x270>
      {
         TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendData);
     b22:	2c e7       	ldi	r18, 0x7C	; 124
     b24:	34 e0       	ldi	r19, 0x04	; 4
     b26:	41 e0       	ldi	r20, 0x01	; 1
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	0e 94 23 0c 	call	0x1846	; 0x1846 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendData));
     b34:	00 00       	nop
     b36:	6c e7       	ldi	r22, 0x7C	; 124
     b38:	74 e0       	ldi	r23, 0x04	; 4
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <TIM_DelayStatus>
     b40:	88 23       	and	r24, r24
     b42:	c9 f7       	brne	.-14     	; 0xb36 <LCD_SendData+0x23e>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     b44:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <gastr_LCD_Config+0x3>
     b48:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	69 2f       	mov	r22, r25
     b50:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
         /*reset the function's state*/
         State = OperationStarted;
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1761>
         /*process finished successfully*/
         ErrRetVal = OperationSuccess;
     b5a:	19 82       	std	Y+1, r1	; 0x01
      }
		break;
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <LCD_SendData+0x270>
	default:
		ErrRetVal = OperationFail;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	03 c0       	rjmp	.+6      	; 0xb6a <LCD_SendData+0x272>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
         /*update the function's state*/
         State = First_Nibble_Sent;
      }
		break;
     b64:	00 00       	nop
     b66:	01 c0       	rjmp	.+2      	; 0xb6a <LCD_SendData+0x272>
         /*reset the function's state*/
         State = OperationStarted;
         /*process finished successfully*/
         ErrRetVal = OperationSuccess;
      }
		break;
     b68:	00 00       	nop
		ErrRetVal = OperationFail;
		break;
	}
	#endif
	/*return from function*/
	return ErrRetVal;
     b6a:	89 81       	ldd	r24, Y+1	; 0x01

}
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <LCD_Init>:
ERROR_STATE_t LCD_Init()
{
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <LCD_Init+0x6>
     b7c:	1f 92       	push	r1
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     b82:	8f ef       	ldi	r24, 0xFF	; 255
     b84:	89 83       	std	Y+1, r24	; 0x01
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t LCD_SendCommandRetVal = OperationStarted;
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	8b 83       	std	Y+3, r24	; 0x03
	#if LCD_4_BIT
	switch (State) {
     b8e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <State.1783>
     b92:	88 2f       	mov	r24, r24
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	8b 30       	cpi	r24, 0x0B	; 11
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <LCD_Init+0x28>
     b9c:	f2 c0       	rjmp	.+484    	; 0xd82 <LCD_Init+0x20c>
     b9e:	8c 30       	cpi	r24, 0x0C	; 12
     ba0:	91 05       	cpc	r25, r1
     ba2:	bc f4       	brge	.+46     	; 0xbd2 <LCD_Init+0x5c>
     ba4:	88 30       	cpi	r24, 0x08	; 8
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <LCD_Init+0x36>
     baa:	c7 c0       	rjmp	.+398    	; 0xd3a <LCD_Init+0x1c4>
     bac:	89 30       	cpi	r24, 0x09	; 9
     bae:	91 05       	cpc	r25, r1
     bb0:	44 f4       	brge	.+16     	; 0xbc2 <LCD_Init+0x4c>
     bb2:	85 30       	cpi	r24, 0x05	; 5
     bb4:	91 05       	cpc	r25, r1
     bb6:	09 f4       	brne	.+2      	; 0xbba <LCD_Init+0x44>
     bb8:	9a c0       	rjmp	.+308    	; 0xcee <LCD_Init+0x178>
     bba:	06 97       	sbiw	r24, 0x06	; 6
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <LCD_Init+0x4a>
     bbe:	b1 c0       	rjmp	.+354    	; 0xd22 <LCD_Init+0x1ac>
     bc0:	19 c1       	rjmp	.+562    	; 0xdf4 <LCD_Init+0x27e>
     bc2:	89 30       	cpi	r24, 0x09	; 9
     bc4:	91 05       	cpc	r25, r1
     bc6:	09 f4       	brne	.+2      	; 0xbca <LCD_Init+0x54>
     bc8:	c4 c0       	rjmp	.+392    	; 0xd52 <LCD_Init+0x1dc>
     bca:	0a 97       	sbiw	r24, 0x0a	; 10
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <LCD_Init+0x5a>
     bce:	cd c0       	rjmp	.+410    	; 0xd6a <LCD_Init+0x1f4>
     bd0:	11 c1       	rjmp	.+546    	; 0xdf4 <LCD_Init+0x27e>
     bd2:	8e 30       	cpi	r24, 0x0E	; 14
     bd4:	91 05       	cpc	r25, r1
     bd6:	09 f4       	brne	.+2      	; 0xbda <LCD_Init+0x64>
     bd8:	f6 c0       	rjmp	.+492    	; 0xdc6 <LCD_Init+0x250>
     bda:	8f 30       	cpi	r24, 0x0F	; 15
     bdc:	91 05       	cpc	r25, r1
     bde:	44 f4       	brge	.+16     	; 0xbf0 <LCD_Init+0x7a>
     be0:	8c 30       	cpi	r24, 0x0C	; 12
     be2:	91 05       	cpc	r25, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <LCD_Init+0x72>
     be6:	d9 c0       	rjmp	.+434    	; 0xd9a <LCD_Init+0x224>
     be8:	0d 97       	sbiw	r24, 0x0d	; 13
     bea:	09 f4       	brne	.+2      	; 0xbee <LCD_Init+0x78>
     bec:	e1 c0       	rjmp	.+450    	; 0xdb0 <LCD_Init+0x23a>
     bee:	02 c1       	rjmp	.+516    	; 0xdf4 <LCD_Init+0x27e>
     bf0:	8f 30       	cpi	r24, 0x0F	; 15
     bf2:	91 05       	cpc	r25, r1
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <LCD_Init+0x82>
     bf6:	f2 c0       	rjmp	.+484    	; 0xddc <LCD_Init+0x266>
     bf8:	8f 3f       	cpi	r24, 0xFF	; 255
     bfa:	91 05       	cpc	r25, r1
     bfc:	09 f0       	breq	.+2      	; 0xc00 <LCD_Init+0x8a>
     bfe:	fa c0       	rjmp	.+500    	; 0xdf4 <LCD_Init+0x27e>
	case OperationStarted:
		/*Dio and Timer Initialize for the*/
		TIM_Init(TIMER_2);
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <TIM_Init>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     c06:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gastr_LCD_Config+0x4>
     c0a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     c0e:	41 e0       	ldi	r20, 0x01	; 1
     c10:	69 2f       	mov	r22, r25
     c12:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     c16:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <gastr_LCD_Config+0x5>
     c1a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     c1e:	41 e0       	ldi	r20, 0x01	; 1
     c20:	69 2f       	mov	r22, r25
     c22:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     c26:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <gastr_LCD_Config+0x6>
     c2a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     c2e:	41 e0       	ldi	r20, 0x01	; 1
     c30:	69 2f       	mov	r22, r25
     c32:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     c36:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <gastr_LCD_Config+0x7>
     c3a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     c3e:	41 e0       	ldi	r20, 0x01	; 1
     c40:	69 2f       	mov	r22, r25
     c42:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     c46:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <gastr_LCD_Config+0x1>
     c4a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     c4e:	41 e0       	ldi	r20, 0x01	; 1
     c50:	69 2f       	mov	r22, r25
     c52:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     c56:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gastr_LCD_Config+0x2>
     c5a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     c5e:	41 e0       	ldi	r20, 0x01	; 1
     c60:	69 2f       	mov	r22, r25
     c62:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     c66:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <gastr_LCD_Config+0x3>
     c6a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     c6e:	41 e0       	ldi	r20, 0x01	; 1
     c70:	69 2f       	mov	r22, r25
     c72:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
     c76:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gastr_LCD_Config+0x4>
     c7a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	69 2f       	mov	r22, r25
     c82:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
     c86:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <gastr_LCD_Config+0x5>
     c8a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	69 2f       	mov	r22, r25
     c92:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
     c96:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <gastr_LCD_Config+0x6>
     c9a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	69 2f       	mov	r22, r25
     ca2:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
     ca6:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <gastr_LCD_Config+0x7>
     caa:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	69 2f       	mov	r22, r25
     cb2:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     cb6:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <gastr_LCD_Config+0x1>
     cba:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	69 2f       	mov	r22, r25
     cc2:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     cc6:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gastr_LCD_Config+0x2>
     cca:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	69 2f       	mov	r22, r25
     cd2:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     cd6:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <gastr_LCD_Config+0x3>
     cda:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gastr_LCD_Config>
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	69 2f       	mov	r22, r25
     ce2:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_WritePin>
		/*set status of the function*/
		State = LCD_Pin_Initializing;
     ce6:	85 e0       	ldi	r24, 0x05	; 5
     ce8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1783>
		break;
     cec:	99 c0       	rjmp	.+306    	; 0xe20 <LCD_Init+0x2aa>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
     cee:	6a e1       	ldi	r22, 0x1A	; 26
     cf0:	73 e0       	ldi	r23, 0x03	; 3
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <TIM_DelayStatus>
     cf8:	8a 83       	std	Y+2, r24	; 0x02
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	8b 3f       	cpi	r24, 0xFB	; 251
     cfe:	49 f4       	brne	.+18     	; 0xd12 <LCD_Init+0x19c>
		{
   		TIM_DelayMs(TIMER_2,15, (void (*)(void))LCD_SendCommand);
     d00:	2a e1       	ldi	r18, 0x1A	; 26
     d02:	33 e0       	ldi	r19, 0x03	; 3
     d04:	4f e0       	ldi	r20, 0x0F	; 15
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <TIM_DelayMs>
		}
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	88 23       	and	r24, r24
     d16:	09 f0       	breq	.+2      	; 0xd1a <LCD_Init+0x1a4>
     d18:	70 c0       	rjmp	.+224    	; 0xdfa <LCD_Init+0x284>
		{
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
     d1a:	86 e0       	ldi	r24, 0x06	; 6
     d1c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1783>
		}
		break;
     d20:	6c c0       	rjmp	.+216    	; 0xdfa <LCD_Init+0x284>
	case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     d28:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	88 23       	and	r24, r24
     d2e:	09 f0       	breq	.+2      	; 0xd32 <LCD_Init+0x1bc>
     d30:	66 c0       	rjmp	.+204    	; 0xdfe <LCD_Init+0x288>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     d32:	88 e0       	ldi	r24, 0x08	; 8
     d34:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1783>
		}
		break;
     d38:	62 c0       	rjmp	.+196    	; 0xdfe <LCD_Init+0x288>
	case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     d40:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	88 23       	and	r24, r24
     d46:	09 f0       	breq	.+2      	; 0xd4a <LCD_Init+0x1d4>
     d48:	5c c0       	rjmp	.+184    	; 0xe02 <LCD_Init+0x28c>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     d4a:	89 e0       	ldi	r24, 0x09	; 9
     d4c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1783>
		}
		break;
     d50:	58 c0       	rjmp	.+176    	; 0xe02 <LCD_Init+0x28c>
	case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     d52:	83 e0       	ldi	r24, 0x03	; 3
     d54:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     d58:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	88 23       	and	r24, r24
     d5e:	09 f0       	breq	.+2      	; 0xd62 <LCD_Init+0x1ec>
     d60:	52 c0       	rjmp	.+164    	; 0xe06 <LCD_Init+0x290>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     d62:	8a e0       	ldi	r24, 0x0A	; 10
     d64:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1783>
		}
		break;
     d68:	4e c0       	rjmp	.+156    	; 0xe06 <LCD_Init+0x290>
	case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     d70:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	88 23       	and	r24, r24
     d76:	09 f0       	breq	.+2      	; 0xd7a <LCD_Init+0x204>
     d78:	48 c0       	rjmp	.+144    	; 0xe0a <LCD_Init+0x294>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     d7a:	8b e0       	ldi	r24, 0x0B	; 11
     d7c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1783>
		}
		break;
     d80:	44 c0       	rjmp	.+136    	; 0xe0a <LCD_Init+0x294>
	case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_6);
     d82:	88 e2       	ldi	r24, 0x28	; 40
     d84:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     d88:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	88 23       	and	r24, r24
     d8e:	09 f0       	breq	.+2      	; 0xd92 <LCD_Init+0x21c>
     d90:	3e c0       	rjmp	.+124    	; 0xe0e <LCD_Init+0x298>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     d92:	8c e0       	ldi	r24, 0x0C	; 12
     d94:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1783>
		}
		break;
     d98:	3a c0       	rjmp	.+116    	; 0xe0e <LCD_Init+0x298>
	case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
     d9a:	8c e0       	ldi	r24, 0x0C	; 12
     d9c:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     da0:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	88 23       	and	r24, r24
     da6:	a9 f5       	brne	.+106    	; 0xe12 <LCD_Init+0x29c>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     da8:	8d e0       	ldi	r24, 0x0D	; 13
     daa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1783>
		}
		break;
     dae:	31 c0       	rjmp	.+98     	; 0xe12 <LCD_Init+0x29c>
	case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);//LCD_INCREMENTENTRYMODE/LCD_SHIFTINCREMENTENTRYMODE
     db0:	86 e0       	ldi	r24, 0x06	; 6
     db2:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     db6:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	88 23       	and	r24, r24
     dbc:	61 f5       	brne	.+88     	; 0xe16 <LCD_Init+0x2a0>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     dbe:	8e e0       	ldi	r24, 0x0E	; 14
     dc0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1783>
		}
		break;
     dc4:	28 c0       	rjmp	.+80     	; 0xe16 <LCD_Init+0x2a0>
	case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     dcc:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	88 23       	and	r24, r24
     dd2:	19 f5       	brne	.+70     	; 0xe1a <LCD_Init+0x2a4>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     dd4:	8f e0       	ldi	r24, 0x0F	; 15
     dd6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1783>
		}
		break;
     dda:	1f c0       	rjmp	.+62     	; 0xe1a <LCD_Init+0x2a4>
	case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     ddc:	80 e8       	ldi	r24, 0x80	; 128
     dde:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
     de2:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	88 23       	and	r24, r24
     de8:	d1 f4       	brne	.+52     	; 0xe1e <LCD_Init+0x2a8>
		{
			State = OperationStarted;
     dea:	8f ef       	ldi	r24, 0xFF	; 255
     dec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1783>
			ErrRetVal = OperationSuccess;
     df0:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
     df2:	15 c0       	rjmp	.+42     	; 0xe1e <LCD_Init+0x2a8>
	default:
		ErrRetVal = OperationFail;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	89 83       	std	Y+1, r24	; 0x01
     df8:	13 c0       	rjmp	.+38     	; 0xe20 <LCD_Init+0x2aa>
		if(TimerRetVal == ((uint8_t)ERROR_OK))
		{
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
     dfa:	00 00       	nop
     dfc:	11 c0       	rjmp	.+34     	; 0xe20 <LCD_Init+0x2aa>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     dfe:	00 00       	nop
     e00:	0f c0       	rjmp	.+30     	; 0xe20 <LCD_Init+0x2aa>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     e02:	00 00       	nop
     e04:	0d c0       	rjmp	.+26     	; 0xe20 <LCD_Init+0x2aa>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     e06:	00 00       	nop
     e08:	0b c0       	rjmp	.+22     	; 0xe20 <LCD_Init+0x2aa>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     e0a:	00 00       	nop
     e0c:	09 c0       	rjmp	.+18     	; 0xe20 <LCD_Init+0x2aa>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_6);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     e0e:	00 00       	nop
     e10:	07 c0       	rjmp	.+14     	; 0xe20 <LCD_Init+0x2aa>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     e12:	00 00       	nop
     e14:	05 c0       	rjmp	.+10     	; 0xe20 <LCD_Init+0x2aa>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);//LCD_INCREMENTENTRYMODE/LCD_SHIFTINCREMENTENTRYMODE
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     e16:	00 00       	nop
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <LCD_Init+0x2aa>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     e1a:	00 00       	nop
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <LCD_Init+0x2aa>
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = OperationStarted;
			ErrRetVal = OperationSuccess;
		}
		break;
     e1e:	00 00       	nop
		default:
		ErrRetVal = OperationFail;
		break;
	}
	#endif
	return ErrRetVal;
     e20:	89 81       	ldd	r24, Y+1	; 0x01
}
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <LCD_SendString>:
ERROR_STATE_t LCD_SendString(const uint8_t* String)
{
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	00 d0       	rcall	.+0      	; 0xe34 <LCD_SendString+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <LCD_SendString+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	89 83       	std	Y+1, r24	; 0x01
	uint8_t LCD_SendDataRetVal = OperationStarted;
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	8a 83       	std	Y+2, r24	; 0x02
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	89 2b       	or	r24, r25
     e4c:	41 f1       	breq	.+80     	; 0xe9e <LCD_SendString+0x70>
		if (String[Number] != NULL_TERMINATOR ) {
     e4e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Number.1806>
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	2b 81       	ldd	r18, Y+3	; 0x03
     e58:	3c 81       	ldd	r19, Y+4	; 0x04
     e5a:	82 0f       	add	r24, r18
     e5c:	93 1f       	adc	r25, r19
     e5e:	fc 01       	movw	r30, r24
     e60:	80 81       	ld	r24, Z
     e62:	88 23       	and	r24, r24
     e64:	c1 f0       	breq	.+48     	; 0xe96 <LCD_SendString+0x68>
			ErrRetVal = OperationRunning;
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	89 83       	std	Y+1, r24	; 0x01
			LCD_SendDataRetVal = LCD_SendData(String[Number]);
     e6a:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Number.1806>
     e6e:	88 2f       	mov	r24, r24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	2b 81       	ldd	r18, Y+3	; 0x03
     e74:	3c 81       	ldd	r19, Y+4	; 0x04
     e76:	82 0f       	add	r24, r18
     e78:	93 1f       	adc	r25, r19
     e7a:	fc 01       	movw	r30, r24
     e7c:	80 81       	ld	r24, Z
     e7e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <LCD_SendData>
     e82:	8a 83       	std	Y+2, r24	; 0x02
			if(LCD_SendDataRetVal == OperationSuccess)
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	88 23       	and	r24, r24
     e88:	61 f4       	brne	.+24     	; 0xea2 <LCD_SendString+0x74>
			{
				Number++;
     e8a:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Number.1806>
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <Number.1806>
     e94:	06 c0       	rjmp	.+12     	; 0xea2 <LCD_SendString+0x74>
			}
		}
		else
		{
			Number = 0;
     e96:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <Number.1806>
			ErrRetVal = OperationSuccess;
     e9a:	19 82       	std	Y+1, r1	; 0x01
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <LCD_SendString+0x74>
		}
	} else {
		ErrRetVal = OperationFail;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <DIO_SetPinDirection>:

#include "MC_REGISTERS.h"
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <DIO_SetPinDirection+0x6>
     eb8:	00 d0       	rcall	.+0      	; 0xeba <DIO_SetPinDirection+0x8>
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	8a 83       	std	Y+2, r24	; 0x02
     ec0:	6b 83       	std	Y+3, r22	; 0x03
     ec2:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState=ERROR_OK;
     ec4:	19 82       	std	Y+1, r1	; 0x01
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	88 23       	and	r24, r24
     eca:	31 f0       	breq	.+12     	; 0xed8 <DIO_SetPinDirection+0x26>
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	19 f0       	breq	.+6      	; 0xed8 <DIO_SetPinDirection+0x26>
	{
		u8_ErrorState=ERROR_NOK;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	a9 c0       	rjmp	.+338    	; 0x102a <DIO_SetPinDirection+0x178>
	}
	else if(PinNo>PIN7)
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	88 30       	cpi	r24, 0x08	; 8
     edc:	18 f0       	brcs	.+6      	; 0xee4 <DIO_SetPinDirection+0x32>
	{
		u8_ErrorState=ERROR_NOK;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	a3 c0       	rjmp	.+326    	; 0x102a <DIO_SetPinDirection+0x178>
	}
	else
	{
		switch(PortName)
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	91 05       	cpc	r25, r1
     eee:	89 f1       	breq	.+98     	; 0xf52 <DIO_SetPinDirection+0xa0>
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	91 05       	cpc	r25, r1
     ef4:	1c f4       	brge	.+6      	; 0xefc <DIO_SetPinDirection+0x4a>
     ef6:	89 2b       	or	r24, r25
     ef8:	49 f0       	breq	.+18     	; 0xf0c <DIO_SetPinDirection+0x5a>
     efa:	94 c0       	rjmp	.+296    	; 0x1024 <DIO_SetPinDirection+0x172>
     efc:	82 30       	cpi	r24, 0x02	; 2
     efe:	91 05       	cpc	r25, r1
     f00:	09 f4       	brne	.+2      	; 0xf04 <DIO_SetPinDirection+0x52>
     f02:	4a c0       	rjmp	.+148    	; 0xf98 <DIO_SetPinDirection+0xe6>
     f04:	03 97       	sbiw	r24, 0x03	; 3
     f06:	09 f4       	brne	.+2      	; 0xf0a <DIO_SetPinDirection+0x58>
     f08:	6a c0       	rjmp	.+212    	; 0xfde <DIO_SetPinDirection+0x12c>
     f0a:	8c c0       	rjmp	.+280    	; 0x1024 <DIO_SetPinDirection+0x172>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
     f0c:	8a e3       	ldi	r24, 0x3A	; 58
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	2a e3       	ldi	r18, 0x3A	; 58
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	f9 01       	movw	r30, r18
     f16:	20 81       	ld	r18, Z
     f18:	62 2f       	mov	r22, r18
     f1a:	2b 81       	ldd	r18, Y+3	; 0x03
     f1c:	42 2f       	mov	r20, r18
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	21 e0       	ldi	r18, 0x01	; 1
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_SetPinDirection+0x78>
     f26:	22 0f       	add	r18, r18
     f28:	33 1f       	adc	r19, r19
     f2a:	4a 95       	dec	r20
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_SetPinDirection+0x74>
     f2e:	20 95       	com	r18
     f30:	62 23       	and	r22, r18
     f32:	2c 81       	ldd	r18, Y+4	; 0x04
     f34:	22 2f       	mov	r18, r18
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	4b 81       	ldd	r20, Y+3	; 0x03
     f3a:	44 2f       	mov	r20, r20
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_SetPinDirection+0x92>
     f40:	22 0f       	add	r18, r18
     f42:	33 1f       	adc	r19, r19
     f44:	4a 95       	dec	r20
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_SetPinDirection+0x8e>
     f48:	26 2b       	or	r18, r22
     f4a:	fc 01       	movw	r30, r24
     f4c:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
     f4e:	19 82       	std	Y+1, r1	; 0x01
				break;
     f50:	6c c0       	rjmp	.+216    	; 0x102a <DIO_SetPinDirection+0x178>
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
     f52:	87 e3       	ldi	r24, 0x37	; 55
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	27 e3       	ldi	r18, 0x37	; 55
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	f9 01       	movw	r30, r18
     f5c:	20 81       	ld	r18, Z
     f5e:	62 2f       	mov	r22, r18
     f60:	2b 81       	ldd	r18, Y+3	; 0x03
     f62:	42 2f       	mov	r20, r18
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	21 e0       	ldi	r18, 0x01	; 1
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_SetPinDirection+0xbe>
     f6c:	22 0f       	add	r18, r18
     f6e:	33 1f       	adc	r19, r19
     f70:	4a 95       	dec	r20
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_SetPinDirection+0xba>
     f74:	20 95       	com	r18
     f76:	62 23       	and	r22, r18
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	22 2f       	mov	r18, r18
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	4b 81       	ldd	r20, Y+3	; 0x03
     f80:	44 2f       	mov	r20, r20
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_SetPinDirection+0xd8>
     f86:	22 0f       	add	r18, r18
     f88:	33 1f       	adc	r19, r19
     f8a:	4a 95       	dec	r20
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_SetPinDirection+0xd4>
     f8e:	26 2b       	or	r18, r22
     f90:	fc 01       	movw	r30, r24
     f92:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
     f94:	19 82       	std	Y+1, r1	; 0x01
				break;
     f96:	49 c0       	rjmp	.+146    	; 0x102a <DIO_SetPinDirection+0x178>
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
     f98:	84 e3       	ldi	r24, 0x34	; 52
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	24 e3       	ldi	r18, 0x34	; 52
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	f9 01       	movw	r30, r18
     fa2:	20 81       	ld	r18, Z
     fa4:	62 2f       	mov	r22, r18
     fa6:	2b 81       	ldd	r18, Y+3	; 0x03
     fa8:	42 2f       	mov	r20, r18
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	21 e0       	ldi	r18, 0x01	; 1
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_SetPinDirection+0x104>
     fb2:	22 0f       	add	r18, r18
     fb4:	33 1f       	adc	r19, r19
     fb6:	4a 95       	dec	r20
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_SetPinDirection+0x100>
     fba:	20 95       	com	r18
     fbc:	62 23       	and	r22, r18
     fbe:	2c 81       	ldd	r18, Y+4	; 0x04
     fc0:	22 2f       	mov	r18, r18
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	4b 81       	ldd	r20, Y+3	; 0x03
     fc6:	44 2f       	mov	r20, r20
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_SetPinDirection+0x11e>
     fcc:	22 0f       	add	r18, r18
     fce:	33 1f       	adc	r19, r19
     fd0:	4a 95       	dec	r20
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_SetPinDirection+0x11a>
     fd4:	26 2b       	or	r18, r22
     fd6:	fc 01       	movw	r30, r24
     fd8:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
     fda:	19 82       	std	Y+1, r1	; 0x01
				break;
     fdc:	26 c0       	rjmp	.+76     	; 0x102a <DIO_SetPinDirection+0x178>
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
     fde:	81 e3       	ldi	r24, 0x31	; 49
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	21 e3       	ldi	r18, 0x31	; 49
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	f9 01       	movw	r30, r18
     fe8:	20 81       	ld	r18, Z
     fea:	62 2f       	mov	r22, r18
     fec:	2b 81       	ldd	r18, Y+3	; 0x03
     fee:	42 2f       	mov	r20, r18
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	21 e0       	ldi	r18, 0x01	; 1
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_SetPinDirection+0x14a>
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	4a 95       	dec	r20
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_SetPinDirection+0x146>
    1000:	20 95       	com	r18
    1002:	62 23       	and	r22, r18
    1004:	2c 81       	ldd	r18, Y+4	; 0x04
    1006:	22 2f       	mov	r18, r18
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	4b 81       	ldd	r20, Y+3	; 0x03
    100c:	44 2f       	mov	r20, r20
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_SetPinDirection+0x164>
    1012:	22 0f       	add	r18, r18
    1014:	33 1f       	adc	r19, r19
    1016:	4a 95       	dec	r20
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_SetPinDirection+0x160>
    101a:	26 2b       	or	r18, r22
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    1020:	19 82       	std	Y+1, r1	; 0x01
				break;
    1022:	03 c0       	rjmp	.+6      	; 0x102a <DIO_SetPinDirection+0x178>
			default:
				u8_ErrorState=ERROR_NOK;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
				break;
    1028:	00 00       	nop
		}		
	}
	return u8_ErrorState;
    102a:	89 81       	ldd	r24, Y+1	; 0x01
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	00 d0       	rcall	.+0      	; 0x1040 <DIO_WritePin+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <DIO_WritePin+0x8>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	8a 83       	std	Y+2, r24	; 0x02
    1048:	6b 83       	std	Y+3, r22	; 0x03
    104a:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState=ERROR_OK;
    104c:	19 82       	std	Y+1, r1	; 0x01
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	88 23       	and	r24, r24
    1052:	31 f0       	breq	.+12     	; 0x1060 <DIO_WritePin+0x26>
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	19 f0       	breq	.+6      	; 0x1060 <DIO_WritePin+0x26>
	{
		u8_ErrorState=ERROR_NOK;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	a9 c0       	rjmp	.+338    	; 0x11b2 <DIO_WritePin+0x178>
	}
	else if(PinNo>PIN7)
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	88 30       	cpi	r24, 0x08	; 8
    1064:	18 f0       	brcs	.+6      	; 0x106c <DIO_WritePin+0x32>
	{
		u8_ErrorState=ERROR_NOK;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	a3 c0       	rjmp	.+326    	; 0x11b2 <DIO_WritePin+0x178>
	}
	else
	{
		switch(PortName)
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	89 f1       	breq	.+98     	; 0x10da <DIO_WritePin+0xa0>
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	91 05       	cpc	r25, r1
    107c:	1c f4       	brge	.+6      	; 0x1084 <DIO_WritePin+0x4a>
    107e:	89 2b       	or	r24, r25
    1080:	49 f0       	breq	.+18     	; 0x1094 <DIO_WritePin+0x5a>
    1082:	94 c0       	rjmp	.+296    	; 0x11ac <DIO_WritePin+0x172>
    1084:	82 30       	cpi	r24, 0x02	; 2
    1086:	91 05       	cpc	r25, r1
    1088:	09 f4       	brne	.+2      	; 0x108c <DIO_WritePin+0x52>
    108a:	4a c0       	rjmp	.+148    	; 0x1120 <DIO_WritePin+0xe6>
    108c:	03 97       	sbiw	r24, 0x03	; 3
    108e:	09 f4       	brne	.+2      	; 0x1092 <DIO_WritePin+0x58>
    1090:	6a c0       	rjmp	.+212    	; 0x1166 <DIO_WritePin+0x12c>
    1092:	8c c0       	rjmp	.+280    	; 0x11ac <DIO_WritePin+0x172>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
    1094:	8b e3       	ldi	r24, 0x3B	; 59
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	2b e3       	ldi	r18, 0x3B	; 59
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	f9 01       	movw	r30, r18
    109e:	20 81       	ld	r18, Z
    10a0:	62 2f       	mov	r22, r18
    10a2:	2b 81       	ldd	r18, Y+3	; 0x03
    10a4:	42 2f       	mov	r20, r18
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	21 e0       	ldi	r18, 0x01	; 1
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_WritePin+0x78>
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	4a 95       	dec	r20
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_WritePin+0x74>
    10b6:	20 95       	com	r18
    10b8:	62 23       	and	r22, r18
    10ba:	2c 81       	ldd	r18, Y+4	; 0x04
    10bc:	22 2f       	mov	r18, r18
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	4b 81       	ldd	r20, Y+3	; 0x03
    10c2:	44 2f       	mov	r20, r20
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_WritePin+0x92>
    10c8:	22 0f       	add	r18, r18
    10ca:	33 1f       	adc	r19, r19
    10cc:	4a 95       	dec	r20
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_WritePin+0x8e>
    10d0:	26 2b       	or	r18, r22
    10d2:	fc 01       	movw	r30, r24
    10d4:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    10d6:	19 82       	std	Y+1, r1	; 0x01
				break;
    10d8:	6c c0       	rjmp	.+216    	; 0x11b2 <DIO_WritePin+0x178>
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
    10da:	88 e3       	ldi	r24, 0x38	; 56
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	28 e3       	ldi	r18, 0x38	; 56
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	f9 01       	movw	r30, r18
    10e4:	20 81       	ld	r18, Z
    10e6:	62 2f       	mov	r22, r18
    10e8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ea:	42 2f       	mov	r20, r18
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	21 e0       	ldi	r18, 0x01	; 1
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_WritePin+0xbe>
    10f4:	22 0f       	add	r18, r18
    10f6:	33 1f       	adc	r19, r19
    10f8:	4a 95       	dec	r20
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_WritePin+0xba>
    10fc:	20 95       	com	r18
    10fe:	62 23       	and	r22, r18
    1100:	2c 81       	ldd	r18, Y+4	; 0x04
    1102:	22 2f       	mov	r18, r18
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	4b 81       	ldd	r20, Y+3	; 0x03
    1108:	44 2f       	mov	r20, r20
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_WritePin+0xd8>
    110e:	22 0f       	add	r18, r18
    1110:	33 1f       	adc	r19, r19
    1112:	4a 95       	dec	r20
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_WritePin+0xd4>
    1116:	26 2b       	or	r18, r22
    1118:	fc 01       	movw	r30, r24
    111a:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    111c:	19 82       	std	Y+1, r1	; 0x01
				break;
    111e:	49 c0       	rjmp	.+146    	; 0x11b2 <DIO_WritePin+0x178>
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
    1120:	85 e3       	ldi	r24, 0x35	; 53
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	25 e3       	ldi	r18, 0x35	; 53
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	f9 01       	movw	r30, r18
    112a:	20 81       	ld	r18, Z
    112c:	62 2f       	mov	r22, r18
    112e:	2b 81       	ldd	r18, Y+3	; 0x03
    1130:	42 2f       	mov	r20, r18
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	21 e0       	ldi	r18, 0x01	; 1
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_WritePin+0x104>
    113a:	22 0f       	add	r18, r18
    113c:	33 1f       	adc	r19, r19
    113e:	4a 95       	dec	r20
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_WritePin+0x100>
    1142:	20 95       	com	r18
    1144:	62 23       	and	r22, r18
    1146:	2c 81       	ldd	r18, Y+4	; 0x04
    1148:	22 2f       	mov	r18, r18
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	4b 81       	ldd	r20, Y+3	; 0x03
    114e:	44 2f       	mov	r20, r20
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_WritePin+0x11e>
    1154:	22 0f       	add	r18, r18
    1156:	33 1f       	adc	r19, r19
    1158:	4a 95       	dec	r20
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_WritePin+0x11a>
    115c:	26 2b       	or	r18, r22
    115e:	fc 01       	movw	r30, r24
    1160:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    1162:	19 82       	std	Y+1, r1	; 0x01
				break;
    1164:	26 c0       	rjmp	.+76     	; 0x11b2 <DIO_WritePin+0x178>
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
    1166:	82 e3       	ldi	r24, 0x32	; 50
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	22 e3       	ldi	r18, 0x32	; 50
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	f9 01       	movw	r30, r18
    1170:	20 81       	ld	r18, Z
    1172:	62 2f       	mov	r22, r18
    1174:	2b 81       	ldd	r18, Y+3	; 0x03
    1176:	42 2f       	mov	r20, r18
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	21 e0       	ldi	r18, 0x01	; 1
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <DIO_WritePin+0x14a>
    1180:	22 0f       	add	r18, r18
    1182:	33 1f       	adc	r19, r19
    1184:	4a 95       	dec	r20
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <DIO_WritePin+0x146>
    1188:	20 95       	com	r18
    118a:	62 23       	and	r22, r18
    118c:	2c 81       	ldd	r18, Y+4	; 0x04
    118e:	22 2f       	mov	r18, r18
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	4b 81       	ldd	r20, Y+3	; 0x03
    1194:	44 2f       	mov	r20, r20
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_WritePin+0x164>
    119a:	22 0f       	add	r18, r18
    119c:	33 1f       	adc	r19, r19
    119e:	4a 95       	dec	r20
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_WritePin+0x160>
    11a2:	26 2b       	or	r18, r22
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    11a8:	19 82       	std	Y+1, r1	; 0x01
				break;
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <DIO_WritePin+0x178>
			default:
				u8_ErrorState=ERROR_NOK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
				break;
    11b0:	00 00       	nop
		}
	}	
	return u8_ErrorState;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	08 95       	ret

000011c2 <GetFreqPrescaleRatio>:
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <GetFreqPrescaleRatio+0x6>
    11c8:	1f 92       	push	r1
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	7b 83       	std	Y+3, r23	; 0x03
    11d2:	6a 83       	std	Y+2, r22	; 0x02
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	88 23       	and	r24, r24
    11d8:	21 f0       	breq	.+8      	; 0x11e2 <GetFreqPrescaleRatio+0x20>
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	09 f0       	breq	.+2      	; 0x11e2 <GetFreqPrescaleRatio+0x20>
    11e0:	5f c0       	rjmp	.+190    	; 0x12a0 <GetFreqPrescaleRatio+0xde>
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	c9 01       	movw	r24, r18
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	82 0f       	add	r24, r18
    11f0:	93 1f       	adc	r25, r19
    11f2:	89 58       	subi	r24, 0x89	; 137
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	fc 01       	movw	r30, r24
    11f8:	80 81       	ld	r24, Z
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	83 30       	cpi	r24, 0x03	; 3
    1200:	91 05       	cpc	r25, r1
    1202:	39 f1       	breq	.+78     	; 0x1252 <GetFreqPrescaleRatio+0x90>
    1204:	84 30       	cpi	r24, 0x04	; 4
    1206:	91 05       	cpc	r25, r1
    1208:	34 f4       	brge	.+12     	; 0x1216 <GetFreqPrescaleRatio+0x54>
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	91 05       	cpc	r25, r1
    120e:	49 f0       	breq	.+18     	; 0x1222 <GetFreqPrescaleRatio+0x60>
    1210:	02 97       	sbiw	r24, 0x02	; 2
    1212:	99 f0       	breq	.+38     	; 0x123a <GetFreqPrescaleRatio+0x78>
    1214:	42 c0       	rjmp	.+132    	; 0x129a <GetFreqPrescaleRatio+0xd8>
    1216:	84 30       	cpi	r24, 0x04	; 4
    1218:	91 05       	cpc	r25, r1
    121a:	39 f1       	breq	.+78     	; 0x126a <GetFreqPrescaleRatio+0xa8>
    121c:	05 97       	sbiw	r24, 0x05	; 5
    121e:	89 f1       	breq	.+98     	; 0x1282 <GetFreqPrescaleRatio+0xc0>
    1220:	3c c0       	rjmp	.+120    	; 0x129a <GetFreqPrescaleRatio+0xd8>
    1222:	2a 81       	ldd	r18, Y+2	; 0x02
    1224:	3b 81       	ldd	r19, Y+3	; 0x03
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	a0 e8       	ldi	r26, 0x80	; 128
    122c:	bd e3       	ldi	r27, 0x3D	; 61
    122e:	f9 01       	movw	r30, r18
    1230:	80 83       	st	Z, r24
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	a2 83       	std	Z+2, r26	; 0x02
    1236:	b3 83       	std	Z+3, r27	; 0x03
    1238:	32 c0       	rjmp	.+100    	; 0x129e <GetFreqPrescaleRatio+0xdc>
    123a:	2a 81       	ldd	r18, Y+2	; 0x02
    123c:	3b 81       	ldd	r19, Y+3	; 0x03
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	a0 e0       	ldi	r26, 0x00	; 0
    1244:	bf e3       	ldi	r27, 0x3F	; 63
    1246:	f9 01       	movw	r30, r18
    1248:	80 83       	st	Z, r24
    124a:	91 83       	std	Z+1, r25	; 0x01
    124c:	a2 83       	std	Z+2, r26	; 0x02
    124e:	b3 83       	std	Z+3, r27	; 0x03
    1250:	26 c0       	rjmp	.+76     	; 0x129e <GetFreqPrescaleRatio+0xdc>
    1252:	2a 81       	ldd	r18, Y+2	; 0x02
    1254:	3b 81       	ldd	r19, Y+3	; 0x03
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a0 e8       	ldi	r26, 0x80	; 128
    125c:	b0 e4       	ldi	r27, 0x40	; 64
    125e:	f9 01       	movw	r30, r18
    1260:	80 83       	st	Z, r24
    1262:	91 83       	std	Z+1, r25	; 0x01
    1264:	a2 83       	std	Z+2, r26	; 0x02
    1266:	b3 83       	std	Z+3, r27	; 0x03
    1268:	1a c0       	rjmp	.+52     	; 0x129e <GetFreqPrescaleRatio+0xdc>
    126a:	2a 81       	ldd	r18, Y+2	; 0x02
    126c:	3b 81       	ldd	r19, Y+3	; 0x03
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	a0 e8       	ldi	r26, 0x80	; 128
    1274:	b1 e4       	ldi	r27, 0x41	; 65
    1276:	f9 01       	movw	r30, r18
    1278:	80 83       	st	Z, r24
    127a:	91 83       	std	Z+1, r25	; 0x01
    127c:	a2 83       	std	Z+2, r26	; 0x02
    127e:	b3 83       	std	Z+3, r27	; 0x03
    1280:	0e c0       	rjmp	.+28     	; 0x129e <GetFreqPrescaleRatio+0xdc>
    1282:	2a 81       	ldd	r18, Y+2	; 0x02
    1284:	3b 81       	ldd	r19, Y+3	; 0x03
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a0 e8       	ldi	r26, 0x80	; 128
    128c:	b2 e4       	ldi	r27, 0x42	; 66
    128e:	f9 01       	movw	r30, r18
    1290:	80 83       	st	Z, r24
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	a2 83       	std	Z+2, r26	; 0x02
    1296:	b3 83       	std	Z+3, r27	; 0x03
    1298:	02 c0       	rjmp	.+4      	; 0x129e <GetFreqPrescaleRatio+0xdc>
    129a:	8c ef       	ldi	r24, 0xFC	; 252
    129c:	7d c0       	rjmp	.+250    	; 0x1398 <GetFreqPrescaleRatio+0x1d6>
    129e:	7b c0       	rjmp	.+246    	; 0x1396 <GetFreqPrescaleRatio+0x1d4>
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <GetFreqPrescaleRatio+0xe6>
    12a6:	77 c0       	rjmp	.+238    	; 0x1396 <GetFreqPrescaleRatio+0x1d4>
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	c9 01       	movw	r24, r18
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	82 0f       	add	r24, r18
    12b6:	93 1f       	adc	r25, r19
    12b8:	89 58       	subi	r24, 0x89	; 137
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	fc 01       	movw	r30, r24
    12be:	80 81       	ld	r24, Z
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	09 2e       	mov	r0, r25
    12c6:	00 0c       	add	r0, r0
    12c8:	aa 0b       	sbc	r26, r26
    12ca:	bb 0b       	sbc	r27, r27
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	26 e0       	ldi	r18, 0x06	; 6
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	84 1b       	sub	r24, r20
    12d6:	95 0b       	sbc	r25, r21
    12d8:	28 17       	cp	r18, r24
    12da:	39 07       	cpc	r19, r25
    12dc:	08 f4       	brcc	.+2      	; 0x12e0 <GetFreqPrescaleRatio+0x11e>
    12de:	59 c0       	rjmp	.+178    	; 0x1392 <GetFreqPrescaleRatio+0x1d0>
    12e0:	86 5d       	subi	r24, 0xD6	; 214
    12e2:	9f 4f       	sbci	r25, 0xFF	; 255
    12e4:	fc 01       	movw	r30, r24
    12e6:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__tablejump2__>
    12ea:	2a 81       	ldd	r18, Y+2	; 0x02
    12ec:	3b 81       	ldd	r19, Y+3	; 0x03
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	a0 e8       	ldi	r26, 0x80	; 128
    12f4:	bd e3       	ldi	r27, 0x3D	; 61
    12f6:	f9 01       	movw	r30, r18
    12f8:	80 83       	st	Z, r24
    12fa:	91 83       	std	Z+1, r25	; 0x01
    12fc:	a2 83       	std	Z+2, r26	; 0x02
    12fe:	b3 83       	std	Z+3, r27	; 0x03
    1300:	4a c0       	rjmp	.+148    	; 0x1396 <GetFreqPrescaleRatio+0x1d4>
    1302:	2a 81       	ldd	r18, Y+2	; 0x02
    1304:	3b 81       	ldd	r19, Y+3	; 0x03
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e0       	ldi	r26, 0x00	; 0
    130c:	bf e3       	ldi	r27, 0x3F	; 63
    130e:	f9 01       	movw	r30, r18
    1310:	80 83       	st	Z, r24
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	a2 83       	std	Z+2, r26	; 0x02
    1316:	b3 83       	std	Z+3, r27	; 0x03
    1318:	3e c0       	rjmp	.+124    	; 0x1396 <GetFreqPrescaleRatio+0x1d4>
    131a:	2a 81       	ldd	r18, Y+2	; 0x02
    131c:	3b 81       	ldd	r19, Y+3	; 0x03
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a0 e0       	ldi	r26, 0x00	; 0
    1324:	b0 e4       	ldi	r27, 0x40	; 64
    1326:	f9 01       	movw	r30, r18
    1328:	80 83       	st	Z, r24
    132a:	91 83       	std	Z+1, r25	; 0x01
    132c:	a2 83       	std	Z+2, r26	; 0x02
    132e:	b3 83       	std	Z+3, r27	; 0x03
    1330:	32 c0       	rjmp	.+100    	; 0x1396 <GetFreqPrescaleRatio+0x1d4>
    1332:	2a 81       	ldd	r18, Y+2	; 0x02
    1334:	3b 81       	ldd	r19, Y+3	; 0x03
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	a0 e8       	ldi	r26, 0x80	; 128
    133c:	b0 e4       	ldi	r27, 0x40	; 64
    133e:	f9 01       	movw	r30, r18
    1340:	80 83       	st	Z, r24
    1342:	91 83       	std	Z+1, r25	; 0x01
    1344:	a2 83       	std	Z+2, r26	; 0x02
    1346:	b3 83       	std	Z+3, r27	; 0x03
    1348:	26 c0       	rjmp	.+76     	; 0x1396 <GetFreqPrescaleRatio+0x1d4>
    134a:	2a 81       	ldd	r18, Y+2	; 0x02
    134c:	3b 81       	ldd	r19, Y+3	; 0x03
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a0 e0       	ldi	r26, 0x00	; 0
    1354:	b1 e4       	ldi	r27, 0x41	; 65
    1356:	f9 01       	movw	r30, r18
    1358:	80 83       	st	Z, r24
    135a:	91 83       	std	Z+1, r25	; 0x01
    135c:	a2 83       	std	Z+2, r26	; 0x02
    135e:	b3 83       	std	Z+3, r27	; 0x03
    1360:	1a c0       	rjmp	.+52     	; 0x1396 <GetFreqPrescaleRatio+0x1d4>
    1362:	2a 81       	ldd	r18, Y+2	; 0x02
    1364:	3b 81       	ldd	r19, Y+3	; 0x03
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	a0 e8       	ldi	r26, 0x80	; 128
    136c:	b1 e4       	ldi	r27, 0x41	; 65
    136e:	f9 01       	movw	r30, r18
    1370:	80 83       	st	Z, r24
    1372:	91 83       	std	Z+1, r25	; 0x01
    1374:	a2 83       	std	Z+2, r26	; 0x02
    1376:	b3 83       	std	Z+3, r27	; 0x03
    1378:	0e c0       	rjmp	.+28     	; 0x1396 <GetFreqPrescaleRatio+0x1d4>
    137a:	2a 81       	ldd	r18, Y+2	; 0x02
    137c:	3b 81       	ldd	r19, Y+3	; 0x03
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a0 e8       	ldi	r26, 0x80	; 128
    1384:	b2 e4       	ldi	r27, 0x42	; 66
    1386:	f9 01       	movw	r30, r18
    1388:	80 83       	st	Z, r24
    138a:	91 83       	std	Z+1, r25	; 0x01
    138c:	a2 83       	std	Z+2, r26	; 0x02
    138e:	b3 83       	std	Z+3, r27	; 0x03
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <GetFreqPrescaleRatio+0x1d4>
    1392:	8c ef       	ldi	r24, 0xFC	; 252
    1394:	01 c0       	rjmp	.+2      	; 0x1398 <GetFreqPrescaleRatio+0x1d6>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	08 95       	ret

000013a4 <TIM_Init>:
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	1f 92       	push	r1
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	91 05       	cpc	r25, r1
    13ba:	b1 f1       	breq	.+108    	; 0x1428 <TIM_Init+0x84>
    13bc:	82 30       	cpi	r24, 0x02	; 2
    13be:	91 05       	cpc	r25, r1
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <TIM_Init+0x20>
    13c2:	6a c0       	rjmp	.+212    	; 0x1498 <TIM_Init+0xf4>
    13c4:	89 2b       	or	r24, r25
    13c6:	09 f0       	breq	.+2      	; 0x13ca <TIM_Init+0x26>
    13c8:	a2 c0       	rjmp	.+324    	; 0x150e <TIM_Init+0x16a>
    13ca:	43 e5       	ldi	r20, 0x53	; 83
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	c9 01       	movw	r24, r18
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	82 0f       	add	r24, r18
    13dc:	93 1f       	adc	r25, r19
    13de:	8b 58       	subi	r24, 0x8B	; 139
    13e0:	9f 4f       	sbci	r25, 0xFF	; 255
    13e2:	fc 01       	movw	r30, r24
    13e4:	80 81       	ld	r24, Z
    13e6:	fa 01       	movw	r30, r20
    13e8:	80 83       	st	Z, r24
    13ea:	89 e5       	ldi	r24, 0x59	; 89
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	29 e5       	ldi	r18, 0x59	; 89
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	f9 01       	movw	r30, r18
    13f4:	20 81       	ld	r18, Z
    13f6:	2c 7f       	andi	r18, 0xFC	; 252
    13f8:	fc 01       	movw	r30, r24
    13fa:	20 83       	st	Z, r18
    13fc:	49 e5       	ldi	r20, 0x59	; 89
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	89 e5       	ldi	r24, 0x59	; 89
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	fc 01       	movw	r30, r24
    1406:	60 81       	ld	r22, Z
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	c9 01       	movw	r24, r18
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	82 0f       	add	r24, r18
    1416:	93 1f       	adc	r25, r19
    1418:	8a 58       	subi	r24, 0x8A	; 138
    141a:	9f 4f       	sbci	r25, 0xFF	; 255
    141c:	fc 01       	movw	r30, r24
    141e:	80 81       	ld	r24, Z
    1420:	86 2b       	or	r24, r22
    1422:	fa 01       	movw	r30, r20
    1424:	80 83       	st	Z, r24
    1426:	75 c0       	rjmp	.+234    	; 0x1512 <TIM_Init+0x16e>
    1428:	4e e4       	ldi	r20, 0x4E	; 78
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	c9 01       	movw	r24, r18
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	82 0f       	add	r24, r18
    143a:	93 1f       	adc	r25, r19
    143c:	8b 58       	subi	r24, 0x8B	; 139
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	fc 01       	movw	r30, r24
    1442:	80 81       	ld	r24, Z
    1444:	fa 01       	movw	r30, r20
    1446:	80 83       	st	Z, r24
    1448:	89 e5       	ldi	r24, 0x59	; 89
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	29 e5       	ldi	r18, 0x59	; 89
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	f9 01       	movw	r30, r18
    1452:	20 81       	ld	r18, Z
    1454:	27 7e       	andi	r18, 0xE7	; 231
    1456:	fc 01       	movw	r30, r24
    1458:	20 83       	st	Z, r18
    145a:	49 e5       	ldi	r20, 0x59	; 89
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	89 e5       	ldi	r24, 0x59	; 89
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	fc 01       	movw	r30, r24
    1464:	80 81       	ld	r24, Z
    1466:	68 2f       	mov	r22, r24
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	c9 01       	movw	r24, r18
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	82 0f       	add	r24, r18
    1476:	93 1f       	adc	r25, r19
    1478:	8a 58       	subi	r24, 0x8A	; 138
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	fc 01       	movw	r30, r24
    147e:	80 81       	ld	r24, Z
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	86 2b       	or	r24, r22
    1492:	fa 01       	movw	r30, r20
    1494:	80 83       	st	Z, r24
    1496:	3d c0       	rjmp	.+122    	; 0x1512 <TIM_Init+0x16e>
    1498:	45 e4       	ldi	r20, 0x45	; 69
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	c9 01       	movw	r24, r18
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	82 0f       	add	r24, r18
    14aa:	93 1f       	adc	r25, r19
    14ac:	8b 58       	subi	r24, 0x8B	; 139
    14ae:	9f 4f       	sbci	r25, 0xFF	; 255
    14b0:	fc 01       	movw	r30, r24
    14b2:	80 81       	ld	r24, Z
    14b4:	fa 01       	movw	r30, r20
    14b6:	80 83       	st	Z, r24
    14b8:	89 e5       	ldi	r24, 0x59	; 89
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	29 e5       	ldi	r18, 0x59	; 89
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	f9 01       	movw	r30, r18
    14c2:	20 81       	ld	r18, Z
    14c4:	2f 73       	andi	r18, 0x3F	; 63
    14c6:	fc 01       	movw	r30, r24
    14c8:	20 83       	st	Z, r18
    14ca:	49 e5       	ldi	r20, 0x59	; 89
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	89 e5       	ldi	r24, 0x59	; 89
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	fc 01       	movw	r30, r24
    14d4:	80 81       	ld	r24, Z
    14d6:	68 2f       	mov	r22, r24
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	c9 01       	movw	r24, r18
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	82 0f       	add	r24, r18
    14e6:	93 1f       	adc	r25, r19
    14e8:	8a 58       	subi	r24, 0x8A	; 138
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	fc 01       	movw	r30, r24
    14ee:	80 81       	ld	r24, Z
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	00 24       	eor	r0, r0
    14f6:	96 95       	lsr	r25
    14f8:	87 95       	ror	r24
    14fa:	07 94       	ror	r0
    14fc:	96 95       	lsr	r25
    14fe:	87 95       	ror	r24
    1500:	07 94       	ror	r0
    1502:	98 2f       	mov	r25, r24
    1504:	80 2d       	mov	r24, r0
    1506:	86 2b       	or	r24, r22
    1508:	fa 01       	movw	r30, r20
    150a:	80 83       	st	Z, r24
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <TIM_Init+0x16e>
    150e:	8e ef       	ldi	r24, 0xFE	; 254
    1510:	01 c0       	rjmp	.+2      	; 0x1514 <TIM_Init+0x170>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	0f 90       	pop	r0
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <TIM_Start>:
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	27 97       	sbiw	r28, 0x07	; 7
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	8d 83       	std	Y+5, r24	; 0x05
    1532:	7f 83       	std	Y+7, r23	; 0x07
    1534:	6e 83       	std	Y+6, r22	; 0x06
    1536:	1a 82       	std	Y+2, r1	; 0x02
    1538:	19 82       	std	Y+1, r1	; 0x01
    153a:	1c 82       	std	Y+4, r1	; 0x04
    153c:	1b 82       	std	Y+3, r1	; 0x03
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	91 05       	cpc	r25, r1
    1548:	71 f0       	breq	.+28     	; 0x1566 <TIM_Start+0x4a>
    154a:	82 30       	cpi	r24, 0x02	; 2
    154c:	91 05       	cpc	r25, r1
    154e:	a1 f0       	breq	.+40     	; 0x1578 <TIM_Start+0x5c>
    1550:	89 2b       	or	r24, r25
    1552:	d9 f4       	brne	.+54     	; 0x158a <TIM_Start+0x6e>
    1554:	83 e5       	ldi	r24, 0x53	; 83
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9a 83       	std	Y+2, r25	; 0x02
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	82 e5       	ldi	r24, 0x52	; 82
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	9c 83       	std	Y+4, r25	; 0x04
    1562:	8b 83       	std	Y+3, r24	; 0x03
    1564:	14 c0       	rjmp	.+40     	; 0x158e <TIM_Start+0x72>
    1566:	8e e4       	ldi	r24, 0x4E	; 78
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	8c e4       	ldi	r24, 0x4C	; 76
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9c 83       	std	Y+4, r25	; 0x04
    1574:	8b 83       	std	Y+3, r24	; 0x03
    1576:	0b c0       	rjmp	.+22     	; 0x158e <TIM_Start+0x72>
    1578:	85 e4       	ldi	r24, 0x45	; 69
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	84 e4       	ldi	r24, 0x44	; 68
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	9c 83       	std	Y+4, r25	; 0x04
    1586:	8b 83       	std	Y+3, r24	; 0x03
    1588:	02 c0       	rjmp	.+4      	; 0x158e <TIM_Start+0x72>
    158a:	8e ef       	ldi	r24, 0xFE	; 254
    158c:	1e c0       	rjmp	.+60     	; 0x15ca <TIM_Start+0xae>
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	2e 81       	ldd	r18, Y+6	; 0x06
    1594:	3f 81       	ldd	r19, Y+7	; 0x07
    1596:	fc 01       	movw	r30, r24
    1598:	31 83       	std	Z+1, r19	; 0x01
    159a:	20 83       	st	Z, r18
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	fc 01       	movw	r30, r24
    15a2:	40 81       	ld	r20, Z
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	c9 01       	movw	r24, r18
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	82 0f       	add	r24, r18
    15b2:	93 1f       	adc	r25, r19
    15b4:	89 58       	subi	r24, 0x89	; 137
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	fc 01       	movw	r30, r24
    15ba:	80 81       	ld	r24, Z
    15bc:	24 2f       	mov	r18, r20
    15be:	28 2b       	or	r18, r24
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	fc 01       	movw	r30, r24
    15c6:	20 83       	st	Z, r18
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	27 96       	adiw	r28, 0x07	; 7
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <TIM_GetStatus>:
* @param [out] FlagStatus  -  pointer to the variable to save the timer status in it.
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <TIM_GetStatus+0x6>
    15e2:	1f 92       	push	r1
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	7b 83       	std	Y+3, r23	; 0x03
    15ec:	6a 83       	std	Y+2, r22	; 0x02
   if(NULL_PTR == FlagStatus)
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	9b 81       	ldd	r25, Y+3	; 0x03
    15f2:	89 2b       	or	r24, r25
    15f4:	11 f4       	brne	.+4      	; 0x15fa <TIM_GetStatus+0x1e>
   {
      return TIMER_E_NULL_PTR;
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	20 c1       	rjmp	.+576    	; 0x183a <TIM_GetStatus+0x25e>
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	91 05       	cpc	r25, r1
    1604:	09 f4       	brne	.+2      	; 0x1608 <TIM_GetStatus+0x2c>
    1606:	59 c0       	rjmp	.+178    	; 0x16ba <TIM_GetStatus+0xde>
    1608:	82 30       	cpi	r24, 0x02	; 2
    160a:	91 05       	cpc	r25, r1
    160c:	09 f4       	brne	.+2      	; 0x1610 <TIM_GetStatus+0x34>
    160e:	c0 c0       	rjmp	.+384    	; 0x1790 <TIM_GetStatus+0x1b4>
    1610:	89 2b       	or	r24, r25
    1612:	09 f0       	breq	.+2      	; 0x1616 <TIM_GetStatus+0x3a>
    1614:	0a c1       	rjmp	.+532    	; 0x182a <TIM_GetStatus+0x24e>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	c9 01       	movw	r24, r18
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	82 0f       	add	r24, r18
    1624:	93 1f       	adc	r25, r19
    1626:	8b 58       	subi	r24, 0x8B	; 139
    1628:	9f 4f       	sbci	r25, 0xFF	; 255
    162a:	fc 01       	movw	r30, r24
    162c:	80 81       	ld	r24, Z
    162e:	88 23       	and	r24, r24
    1630:	d1 f4       	brne	.+52     	; 0x1666 <TIM_GetStatus+0x8a>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
    1632:	88 e5       	ldi	r24, 0x58	; 88
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	fc 01       	movw	r30, r24
    1638:	80 81       	ld	r24, Z
    163a:	88 2f       	mov	r24, r24
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	81 70       	andi	r24, 0x01	; 1
    1640:	99 27       	eor	r25, r25
    1642:	89 2b       	or	r24, r25
    1644:	71 f0       	breq	.+28     	; 0x1662 <TIM_GetStatus+0x86>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	9b 81       	ldd	r25, Y+3	; 0x03
    164a:	fc 01       	movw	r30, r24
    164c:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
    164e:	88 e5       	ldi	r24, 0x58	; 88
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	28 e5       	ldi	r18, 0x58	; 88
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	f9 01       	movw	r30, r18
    1658:	20 81       	ld	r18, Z
    165a:	21 60       	ori	r18, 0x01	; 1
    165c:	fc 01       	movw	r30, r24
    165e:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    1660:	e6 c0       	rjmp	.+460    	; 0x182e <TIM_GetStatus+0x252>
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1662:	8d ef       	ldi	r24, 0xFD	; 253
    1664:	ea c0       	rjmp	.+468    	; 0x183a <TIM_GetStatus+0x25e>
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	c9 01       	movw	r24, r18
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	82 0f       	add	r24, r18
    1674:	93 1f       	adc	r25, r19
    1676:	8b 58       	subi	r24, 0x8B	; 139
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	fc 01       	movw	r30, r24
    167c:	80 81       	ld	r24, Z
    167e:	88 30       	cpi	r24, 0x08	; 8
    1680:	09 f0       	breq	.+2      	; 0x1684 <TIM_GetStatus+0xa8>
    1682:	d5 c0       	rjmp	.+426    	; 0x182e <TIM_GetStatus+0x252>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
    1684:	88 e5       	ldi	r24, 0x58	; 88
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	fc 01       	movw	r30, r24
    168a:	80 81       	ld	r24, Z
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	82 70       	andi	r24, 0x02	; 2
    1692:	99 27       	eor	r25, r25
    1694:	89 2b       	or	r24, r25
    1696:	79 f0       	breq	.+30     	; 0x16b6 <TIM_GetStatus+0xda>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	9b 81       	ldd	r25, Y+3	; 0x03
    169c:	21 e0       	ldi	r18, 0x01	; 1
    169e:	fc 01       	movw	r30, r24
    16a0:	20 83       	st	Z, r18
               TIFR |= TIMER_0_COMPARE_FLAG;
    16a2:	88 e5       	ldi	r24, 0x58	; 88
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	28 e5       	ldi	r18, 0x58	; 88
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	f9 01       	movw	r30, r18
    16ac:	20 81       	ld	r18, Z
    16ae:	22 60       	ori	r18, 0x02	; 2
    16b0:	fc 01       	movw	r30, r24
    16b2:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    16b4:	bc c0       	rjmp	.+376    	; 0x182e <TIM_GetStatus+0x252>
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    16b6:	8d ef       	ldi	r24, 0xFD	; 253
    16b8:	c0 c0       	rjmp	.+384    	; 0x183a <TIM_GetStatus+0x25e>
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	c9 01       	movw	r24, r18
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	82 0f       	add	r24, r18
    16c8:	93 1f       	adc	r25, r19
    16ca:	8b 58       	subi	r24, 0x8B	; 139
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	fc 01       	movw	r30, r24
    16d0:	80 81       	ld	r24, Z
    16d2:	88 23       	and	r24, r24
    16d4:	d1 f4       	brne	.+52     	; 0x170a <TIM_GetStatus+0x12e>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
    16d6:	88 e5       	ldi	r24, 0x58	; 88
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	fc 01       	movw	r30, r24
    16dc:	80 81       	ld	r24, Z
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	84 70       	andi	r24, 0x04	; 4
    16e4:	99 27       	eor	r25, r25
    16e6:	89 2b       	or	r24, r25
    16e8:	71 f0       	breq	.+28     	; 0x1706 <TIM_GetStatus+0x12a>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	9b 81       	ldd	r25, Y+3	; 0x03
    16ee:	fc 01       	movw	r30, r24
    16f0:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
    16f2:	88 e5       	ldi	r24, 0x58	; 88
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	28 e5       	ldi	r18, 0x58	; 88
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	f9 01       	movw	r30, r18
    16fc:	20 81       	ld	r18, Z
    16fe:	24 60       	ori	r18, 0x04	; 4
    1700:	fc 01       	movw	r30, r24
    1702:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    1704:	96 c0       	rjmp	.+300    	; 0x1832 <TIM_GetStatus+0x256>
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1706:	8d ef       	ldi	r24, 0xFD	; 253
    1708:	98 c0       	rjmp	.+304    	; 0x183a <TIM_GetStatus+0x25e>
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	c9 01       	movw	r24, r18
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	82 0f       	add	r24, r18
    1718:	93 1f       	adc	r25, r19
    171a:	8b 58       	subi	r24, 0x8B	; 139
    171c:	9f 4f       	sbci	r25, 0xFF	; 255
    171e:	fc 01       	movw	r30, r24
    1720:	80 81       	ld	r24, Z
    1722:	88 30       	cpi	r24, 0x08	; 8
    1724:	09 f0       	breq	.+2      	; 0x1728 <TIM_GetStatus+0x14c>
    1726:	85 c0       	rjmp	.+266    	; 0x1832 <TIM_GetStatus+0x256>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
    1728:	88 e5       	ldi	r24, 0x58	; 88
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	fc 01       	movw	r30, r24
    172e:	80 81       	ld	r24, Z
    1730:	88 2f       	mov	r24, r24
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	80 71       	andi	r24, 0x10	; 16
    1736:	99 27       	eor	r25, r25
    1738:	89 2b       	or	r24, r25
    173a:	79 f0       	breq	.+30     	; 0x175a <TIM_GetStatus+0x17e>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	9b 81       	ldd	r25, Y+3	; 0x03
    1740:	21 e0       	ldi	r18, 0x01	; 1
    1742:	fc 01       	movw	r30, r24
    1744:	20 83       	st	Z, r18
               TIFR |= TIMER_1A_COMPARE_FLAG;
    1746:	88 e5       	ldi	r24, 0x58	; 88
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	28 e5       	ldi	r18, 0x58	; 88
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	f9 01       	movw	r30, r18
    1750:	20 81       	ld	r18, Z
    1752:	20 61       	ori	r18, 0x10	; 16
    1754:	fc 01       	movw	r30, r24
    1756:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    1758:	6c c0       	rjmp	.+216    	; 0x1832 <TIM_GetStatus+0x256>
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
    175a:	88 e5       	ldi	r24, 0x58	; 88
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	fc 01       	movw	r30, r24
    1760:	80 81       	ld	r24, Z
    1762:	88 2f       	mov	r24, r24
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	88 70       	andi	r24, 0x08	; 8
    1768:	99 27       	eor	r25, r25
    176a:	89 2b       	or	r24, r25
    176c:	79 f0       	breq	.+30     	; 0x178c <TIM_GetStatus+0x1b0>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	9b 81       	ldd	r25, Y+3	; 0x03
    1772:	21 e0       	ldi	r18, 0x01	; 1
    1774:	fc 01       	movw	r30, r24
    1776:	20 83       	st	Z, r18
               TIFR |= TIMER_1B_COMPARE_FLAG;
    1778:	88 e5       	ldi	r24, 0x58	; 88
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	28 e5       	ldi	r18, 0x58	; 88
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	f9 01       	movw	r30, r18
    1782:	20 81       	ld	r18, Z
    1784:	28 60       	ori	r18, 0x08	; 8
    1786:	fc 01       	movw	r30, r24
    1788:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    178a:	53 c0       	rjmp	.+166    	; 0x1832 <TIM_GetStatus+0x256>
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    178c:	8d ef       	ldi	r24, 0xFD	; 253
    178e:	55 c0       	rjmp	.+170    	; 0x183a <TIM_GetStatus+0x25e>
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	c9 01       	movw	r24, r18
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	82 0f       	add	r24, r18
    179e:	93 1f       	adc	r25, r19
    17a0:	8b 58       	subi	r24, 0x8B	; 139
    17a2:	9f 4f       	sbci	r25, 0xFF	; 255
    17a4:	fc 01       	movw	r30, r24
    17a6:	80 81       	ld	r24, Z
    17a8:	88 23       	and	r24, r24
    17aa:	d1 f4       	brne	.+52     	; 0x17e0 <TIM_GetStatus+0x204>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
    17ac:	88 e5       	ldi	r24, 0x58	; 88
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	fc 01       	movw	r30, r24
    17b2:	80 81       	ld	r24, Z
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	80 74       	andi	r24, 0x40	; 64
    17ba:	99 27       	eor	r25, r25
    17bc:	89 2b       	or	r24, r25
    17be:	71 f0       	breq	.+28     	; 0x17dc <TIM_GetStatus+0x200>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	9b 81       	ldd	r25, Y+3	; 0x03
    17c4:	fc 01       	movw	r30, r24
    17c6:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
    17c8:	88 e5       	ldi	r24, 0x58	; 88
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	28 e5       	ldi	r18, 0x58	; 88
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	f9 01       	movw	r30, r18
    17d2:	20 81       	ld	r18, Z
    17d4:	20 64       	ori	r18, 0x40	; 64
    17d6:	fc 01       	movw	r30, r24
    17d8:	20 83       	st	Z, r18
            {
               return TIMER_E_PENDING;
            }
         }
         
         break;
    17da:	2d c0       	rjmp	.+90     	; 0x1836 <TIM_GetStatus+0x25a>
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    17dc:	8d ef       	ldi	r24, 0xFD	; 253
    17de:	2d c0       	rjmp	.+90     	; 0x183a <TIM_GetStatus+0x25e>
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	c9 01       	movw	r24, r18
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	82 0f       	add	r24, r18
    17ee:	93 1f       	adc	r25, r19
    17f0:	8b 58       	subi	r24, 0x8B	; 139
    17f2:	9f 4f       	sbci	r25, 0xFF	; 255
    17f4:	fc 01       	movw	r30, r24
    17f6:	80 81       	ld	r24, Z
    17f8:	88 30       	cpi	r24, 0x08	; 8
    17fa:	e9 f4       	brne	.+58     	; 0x1836 <TIM_GetStatus+0x25a>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
    17fc:	88 e5       	ldi	r24, 0x58	; 88
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	fc 01       	movw	r30, r24
    1802:	80 81       	ld	r24, Z
    1804:	88 23       	and	r24, r24
    1806:	7c f4       	brge	.+30     	; 0x1826 <TIM_GetStatus+0x24a>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	9b 81       	ldd	r25, Y+3	; 0x03
    180c:	21 e0       	ldi	r18, 0x01	; 1
    180e:	fc 01       	movw	r30, r24
    1810:	20 83       	st	Z, r18
               TIFR |= TIMER_2_COMPARE_FLAG;
    1812:	88 e5       	ldi	r24, 0x58	; 88
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	28 e5       	ldi	r18, 0x58	; 88
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	f9 01       	movw	r30, r18
    181c:	20 81       	ld	r18, Z
    181e:	20 68       	ori	r18, 0x80	; 128
    1820:	fc 01       	movw	r30, r24
    1822:	20 83       	st	Z, r18
            {
               return TIMER_E_PENDING;
            }
         }
         
         break;
    1824:	08 c0       	rjmp	.+16     	; 0x1836 <TIM_GetStatus+0x25a>
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1826:	8d ef       	ldi	r24, 0xFD	; 253
    1828:	08 c0       	rjmp	.+16     	; 0x183a <TIM_GetStatus+0x25e>
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    182a:	8e ef       	ldi	r24, 0xFE	; 254
    182c:	06 c0       	rjmp	.+12     	; 0x183a <TIM_GetStatus+0x25e>
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    182e:	00 00       	nop
    1830:	03 c0       	rjmp	.+6      	; 0x1838 <TIM_GetStatus+0x25c>
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    1832:	00 00       	nop
    1834:	01 c0       	rjmp	.+2      	; 0x1838 <TIM_GetStatus+0x25c>
            {
               return TIMER_E_PENDING;
            }
         }
         
         break;
    1836:	00 00       	nop
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1838:	80 e0       	ldi	r24, 0x00	; 0
}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	2c 97       	sbiw	r28, 0x0c	; 12
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	8e 83       	std	Y+6, r24	; 0x06
    1864:	4f 83       	std	Y+7, r20	; 0x07
    1866:	58 87       	std	Y+8, r21	; 0x08
    1868:	69 87       	std	Y+9, r22	; 0x09
    186a:	7a 87       	std	Y+10, r23	; 0x0a
    186c:	3c 87       	std	Y+12, r19	; 0x0c
    186e:	2b 87       	std	Y+11, r18	; 0x0b
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1870:	8e 81       	ldd	r24, Y+6	; 0x06
    1872:	83 30       	cpi	r24, 0x03	; 3
    1874:	10 f0       	brcs	.+4      	; 0x187a <TIM_DelayUs+0x34>
   {
      return TIMER_E_INVALID_CH_NUM;
    1876:	8e ef       	ldi	r24, 0xFE	; 254
    1878:	7e c0       	rjmp	.+252    	; 0x1976 <TIM_DelayUs+0x130>
   }
   
   if(NULL_PTR == DelayRequester)
    187a:	8b 85       	ldd	r24, Y+11	; 0x0b
    187c:	9c 85       	ldd	r25, Y+12	; 0x0c
    187e:	89 2b       	or	r24, r25
    1880:	11 f4       	brne	.+4      	; 0x1886 <TIM_DelayUs+0x40>
   {
      return ERROR_NOK;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	78 c0       	rjmp	.+240    	; 0x1976 <TIM_DelayUs+0x130>
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    1886:	8b 85       	ldd	r24, Y+11	; 0x0b
    1888:	9c 85       	ldd	r25, Y+12	; 0x0c
    188a:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <gptr_CallerFunc+0x1>
    188e:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <gptr_CallerFunc>
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    1892:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <gEnu_State>
    1896:	88 23       	and	r24, r24
    1898:	09 f0       	breq	.+2      	; 0x189c <TIM_DelayUs+0x56>
    189a:	6c c0       	rjmp	.+216    	; 0x1974 <TIM_DelayUs+0x12e>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    189c:	ce 01       	movw	r24, r28
    189e:	02 96       	adiw	r24, 0x02	; 2
    18a0:	bc 01       	movw	r22, r24
    18a2:	8e 81       	ldd	r24, Y+6	; 0x06
    18a4:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GetFreqPrescaleRatio>
    18a8:	89 83       	std	Y+1, r24	; 0x01
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	8c 3f       	cpi	r24, 0xFC	; 252
    18ae:	11 f4       	brne	.+4      	; 0x18b4 <TIM_DelayUs+0x6e>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    18b0:	8c ef       	ldi	r24, 0xFC	; 252
    18b2:	61 c0       	rjmp	.+194    	; 0x1976 <TIM_DelayUs+0x130>
      }
      
      if(f32_FreqRatio != 0)
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	9b 81       	ldd	r25, Y+3	; 0x03
    18b8:	ac 81       	ldd	r26, Y+4	; 0x04
    18ba:	bd 81       	ldd	r27, Y+5	; 0x05
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	a9 01       	movw	r20, r18
    18c2:	bc 01       	movw	r22, r24
    18c4:	cd 01       	movw	r24, r26
    18c6:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__cmpsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	f1 f0       	breq	.+60     	; 0x190a <TIM_DelayUs+0xc4>
      {
         TIM_Delay /= f32_FreqRatio;
    18ce:	6f 81       	ldd	r22, Y+7	; 0x07
    18d0:	78 85       	ldd	r23, Y+8	; 0x08
    18d2:	89 85       	ldd	r24, Y+9	; 0x09
    18d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d6:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__floatunsisf>
    18da:	7b 01       	movw	r14, r22
    18dc:	8c 01       	movw	r16, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	9b 81       	ldd	r25, Y+3	; 0x03
    18e2:	ac 81       	ldd	r26, Y+4	; 0x04
    18e4:	bd 81       	ldd	r27, Y+5	; 0x05
    18e6:	9c 01       	movw	r18, r24
    18e8:	ad 01       	movw	r20, r26
    18ea:	c8 01       	movw	r24, r16
    18ec:	b7 01       	movw	r22, r14
    18ee:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__divsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	bc 01       	movw	r22, r24
    18f8:	cd 01       	movw	r24, r26
    18fa:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__fixunssfsi>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	8f 83       	std	Y+7, r24	; 0x07
    1904:	98 87       	std	Y+8, r25	; 0x08
    1906:	a9 87       	std	Y+9, r26	; 0x09
    1908:	ba 87       	std	Y+10, r27	; 0x0a
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    190a:	8f 81       	ldd	r24, Y+7	; 0x07
    190c:	98 85       	ldd	r25, Y+8	; 0x08
    190e:	a9 85       	ldd	r26, Y+9	; 0x09
    1910:	ba 85       	ldd	r27, Y+10	; 0x0a
    1912:	89 2f       	mov	r24, r25
    1914:	9a 2f       	mov	r25, r26
    1916:	ab 2f       	mov	r26, r27
    1918:	bb 27       	eor	r27, r27
    191a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <gu32_Overflows>
    191e:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <gu32_Overflows+0x1>
    1922:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <gu32_Overflows+0x2>
    1926:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    192a:	8f 81       	ldd	r24, Y+7	; 0x07
    192c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    1930:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <gu32_Overflows>
    1934:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <gu32_Overflows+0x1>
    1938:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <gu32_Overflows+0x2>
    193c:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <gu32_Overflows+0x3>
    1940:	89 2b       	or	r24, r25
    1942:	8a 2b       	or	r24, r26
    1944:	8b 2b       	or	r24, r27
    1946:	61 f4       	brne	.+24     	; 0x1960 <TIM_DelayUs+0x11a>
      {
         gu8_OverflowsComplete = HIGH;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    194e:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <gu8_Remindar>
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	bc 01       	movw	r22, r24
    1958:	8e 81       	ldd	r24, Y+6	; 0x06
    195a:	0e 94 8e 0a 	call	0x151c	; 0x151c <TIM_Start>
    195e:	05 c0       	rjmp	.+10     	; 0x196a <TIM_DelayUs+0x124>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1960:	6f ef       	ldi	r22, 0xFF	; 255
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	8e 81       	ldd	r24, Y+6	; 0x06
    1966:	0e 94 8e 0a 	call	0x151c	; 0x151c <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <gEnu_State>
      return TIMER_E_PENDING;
    1970:	8d ef       	ldi	r24, 0xFD	; 253
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <TIM_DelayUs+0x130>
   }
   
   return ERROR_NOK;            
    1974:	81 e0       	ldi	r24, 0x01	; 1
}
    1976:	2c 96       	adiw	r28, 0x0c	; 12
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	1f 91       	pop	r17
    1988:	0f 91       	pop	r16
    198a:	ff 90       	pop	r15
    198c:	ef 90       	pop	r14
    198e:	08 95       	ret

00001990 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	2c 97       	sbiw	r28, 0x0c	; 12
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	8e 83       	std	Y+6, r24	; 0x06
    19ae:	4f 83       	std	Y+7, r20	; 0x07
    19b0:	58 87       	std	Y+8, r21	; 0x08
    19b2:	69 87       	std	Y+9, r22	; 0x09
    19b4:	7a 87       	std	Y+10, r23	; 0x0a
    19b6:	3c 87       	std	Y+12, r19	; 0x0c
    19b8:	2b 87       	std	Y+11, r18	; 0x0b
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    19ba:	8e 81       	ldd	r24, Y+6	; 0x06
    19bc:	83 30       	cpi	r24, 0x03	; 3
    19be:	10 f0       	brcs	.+4      	; 0x19c4 <TIM_DelayMs+0x34>
   {
      return TIMER_E_INVALID_CH_NUM;
    19c0:	8e ef       	ldi	r24, 0xFE	; 254
    19c2:	89 c0       	rjmp	.+274    	; 0x1ad6 <TIM_DelayMs+0x146>
   }
   
   if(NULL_PTR == DelayRequester)
    19c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c8:	89 2b       	or	r24, r25
    19ca:	11 f4       	brne	.+4      	; 0x19d0 <TIM_DelayMs+0x40>
   {
      return ERROR_NOK;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	83 c0       	rjmp	.+262    	; 0x1ad6 <TIM_DelayMs+0x146>
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    19d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    19d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    19d4:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <gptr_CallerFunc+0x1>
    19d8:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <gptr_CallerFunc>
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    19dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <gEnu_State>
    19e0:	88 23       	and	r24, r24
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <TIM_DelayMs+0x56>
    19e4:	77 c0       	rjmp	.+238    	; 0x1ad4 <TIM_DelayMs+0x144>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    19e6:	ce 01       	movw	r24, r28
    19e8:	02 96       	adiw	r24, 0x02	; 2
    19ea:	bc 01       	movw	r22, r24
    19ec:	8e 81       	ldd	r24, Y+6	; 0x06
    19ee:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GetFreqPrescaleRatio>
    19f2:	89 83       	std	Y+1, r24	; 0x01
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	8c 3f       	cpi	r24, 0xFC	; 252
    19f8:	11 f4       	brne	.+4      	; 0x19fe <TIM_DelayMs+0x6e>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    19fa:	8c ef       	ldi	r24, 0xFC	; 252
    19fc:	6c c0       	rjmp	.+216    	; 0x1ad6 <TIM_DelayMs+0x146>
      }
      
      if(f32_FreqRatio != 0)
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	9b 81       	ldd	r25, Y+3	; 0x03
    1a02:	ac 81       	ldd	r26, Y+4	; 0x04
    1a04:	bd 81       	ldd	r27, Y+5	; 0x05
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	a9 01       	movw	r20, r18
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__cmpsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	f1 f0       	breq	.+60     	; 0x1a54 <TIM_DelayMs+0xc4>
      {
         TIM_Delay /= f32_FreqRatio;
    1a18:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1a:	78 85       	ldd	r23, Y+8	; 0x08
    1a1c:	89 85       	ldd	r24, Y+9	; 0x09
    1a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a20:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__floatunsisf>
    1a24:	7b 01       	movw	r14, r22
    1a26:	8c 01       	movw	r16, r24
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2c:	ac 81       	ldd	r26, Y+4	; 0x04
    1a2e:	bd 81       	ldd	r27, Y+5	; 0x05
    1a30:	9c 01       	movw	r18, r24
    1a32:	ad 01       	movw	r20, r26
    1a34:	c8 01       	movw	r24, r16
    1a36:	b7 01       	movw	r22, r14
    1a38:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__divsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	8f 83       	std	Y+7, r24	; 0x07
    1a4e:	98 87       	std	Y+8, r25	; 0x08
    1a50:	a9 87       	std	Y+9, r26	; 0x09
    1a52:	ba 87       	std	Y+10, r27	; 0x0a
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    1a54:	2f 81       	ldd	r18, Y+7	; 0x07
    1a56:	38 85       	ldd	r19, Y+8	; 0x08
    1a58:	49 85       	ldd	r20, Y+9	; 0x09
    1a5a:	5a 85       	ldd	r21, Y+10	; 0x0a
    1a5c:	88 ee       	ldi	r24, 0xE8	; 232
    1a5e:	93 e0       	ldi	r25, 0x03	; 3
    1a60:	dc 01       	movw	r26, r24
    1a62:	0e 94 15 10 	call	0x202a	; 0x202a <__muluhisi3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	89 2f       	mov	r24, r25
    1a6c:	9a 2f       	mov	r25, r26
    1a6e:	ab 2f       	mov	r26, r27
    1a70:	bb 27       	eor	r27, r27
    1a72:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <gu32_Overflows>
    1a76:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <gu32_Overflows+0x1>
    1a7a:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <gu32_Overflows+0x2>
    1a7e:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    1a82:	9f 81       	ldd	r25, Y+7	; 0x07
    1a84:	88 ee       	ldi	r24, 0xE8	; 232
    1a86:	98 9f       	mul	r25, r24
    1a88:	80 2d       	mov	r24, r0
    1a8a:	11 24       	eor	r1, r1
    1a8c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    1a90:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <gu32_Overflows>
    1a94:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <gu32_Overflows+0x1>
    1a98:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <gu32_Overflows+0x2>
    1a9c:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <gu32_Overflows+0x3>
    1aa0:	89 2b       	or	r24, r25
    1aa2:	8a 2b       	or	r24, r26
    1aa4:	8b 2b       	or	r24, r27
    1aa6:	61 f4       	brne	.+24     	; 0x1ac0 <TIM_DelayMs+0x130>
      {
         gu8_OverflowsComplete = HIGH;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    1aae:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <gu8_Remindar>
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aba:	0e 94 8e 0a 	call	0x151c	; 0x151c <TIM_Start>
    1abe:	05 c0       	rjmp	.+10     	; 0x1aca <TIM_DelayMs+0x13a>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1ac0:	6f ef       	ldi	r22, 0xFF	; 255
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac6:	0e 94 8e 0a 	call	0x151c	; 0x151c <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <gEnu_State>
      return TIMER_E_PENDING;
    1ad0:	8d ef       	ldi	r24, 0xFD	; 253
    1ad2:	01 c0       	rjmp	.+2      	; 0x1ad6 <TIM_DelayMs+0x146>
   }
   
   return ERROR_NOK;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
}
    1ad6:	2c 96       	adiw	r28, 0x0c	; 12
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	ff 90       	pop	r15
    1aec:	ef 90       	pop	r14
    1aee:	08 95       	ret

00001af0 <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <TIM_DelayStatus+0x6>
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <TIM_DelayStatus+0x8>
    1af8:	1f 92       	push	r1
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	8b 83       	std	Y+3, r24	; 0x03
    1b00:	7d 83       	std	Y+5, r23	; 0x05
    1b02:	6c 83       	std	Y+4, r22	; 0x04
   if(DelayReady == gEnu_State)
    1b04:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <gEnu_State>
    1b08:	88 23       	and	r24, r24
    1b0a:	11 f4       	brne	.+4      	; 0x1b10 <TIM_DelayStatus+0x20>
   {
      return TIMER_E_DELAY_EMPTY;
    1b0c:	8b ef       	ldi	r24, 0xFB	; 251
    1b0e:	5c c0       	rjmp	.+184    	; 0x1bc8 <TIM_DelayStatus+0xd8>
   }
   
   if(DelayRequester != gptr_CallerFunc)
    1b10:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <gptr_CallerFunc>
    1b14:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <gptr_CallerFunc+0x1>
    1b18:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1c:	28 17       	cp	r18, r24
    1b1e:	39 07       	cpc	r19, r25
    1b20:	11 f0       	breq	.+4      	; 0x1b26 <TIM_DelayStatus+0x36>
   {
      return ERROR_NOK;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	51 c0       	rjmp	.+162    	; 0x1bc8 <TIM_DelayStatus+0xd8>
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    1b26:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <gEnu_State>
    1b2a:	81 30       	cpi	r24, 0x01	; 1
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <TIM_DelayStatus+0x40>
    1b2e:	49 c0       	rjmp	.+146    	; 0x1bc2 <TIM_DelayStatus+0xd2>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    1b30:	ce 01       	movw	r24, r28
    1b32:	02 96       	adiw	r24, 0x02	; 2
    1b34:	bc 01       	movw	r22, r24
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <TIM_GetStatus>
    1b3c:	89 83       	std	Y+1, r24	; 0x01
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	88 23       	and	r24, r24
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <TIM_DelayStatus+0x56>
    1b44:	40 c0       	rjmp	.+128    	; 0x1bc6 <TIM_DelayStatus+0xd6>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    1b46:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <gu8_OverflowsComplete>
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	41 f4       	brne	.+16     	; 0x1b5e <TIM_DelayStatus+0x6e>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    1b4e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <gEnu_State>
            gu8_OverflowsComplete = LOW;
    1b52:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <gu8_OverflowsComplete>
            gu8_Remindar = 0;
    1b56:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <gu8_Remindar>
            /* return success message. */
            return ERROR_OK;
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	35 c0       	rjmp	.+106    	; 0x1bc8 <TIM_DelayStatus+0xd8>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    1b5e:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <gu32_Overflows>
    1b62:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <gu32_Overflows+0x1>
    1b66:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <gu32_Overflows+0x2>
    1b6a:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <gu32_Overflows+0x3>
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	a1 09       	sbc	r26, r1
    1b72:	b1 09       	sbc	r27, r1
    1b74:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <gu32_Overflows>
    1b78:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <gu32_Overflows+0x1>
    1b7c:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <gu32_Overflows+0x2>
    1b80:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <gu32_Overflows+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    1b84:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <gu32_Overflows>
    1b88:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <gu32_Overflows+0x1>
    1b8c:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <gu32_Overflows+0x2>
    1b90:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <gu32_Overflows+0x3>
    1b94:	89 2b       	or	r24, r25
    1b96:	8a 2b       	or	r24, r26
    1b98:	8b 2b       	or	r24, r27
    1b9a:	61 f4       	brne	.+24     	; 0x1bb4 <TIM_DelayStatus+0xc4>
         {
            gu8_OverflowsComplete = HIGH;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <gu8_OverflowsComplete>
            TIM_Start(TIM_channel, gu8_Remindar);
    1ba2:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <gu8_Remindar>
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	bc 01       	movw	r22, r24
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	0e 94 8e 0a 	call	0x151c	; 0x151c <TIM_Start>
    1bb2:	05 c0       	rjmp	.+10     	; 0x1bbe <TIM_DelayStatus+0xce>
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    1bb4:	6f ef       	ldi	r22, 0xFF	; 255
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	0e 94 8e 0a 	call	0x151c	; 0x151c <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    1bbe:	8d ef       	ldi	r24, 0xFD	; 253
    1bc0:	03 c0       	rjmp	.+6      	; 0x1bc8 <TIM_DelayStatus+0xd8>
      }
   }
   else
   {
      return ERROR_NOK;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	01 c0       	rjmp	.+2      	; 0x1bc8 <TIM_DelayStatus+0xd8>
   }
   return 0;
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	08 95       	ret

00001bd8 <main>:
#include "task.h"
#include "DISPLAY.h"
#include "STORAGE.h"

int main(void)
{
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	2f 97       	sbiw	r28, 0x0f	; 15
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
	variables:
		password length
		WordLength
	*/
	//while( != OperationSuccess);
	uint8_t passworLength = 4;
    1bec:	84 e0       	ldi	r24, 0x04	; 4
    1bee:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t const wordLength = 9;
    1bf0:	89 e0       	ldi	r24, 0x09	; 9
    1bf2:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t positionaftefirstlineword = 0xc0;
    1bf4:	80 ec       	ldi	r24, 0xC0	; 192
    1bf6:	8f 83       	std	Y+7, r24	; 0x07
	while(LCD_Init() != OperationSuccess);
    1bf8:	00 00       	nop
    1bfa:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_Init>
    1bfe:	88 23       	and	r24, r24
    1c00:	e1 f7       	brne	.-8      	; 0x1bfa <main+0x22>
	while(LCD_SendCommand(0X80|7)!= OperationSuccess);
    1c02:	00 00       	nop
    1c04:	87 e8       	ldi	r24, 0x87	; 135
    1c06:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
    1c0a:	88 23       	and	r24, r24
    1c0c:	d9 f7       	brne	.-10     	; 0x1c04 <main+0x2c>
	while(LCD_SendString((uint8_t*)"AhmedAdel") != OperationSuccess);
    1c0e:	00 00       	nop
    1c10:	83 e6       	ldi	r24, 0x63	; 99
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 94 17 07 	call	0xe2e	; 0xe2e <LCD_SendString>
    1c18:	88 23       	and	r24, r24
    1c1a:	d1 f7       	brne	.-12     	; 0x1c10 <main+0x38>
	while(LCD_SendCommand(positionaftefirstlineword)!= OperationSuccess);
    1c1c:	00 00       	nop
    1c1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c20:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
    1c24:	88 23       	and	r24, r24
    1c26:	d9 f7       	brne	.-10     	; 0x1c1e <main+0x46>
	for(uint8_t i = 0; i< passworLength; i++)
    1c28:	19 82       	std	Y+1, r1	; 0x01
    1c2a:	09 c0       	rjmp	.+18     	; 0x1c3e <main+0x66>
	{
		while(LCD_SendData('*')!= OperationSuccess);
    1c2c:	00 00       	nop
    1c2e:	8a e2       	ldi	r24, 0x2A	; 42
    1c30:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <LCD_SendData>
    1c34:	88 23       	and	r24, r24
    1c36:	d9 f7       	brne	.-10     	; 0x1c2e <main+0x56>
	uint8_t positionaftefirstlineword = 0xc0;
	while(LCD_Init() != OperationSuccess);
	while(LCD_SendCommand(0X80|7)!= OperationSuccess);
	while(LCD_SendString((uint8_t*)"AhmedAdel") != OperationSuccess);
	while(LCD_SendCommand(positionaftefirstlineword)!= OperationSuccess);
	for(uint8_t i = 0; i< passworLength; i++)
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	8f 5f       	subi	r24, 0xFF	; 255
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	99 81       	ldd	r25, Y+1	; 0x01
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	98 17       	cp	r25, r24
    1c44:	98 f3       	brcs	.-26     	; 0x1c2c <main+0x54>
	{
		while(LCD_SendData('*')!= OperationSuccess);
	}
	uint8_t l = (passworLength+(16-wordLength));
    1c46:	9d 81       	ldd	r25, Y+5	; 0x05
    1c48:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4a:	29 2f       	mov	r18, r25
    1c4c:	28 1b       	sub	r18, r24
    1c4e:	82 2f       	mov	r24, r18
    1c50:	80 5f       	subi	r24, 0xF0	; 240
    1c52:	8a 83       	std	Y+2, r24	; 0x02
	while (1) 
    {
		for(uint8_t y = 0; y<(16-wordLength); y++)
    1c54:	1b 82       	std	Y+3, r1	; 0x03
    1c56:	28 c0       	rjmp	.+80     	; 0x1ca8 <main+0xd0>
		{
			while(LCD_SendCommand(LCD_SHIFTDISPLEFT)!= OperationSuccess);
    1c58:	00 00       	nop
    1c5a:	88 e1       	ldi	r24, 0x18	; 24
    1c5c:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
    1c60:	88 23       	and	r24, r24
    1c62:	d9 f7       	brne	.-10     	; 0x1c5a <main+0x82>
			while(LCD_SendData('*')!= OperationSuccess);
    1c64:	00 00       	nop
    1c66:	8a e2       	ldi	r24, 0x2A	; 42
    1c68:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <LCD_SendData>
    1c6c:	88 23       	and	r24, r24
    1c6e:	d9 f7       	brne	.-10     	; 0x1c66 <main+0x8e>
			for(uint32_t volatile x = 0; x < 50000; x++);
    1c70:	18 86       	std	Y+8, r1	; 0x08
    1c72:	19 86       	std	Y+9, r1	; 0x09
    1c74:	1a 86       	std	Y+10, r1	; 0x0a
    1c76:	1b 86       	std	Y+11, r1	; 0x0b
    1c78:	0b c0       	rjmp	.+22     	; 0x1c90 <main+0xb8>
    1c7a:	88 85       	ldd	r24, Y+8	; 0x08
    1c7c:	99 85       	ldd	r25, Y+9	; 0x09
    1c7e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1c80:	bb 85       	ldd	r27, Y+11	; 0x0b
    1c82:	01 96       	adiw	r24, 0x01	; 1
    1c84:	a1 1d       	adc	r26, r1
    1c86:	b1 1d       	adc	r27, r1
    1c88:	88 87       	std	Y+8, r24	; 0x08
    1c8a:	99 87       	std	Y+9, r25	; 0x09
    1c8c:	aa 87       	std	Y+10, r26	; 0x0a
    1c8e:	bb 87       	std	Y+11, r27	; 0x0b
    1c90:	88 85       	ldd	r24, Y+8	; 0x08
    1c92:	99 85       	ldd	r25, Y+9	; 0x09
    1c94:	aa 85       	ldd	r26, Y+10	; 0x0a
    1c96:	bb 85       	ldd	r27, Y+11	; 0x0b
    1c98:	80 35       	cpi	r24, 0x50	; 80
    1c9a:	93 4c       	sbci	r25, 0xC3	; 195
    1c9c:	a1 05       	cpc	r26, r1
    1c9e:	b1 05       	cpc	r27, r1
    1ca0:	60 f3       	brcs	.-40     	; 0x1c7a <main+0xa2>
		while(LCD_SendData('*')!= OperationSuccess);
	}
	uint8_t l = (passworLength+(16-wordLength));
	while (1) 
    {
		for(uint8_t y = 0; y<(16-wordLength); y++)
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	8f 5f       	subi	r24, 0xFF	; 255
    1ca6:	8b 83       	std	Y+3, r24	; 0x03
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	40 e1       	ldi	r20, 0x10	; 16
    1cb6:	50 e0       	ldi	r21, 0x00	; 0
    1cb8:	ba 01       	movw	r22, r20
    1cba:	68 1b       	sub	r22, r24
    1cbc:	79 0b       	sbc	r23, r25
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	28 17       	cp	r18, r24
    1cc2:	39 07       	cpc	r19, r25
    1cc4:	4c f2       	brlt	.-110    	; 0x1c58 <main+0x80>
		{
			while(LCD_SendCommand(LCD_SHIFTDISPLEFT)!= OperationSuccess);
			while(LCD_SendData('*')!= OperationSuccess);
			for(uint32_t volatile x = 0; x < 50000; x++);
		}
		for(uint8_t y = 0; y<(16-wordLength);y++)
    1cc6:	1c 82       	std	Y+4, r1	; 0x04
    1cc8:	3a c0       	rjmp	.+116    	; 0x1d3e <main+0x166>
		{
			
			while(LCD_SendCommand(LCD_SHIFTDISPRIGHT)!= OperationSuccess);
    1cca:	00 00       	nop
    1ccc:	8c e1       	ldi	r24, 0x1C	; 28
    1cce:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
    1cd2:	88 23       	and	r24, r24
    1cd4:	d9 f7       	brne	.-10     	; 0x1ccc <main+0xf4>
			while(LCD_SendCommand(0xc0|l)!= OperationSuccess);
    1cd6:	00 00       	nop
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	80 6c       	ori	r24, 0xC0	; 192
    1cdc:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
    1ce0:	88 23       	and	r24, r24
    1ce2:	d1 f7       	brne	.-12     	; 0x1cd8 <main+0x100>
			while(LCD_SendData(' ')!= OperationSuccess);
    1ce4:	00 00       	nop
    1ce6:	80 e2       	ldi	r24, 0x20	; 32
    1ce8:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <LCD_SendData>
    1cec:	88 23       	and	r24, r24
    1cee:	d9 f7       	brne	.-10     	; 0x1ce6 <main+0x10e>
			while(LCD_SendCommand((0xc0|l)-1)!= OperationSuccess);
    1cf0:	00 00       	nop
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	80 6c       	ori	r24, 0xC0	; 192
    1cf6:	81 50       	subi	r24, 0x01	; 1
    1cf8:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_SendCommand>
    1cfc:	88 23       	and	r24, r24
    1cfe:	c9 f7       	brne	.-14     	; 0x1cf2 <main+0x11a>
			for(uint32_t volatile x = 0; x < 2000; x++);
    1d00:	1c 86       	std	Y+12, r1	; 0x0c
    1d02:	1d 86       	std	Y+13, r1	; 0x0d
    1d04:	1e 86       	std	Y+14, r1	; 0x0e
    1d06:	1f 86       	std	Y+15, r1	; 0x0f
    1d08:	0b c0       	rjmp	.+22     	; 0x1d20 <main+0x148>
    1d0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d0e:	ae 85       	ldd	r26, Y+14	; 0x0e
    1d10:	bf 85       	ldd	r27, Y+15	; 0x0f
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	a1 1d       	adc	r26, r1
    1d16:	b1 1d       	adc	r27, r1
    1d18:	8c 87       	std	Y+12, r24	; 0x0c
    1d1a:	9d 87       	std	Y+13, r25	; 0x0d
    1d1c:	ae 87       	std	Y+14, r26	; 0x0e
    1d1e:	bf 87       	std	Y+15, r27	; 0x0f
    1d20:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d22:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d24:	ae 85       	ldd	r26, Y+14	; 0x0e
    1d26:	bf 85       	ldd	r27, Y+15	; 0x0f
    1d28:	80 3d       	cpi	r24, 0xD0	; 208
    1d2a:	97 40       	sbci	r25, 0x07	; 7
    1d2c:	a1 05       	cpc	r26, r1
    1d2e:	b1 05       	cpc	r27, r1
    1d30:	60 f3       	brcs	.-40     	; 0x1d0a <main+0x132>
			l--;
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	81 50       	subi	r24, 0x01	; 1
    1d36:	8a 83       	std	Y+2, r24	; 0x02
		{
			while(LCD_SendCommand(LCD_SHIFTDISPLEFT)!= OperationSuccess);
			while(LCD_SendData('*')!= OperationSuccess);
			for(uint32_t volatile x = 0; x < 50000; x++);
		}
		for(uint8_t y = 0; y<(16-wordLength);y++)
    1d38:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	8c 83       	std	Y+4, r24	; 0x04
    1d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	8e 81       	ldd	r24, Y+6	; 0x06
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	40 e1       	ldi	r20, 0x10	; 16
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	ba 01       	movw	r22, r20
    1d50:	68 1b       	sub	r22, r24
    1d52:	79 0b       	sbc	r23, r25
    1d54:	cb 01       	movw	r24, r22
    1d56:	28 17       	cp	r18, r24
    1d58:	39 07       	cpc	r19, r25
    1d5a:	0c f4       	brge	.+2      	; 0x1d5e <main+0x186>
    1d5c:	b6 cf       	rjmp	.-148    	; 0x1cca <main+0xf2>
			while(LCD_SendData(' ')!= OperationSuccess);
			while(LCD_SendCommand((0xc0|l)-1)!= OperationSuccess);
			for(uint32_t volatile x = 0; x < 2000; x++);
			l--;
		}
		l = (passworLength+(16-wordLength));
    1d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d60:	8e 81       	ldd	r24, Y+6	; 0x06
    1d62:	79 2f       	mov	r23, r25
    1d64:	78 1b       	sub	r23, r24
    1d66:	87 2f       	mov	r24, r23
    1d68:	80 5f       	subi	r24, 0xF0	; 240
    1d6a:	8a 83       	std	Y+2, r24	; 0x02
    }
    1d6c:	73 cf       	rjmp	.-282    	; 0x1c54 <main+0x7c>

00001d6e <__cmpsf2>:
    1d6e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__fp_cmp>
    1d72:	08 f4       	brcc	.+2      	; 0x1d76 <__cmpsf2+0x8>
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	08 95       	ret

00001d78 <__divsf3>:
    1d78:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__divsf3x>
    1d7c:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__fp_round>
    1d80:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__fp_pscB>
    1d84:	58 f0       	brcs	.+22     	; 0x1d9c <__divsf3+0x24>
    1d86:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fp_pscA>
    1d8a:	40 f0       	brcs	.+16     	; 0x1d9c <__divsf3+0x24>
    1d8c:	29 f4       	brne	.+10     	; 0x1d98 <__divsf3+0x20>
    1d8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d90:	29 f0       	breq	.+10     	; 0x1d9c <__divsf3+0x24>
    1d92:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__fp_inf>
    1d96:	51 11       	cpse	r21, r1
    1d98:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__fp_szero>
    1d9c:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <__fp_nan>

00001da0 <__divsf3x>:
    1da0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__fp_split3>
    1da4:	68 f3       	brcs	.-38     	; 0x1d80 <__divsf3+0x8>

00001da6 <__divsf3_pse>:
    1da6:	99 23       	and	r25, r25
    1da8:	b1 f3       	breq	.-20     	; 0x1d96 <__divsf3+0x1e>
    1daa:	55 23       	and	r21, r21
    1dac:	91 f3       	breq	.-28     	; 0x1d92 <__divsf3+0x1a>
    1dae:	95 1b       	sub	r25, r21
    1db0:	55 0b       	sbc	r21, r21
    1db2:	bb 27       	eor	r27, r27
    1db4:	aa 27       	eor	r26, r26
    1db6:	62 17       	cp	r22, r18
    1db8:	73 07       	cpc	r23, r19
    1dba:	84 07       	cpc	r24, r20
    1dbc:	38 f0       	brcs	.+14     	; 0x1dcc <__divsf3_pse+0x26>
    1dbe:	9f 5f       	subi	r25, 0xFF	; 255
    1dc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc2:	22 0f       	add	r18, r18
    1dc4:	33 1f       	adc	r19, r19
    1dc6:	44 1f       	adc	r20, r20
    1dc8:	aa 1f       	adc	r26, r26
    1dca:	a9 f3       	breq	.-22     	; 0x1db6 <__divsf3_pse+0x10>
    1dcc:	35 d0       	rcall	.+106    	; 0x1e38 <__divsf3_pse+0x92>
    1dce:	0e 2e       	mov	r0, r30
    1dd0:	3a f0       	brmi	.+14     	; 0x1de0 <__divsf3_pse+0x3a>
    1dd2:	e0 e8       	ldi	r30, 0x80	; 128
    1dd4:	32 d0       	rcall	.+100    	; 0x1e3a <__divsf3_pse+0x94>
    1dd6:	91 50       	subi	r25, 0x01	; 1
    1dd8:	50 40       	sbci	r21, 0x00	; 0
    1dda:	e6 95       	lsr	r30
    1ddc:	00 1c       	adc	r0, r0
    1dde:	ca f7       	brpl	.-14     	; 0x1dd2 <__divsf3_pse+0x2c>
    1de0:	2b d0       	rcall	.+86     	; 0x1e38 <__divsf3_pse+0x92>
    1de2:	fe 2f       	mov	r31, r30
    1de4:	29 d0       	rcall	.+82     	; 0x1e38 <__divsf3_pse+0x92>
    1de6:	66 0f       	add	r22, r22
    1de8:	77 1f       	adc	r23, r23
    1dea:	88 1f       	adc	r24, r24
    1dec:	bb 1f       	adc	r27, r27
    1dee:	26 17       	cp	r18, r22
    1df0:	37 07       	cpc	r19, r23
    1df2:	48 07       	cpc	r20, r24
    1df4:	ab 07       	cpc	r26, r27
    1df6:	b0 e8       	ldi	r27, 0x80	; 128
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <__divsf3_pse+0x56>
    1dfa:	bb 0b       	sbc	r27, r27
    1dfc:	80 2d       	mov	r24, r0
    1dfe:	bf 01       	movw	r22, r30
    1e00:	ff 27       	eor	r31, r31
    1e02:	93 58       	subi	r25, 0x83	; 131
    1e04:	5f 4f       	sbci	r21, 0xFF	; 255
    1e06:	3a f0       	brmi	.+14     	; 0x1e16 <__divsf3_pse+0x70>
    1e08:	9e 3f       	cpi	r25, 0xFE	; 254
    1e0a:	51 05       	cpc	r21, r1
    1e0c:	78 f0       	brcs	.+30     	; 0x1e2c <__divsf3_pse+0x86>
    1e0e:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__fp_inf>
    1e12:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__fp_szero>
    1e16:	5f 3f       	cpi	r21, 0xFF	; 255
    1e18:	e4 f3       	brlt	.-8      	; 0x1e12 <__divsf3_pse+0x6c>
    1e1a:	98 3e       	cpi	r25, 0xE8	; 232
    1e1c:	d4 f3       	brlt	.-12     	; 0x1e12 <__divsf3_pse+0x6c>
    1e1e:	86 95       	lsr	r24
    1e20:	77 95       	ror	r23
    1e22:	67 95       	ror	r22
    1e24:	b7 95       	ror	r27
    1e26:	f7 95       	ror	r31
    1e28:	9f 5f       	subi	r25, 0xFF	; 255
    1e2a:	c9 f7       	brne	.-14     	; 0x1e1e <__divsf3_pse+0x78>
    1e2c:	88 0f       	add	r24, r24
    1e2e:	91 1d       	adc	r25, r1
    1e30:	96 95       	lsr	r25
    1e32:	87 95       	ror	r24
    1e34:	97 f9       	bld	r25, 7
    1e36:	08 95       	ret
    1e38:	e1 e0       	ldi	r30, 0x01	; 1
    1e3a:	66 0f       	add	r22, r22
    1e3c:	77 1f       	adc	r23, r23
    1e3e:	88 1f       	adc	r24, r24
    1e40:	bb 1f       	adc	r27, r27
    1e42:	62 17       	cp	r22, r18
    1e44:	73 07       	cpc	r23, r19
    1e46:	84 07       	cpc	r24, r20
    1e48:	ba 07       	cpc	r27, r26
    1e4a:	20 f0       	brcs	.+8      	; 0x1e54 <__divsf3_pse+0xae>
    1e4c:	62 1b       	sub	r22, r18
    1e4e:	73 0b       	sbc	r23, r19
    1e50:	84 0b       	sbc	r24, r20
    1e52:	ba 0b       	sbc	r27, r26
    1e54:	ee 1f       	adc	r30, r30
    1e56:	88 f7       	brcc	.-30     	; 0x1e3a <__divsf3_pse+0x94>
    1e58:	e0 95       	com	r30
    1e5a:	08 95       	ret

00001e5c <__fixunssfsi>:
    1e5c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fp_splitA>
    1e60:	88 f0       	brcs	.+34     	; 0x1e84 <__fixunssfsi+0x28>
    1e62:	9f 57       	subi	r25, 0x7F	; 127
    1e64:	98 f0       	brcs	.+38     	; 0x1e8c <__fixunssfsi+0x30>
    1e66:	b9 2f       	mov	r27, r25
    1e68:	99 27       	eor	r25, r25
    1e6a:	b7 51       	subi	r27, 0x17	; 23
    1e6c:	b0 f0       	brcs	.+44     	; 0x1e9a <__fixunssfsi+0x3e>
    1e6e:	e1 f0       	breq	.+56     	; 0x1ea8 <__fixunssfsi+0x4c>
    1e70:	66 0f       	add	r22, r22
    1e72:	77 1f       	adc	r23, r23
    1e74:	88 1f       	adc	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	1a f0       	brmi	.+6      	; 0x1e80 <__fixunssfsi+0x24>
    1e7a:	ba 95       	dec	r27
    1e7c:	c9 f7       	brne	.-14     	; 0x1e70 <__fixunssfsi+0x14>
    1e7e:	14 c0       	rjmp	.+40     	; 0x1ea8 <__fixunssfsi+0x4c>
    1e80:	b1 30       	cpi	r27, 0x01	; 1
    1e82:	91 f0       	breq	.+36     	; 0x1ea8 <__fixunssfsi+0x4c>
    1e84:	0e 94 08 10 	call	0x2010	; 0x2010 <__fp_zero>
    1e88:	b1 e0       	ldi	r27, 0x01	; 1
    1e8a:	08 95       	ret
    1e8c:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__fp_zero>
    1e90:	67 2f       	mov	r22, r23
    1e92:	78 2f       	mov	r23, r24
    1e94:	88 27       	eor	r24, r24
    1e96:	b8 5f       	subi	r27, 0xF8	; 248
    1e98:	39 f0       	breq	.+14     	; 0x1ea8 <__fixunssfsi+0x4c>
    1e9a:	b9 3f       	cpi	r27, 0xF9	; 249
    1e9c:	cc f3       	brlt	.-14     	; 0x1e90 <__fixunssfsi+0x34>
    1e9e:	86 95       	lsr	r24
    1ea0:	77 95       	ror	r23
    1ea2:	67 95       	ror	r22
    1ea4:	b3 95       	inc	r27
    1ea6:	d9 f7       	brne	.-10     	; 0x1e9e <__fixunssfsi+0x42>
    1ea8:	3e f4       	brtc	.+14     	; 0x1eb8 <__fixunssfsi+0x5c>
    1eaa:	90 95       	com	r25
    1eac:	80 95       	com	r24
    1eae:	70 95       	com	r23
    1eb0:	61 95       	neg	r22
    1eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb8:	08 95       	ret

00001eba <__floatunsisf>:
    1eba:	e8 94       	clt
    1ebc:	09 c0       	rjmp	.+18     	; 0x1ed0 <__floatsisf+0x12>

00001ebe <__floatsisf>:
    1ebe:	97 fb       	bst	r25, 7
    1ec0:	3e f4       	brtc	.+14     	; 0x1ed0 <__floatsisf+0x12>
    1ec2:	90 95       	com	r25
    1ec4:	80 95       	com	r24
    1ec6:	70 95       	com	r23
    1ec8:	61 95       	neg	r22
    1eca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ecc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ece:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed0:	99 23       	and	r25, r25
    1ed2:	a9 f0       	breq	.+42     	; 0x1efe <__floatsisf+0x40>
    1ed4:	f9 2f       	mov	r31, r25
    1ed6:	96 e9       	ldi	r25, 0x96	; 150
    1ed8:	bb 27       	eor	r27, r27
    1eda:	93 95       	inc	r25
    1edc:	f6 95       	lsr	r31
    1ede:	87 95       	ror	r24
    1ee0:	77 95       	ror	r23
    1ee2:	67 95       	ror	r22
    1ee4:	b7 95       	ror	r27
    1ee6:	f1 11       	cpse	r31, r1
    1ee8:	f8 cf       	rjmp	.-16     	; 0x1eda <__floatsisf+0x1c>
    1eea:	fa f4       	brpl	.+62     	; 0x1f2a <__floatsisf+0x6c>
    1eec:	bb 0f       	add	r27, r27
    1eee:	11 f4       	brne	.+4      	; 0x1ef4 <__floatsisf+0x36>
    1ef0:	60 ff       	sbrs	r22, 0
    1ef2:	1b c0       	rjmp	.+54     	; 0x1f2a <__floatsisf+0x6c>
    1ef4:	6f 5f       	subi	r22, 0xFF	; 255
    1ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef8:	8f 4f       	sbci	r24, 0xFF	; 255
    1efa:	9f 4f       	sbci	r25, 0xFF	; 255
    1efc:	16 c0       	rjmp	.+44     	; 0x1f2a <__floatsisf+0x6c>
    1efe:	88 23       	and	r24, r24
    1f00:	11 f0       	breq	.+4      	; 0x1f06 <__floatsisf+0x48>
    1f02:	96 e9       	ldi	r25, 0x96	; 150
    1f04:	11 c0       	rjmp	.+34     	; 0x1f28 <__floatsisf+0x6a>
    1f06:	77 23       	and	r23, r23
    1f08:	21 f0       	breq	.+8      	; 0x1f12 <__floatsisf+0x54>
    1f0a:	9e e8       	ldi	r25, 0x8E	; 142
    1f0c:	87 2f       	mov	r24, r23
    1f0e:	76 2f       	mov	r23, r22
    1f10:	05 c0       	rjmp	.+10     	; 0x1f1c <__floatsisf+0x5e>
    1f12:	66 23       	and	r22, r22
    1f14:	71 f0       	breq	.+28     	; 0x1f32 <__floatsisf+0x74>
    1f16:	96 e8       	ldi	r25, 0x86	; 134
    1f18:	86 2f       	mov	r24, r22
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	2a f0       	brmi	.+10     	; 0x1f2a <__floatsisf+0x6c>
    1f20:	9a 95       	dec	r25
    1f22:	66 0f       	add	r22, r22
    1f24:	77 1f       	adc	r23, r23
    1f26:	88 1f       	adc	r24, r24
    1f28:	da f7       	brpl	.-10     	; 0x1f20 <__floatsisf+0x62>
    1f2a:	88 0f       	add	r24, r24
    1f2c:	96 95       	lsr	r25
    1f2e:	87 95       	ror	r24
    1f30:	97 f9       	bld	r25, 7
    1f32:	08 95       	ret

00001f34 <__fp_cmp>:
    1f34:	99 0f       	add	r25, r25
    1f36:	00 08       	sbc	r0, r0
    1f38:	55 0f       	add	r21, r21
    1f3a:	aa 0b       	sbc	r26, r26
    1f3c:	e0 e8       	ldi	r30, 0x80	; 128
    1f3e:	fe ef       	ldi	r31, 0xFE	; 254
    1f40:	16 16       	cp	r1, r22
    1f42:	17 06       	cpc	r1, r23
    1f44:	e8 07       	cpc	r30, r24
    1f46:	f9 07       	cpc	r31, r25
    1f48:	c0 f0       	brcs	.+48     	; 0x1f7a <__fp_cmp+0x46>
    1f4a:	12 16       	cp	r1, r18
    1f4c:	13 06       	cpc	r1, r19
    1f4e:	e4 07       	cpc	r30, r20
    1f50:	f5 07       	cpc	r31, r21
    1f52:	98 f0       	brcs	.+38     	; 0x1f7a <__fp_cmp+0x46>
    1f54:	62 1b       	sub	r22, r18
    1f56:	73 0b       	sbc	r23, r19
    1f58:	84 0b       	sbc	r24, r20
    1f5a:	95 0b       	sbc	r25, r21
    1f5c:	39 f4       	brne	.+14     	; 0x1f6c <__fp_cmp+0x38>
    1f5e:	0a 26       	eor	r0, r26
    1f60:	61 f0       	breq	.+24     	; 0x1f7a <__fp_cmp+0x46>
    1f62:	23 2b       	or	r18, r19
    1f64:	24 2b       	or	r18, r20
    1f66:	25 2b       	or	r18, r21
    1f68:	21 f4       	brne	.+8      	; 0x1f72 <__fp_cmp+0x3e>
    1f6a:	08 95       	ret
    1f6c:	0a 26       	eor	r0, r26
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <__fp_cmp+0x3e>
    1f70:	a1 40       	sbci	r26, 0x01	; 1
    1f72:	a6 95       	lsr	r26
    1f74:	8f ef       	ldi	r24, 0xFF	; 255
    1f76:	81 1d       	adc	r24, r1
    1f78:	81 1d       	adc	r24, r1
    1f7a:	08 95       	ret

00001f7c <__fp_inf>:
    1f7c:	97 f9       	bld	r25, 7
    1f7e:	9f 67       	ori	r25, 0x7F	; 127
    1f80:	80 e8       	ldi	r24, 0x80	; 128
    1f82:	70 e0       	ldi	r23, 0x00	; 0
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	08 95       	ret

00001f88 <__fp_nan>:
    1f88:	9f ef       	ldi	r25, 0xFF	; 255
    1f8a:	80 ec       	ldi	r24, 0xC0	; 192
    1f8c:	08 95       	ret

00001f8e <__fp_pscA>:
    1f8e:	00 24       	eor	r0, r0
    1f90:	0a 94       	dec	r0
    1f92:	16 16       	cp	r1, r22
    1f94:	17 06       	cpc	r1, r23
    1f96:	18 06       	cpc	r1, r24
    1f98:	09 06       	cpc	r0, r25
    1f9a:	08 95       	ret

00001f9c <__fp_pscB>:
    1f9c:	00 24       	eor	r0, r0
    1f9e:	0a 94       	dec	r0
    1fa0:	12 16       	cp	r1, r18
    1fa2:	13 06       	cpc	r1, r19
    1fa4:	14 06       	cpc	r1, r20
    1fa6:	05 06       	cpc	r0, r21
    1fa8:	08 95       	ret

00001faa <__fp_round>:
    1faa:	09 2e       	mov	r0, r25
    1fac:	03 94       	inc	r0
    1fae:	00 0c       	add	r0, r0
    1fb0:	11 f4       	brne	.+4      	; 0x1fb6 <__fp_round+0xc>
    1fb2:	88 23       	and	r24, r24
    1fb4:	52 f0       	brmi	.+20     	; 0x1fca <__fp_round+0x20>
    1fb6:	bb 0f       	add	r27, r27
    1fb8:	40 f4       	brcc	.+16     	; 0x1fca <__fp_round+0x20>
    1fba:	bf 2b       	or	r27, r31
    1fbc:	11 f4       	brne	.+4      	; 0x1fc2 <__fp_round+0x18>
    1fbe:	60 ff       	sbrs	r22, 0
    1fc0:	04 c0       	rjmp	.+8      	; 0x1fca <__fp_round+0x20>
    1fc2:	6f 5f       	subi	r22, 0xFF	; 255
    1fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fca:	08 95       	ret

00001fcc <__fp_split3>:
    1fcc:	57 fd       	sbrc	r21, 7
    1fce:	90 58       	subi	r25, 0x80	; 128
    1fd0:	44 0f       	add	r20, r20
    1fd2:	55 1f       	adc	r21, r21
    1fd4:	59 f0       	breq	.+22     	; 0x1fec <__fp_splitA+0x10>
    1fd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fd8:	71 f0       	breq	.+28     	; 0x1ff6 <__fp_splitA+0x1a>
    1fda:	47 95       	ror	r20

00001fdc <__fp_splitA>:
    1fdc:	88 0f       	add	r24, r24
    1fde:	97 fb       	bst	r25, 7
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	61 f0       	breq	.+24     	; 0x1ffc <__fp_splitA+0x20>
    1fe4:	9f 3f       	cpi	r25, 0xFF	; 255
    1fe6:	79 f0       	breq	.+30     	; 0x2006 <__fp_splitA+0x2a>
    1fe8:	87 95       	ror	r24
    1fea:	08 95       	ret
    1fec:	12 16       	cp	r1, r18
    1fee:	13 06       	cpc	r1, r19
    1ff0:	14 06       	cpc	r1, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	f2 cf       	rjmp	.-28     	; 0x1fda <__fp_split3+0xe>
    1ff6:	46 95       	lsr	r20
    1ff8:	f1 df       	rcall	.-30     	; 0x1fdc <__fp_splitA>
    1ffa:	08 c0       	rjmp	.+16     	; 0x200c <__fp_splitA+0x30>
    1ffc:	16 16       	cp	r1, r22
    1ffe:	17 06       	cpc	r1, r23
    2000:	18 06       	cpc	r1, r24
    2002:	99 1f       	adc	r25, r25
    2004:	f1 cf       	rjmp	.-30     	; 0x1fe8 <__fp_splitA+0xc>
    2006:	86 95       	lsr	r24
    2008:	71 05       	cpc	r23, r1
    200a:	61 05       	cpc	r22, r1
    200c:	08 94       	sec
    200e:	08 95       	ret

00002010 <__fp_zero>:
    2010:	e8 94       	clt

00002012 <__fp_szero>:
    2012:	bb 27       	eor	r27, r27
    2014:	66 27       	eor	r22, r22
    2016:	77 27       	eor	r23, r23
    2018:	cb 01       	movw	r24, r22
    201a:	97 f9       	bld	r25, 7
    201c:	08 95       	ret

0000201e <__tablejump2__>:
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	05 90       	lpm	r0, Z+
    2024:	f4 91       	lpm	r31, Z
    2026:	e0 2d       	mov	r30, r0
    2028:	09 94       	ijmp

0000202a <__muluhisi3>:
    202a:	0e 94 20 10 	call	0x2040	; 0x2040 <__umulhisi3>
    202e:	a5 9f       	mul	r26, r21
    2030:	90 0d       	add	r25, r0
    2032:	b4 9f       	mul	r27, r20
    2034:	90 0d       	add	r25, r0
    2036:	a4 9f       	mul	r26, r20
    2038:	80 0d       	add	r24, r0
    203a:	91 1d       	adc	r25, r1
    203c:	11 24       	eor	r1, r1
    203e:	08 95       	ret

00002040 <__umulhisi3>:
    2040:	a2 9f       	mul	r26, r18
    2042:	b0 01       	movw	r22, r0
    2044:	b3 9f       	mul	r27, r19
    2046:	c0 01       	movw	r24, r0
    2048:	a3 9f       	mul	r26, r19
    204a:	70 0d       	add	r23, r0
    204c:	81 1d       	adc	r24, r1
    204e:	11 24       	eor	r1, r1
    2050:	91 1d       	adc	r25, r1
    2052:	b2 9f       	mul	r27, r18
    2054:	70 0d       	add	r23, r0
    2056:	81 1d       	adc	r24, r1
    2058:	11 24       	eor	r1, r1
    205a:	91 1d       	adc	r25, r1
    205c:	08 95       	ret

0000205e <_exit>:
    205e:	f8 94       	cli

00002060 <__stop_program>:
    2060:	ff cf       	rjmp	.-2      	; 0x2060 <__stop_program>
