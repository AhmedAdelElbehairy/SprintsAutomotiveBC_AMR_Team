
MCU_To_MCU_Bluetooth_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001670  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00001670  00001704  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  0080008c  0080008c  00001730  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001760  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004066  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e8d  00000000  00000000  00005ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002628  00000000  00000000  0000695f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000088c  00000000  00000000  00008f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001451  00000000  00000000  00009814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003424  00000000  00000000  0000ac65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000e089  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_7>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	68 06       	cpc	r6, r24
      56:	73 06       	cpc	r7, r19
      58:	7e 06       	cpc	r7, r30
      5a:	89 06       	cpc	r8, r25
      5c:	94 06       	cpc	r9, r20
      5e:	9f 06       	cpc	r9, r31
      60:	aa 06       	cpc	r10, r26

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e0 e7       	ldi	r30, 0x70	; 112
      76:	f6 e1       	ldi	r31, 0x16	; 22
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ac 38       	cpi	r26, 0x8C	; 140
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	ac e8       	ldi	r26, 0x8C	; 140
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	aa 3c       	cpi	r26, 0xCA	; 202
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 32 09 	call	0x1264	; 0x1264 <main>
      98:	0c 94 36 0b 	jmp	0x166c	; 0x166c <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
      a0:	0f 92       	push	r0
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	0f 92       	push	r0
      a8:	1f 92       	push	r1
      aa:	11 24       	eor	r1, r1
      ac:	2f 92       	push	r2
      ae:	3f 92       	push	r3
      b0:	4f 92       	push	r4
      b2:	5f 92       	push	r5
      b4:	6f 92       	push	r6
      b6:	7f 92       	push	r7
      b8:	8f 92       	push	r8
      ba:	9f 92       	push	r9
      bc:	af 92       	push	r10
      be:	bf 92       	push	r11
      c0:	cf 92       	push	r12
      c2:	df 92       	push	r13
      c4:	ef 92       	push	r14
      c6:	ff 92       	push	r15
      c8:	0f 93       	push	r16
      ca:	1f 93       	push	r17
      cc:	2f 93       	push	r18
      ce:	3f 93       	push	r19
      d0:	4f 93       	push	r20
      d2:	5f 93       	push	r21
      d4:	6f 93       	push	r22
      d6:	7f 93       	push	r23
      d8:	8f 93       	push	r24
      da:	9f 93       	push	r25
      dc:	af 93       	push	r26
      de:	bf 93       	push	r27
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	ef 93       	push	r30
      e6:	ff 93       	push	r31
      e8:	a0 91 be 00 	lds	r26, 0x00BE	; 0x8000be <pxCurrentTCB>
      ec:	b0 91 bf 00 	lds	r27, 0x00BF	; 0x8000bf <pxCurrentTCB+0x1>
      f0:	0d b6       	in	r0, 0x3d	; 61
      f2:	0d 92       	st	X+, r0
      f4:	0e b6       	in	r0, 0x3e	; 62
      f6:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
      f8:	0e 94 cb 00 	call	0x196	; 0x196 <xTaskIncrementTick>
      fc:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
      fe:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     102:	a0 91 be 00 	lds	r26, 0x00BE	; 0x8000be <pxCurrentTCB>
     106:	b0 91 bf 00 	lds	r27, 0x00BF	; 0x8000bf <pxCurrentTCB+0x1>
     10a:	cd 91       	ld	r28, X+
     10c:	cd bf       	out	0x3d, r28	; 61
     10e:	dd 91       	ld	r29, X+
     110:	de bf       	out	0x3e, r29	; 62
     112:	ff 91       	pop	r31
     114:	ef 91       	pop	r30
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	bf 91       	pop	r27
     11c:	af 91       	pop	r26
     11e:	9f 91       	pop	r25
     120:	8f 91       	pop	r24
     122:	7f 91       	pop	r23
     124:	6f 91       	pop	r22
     126:	5f 91       	pop	r21
     128:	4f 91       	pop	r20
     12a:	3f 91       	pop	r19
     12c:	2f 91       	pop	r18
     12e:	1f 91       	pop	r17
     130:	0f 91       	pop	r16
     132:	ff 90       	pop	r15
     134:	ef 90       	pop	r14
     136:	df 90       	pop	r13
     138:	cf 90       	pop	r12
     13a:	bf 90       	pop	r11
     13c:	af 90       	pop	r10
     13e:	9f 90       	pop	r9
     140:	8f 90       	pop	r8
     142:	7f 90       	pop	r7
     144:	6f 90       	pop	r6
     146:	5f 90       	pop	r5
     148:	4f 90       	pop	r4
     14a:	3f 90       	pop	r3
     14c:	2f 90       	pop	r2
     14e:	1f 90       	pop	r1
     150:	0f 90       	pop	r0
     152:	0f be       	out	0x3f, r0	; 63
     154:	0f 90       	pop	r0

	asm volatile ( "ret" );
     156:	08 95       	ret

00000158 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     158:	0e 94 50 00 	call	0xa0	; 0xa0 <vPortYieldFromTick>
		asm volatile ( "reti" );
     15c:	18 95       	reti

0000015e <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     15e:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <pxDelayedTaskList>
     162:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <pxDelayedTaskList+0x1>
     166:	80 81       	ld	r24, Z
     168:	81 11       	cpse	r24, r1
     16a:	07 c0       	rjmp	.+14     	; 0x17a <prvResetNextTaskUnblockTime+0x1c>
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	9f ef       	ldi	r25, 0xFF	; 255
     170:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <xNextTaskUnblockTime+0x1>
     174:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <xNextTaskUnblockTime>
     178:	08 95       	ret
     17a:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <pxDelayedTaskList>
     17e:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <pxDelayedTaskList+0x1>
     182:	05 80       	ldd	r0, Z+5	; 0x05
     184:	f6 81       	ldd	r31, Z+6	; 0x06
     186:	e0 2d       	mov	r30, r0
     188:	80 81       	ld	r24, Z
     18a:	91 81       	ldd	r25, Z+1	; 0x01
     18c:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <xNextTaskUnblockTime+0x1>
     190:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <xNextTaskUnblockTime>
     194:	08 95       	ret

00000196 <xTaskIncrementTick>:
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
     1a2:	81 11       	cpse	r24, r1
     1a4:	01 c1       	rjmp	.+514    	; 0x3a8 <xTaskIncrementTick+0x212>
     1a6:	c0 91 94 00 	lds	r28, 0x0094	; 0x800094 <xTickCount>
     1aa:	d0 91 95 00 	lds	r29, 0x0095	; 0x800095 <xTickCount+0x1>
     1ae:	8e 01       	movw	r16, r28
     1b0:	0f 5f       	subi	r16, 0xFF	; 255
     1b2:	1f 4f       	sbci	r17, 0xFF	; 255
     1b4:	10 93 95 00 	sts	0x0095, r17	; 0x800095 <xTickCount+0x1>
     1b8:	00 93 94 00 	sts	0x0094, r16	; 0x800094 <xTickCount>
     1bc:	01 15       	cp	r16, r1
     1be:	11 05       	cpc	r17, r1
     1c0:	b9 f4       	brne	.+46     	; 0x1f0 <xTaskIncrementTick+0x5a>
     1c2:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <pxDelayedTaskList>
     1c6:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <pxDelayedTaskList+0x1>
     1ca:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <pxOverflowDelayedTaskList>
     1ce:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <pxOverflowDelayedTaskList+0x1>
     1d2:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <pxDelayedTaskList+0x1>
     1d6:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <pxDelayedTaskList>
     1da:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <pxOverflowDelayedTaskList+0x1>
     1de:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <pxOverflowDelayedTaskList>
     1e2:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <xNumOfOverflows>
     1e6:	8f 5f       	subi	r24, 0xFF	; 255
     1e8:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <xNumOfOverflows>
     1ec:	0e 94 af 00 	call	0x15e	; 0x15e <prvResetNextTaskUnblockTime>
     1f0:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <xNextTaskUnblockTime>
     1f4:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <xNextTaskUnblockTime+0x1>
     1f8:	08 17       	cp	r16, r24
     1fa:	19 07       	cpc	r17, r25
     1fc:	20 f4       	brcc	.+8      	; 0x206 <xTaskIncrementTick+0x70>
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	b8 c0       	rjmp	.+368    	; 0x372 <xTaskIncrementTick+0x1dc>
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	01 c0       	rjmp	.+2      	; 0x208 <xTaskIncrementTick+0x72>
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <pxDelayedTaskList>
     20c:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <pxDelayedTaskList+0x1>
     210:	90 81       	ld	r25, Z
     212:	91 11       	cpse	r25, r1
     214:	07 c0       	rjmp	.+14     	; 0x224 <xTaskIncrementTick+0x8e>
     216:	2f ef       	ldi	r18, 0xFF	; 255
     218:	3f ef       	ldi	r19, 0xFF	; 255
     21a:	30 93 8e 00 	sts	0x008E, r19	; 0x80008e <xNextTaskUnblockTime+0x1>
     21e:	20 93 8d 00 	sts	0x008D, r18	; 0x80008d <xNextTaskUnblockTime>
     222:	a7 c0       	rjmp	.+334    	; 0x372 <xTaskIncrementTick+0x1dc>
     224:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <pxDelayedTaskList>
     228:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <pxDelayedTaskList+0x1>
     22c:	05 80       	ldd	r0, Z+5	; 0x05
     22e:	f6 81       	ldd	r31, Z+6	; 0x06
     230:	e0 2d       	mov	r30, r0
     232:	06 80       	ldd	r0, Z+6	; 0x06
     234:	f7 81       	ldd	r31, Z+7	; 0x07
     236:	e0 2d       	mov	r30, r0
     238:	22 81       	ldd	r18, Z+2	; 0x02
     23a:	33 81       	ldd	r19, Z+3	; 0x03
     23c:	02 17       	cp	r16, r18
     23e:	13 07       	cpc	r17, r19
     240:	28 f4       	brcc	.+10     	; 0x24c <xTaskIncrementTick+0xb6>
     242:	30 93 8e 00 	sts	0x008E, r19	; 0x80008e <xNextTaskUnblockTime+0x1>
     246:	20 93 8d 00 	sts	0x008D, r18	; 0x80008d <xNextTaskUnblockTime>
     24a:	93 c0       	rjmp	.+294    	; 0x372 <xTaskIncrementTick+0x1dc>
     24c:	a2 85       	ldd	r26, Z+10	; 0x0a
     24e:	b3 85       	ldd	r27, Z+11	; 0x0b
     250:	24 81       	ldd	r18, Z+4	; 0x04
     252:	35 81       	ldd	r19, Z+5	; 0x05
     254:	46 81       	ldd	r20, Z+6	; 0x06
     256:	57 81       	ldd	r21, Z+7	; 0x07
     258:	e9 01       	movw	r28, r18
     25a:	5d 83       	std	Y+5, r21	; 0x05
     25c:	4c 83       	std	Y+4, r20	; 0x04
     25e:	26 81       	ldd	r18, Z+6	; 0x06
     260:	37 81       	ldd	r19, Z+7	; 0x07
     262:	44 81       	ldd	r20, Z+4	; 0x04
     264:	55 81       	ldd	r21, Z+5	; 0x05
     266:	e9 01       	movw	r28, r18
     268:	5b 83       	std	Y+3, r21	; 0x03
     26a:	4a 83       	std	Y+2, r20	; 0x02
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	2d 91       	ld	r18, X+
     270:	3c 91       	ld	r19, X
     272:	12 97       	sbiw	r26, 0x02	; 2
     274:	af 01       	movw	r20, r30
     276:	4e 5f       	subi	r20, 0xFE	; 254
     278:	5f 4f       	sbci	r21, 0xFF	; 255
     27a:	24 17       	cp	r18, r20
     27c:	35 07       	cpc	r19, r21
     27e:	31 f4       	brne	.+12     	; 0x28c <xTaskIncrementTick+0xf6>
     280:	26 81       	ldd	r18, Z+6	; 0x06
     282:	37 81       	ldd	r19, Z+7	; 0x07
     284:	12 96       	adiw	r26, 0x02	; 2
     286:	3c 93       	st	X, r19
     288:	2e 93       	st	-X, r18
     28a:	11 97       	sbiw	r26, 0x01	; 1
     28c:	13 86       	std	Z+11, r1	; 0x0b
     28e:	12 86       	std	Z+10, r1	; 0x0a
     290:	9c 91       	ld	r25, X
     292:	91 50       	subi	r25, 0x01	; 1
     294:	9c 93       	st	X, r25
     296:	a4 89       	ldd	r26, Z+20	; 0x14
     298:	b5 89       	ldd	r27, Z+21	; 0x15
     29a:	10 97       	sbiw	r26, 0x00	; 0
     29c:	19 f1       	breq	.+70     	; 0x2e4 <xTaskIncrementTick+0x14e>
     29e:	26 85       	ldd	r18, Z+14	; 0x0e
     2a0:	37 85       	ldd	r19, Z+15	; 0x0f
     2a2:	60 89       	ldd	r22, Z+16	; 0x10
     2a4:	71 89       	ldd	r23, Z+17	; 0x11
     2a6:	e9 01       	movw	r28, r18
     2a8:	7d 83       	std	Y+5, r23	; 0x05
     2aa:	6c 83       	std	Y+4, r22	; 0x04
     2ac:	20 89       	ldd	r18, Z+16	; 0x10
     2ae:	31 89       	ldd	r19, Z+17	; 0x11
     2b0:	66 85       	ldd	r22, Z+14	; 0x0e
     2b2:	77 85       	ldd	r23, Z+15	; 0x0f
     2b4:	e9 01       	movw	r28, r18
     2b6:	7b 83       	std	Y+3, r23	; 0x03
     2b8:	6a 83       	std	Y+2, r22	; 0x02
     2ba:	11 96       	adiw	r26, 0x01	; 1
     2bc:	6d 91       	ld	r22, X+
     2be:	7c 91       	ld	r23, X
     2c0:	12 97       	sbiw	r26, 0x02	; 2
     2c2:	9f 01       	movw	r18, r30
     2c4:	24 5f       	subi	r18, 0xF4	; 244
     2c6:	3f 4f       	sbci	r19, 0xFF	; 255
     2c8:	62 17       	cp	r22, r18
     2ca:	73 07       	cpc	r23, r19
     2cc:	31 f4       	brne	.+12     	; 0x2da <xTaskIncrementTick+0x144>
     2ce:	20 89       	ldd	r18, Z+16	; 0x10
     2d0:	31 89       	ldd	r19, Z+17	; 0x11
     2d2:	12 96       	adiw	r26, 0x02	; 2
     2d4:	3c 93       	st	X, r19
     2d6:	2e 93       	st	-X, r18
     2d8:	11 97       	sbiw	r26, 0x01	; 1
     2da:	15 8a       	std	Z+21, r1	; 0x15
     2dc:	14 8a       	std	Z+20, r1	; 0x14
     2de:	9c 91       	ld	r25, X
     2e0:	91 50       	subi	r25, 0x01	; 1
     2e2:	9c 93       	st	X, r25
     2e4:	26 89       	ldd	r18, Z+22	; 0x16
     2e6:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <uxTopReadyPriority>
     2ea:	92 17       	cp	r25, r18
     2ec:	10 f4       	brcc	.+4      	; 0x2f2 <xTaskIncrementTick+0x15c>
     2ee:	20 93 93 00 	sts	0x0093, r18	; 0x800093 <uxTopReadyPriority>
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	d9 01       	movw	r26, r18
     2f6:	aa 0f       	add	r26, r26
     2f8:	bb 1f       	adc	r27, r27
     2fa:	aa 0f       	add	r26, r26
     2fc:	bb 1f       	adc	r27, r27
     2fe:	aa 0f       	add	r26, r26
     300:	bb 1f       	adc	r27, r27
     302:	2a 0f       	add	r18, r26
     304:	3b 1f       	adc	r19, r27
     306:	d9 01       	movw	r26, r18
     308:	a6 56       	subi	r26, 0x66	; 102
     30a:	bf 4f       	sbci	r27, 0xFF	; 255
     30c:	11 96       	adiw	r26, 0x01	; 1
     30e:	0d 90       	ld	r0, X+
     310:	bc 91       	ld	r27, X
     312:	a0 2d       	mov	r26, r0
     314:	b5 83       	std	Z+5, r27	; 0x05
     316:	a4 83       	std	Z+4, r26	; 0x04
     318:	14 96       	adiw	r26, 0x04	; 4
     31a:	2d 91       	ld	r18, X+
     31c:	3c 91       	ld	r19, X
     31e:	15 97       	sbiw	r26, 0x05	; 5
     320:	37 83       	std	Z+7, r19	; 0x07
     322:	26 83       	std	Z+6, r18	; 0x06
     324:	14 96       	adiw	r26, 0x04	; 4
     326:	2d 91       	ld	r18, X+
     328:	3c 91       	ld	r19, X
     32a:	15 97       	sbiw	r26, 0x05	; 5
     32c:	e9 01       	movw	r28, r18
     32e:	5b 83       	std	Y+3, r21	; 0x03
     330:	4a 83       	std	Y+2, r20	; 0x02
     332:	15 96       	adiw	r26, 0x05	; 5
     334:	5c 93       	st	X, r21
     336:	4e 93       	st	-X, r20
     338:	14 97       	sbiw	r26, 0x04	; 4
     33a:	a6 89       	ldd	r26, Z+22	; 0x16
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	9d 01       	movw	r18, r26
     340:	22 0f       	add	r18, r18
     342:	33 1f       	adc	r19, r19
     344:	22 0f       	add	r18, r18
     346:	33 1f       	adc	r19, r19
     348:	22 0f       	add	r18, r18
     34a:	33 1f       	adc	r19, r19
     34c:	a2 0f       	add	r26, r18
     34e:	b3 1f       	adc	r27, r19
     350:	a6 56       	subi	r26, 0x66	; 102
     352:	bf 4f       	sbci	r27, 0xFF	; 255
     354:	b3 87       	std	Z+11, r27	; 0x0b
     356:	a2 87       	std	Z+10, r26	; 0x0a
     358:	9c 91       	ld	r25, X
     35a:	9f 5f       	subi	r25, 0xFF	; 255
     35c:	9c 93       	st	X, r25
     35e:	26 89       	ldd	r18, Z+22	; 0x16
     360:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <pxCurrentTCB>
     364:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <pxCurrentTCB+0x1>
     368:	96 89       	ldd	r25, Z+22	; 0x16
     36a:	29 17       	cp	r18, r25
     36c:	08 f0       	brcs	.+2      	; 0x370 <xTaskIncrementTick+0x1da>
     36e:	49 cf       	rjmp	.-366    	; 0x202 <xTaskIncrementTick+0x6c>
     370:	4b cf       	rjmp	.-362    	; 0x208 <xTaskIncrementTick+0x72>
     372:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <pxCurrentTCB>
     376:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <pxCurrentTCB+0x1>
     37a:	26 89       	ldd	r18, Z+22	; 0x16
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	f9 01       	movw	r30, r18
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	ee 0f       	add	r30, r30
     386:	ff 1f       	adc	r31, r31
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	2e 0f       	add	r18, r30
     38e:	3f 1f       	adc	r19, r31
     390:	f9 01       	movw	r30, r18
     392:	e6 56       	subi	r30, 0x66	; 102
     394:	ff 4f       	sbci	r31, 0xFF	; 255
     396:	90 81       	ld	r25, Z
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	08 f0       	brcs	.+2      	; 0x39e <xTaskIncrementTick+0x208>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <xYieldPending>
     3a2:	91 11       	cpse	r25, r1
     3a4:	0c c0       	rjmp	.+24     	; 0x3be <xTaskIncrementTick+0x228>
     3a6:	0c c0       	rjmp	.+24     	; 0x3c0 <xTaskIncrementTick+0x22a>
     3a8:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <xPendedTicks>
     3ac:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <xPendedTicks+0x1>
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <xPendedTicks+0x1>
     3b6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <xPendedTicks>
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <xTaskIncrementTick+0x22a>
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     3ca:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
     3ce:	88 23       	and	r24, r24
     3d0:	21 f0       	breq	.+8      	; 0x3da <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <xYieldPending>
     3d8:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     3da:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     3de:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <uxTopReadyPriority>
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <vTaskSwitchContext+0x1c>
     3e4:	21 50       	subi	r18, 0x01	; 1
     3e6:	82 2f       	mov	r24, r18
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	fc 01       	movw	r30, r24
     3ec:	ee 0f       	add	r30, r30
     3ee:	ff 1f       	adc	r31, r31
     3f0:	ee 0f       	add	r30, r30
     3f2:	ff 1f       	adc	r31, r31
     3f4:	ee 0f       	add	r30, r30
     3f6:	ff 1f       	adc	r31, r31
     3f8:	e8 0f       	add	r30, r24
     3fa:	f9 1f       	adc	r31, r25
     3fc:	e6 56       	subi	r30, 0x66	; 102
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	30 81       	ld	r19, Z
     402:	33 23       	and	r19, r19
     404:	79 f3       	breq	.-34     	; 0x3e4 <vTaskSwitchContext+0x1a>
     406:	ac 01       	movw	r20, r24
     408:	44 0f       	add	r20, r20
     40a:	55 1f       	adc	r21, r21
     40c:	44 0f       	add	r20, r20
     40e:	55 1f       	adc	r21, r21
     410:	44 0f       	add	r20, r20
     412:	55 1f       	adc	r21, r21
     414:	48 0f       	add	r20, r24
     416:	59 1f       	adc	r21, r25
     418:	df 01       	movw	r26, r30
     41a:	01 80       	ldd	r0, Z+1	; 0x01
     41c:	f2 81       	ldd	r31, Z+2	; 0x02
     41e:	e0 2d       	mov	r30, r0
     420:	02 80       	ldd	r0, Z+2	; 0x02
     422:	f3 81       	ldd	r31, Z+3	; 0x03
     424:	e0 2d       	mov	r30, r0
     426:	12 96       	adiw	r26, 0x02	; 2
     428:	fc 93       	st	X, r31
     42a:	ee 93       	st	-X, r30
     42c:	11 97       	sbiw	r26, 0x01	; 1
     42e:	43 56       	subi	r20, 0x63	; 99
     430:	5f 4f       	sbci	r21, 0xFF	; 255
     432:	e4 17       	cp	r30, r20
     434:	f5 07       	cpc	r31, r21
     436:	29 f4       	brne	.+10     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     438:	42 81       	ldd	r20, Z+2	; 0x02
     43a:	53 81       	ldd	r21, Z+3	; 0x03
     43c:	fd 01       	movw	r30, r26
     43e:	52 83       	std	Z+2, r21	; 0x02
     440:	41 83       	std	Z+1, r20	; 0x01
     442:	fc 01       	movw	r30, r24
     444:	ee 0f       	add	r30, r30
     446:	ff 1f       	adc	r31, r31
     448:	ee 0f       	add	r30, r30
     44a:	ff 1f       	adc	r31, r31
     44c:	ee 0f       	add	r30, r30
     44e:	ff 1f       	adc	r31, r31
     450:	8e 0f       	add	r24, r30
     452:	9f 1f       	adc	r25, r31
     454:	fc 01       	movw	r30, r24
     456:	e6 56       	subi	r30, 0x66	; 102
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	01 80       	ldd	r0, Z+1	; 0x01
     45c:	f2 81       	ldd	r31, Z+2	; 0x02
     45e:	e0 2d       	mov	r30, r0
     460:	86 81       	ldd	r24, Z+6	; 0x06
     462:	97 81       	ldd	r25, Z+7	; 0x07
     464:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <pxCurrentTCB+0x1>
     468:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <pxCurrentTCB>
     46c:	20 93 93 00 	sts	0x0093, r18	; 0x800093 <uxTopReadyPriority>
     470:	08 95       	ret

00000472 <LCD_SendCommand>:
				DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
				*Data = Character;
			}
	}
	return ErrRetVal;
}
     472:	df 92       	push	r13
     474:	ef 92       	push	r14
     476:	ff 92       	push	r15
     478:	0f 93       	push	r16
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	c8 2f       	mov	r28, r24
     482:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <State.1734>
     486:	85 31       	cpi	r24, 0x15	; 21
     488:	09 f4       	brne	.+2      	; 0x48c <LCD_SendCommand+0x1a>
     48a:	b0 c0       	rjmp	.+352    	; 0x5ec <LCD_SendCommand+0x17a>
     48c:	8f 3f       	cpi	r24, 0xFF	; 255
     48e:	21 f0       	breq	.+8      	; 0x498 <LCD_SendCommand+0x26>
     490:	84 31       	cpi	r24, 0x14	; 20
     492:	09 f0       	breq	.+2      	; 0x496 <LCD_SendCommand+0x24>
     494:	c3 c0       	rjmp	.+390    	; 0x61c <LCD_SendCommand+0x1aa>
     496:	87 c0       	rjmp	.+270    	; 0x5a6 <LCD_SendCommand+0x134>
     498:	0f 2e       	mov	r0, r31
     49a:	f0 e7       	ldi	r31, 0x70	; 112
     49c:	ef 2e       	mov	r14, r31
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	ff 2e       	mov	r15, r31
     4a2:	f0 2d       	mov	r31, r0
     4a4:	f7 01       	movw	r30, r14
     4a6:	d0 80       	ld	r13, Z
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	61 81       	ldd	r22, Z+1	; 0x01
     4ac:	8d 2d       	mov	r24, r13
     4ae:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	f7 01       	movw	r30, r14
     4b6:	62 81       	ldd	r22, Z+2	; 0x02
     4b8:	8d 2d       	mov	r24, r13
     4ba:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
     4be:	03 e6       	ldi	r16, 0x63	; 99
     4c0:	10 e0       	ldi	r17, 0x00	; 0
     4c2:	f8 01       	movw	r30, r16
     4c4:	d1 81       	ldd	r29, Z+1	; 0x01
     4c6:	4c 2f       	mov	r20, r28
     4c8:	41 70       	andi	r20, 0x01	; 1
     4ca:	64 85       	ldd	r22, Z+12	; 0x0c
     4cc:	8d 2f       	mov	r24, r29
     4ce:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
     4d2:	4c 2f       	mov	r20, r28
     4d4:	42 70       	andi	r20, 0x02	; 2
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	55 95       	asr	r21
     4da:	47 95       	ror	r20
     4dc:	f8 01       	movw	r30, r16
     4de:	63 85       	ldd	r22, Z+11	; 0x0b
     4e0:	8d 2f       	mov	r24, r29
     4e2:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
     4e6:	4c 2f       	mov	r20, r28
     4e8:	44 70       	andi	r20, 0x04	; 4
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	55 95       	asr	r21
     4ee:	47 95       	ror	r20
     4f0:	55 95       	asr	r21
     4f2:	47 95       	ror	r20
     4f4:	f8 01       	movw	r30, r16
     4f6:	62 85       	ldd	r22, Z+10	; 0x0a
     4f8:	8d 2f       	mov	r24, r29
     4fa:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
     4fe:	4c 2f       	mov	r20, r28
     500:	48 70       	andi	r20, 0x08	; 8
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	55 95       	asr	r21
     506:	47 95       	ror	r20
     508:	55 95       	asr	r21
     50a:	47 95       	ror	r20
     50c:	55 95       	asr	r21
     50e:	47 95       	ror	r20
     510:	f8 01       	movw	r30, r16
     512:	61 85       	ldd	r22, Z+9	; 0x09
     514:	8d 2f       	mov	r24, r29
     516:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
     51a:	4c 2f       	mov	r20, r28
     51c:	40 71       	andi	r20, 0x10	; 16
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	55 95       	asr	r21
     522:	47 95       	ror	r20
     524:	55 95       	asr	r21
     526:	47 95       	ror	r20
     528:	55 95       	asr	r21
     52a:	47 95       	ror	r20
     52c:	55 95       	asr	r21
     52e:	47 95       	ror	r20
     530:	f8 01       	movw	r30, r16
     532:	60 85       	ldd	r22, Z+8	; 0x08
     534:	8d 2f       	mov	r24, r29
     536:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
     53a:	4c 2f       	mov	r20, r28
     53c:	40 72       	andi	r20, 0x20	; 32
     53e:	50 e0       	ldi	r21, 0x00	; 0
     540:	55 95       	asr	r21
     542:	47 95       	ror	r20
     544:	55 95       	asr	r21
     546:	47 95       	ror	r20
     548:	55 95       	asr	r21
     54a:	47 95       	ror	r20
     54c:	55 95       	asr	r21
     54e:	47 95       	ror	r20
     550:	55 95       	asr	r21
     552:	47 95       	ror	r20
     554:	f8 01       	movw	r30, r16
     556:	67 81       	ldd	r22, Z+7	; 0x07
     558:	8d 2f       	mov	r24, r29
     55a:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
     55e:	4c 2f       	mov	r20, r28
     560:	40 74       	andi	r20, 0x40	; 64
     562:	50 e0       	ldi	r21, 0x00	; 0
     564:	04 2e       	mov	r0, r20
     566:	45 2f       	mov	r20, r21
     568:	00 0c       	add	r0, r0
     56a:	44 1f       	adc	r20, r20
     56c:	55 0b       	sbc	r21, r21
     56e:	00 0c       	add	r0, r0
     570:	44 1f       	adc	r20, r20
     572:	55 1f       	adc	r21, r21
     574:	f8 01       	movw	r30, r16
     576:	66 81       	ldd	r22, Z+6	; 0x06
     578:	8d 2f       	mov	r24, r29
     57a:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
     57e:	4c 2f       	mov	r20, r28
     580:	44 1f       	adc	r20, r20
     582:	44 27       	eor	r20, r20
     584:	44 1f       	adc	r20, r20
     586:	f8 01       	movw	r30, r16
     588:	65 81       	ldd	r22, Z+5	; 0x05
     58a:	8d 2f       	mov	r24, r29
     58c:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
     590:	41 e0       	ldi	r20, 0x01	; 1
     592:	f7 01       	movw	r30, r14
     594:	63 81       	ldd	r22, Z+3	; 0x03
     596:	8d 2d       	mov	r24, r13
     598:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
     59c:	84 e1       	ldi	r24, 0x14	; 20
     59e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1734>
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	40 c0       	rjmp	.+128    	; 0x626 <LCD_SendCommand+0x1b4>
     5a6:	69 e3       	ldi	r22, 0x39	; 57
     5a8:	72 e0       	ldi	r23, 0x02	; 2
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <TIM_DelayStatus>
     5b0:	8b 3f       	cpi	r24, 0xFB	; 251
     5b2:	b1 f5       	brne	.+108    	; 0x620 <LCD_SendCommand+0x1ae>
     5b4:	29 e3       	ldi	r18, 0x39	; 57
     5b6:	32 e0       	ldi	r19, 0x02	; 2
     5b8:	41 e0       	ldi	r20, 0x01	; 1
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	0e 94 c2 07 	call	0xf84	; 0xf84 <TIM_DelayUs>
     5c6:	69 e3       	ldi	r22, 0x39	; 57
     5c8:	72 e0       	ldi	r23, 0x02	; 2
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <TIM_DelayStatus>
     5d0:	81 11       	cpse	r24, r1
     5d2:	f9 cf       	rjmp	.-14     	; 0x5c6 <LCD_SendCommand+0x154>
     5d4:	e0 e7       	ldi	r30, 0x70	; 112
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	63 81       	ldd	r22, Z+3	; 0x03
     5dc:	80 81       	ld	r24, Z
     5de:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
     5e2:	85 e1       	ldi	r24, 0x15	; 21
     5e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1734>
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	1d c0       	rjmp	.+58     	; 0x626 <LCD_SendCommand+0x1b4>
     5ec:	69 e3       	ldi	r22, 0x39	; 57
     5ee:	72 e0       	ldi	r23, 0x02	; 2
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <TIM_DelayStatus>
     5f6:	c8 2f       	mov	r28, r24
     5f8:	8b 3f       	cpi	r24, 0xFB	; 251
     5fa:	49 f4       	brne	.+18     	; 0x60e <LCD_SendCommand+0x19c>
     5fc:	29 e3       	ldi	r18, 0x39	; 57
     5fe:	32 e0       	ldi	r19, 0x02	; 2
     600:	42 e0       	ldi	r20, 0x02	; 2
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	82 e0       	ldi	r24, 0x02	; 2
     60a:	0e 94 40 08 	call	0x1080	; 0x1080 <TIM_DelayMs>
     60e:	c1 11       	cpse	r28, r1
     610:	09 c0       	rjmp	.+18     	; 0x624 <LCD_SendCommand+0x1b2>
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1734>
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	05 c0       	rjmp	.+10     	; 0x626 <LCD_SendCommand+0x1b4>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	03 c0       	rjmp	.+6      	; 0x626 <LCD_SendCommand+0x1b4>
     620:	8f ef       	ldi	r24, 0xFF	; 255
     622:	01 c0       	rjmp	.+2      	; 0x626 <LCD_SendCommand+0x1b4>
     624:	8f ef       	ldi	r24, 0xFF	; 255
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	df 90       	pop	r13
     634:	08 95       	ret

00000636 <LCD_SendData>:
}



ERROR_STATE_t LCD_SendData(uint8_t Character)
{
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	c8 2f       	mov	r28, r24
	}
	/************************************************************************/
	/*                     8_Bit Mode send data Function                    */
	/************************************************************************/
	#else
	switch (State)
     640:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <State.1753>
     644:	84 31       	cpi	r24, 0x14	; 20
     646:	09 f4       	brne	.+2      	; 0x64a <LCD_SendData+0x14>
     648:	85 c0       	rjmp	.+266    	; 0x754 <LCD_SendData+0x11e>
     64a:	8f 3f       	cpi	r24, 0xFF	; 255
     64c:	09 f0       	breq	.+2      	; 0x650 <LCD_SendData+0x1a>
     64e:	a5 c0       	rjmp	.+330    	; 0x79a <LCD_SendData+0x164>
	{
		case OperationStarted:
			/*sending control signals with configurations of selection of control reg. and write process*/
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     650:	03 e6       	ldi	r16, 0x63	; 99
     652:	10 e0       	ldi	r17, 0x00	; 0
     654:	f8 01       	movw	r30, r16
     656:	d0 81       	ld	r29, Z
     658:	41 e0       	ldi	r20, 0x01	; 1
     65a:	62 81       	ldd	r22, Z+2	; 0x02
     65c:	8d 2f       	mov	r24, r29
     65e:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	f8 01       	movw	r30, r16
     666:	63 81       	ldd	r22, Z+3	; 0x03
     668:	8d 2f       	mov	r24, r29
     66a:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
			/*Setting the lcd pins*/
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0,READ_BIT(Character,BIT_0));
     66e:	f8 01       	movw	r30, r16
     670:	d1 81       	ldd	r29, Z+1	; 0x01
     672:	4c 2f       	mov	r20, r28
     674:	41 70       	andi	r20, 0x01	; 1
     676:	64 85       	ldd	r22, Z+12	; 0x0c
     678:	8d 2f       	mov	r24, r29
     67a:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1,READ_BIT(Character,BIT_1));
     67e:	4c 2f       	mov	r20, r28
     680:	42 70       	andi	r20, 0x02	; 2
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	55 95       	asr	r21
     686:	47 95       	ror	r20
     688:	f8 01       	movw	r30, r16
     68a:	63 85       	ldd	r22, Z+11	; 0x0b
     68c:	8d 2f       	mov	r24, r29
     68e:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2,READ_BIT(Character,BIT_2));
     692:	4c 2f       	mov	r20, r28
     694:	44 70       	andi	r20, 0x04	; 4
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	55 95       	asr	r21
     69a:	47 95       	ror	r20
     69c:	55 95       	asr	r21
     69e:	47 95       	ror	r20
     6a0:	f8 01       	movw	r30, r16
     6a2:	62 85       	ldd	r22, Z+10	; 0x0a
     6a4:	8d 2f       	mov	r24, r29
     6a6:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3,READ_BIT(Character,BIT_3));
     6aa:	4c 2f       	mov	r20, r28
     6ac:	48 70       	andi	r20, 0x08	; 8
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	55 95       	asr	r21
     6b2:	47 95       	ror	r20
     6b4:	55 95       	asr	r21
     6b6:	47 95       	ror	r20
     6b8:	55 95       	asr	r21
     6ba:	47 95       	ror	r20
     6bc:	f8 01       	movw	r30, r16
     6be:	61 85       	ldd	r22, Z+9	; 0x09
     6c0:	8d 2f       	mov	r24, r29
     6c2:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(Character,BIT_4));
     6c6:	4c 2f       	mov	r20, r28
     6c8:	40 71       	andi	r20, 0x10	; 16
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	55 95       	asr	r21
     6ce:	47 95       	ror	r20
     6d0:	55 95       	asr	r21
     6d2:	47 95       	ror	r20
     6d4:	55 95       	asr	r21
     6d6:	47 95       	ror	r20
     6d8:	55 95       	asr	r21
     6da:	47 95       	ror	r20
     6dc:	f8 01       	movw	r30, r16
     6de:	60 85       	ldd	r22, Z+8	; 0x08
     6e0:	8d 2f       	mov	r24, r29
     6e2:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(Character,BIT_5));
     6e6:	4c 2f       	mov	r20, r28
     6e8:	40 72       	andi	r20, 0x20	; 32
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	55 95       	asr	r21
     6ee:	47 95       	ror	r20
     6f0:	55 95       	asr	r21
     6f2:	47 95       	ror	r20
     6f4:	55 95       	asr	r21
     6f6:	47 95       	ror	r20
     6f8:	55 95       	asr	r21
     6fa:	47 95       	ror	r20
     6fc:	55 95       	asr	r21
     6fe:	47 95       	ror	r20
     700:	f8 01       	movw	r30, r16
     702:	67 81       	ldd	r22, Z+7	; 0x07
     704:	8d 2f       	mov	r24, r29
     706:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(Character,BIT_6));
     70a:	4c 2f       	mov	r20, r28
     70c:	40 74       	andi	r20, 0x40	; 64
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	04 2e       	mov	r0, r20
     712:	45 2f       	mov	r20, r21
     714:	00 0c       	add	r0, r0
     716:	44 1f       	adc	r20, r20
     718:	55 0b       	sbc	r21, r21
     71a:	00 0c       	add	r0, r0
     71c:	44 1f       	adc	r20, r20
     71e:	55 1f       	adc	r21, r21
     720:	f8 01       	movw	r30, r16
     722:	66 81       	ldd	r22, Z+6	; 0x06
     724:	8d 2f       	mov	r24, r29
     726:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(Character,BIT_7));
     72a:	4c 2f       	mov	r20, r28
     72c:	44 1f       	adc	r20, r20
     72e:	44 27       	eor	r20, r20
     730:	44 1f       	adc	r20, r20
     732:	f8 01       	movw	r30, r16
     734:	65 81       	ldd	r22, Z+5	; 0x05
     736:	8d 2f       	mov	r24, r29
     738:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
			/*writing data to the register by pulling the enable pin high for 1 Us*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     73c:	e0 e7       	ldi	r30, 0x70	; 112
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	41 e0       	ldi	r20, 0x01	; 1
     742:	63 81       	ldd	r22, Z+3	; 0x03
     744:	80 81       	ld	r24, Z
     746:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
			State = CMD_Sending;
     74a:	84 e1       	ldi	r24, 0x14	; 20
     74c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1753>


ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     750:	8f ef       	ldi	r24, 0xFF	; 255
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(Character,BIT_6));
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(Character,BIT_7));
			/*writing data to the register by pulling the enable pin high for 1 Us*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
			State = CMD_Sending;
			break;
     752:	26 c0       	rjmp	.+76     	; 0x7a0 <LCD_SendData+0x16a>
		case CMD_Sending:
			/*start timer delay in background*/
			if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     754:	69 e3       	ldi	r22, 0x39	; 57
     756:	72 e0       	ldi	r23, 0x02	; 2
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <TIM_DelayStatus>
     75e:	8b 3f       	cpi	r24, 0xFB	; 251
     760:	f1 f4       	brne	.+60     	; 0x79e <LCD_SendData+0x168>
			{
				TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendCommand);
     762:	29 e3       	ldi	r18, 0x39	; 57
     764:	32 e0       	ldi	r19, 0x02	; 2
     766:	41 e0       	ldi	r20, 0x01	; 1
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	0e 94 c2 07 	call	0xf84	; 0xf84 <TIM_DelayUs>
				while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     774:	69 e3       	ldi	r22, 0x39	; 57
     776:	72 e0       	ldi	r23, 0x02	; 2
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <TIM_DelayStatus>
     77e:	81 11       	cpse	r24, r1
     780:	f9 cf       	rjmp	.-14     	; 0x774 <LCD_SendData+0x13e>
				/*if timer delay function finished correctly pull enable pin low*/
				DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     782:	e0 e7       	ldi	r30, 0x70	; 112
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	40 e0       	ldi	r20, 0x00	; 0
     788:	63 81       	ldd	r22, Z+3	; 0x03
     78a:	80 81       	ld	r24, Z
     78c:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
				/*reset the function's state*/
				State = OperationStarted;
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1753>
				/*process finished successfully*/
				ErrRetVal = OperationSuccess;
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	03 c0       	rjmp	.+6      	; 0x7a0 <LCD_SendData+0x16a>
			}
			break;
		default:
		ErrRetVal = OperationFail;
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <LCD_SendData+0x16a>


ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     79e:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	}
	#endif
	/*return from function*/
	return ErrRetVal;
}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <LCD_Init>:




ERROR_STATE_t LCD_Init()
{
     7aa:	8f 92       	push	r8
     7ac:	9f 92       	push	r9
     7ae:	af 92       	push	r10
     7b0:	bf 92       	push	r11
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
	/************************************************************************/
	/*                 8_Bit Mode initialization Function                   */
	/************************************************************************/
	#else
	/*Starting the initialization sequence*/
	switch(State)
     7c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7c6:	8b 30       	cpi	r24, 0x0B	; 11
     7c8:	09 f4       	brne	.+2      	; 0x7cc <LCD_Init+0x22>
     7ca:	d5 c0       	rjmp	.+426    	; 0x976 <__stack+0x117>
     7cc:	90 f4       	brcc	.+36     	; 0x7f2 <LCD_Init+0x48>
     7ce:	88 30       	cpi	r24, 0x08	; 8
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <LCD_Init+0x2a>
     7d2:	b3 c0       	rjmp	.+358    	; 0x93a <__stack+0xdb>
     7d4:	38 f4       	brcc	.+14     	; 0x7e4 <LCD_Init+0x3a>
     7d6:	85 30       	cpi	r24, 0x05	; 5
     7d8:	09 f4       	brne	.+2      	; 0x7dc <LCD_Init+0x32>
     7da:	8d c0       	rjmp	.+282    	; 0x8f6 <__stack+0x97>
     7dc:	86 30       	cpi	r24, 0x06	; 6
     7de:	09 f4       	brne	.+2      	; 0x7e2 <LCD_Init+0x38>
     7e0:	a2 c0       	rjmp	.+324    	; 0x926 <__stack+0xc7>
     7e2:	fb c0       	rjmp	.+502    	; 0x9da <__stack+0x17b>
     7e4:	89 30       	cpi	r24, 0x09	; 9
     7e6:	09 f4       	brne	.+2      	; 0x7ea <LCD_Init+0x40>
     7e8:	b2 c0       	rjmp	.+356    	; 0x94e <__stack+0xef>
     7ea:	8a 30       	cpi	r24, 0x0A	; 10
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <LCD_Init+0x46>
     7ee:	b9 c0       	rjmp	.+370    	; 0x962 <__stack+0x103>
     7f0:	f4 c0       	rjmp	.+488    	; 0x9da <__stack+0x17b>
     7f2:	8e 30       	cpi	r24, 0x0E	; 14
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <LCD_Init+0x4e>
     7f6:	dd c0       	rjmp	.+442    	; 0x9b2 <__stack+0x153>
     7f8:	38 f4       	brcc	.+14     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7fa:	8c 30       	cpi	r24, 0x0C	; 12
     7fc:	09 f4       	brne	.+2      	; 0x800 <__DATA_REGION_LENGTH__>
     7fe:	c5 c0       	rjmp	.+394    	; 0x98a <__stack+0x12b>
     800:	8d 30       	cpi	r24, 0x0D	; 13
     802:	09 f4       	brne	.+2      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     804:	cc c0       	rjmp	.+408    	; 0x99e <__stack+0x13f>
     806:	e9 c0       	rjmp	.+466    	; 0x9da <__stack+0x17b>
     808:	8f 30       	cpi	r24, 0x0F	; 15
     80a:	09 f4       	brne	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80c:	dc c0       	rjmp	.+440    	; 0x9c6 <__stack+0x167>
     80e:	8f 3f       	cpi	r24, 0xFF	; 255
     810:	09 f0       	breq	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     812:	e3 c0       	rjmp	.+454    	; 0x9da <__stack+0x17b>
	{
		case OperationStarted:
		/*Initialize timer2*/
		TIM_Init(TIMER_2);
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	0e 94 bb 06 	call	0xd76	; 0xd76 <TIM_Init>
		/*Initializing the LCD Data Pins*/
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     81a:	c3 e6       	ldi	r28, 0x63	; 99
     81c:	d0 e0       	ldi	r29, 0x00	; 0
     81e:	8d 80       	ldd	r8, Y+5	; 0x05
     820:	09 81       	ldd	r16, Y+1	; 0x01
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	68 2d       	mov	r22, r8
     826:	80 2f       	mov	r24, r16
     828:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     82c:	9e 80       	ldd	r9, Y+6	; 0x06
     82e:	41 e0       	ldi	r20, 0x01	; 1
     830:	69 2d       	mov	r22, r9
     832:	80 2f       	mov	r24, r16
     834:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     838:	af 80       	ldd	r10, Y+7	; 0x07
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	6a 2d       	mov	r22, r10
     83e:	80 2f       	mov	r24, r16
     840:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     844:	b8 84       	ldd	r11, Y+8	; 0x08
     846:	41 e0       	ldi	r20, 0x01	; 1
     848:	6b 2d       	mov	r22, r11
     84a:	80 2f       	mov	r24, r16
     84c:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3, PIN_OUTPUT);
     850:	c9 84       	ldd	r12, Y+9	; 0x09
     852:	41 e0       	ldi	r20, 0x01	; 1
     854:	6c 2d       	mov	r22, r12
     856:	80 2f       	mov	r24, r16
     858:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2, PIN_OUTPUT);
     85c:	da 84       	ldd	r13, Y+10	; 0x0a
     85e:	41 e0       	ldi	r20, 0x01	; 1
     860:	6d 2d       	mov	r22, r13
     862:	80 2f       	mov	r24, r16
     864:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1, PIN_OUTPUT);
     868:	eb 84       	ldd	r14, Y+11	; 0x0b
     86a:	41 e0       	ldi	r20, 0x01	; 1
     86c:	6e 2d       	mov	r22, r14
     86e:	80 2f       	mov	r24, r16
     870:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0, PIN_OUTPUT);
     874:	fc 84       	ldd	r15, Y+12	; 0x0c
     876:	41 e0       	ldi	r20, 0x01	; 1
     878:	6f 2d       	mov	r22, r15
     87a:	80 2f       	mov	r24, r16
     87c:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_SetPinDirection>
		/*Initializing the LCD CTRL Pins*/
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     880:	18 81       	ld	r17, Y
     882:	41 e0       	ldi	r20, 0x01	; 1
     884:	6a 81       	ldd	r22, Y+2	; 0x02
     886:	81 2f       	mov	r24, r17
     888:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     88c:	41 e0       	ldi	r20, 0x01	; 1
     88e:	6b 81       	ldd	r22, Y+3	; 0x03
     890:	81 2f       	mov	r24, r17
     892:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     896:	41 e0       	ldi	r20, 0x01	; 1
     898:	6c 81       	ldd	r22, Y+4	; 0x04
     89a:	81 2f       	mov	r24, r17
     89c:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	68 2d       	mov	r22, r8
     8a4:	80 2f       	mov	r24, r16
     8a6:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	69 2d       	mov	r22, r9
     8ae:	80 2f       	mov	r24, r16
     8b0:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	6a 2d       	mov	r22, r10
     8b8:	80 2f       	mov	r24, r16
     8ba:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
     8be:	40 e0       	ldi	r20, 0x00	; 0
     8c0:	6b 2d       	mov	r22, r11
     8c2:	80 2f       	mov	r24, r16
     8c4:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3, PIN_LOW);
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	6c 2d       	mov	r22, r12
     8cc:	80 2f       	mov	r24, r16
     8ce:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2, PIN_LOW);
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	6d 2d       	mov	r22, r13
     8d6:	80 2f       	mov	r24, r16
     8d8:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1, PIN_LOW);
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	6e 2d       	mov	r22, r14
     8e0:	80 2f       	mov	r24, r16
     8e2:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0, PIN_LOW);
     8e6:	40 e0       	ldi	r20, 0x00	; 0
     8e8:	6f 2d       	mov	r22, r15
     8ea:	80 2f       	mov	r24, r16
     8ec:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_WritePin>
		State = LCD_Pin_Initializing;
     8f0:	85 e0       	ldi	r24, 0x05	; 5
     8f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
     8f6:	69 e3       	ldi	r22, 0x39	; 57
     8f8:	72 e0       	ldi	r23, 0x02	; 2
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <TIM_DelayStatus>
     900:	c8 2f       	mov	r28, r24
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     902:	8b 3f       	cpi	r24, 0xFB	; 251
     904:	49 f4       	brne	.+18     	; 0x918 <__stack+0xb9>
		{
			TIM_DelayMs(TIMER_2,15, (void (*)(void))LCD_SendCommand);
     906:	29 e3       	ldi	r18, 0x39	; 57
     908:	32 e0       	ldi	r19, 0x02	; 2
     90a:	4f e0       	ldi	r20, 0x0F	; 15
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	82 e0       	ldi	r24, 0x02	; 2
     914:	0e 94 40 08 	call	0x1080	; 0x1080 <TIM_DelayMs>
		}
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     918:	c1 11       	cpse	r28, r1
     91a:	61 c0       	rjmp	.+194    	; 0x9de <__stack+0x17f>
		{
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
     91c:	86 e0       	ldi	r24, 0x06	; 6
     91e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	6f c0       	rjmp	.+222    	; 0xa04 <__stack+0x1a5>
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
		case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     926:	80 e3       	ldi	r24, 0x30	; 48
     928:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     92c:	81 11       	cpse	r24, r1
     92e:	59 c0       	rjmp	.+178    	; 0x9e2 <__stack+0x183>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     930:	88 e0       	ldi	r24, 0x08	; 8
     932:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     936:	8f ef       	ldi	r24, 0xFF	; 255
     938:	65 c0       	rjmp	.+202    	; 0xa04 <__stack+0x1a5>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     93a:	80 e3       	ldi	r24, 0x30	; 48
     93c:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     940:	81 11       	cpse	r24, r1
     942:	51 c0       	rjmp	.+162    	; 0x9e6 <__stack+0x187>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     944:	89 e0       	ldi	r24, 0x09	; 9
     946:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     94a:	8f ef       	ldi	r24, 0xFF	; 255
     94c:	5b c0       	rjmp	.+182    	; 0xa04 <__stack+0x1a5>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     94e:	80 e3       	ldi	r24, 0x30	; 48
     950:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     954:	81 11       	cpse	r24, r1
     956:	49 c0       	rjmp	.+146    	; 0x9ea <__stack+0x18b>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     958:	8a e0       	ldi	r24, 0x0A	; 10
     95a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	51 c0       	rjmp	.+162    	; 0xa04 <__stack+0x1a5>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_3);
     962:	88 e3       	ldi	r24, 0x38	; 56
     964:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     968:	81 11       	cpse	r24, r1
     96a:	41 c0       	rjmp	.+130    	; 0x9ee <__stack+0x18f>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     96c:	8b e0       	ldi	r24, 0x0B	; 11
     96e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	47 c0       	rjmp	.+142    	; 0xa04 <__stack+0x1a5>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
     976:	8c e0       	ldi	r24, 0x0C	; 12
     978:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     97c:	81 11       	cpse	r24, r1
     97e:	39 c0       	rjmp	.+114    	; 0x9f2 <__stack+0x193>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     980:	8c e0       	ldi	r24, 0x0C	; 12
     982:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     986:	8f ef       	ldi	r24, 0xFF	; 255
     988:	3d c0       	rjmp	.+122    	; 0xa04 <__stack+0x1a5>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     990:	81 11       	cpse	r24, r1
     992:	31 c0       	rjmp	.+98     	; 0x9f6 <__stack+0x197>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     994:	8d e0       	ldi	r24, 0x0D	; 13
     996:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     99a:	8f ef       	ldi	r24, 0xFF	; 255
     99c:	33 c0       	rjmp	.+102    	; 0xa04 <__stack+0x1a5>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);
     99e:	86 e0       	ldi	r24, 0x06	; 6
     9a0:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     9a4:	81 11       	cpse	r24, r1
     9a6:	29 c0       	rjmp	.+82     	; 0x9fa <__stack+0x19b>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     9a8:	8e e0       	ldi	r24, 0x0E	; 14
     9aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9ae:	8f ef       	ldi	r24, 0xFF	; 255
     9b0:	29 c0       	rjmp	.+82     	; 0xa04 <__stack+0x1a5>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     9b2:	80 e8       	ldi	r24, 0x80	; 128
     9b4:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     9b8:	81 11       	cpse	r24, r1
     9ba:	21 c0       	rjmp	.+66     	; 0x9fe <__stack+0x19f>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     9bc:	8f e0       	ldi	r24, 0x0F	; 15
     9be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9c2:	8f ef       	ldi	r24, 0xFF	; 255
     9c4:	1f c0       	rjmp	.+62     	; 0xa04 <__stack+0x1a5>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     9c6:	82 e0       	ldi	r24, 0x02	; 2
     9c8:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     9cc:	81 11       	cpse	r24, r1
     9ce:	19 c0       	rjmp	.+50     	; 0xa02 <__stack+0x1a3>
		{
			State = OperationStarted;
     9d0:	8f ef       	ldi	r24, 0xFF	; 255
     9d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			ErrRetVal = OperationSuccess;
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	15 c0       	rjmp	.+42     	; 0xa04 <__stack+0x1a5>
		}
		break;
		default:
		ErrRetVal = OperationFail;
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	13 c0       	rjmp	.+38     	; 0xa04 <__stack+0x1a5>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9de:	8f ef       	ldi	r24, 0xFF	; 255
     9e0:	11 c0       	rjmp	.+34     	; 0xa04 <__stack+0x1a5>
     9e2:	8f ef       	ldi	r24, 0xFF	; 255
     9e4:	0f c0       	rjmp	.+30     	; 0xa04 <__stack+0x1a5>
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	0d c0       	rjmp	.+26     	; 0xa04 <__stack+0x1a5>
     9ea:	8f ef       	ldi	r24, 0xFF	; 255
     9ec:	0b c0       	rjmp	.+22     	; 0xa04 <__stack+0x1a5>
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	09 c0       	rjmp	.+18     	; 0xa04 <__stack+0x1a5>
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	07 c0       	rjmp	.+14     	; 0xa04 <__stack+0x1a5>
     9f6:	8f ef       	ldi	r24, 0xFF	; 255
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <__stack+0x1a5>
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	03 c0       	rjmp	.+6      	; 0xa04 <__stack+0x1a5>
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <__stack+0x1a5>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
		ErrRetVal = OperationFail;
		break;
	}
	#endif
	return ErrRetVal;
}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	bf 90       	pop	r11
     a16:	af 90       	pop	r10
     a18:	9f 90       	pop	r9
     a1a:	8f 90       	pop	r8
     a1c:	08 95       	ret

00000a1e <LCD_SendString>:
ERROR_STATE_t LCD_SendString(const uint8_t* String)
{
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
     a1e:	00 97       	sbiw	r24, 0x00	; 0
     a20:	b9 f0       	breq	.+46     	; 0xa50 <LCD_SendString+0x32>
		if (String[Number] != NULL_TERMINATOR ) {
     a22:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <Number.1790>
     a26:	fc 01       	movw	r30, r24
     a28:	e2 0f       	add	r30, r18
     a2a:	f1 1d       	adc	r31, r1
     a2c:	80 81       	ld	r24, Z
     a2e:	88 23       	and	r24, r24
     a30:	59 f0       	breq	.+22     	; 0xa48 <LCD_SendString+0x2a>
			ErrRetVal = OperationRunning;
			LCD_SendDataRetVal = LCD_SendData(String[Number]);
     a32:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_SendData>
			if(LCD_SendDataRetVal == OperationSuccess)
     a36:	81 11       	cpse	r24, r1
     a38:	0d c0       	rjmp	.+26     	; 0xa54 <LCD_SendString+0x36>
			{
				Number++;
     a3a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <Number.1790>
     a3e:	8f 5f       	subi	r24, 0xFF	; 255
     a40:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <Number.1790>
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	08 95       	ret
				Number++;
			}
		}
		else
		{
			Number = 0;
     a48:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <Number.1790>
			ErrRetVal = OperationSuccess;
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	08 95       	ret
		}
	} else {
		ErrRetVal = OperationFail;
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	08 95       	ret
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     a54:	82 e0       	ldi	r24, 0x02	; 2
		}
	} else {
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     a56:	08 95       	ret

00000a58 <DIO_SetPinDirection>:
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
     a58:	42 30       	cpi	r20, 0x02	; 2
     a5a:	08 f0       	brcs	.+2      	; 0xa5e <DIO_SetPinDirection+0x6>
     a5c:	60 c0       	rjmp	.+192    	; 0xb1e <DIO_SetPinDirection+0xc6>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
     a5e:	68 30       	cpi	r22, 0x08	; 8
     a60:	08 f0       	brcs	.+2      	; 0xa64 <DIO_SetPinDirection+0xc>
     a62:	5f c0       	rjmp	.+190    	; 0xb22 <DIO_SetPinDirection+0xca>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     a64:	81 30       	cpi	r24, 0x01	; 1
     a66:	e1 f0       	breq	.+56     	; 0xaa0 <DIO_SetPinDirection+0x48>
     a68:	30 f0       	brcs	.+12     	; 0xa76 <DIO_SetPinDirection+0x1e>
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	71 f1       	breq	.+92     	; 0xaca <DIO_SetPinDirection+0x72>
     a6e:	83 30       	cpi	r24, 0x03	; 3
     a70:	09 f4       	brne	.+2      	; 0xa74 <DIO_SetPinDirection+0x1c>
     a72:	40 c0       	rjmp	.+128    	; 0xaf4 <DIO_SetPinDirection+0x9c>
     a74:	58 c0       	rjmp	.+176    	; 0xb26 <DIO_SetPinDirection+0xce>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
     a76:	2a b3       	in	r18, 0x1a	; 26
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	06 2e       	mov	r0, r22
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <DIO_SetPinDirection+0x2c>
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	0a 94       	dec	r0
     a86:	e2 f7       	brpl	.-8      	; 0xa80 <DIO_SetPinDirection+0x28>
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <DIO_SetPinDirection+0x38>
     a8c:	44 0f       	add	r20, r20
     a8e:	55 1f       	adc	r21, r21
     a90:	6a 95       	dec	r22
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <DIO_SetPinDirection+0x34>
     a94:	80 95       	com	r24
     a96:	82 23       	and	r24, r18
     a98:	48 2b       	or	r20, r24
     a9a:	4a bb       	out	0x1a, r20	; 26
				u8_ErrorState=ERROR_OK;
     a9c:	80 e0       	ldi	r24, 0x00	; 0
				break;
     a9e:	08 95       	ret
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
     aa0:	27 b3       	in	r18, 0x17	; 23
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	06 2e       	mov	r0, r22
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <DIO_SetPinDirection+0x56>
     aaa:	88 0f       	add	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	0a 94       	dec	r0
     ab0:	e2 f7       	brpl	.-8      	; 0xaaa <DIO_SetPinDirection+0x52>
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <DIO_SetPinDirection+0x62>
     ab6:	44 0f       	add	r20, r20
     ab8:	55 1f       	adc	r21, r21
     aba:	6a 95       	dec	r22
     abc:	e2 f7       	brpl	.-8      	; 0xab6 <DIO_SetPinDirection+0x5e>
     abe:	80 95       	com	r24
     ac0:	82 23       	and	r24, r18
     ac2:	48 2b       	or	r20, r24
     ac4:	47 bb       	out	0x17, r20	; 23
				u8_ErrorState=ERROR_OK;
     ac6:	80 e0       	ldi	r24, 0x00	; 0
				break;
     ac8:	08 95       	ret
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
     aca:	24 b3       	in	r18, 0x14	; 20
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	06 2e       	mov	r0, r22
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <DIO_SetPinDirection+0x80>
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	0a 94       	dec	r0
     ada:	e2 f7       	brpl	.-8      	; 0xad4 <DIO_SetPinDirection+0x7c>
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <DIO_SetPinDirection+0x8c>
     ae0:	44 0f       	add	r20, r20
     ae2:	55 1f       	adc	r21, r21
     ae4:	6a 95       	dec	r22
     ae6:	e2 f7       	brpl	.-8      	; 0xae0 <DIO_SetPinDirection+0x88>
     ae8:	80 95       	com	r24
     aea:	82 23       	and	r24, r18
     aec:	48 2b       	or	r20, r24
     aee:	44 bb       	out	0x14, r20	; 20
				u8_ErrorState=ERROR_OK;
     af0:	80 e0       	ldi	r24, 0x00	; 0
				break;
     af2:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
     af4:	21 b3       	in	r18, 0x11	; 17
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	06 2e       	mov	r0, r22
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <DIO_SetPinDirection+0xaa>
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	0a 94       	dec	r0
     b04:	e2 f7       	brpl	.-8      	; 0xafe <DIO_SetPinDirection+0xa6>
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <DIO_SetPinDirection+0xb6>
     b0a:	44 0f       	add	r20, r20
     b0c:	55 1f       	adc	r21, r21
     b0e:	6a 95       	dec	r22
     b10:	e2 f7       	brpl	.-8      	; 0xb0a <DIO_SetPinDirection+0xb2>
     b12:	80 95       	com	r24
     b14:	82 23       	and	r24, r18
     b16:	48 2b       	or	r20, r24
     b18:	41 bb       	out	0x11, r20	; 17
				u8_ErrorState=ERROR_OK;
     b1a:	80 e0       	ldi	r24, 0x00	; 0
				break;
     b1c:	08 95       	ret
ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
	{
		u8_ErrorState=ERROR_NOK;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
     b26:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}		
	}
	return u8_ErrorState;
}
     b28:	08 95       	ret

00000b2a <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
     b2a:	42 30       	cpi	r20, 0x02	; 2
     b2c:	08 f0       	brcs	.+2      	; 0xb30 <DIO_WritePin+0x6>
     b2e:	60 c0       	rjmp	.+192    	; 0xbf0 <DIO_WritePin+0xc6>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
     b30:	68 30       	cpi	r22, 0x08	; 8
     b32:	08 f0       	brcs	.+2      	; 0xb36 <DIO_WritePin+0xc>
     b34:	5f c0       	rjmp	.+190    	; 0xbf4 <DIO_WritePin+0xca>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	e1 f0       	breq	.+56     	; 0xb72 <DIO_WritePin+0x48>
     b3a:	30 f0       	brcs	.+12     	; 0xb48 <DIO_WritePin+0x1e>
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	71 f1       	breq	.+92     	; 0xb9c <DIO_WritePin+0x72>
     b40:	83 30       	cpi	r24, 0x03	; 3
     b42:	09 f4       	brne	.+2      	; 0xb46 <DIO_WritePin+0x1c>
     b44:	40 c0       	rjmp	.+128    	; 0xbc6 <DIO_WritePin+0x9c>
     b46:	58 c0       	rjmp	.+176    	; 0xbf8 <DIO_WritePin+0xce>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
     b48:	2b b3       	in	r18, 0x1b	; 27
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	06 2e       	mov	r0, r22
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <DIO_WritePin+0x2c>
     b52:	88 0f       	add	r24, r24
     b54:	99 1f       	adc	r25, r25
     b56:	0a 94       	dec	r0
     b58:	e2 f7       	brpl	.-8      	; 0xb52 <DIO_WritePin+0x28>
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <DIO_WritePin+0x38>
     b5e:	44 0f       	add	r20, r20
     b60:	55 1f       	adc	r21, r21
     b62:	6a 95       	dec	r22
     b64:	e2 f7       	brpl	.-8      	; 0xb5e <DIO_WritePin+0x34>
     b66:	80 95       	com	r24
     b68:	82 23       	and	r24, r18
     b6a:	48 2b       	or	r20, r24
     b6c:	4b bb       	out	0x1b, r20	; 27
				u8_ErrorState=ERROR_OK;
     b6e:	80 e0       	ldi	r24, 0x00	; 0
				break;
     b70:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
     b72:	28 b3       	in	r18, 0x18	; 24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	06 2e       	mov	r0, r22
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <DIO_WritePin+0x56>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	0a 94       	dec	r0
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <DIO_WritePin+0x52>
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <DIO_WritePin+0x62>
     b88:	44 0f       	add	r20, r20
     b8a:	55 1f       	adc	r21, r21
     b8c:	6a 95       	dec	r22
     b8e:	e2 f7       	brpl	.-8      	; 0xb88 <DIO_WritePin+0x5e>
     b90:	80 95       	com	r24
     b92:	82 23       	and	r24, r18
     b94:	48 2b       	or	r20, r24
     b96:	48 bb       	out	0x18, r20	; 24
				u8_ErrorState=ERROR_OK;
     b98:	80 e0       	ldi	r24, 0x00	; 0
				break;
     b9a:	08 95       	ret
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
     b9c:	25 b3       	in	r18, 0x15	; 21
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	06 2e       	mov	r0, r22
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <DIO_WritePin+0x80>
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	0a 94       	dec	r0
     bac:	e2 f7       	brpl	.-8      	; 0xba6 <DIO_WritePin+0x7c>
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <DIO_WritePin+0x8c>
     bb2:	44 0f       	add	r20, r20
     bb4:	55 1f       	adc	r21, r21
     bb6:	6a 95       	dec	r22
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <DIO_WritePin+0x88>
     bba:	80 95       	com	r24
     bbc:	82 23       	and	r24, r18
     bbe:	48 2b       	or	r20, r24
     bc0:	45 bb       	out	0x15, r20	; 21
				u8_ErrorState=ERROR_OK;
     bc2:	80 e0       	ldi	r24, 0x00	; 0
				break;
     bc4:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
     bc6:	22 b3       	in	r18, 0x12	; 18
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	06 2e       	mov	r0, r22
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <DIO_WritePin+0xaa>
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	0a 94       	dec	r0
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <DIO_WritePin+0xa6>
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <DIO_WritePin+0xb6>
     bdc:	44 0f       	add	r20, r20
     bde:	55 1f       	adc	r21, r21
     be0:	6a 95       	dec	r22
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <DIO_WritePin+0xb2>
     be4:	80 95       	com	r24
     be6:	82 23       	and	r24, r18
     be8:	48 2b       	or	r20, r24
     bea:	42 bb       	out	0x12, r20	; 18
				u8_ErrorState=ERROR_OK;
     bec:	80 e0       	ldi	r24, 0x00	; 0
				break;
     bee:	08 95       	ret
ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
	{
		u8_ErrorState=ERROR_NOK;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
     bfa:	08 95       	ret

00000bfc <GetFreqPrescaleRatio>:
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <GetFreqPrescaleRatio+0x6>
     c00:	4e c0       	rjmp	.+156    	; 0xc9e <GetFreqPrescaleRatio+0xa2>
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	fc 01       	movw	r30, r24
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	8e 0f       	add	r24, r30
     c0c:	9f 1f       	adc	r25, r31
     c0e:	fc 01       	movw	r30, r24
     c10:	e8 58       	subi	r30, 0x88	; 136
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	82 81       	ldd	r24, Z+2	; 0x02
     c16:	83 30       	cpi	r24, 0x03	; 3
     c18:	09 f1       	breq	.+66     	; 0xc5c <GetFreqPrescaleRatio+0x60>
     c1a:	28 f4       	brcc	.+10     	; 0xc26 <GetFreqPrescaleRatio+0x2a>
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	41 f0       	breq	.+16     	; 0xc30 <GetFreqPrescaleRatio+0x34>
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	89 f0       	breq	.+34     	; 0xc46 <GetFreqPrescaleRatio+0x4a>
     c24:	a2 c0       	rjmp	.+324    	; 0xd6a <GetFreqPrescaleRatio+0x16e>
     c26:	84 30       	cpi	r24, 0x04	; 4
     c28:	21 f1       	breq	.+72     	; 0xc72 <GetFreqPrescaleRatio+0x76>
     c2a:	85 30       	cpi	r24, 0x05	; 5
     c2c:	69 f1       	breq	.+90     	; 0xc88 <GetFreqPrescaleRatio+0x8c>
     c2e:	9d c0       	rjmp	.+314    	; 0xd6a <GetFreqPrescaleRatio+0x16e>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e8       	ldi	r26, 0x80	; 128
     c36:	bd e3       	ldi	r27, 0x3D	; 61
     c38:	fb 01       	movw	r30, r22
     c3a:	80 83       	st	Z, r24
     c3c:	91 83       	std	Z+1, r25	; 0x01
     c3e:	a2 83       	std	Z+2, r26	; 0x02
     c40:	b3 83       	std	Z+3, r27	; 0x03
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	08 95       	ret
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	bf e3       	ldi	r27, 0x3F	; 63
     c4e:	fb 01       	movw	r30, r22
     c50:	80 83       	st	Z, r24
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	a2 83       	std	Z+2, r26	; 0x02
     c56:	b3 83       	std	Z+3, r27	; 0x03
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	08 95       	ret
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a0 e8       	ldi	r26, 0x80	; 128
     c62:	b0 e4       	ldi	r27, 0x40	; 64
     c64:	fb 01       	movw	r30, r22
     c66:	80 83       	st	Z, r24
     c68:	91 83       	std	Z+1, r25	; 0x01
     c6a:	a2 83       	std	Z+2, r26	; 0x02
     c6c:	b3 83       	std	Z+3, r27	; 0x03
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	08 95       	ret
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	a0 e8       	ldi	r26, 0x80	; 128
     c78:	b1 e4       	ldi	r27, 0x41	; 65
     c7a:	fb 01       	movw	r30, r22
     c7c:	80 83       	st	Z, r24
     c7e:	91 83       	std	Z+1, r25	; 0x01
     c80:	a2 83       	std	Z+2, r26	; 0x02
     c82:	b3 83       	std	Z+3, r27	; 0x03
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	08 95       	ret
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e8       	ldi	r26, 0x80	; 128
     c8e:	b2 e4       	ldi	r27, 0x42	; 66
     c90:	fb 01       	movw	r30, r22
     c92:	80 83       	st	Z, r24
     c94:	91 83       	std	Z+1, r25	; 0x01
     c96:	a2 83       	std	Z+2, r26	; 0x02
     c98:	b3 83       	std	Z+3, r27	; 0x03
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	08 95       	ret
     c9e:	82 30       	cpi	r24, 0x02	; 2
     ca0:	09 f0       	breq	.+2      	; 0xca4 <GetFreqPrescaleRatio+0xa8>
     ca2:	65 c0       	rjmp	.+202    	; 0xd6e <GetFreqPrescaleRatio+0x172>
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	fc 01       	movw	r30, r24
     ca8:	ee 0f       	add	r30, r30
     caa:	ff 1f       	adc	r31, r31
     cac:	8e 0f       	add	r24, r30
     cae:	9f 1f       	adc	r25, r31
     cb0:	fc 01       	movw	r30, r24
     cb2:	e8 58       	subi	r30, 0x88	; 136
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	e2 81       	ldd	r30, Z+2	; 0x02
     cb8:	8e 2f       	mov	r24, r30
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	fc 01       	movw	r30, r24
     cbe:	31 97       	sbiw	r30, 0x01	; 1
     cc0:	e7 30       	cpi	r30, 0x07	; 7
     cc2:	f1 05       	cpc	r31, r1
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <GetFreqPrescaleRatio+0xcc>
     cc6:	55 c0       	rjmp	.+170    	; 0xd72 <GetFreqPrescaleRatio+0x176>
     cc8:	e6 5d       	subi	r30, 0xD6	; 214
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__tablejump2__>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	a0 e8       	ldi	r26, 0x80	; 128
     cd6:	bd e3       	ldi	r27, 0x3D	; 61
     cd8:	fb 01       	movw	r30, r22
     cda:	80 83       	st	Z, r24
     cdc:	91 83       	std	Z+1, r25	; 0x01
     cde:	a2 83       	std	Z+2, r26	; 0x02
     ce0:	b3 83       	std	Z+3, r27	; 0x03
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	08 95       	ret
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	bf e3       	ldi	r27, 0x3F	; 63
     cee:	fb 01       	movw	r30, r22
     cf0:	80 83       	st	Z, r24
     cf2:	91 83       	std	Z+1, r25	; 0x01
     cf4:	a2 83       	std	Z+2, r26	; 0x02
     cf6:	b3 83       	std	Z+3, r27	; 0x03
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	08 95       	ret
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	a0 e0       	ldi	r26, 0x00	; 0
     d02:	b0 e4       	ldi	r27, 0x40	; 64
     d04:	fb 01       	movw	r30, r22
     d06:	80 83       	st	Z, r24
     d08:	91 83       	std	Z+1, r25	; 0x01
     d0a:	a2 83       	std	Z+2, r26	; 0x02
     d0c:	b3 83       	std	Z+3, r27	; 0x03
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	08 95       	ret
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	a0 e8       	ldi	r26, 0x80	; 128
     d18:	b0 e4       	ldi	r27, 0x40	; 64
     d1a:	fb 01       	movw	r30, r22
     d1c:	80 83       	st	Z, r24
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	a2 83       	std	Z+2, r26	; 0x02
     d22:	b3 83       	std	Z+3, r27	; 0x03
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	08 95       	ret
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 e0       	ldi	r26, 0x00	; 0
     d2e:	b1 e4       	ldi	r27, 0x41	; 65
     d30:	fb 01       	movw	r30, r22
     d32:	80 83       	st	Z, r24
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	a2 83       	std	Z+2, r26	; 0x02
     d38:	b3 83       	std	Z+3, r27	; 0x03
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	08 95       	ret
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	a0 e8       	ldi	r26, 0x80	; 128
     d44:	b1 e4       	ldi	r27, 0x41	; 65
     d46:	fb 01       	movw	r30, r22
     d48:	80 83       	st	Z, r24
     d4a:	91 83       	std	Z+1, r25	; 0x01
     d4c:	a2 83       	std	Z+2, r26	; 0x02
     d4e:	b3 83       	std	Z+3, r27	; 0x03
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	08 95       	ret
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a0 e8       	ldi	r26, 0x80	; 128
     d5a:	b2 e4       	ldi	r27, 0x42	; 66
     d5c:	fb 01       	movw	r30, r22
     d5e:	80 83       	st	Z, r24
     d60:	91 83       	std	Z+1, r25	; 0x01
     d62:	a2 83       	std	Z+2, r26	; 0x02
     d64:	b3 83       	std	Z+3, r27	; 0x03
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	08 95       	ret
     d6a:	8c ef       	ldi	r24, 0xFC	; 252
     d6c:	08 95       	ret
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	08 95       	ret
     d72:	8c ef       	ldi	r24, 0xFC	; 252
     d74:	08 95       	ret

00000d76 <TIM_Init>:
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	b1 f0       	breq	.+44     	; 0xda6 <TIM_Init+0x30>
     d7a:	18 f0       	brcs	.+6      	; 0xd82 <TIM_Init+0xc>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	71 f1       	breq	.+92     	; 0xddc <TIM_Init+0x66>
     d80:	44 c0       	rjmp	.+136    	; 0xe0a <TIM_Init+0x94>
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	fc 01       	movw	r30, r24
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	8e 0f       	add	r24, r30
     d8c:	9f 1f       	adc	r25, r31
     d8e:	fc 01       	movw	r30, r24
     d90:	e8 58       	subi	r30, 0x88	; 136
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	80 81       	ld	r24, Z
     d96:	83 bf       	out	0x33, r24	; 51
     d98:	89 b7       	in	r24, 0x39	; 57
     d9a:	8c 7f       	andi	r24, 0xFC	; 252
     d9c:	91 81       	ldd	r25, Z+1	; 0x01
     d9e:	89 2b       	or	r24, r25
     da0:	89 bf       	out	0x39, r24	; 57
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	08 95       	ret
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	fc 01       	movw	r30, r24
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	8e 0f       	add	r24, r30
     db0:	9f 1f       	adc	r25, r31
     db2:	fc 01       	movw	r30, r24
     db4:	e8 58       	subi	r30, 0x88	; 136
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	80 81       	ld	r24, Z
     dba:	8e bd       	out	0x2e, r24	; 46
     dbc:	89 b7       	in	r24, 0x39	; 57
     dbe:	28 2f       	mov	r18, r24
     dc0:	27 7e       	andi	r18, 0xE7	; 231
     dc2:	91 81       	ldd	r25, Z+1	; 0x01
     dc4:	89 2f       	mov	r24, r25
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	82 2b       	or	r24, r18
     dd6:	89 bf       	out	0x39, r24	; 57
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	08 95       	ret
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	fc 01       	movw	r30, r24
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	8e 0f       	add	r24, r30
     de6:	9f 1f       	adc	r25, r31
     de8:	fc 01       	movw	r30, r24
     dea:	e8 58       	subi	r30, 0x88	; 136
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	80 81       	ld	r24, Z
     df0:	85 bd       	out	0x25, r24	; 37
     df2:	89 b7       	in	r24, 0x39	; 57
     df4:	28 2f       	mov	r18, r24
     df6:	2f 73       	andi	r18, 0x3F	; 63
     df8:	91 81       	ldd	r25, Z+1	; 0x01
     dfa:	30 e4       	ldi	r19, 0x40	; 64
     dfc:	93 9f       	mul	r25, r19
     dfe:	c0 01       	movw	r24, r0
     e00:	11 24       	eor	r1, r1
     e02:	82 2b       	or	r24, r18
     e04:	89 bf       	out	0x39, r24	; 57
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	08 95       	ret
     e0a:	8e ef       	ldi	r24, 0xFE	; 254
     e0c:	08 95       	ret

00000e0e <TIM_Start>:
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	71 f0       	breq	.+28     	; 0xe2e <TIM_Start+0x20>
     e12:	18 f0       	brcs	.+6      	; 0xe1a <TIM_Start+0xc>
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	31 f0       	breq	.+12     	; 0xe24 <TIM_Start+0x16>
     e18:	1f c0       	rjmp	.+62     	; 0xe58 <TIM_Start+0x4a>
     e1a:	e2 e5       	ldi	r30, 0x52	; 82
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	a3 e5       	ldi	r26, 0x53	; 83
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <TIM_Start+0x28>
     e24:	e4 e4       	ldi	r30, 0x44	; 68
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	a5 e4       	ldi	r26, 0x45	; 69
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <TIM_Start+0x28>
     e2e:	ec e4       	ldi	r30, 0x4C	; 76
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	ae e4       	ldi	r26, 0x4E	; 78
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	71 83       	std	Z+1, r23	; 0x01
     e38:	60 83       	st	Z, r22
     e3a:	2c 91       	ld	r18, X
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	fc 01       	movw	r30, r24
     e40:	ee 0f       	add	r30, r30
     e42:	ff 1f       	adc	r31, r31
     e44:	8e 0f       	add	r24, r30
     e46:	9f 1f       	adc	r25, r31
     e48:	fc 01       	movw	r30, r24
     e4a:	e8 58       	subi	r30, 0x88	; 136
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	82 81       	ldd	r24, Z+2	; 0x02
     e50:	82 2b       	or	r24, r18
     e52:	8c 93       	st	X, r24
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	08 95       	ret
     e58:	8e ef       	ldi	r24, 0xFE	; 254
     e5a:	08 95       	ret

00000e5c <TIM_GetStatus>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
     e5c:	61 15       	cp	r22, r1
     e5e:	71 05       	cpc	r23, r1
     e60:	09 f4       	brne	.+2      	; 0xe64 <TIM_GetStatus+0x8>
     e62:	7a c0       	rjmp	.+244    	; 0xf58 <TIM_GetStatus+0xfc>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	41 f1       	breq	.+80     	; 0xeb8 <TIM_GetStatus+0x5c>
     e68:	20 f0       	brcs	.+8      	; 0xe72 <TIM_GetStatus+0x16>
     e6a:	82 30       	cpi	r24, 0x02	; 2
     e6c:	09 f4       	brne	.+2      	; 0xe70 <TIM_GetStatus+0x14>
     e6e:	52 c0       	rjmp	.+164    	; 0xf14 <TIM_GetStatus+0xb8>
     e70:	75 c0       	rjmp	.+234    	; 0xf5c <TIM_GetStatus+0x100>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	fc 01       	movw	r30, r24
     e76:	ee 0f       	add	r30, r30
     e78:	ff 1f       	adc	r31, r31
     e7a:	8e 0f       	add	r24, r30
     e7c:	9f 1f       	adc	r25, r31
     e7e:	fc 01       	movw	r30, r24
     e80:	e8 58       	subi	r30, 0x88	; 136
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	80 81       	ld	r24, Z
     e86:	81 11       	cpse	r24, r1
     e88:	09 c0       	rjmp	.+18     	; 0xe9c <TIM_GetStatus+0x40>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
     e8a:	08 b6       	in	r0, 0x38	; 56
     e8c:	00 fe       	sbrs	r0, 0
     e8e:	68 c0       	rjmp	.+208    	; 0xf60 <TIM_GetStatus+0x104>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
     e90:	fb 01       	movw	r30, r22
     e92:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
     e94:	98 b7       	in	r25, 0x38	; 56
     e96:	91 60       	ori	r25, 0x01	; 1
     e98:	98 bf       	out	0x38, r25	; 56
     e9a:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
     e9c:	88 30       	cpi	r24, 0x08	; 8
     e9e:	09 f0       	breq	.+2      	; 0xea2 <TIM_GetStatus+0x46>
     ea0:	61 c0       	rjmp	.+194    	; 0xf64 <TIM_GetStatus+0x108>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
     ea2:	08 b6       	in	r0, 0x38	; 56
     ea4:	01 fe       	sbrs	r0, 1
     ea6:	60 c0       	rjmp	.+192    	; 0xf68 <TIM_GetStatus+0x10c>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	fb 01       	movw	r30, r22
     eac:	80 83       	st	Z, r24
               TIFR |= TIMER_0_COMPARE_FLAG;
     eae:	88 b7       	in	r24, 0x38	; 56
     eb0:	82 60       	ori	r24, 0x02	; 2
     eb2:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	fc 01       	movw	r30, r24
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	8e 0f       	add	r24, r30
     ec2:	9f 1f       	adc	r25, r31
     ec4:	fc 01       	movw	r30, r24
     ec6:	e8 58       	subi	r30, 0x88	; 136
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	80 81       	ld	r24, Z
     ecc:	81 11       	cpse	r24, r1
     ece:	09 c0       	rjmp	.+18     	; 0xee2 <TIM_GetStatus+0x86>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
     ed0:	08 b6       	in	r0, 0x38	; 56
     ed2:	02 fe       	sbrs	r0, 2
     ed4:	4b c0       	rjmp	.+150    	; 0xf6c <TIM_GetStatus+0x110>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
     ed6:	fb 01       	movw	r30, r22
     ed8:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
     eda:	98 b7       	in	r25, 0x38	; 56
     edc:	94 60       	ori	r25, 0x04	; 4
     ede:	98 bf       	out	0x38, r25	; 56
     ee0:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
     ee2:	88 30       	cpi	r24, 0x08	; 8
     ee4:	09 f0       	breq	.+2      	; 0xee8 <TIM_GetStatus+0x8c>
     ee6:	44 c0       	rjmp	.+136    	; 0xf70 <TIM_GetStatus+0x114>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
     ee8:	98 b7       	in	r25, 0x38	; 56
     eea:	89 2f       	mov	r24, r25
     eec:	80 71       	andi	r24, 0x10	; 16
     eee:	94 ff       	sbrs	r25, 4
     ef0:	08 c0       	rjmp	.+16     	; 0xf02 <TIM_GetStatus+0xa6>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	fb 01       	movw	r30, r22
     ef6:	80 83       	st	Z, r24
               TIFR |= TIMER_1A_COMPARE_FLAG;
     ef8:	88 b7       	in	r24, 0x38	; 56
     efa:	80 61       	ori	r24, 0x10	; 16
     efc:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	08 95       	ret
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
     f02:	93 ff       	sbrs	r25, 3
     f04:	37 c0       	rjmp	.+110    	; 0xf74 <TIM_GetStatus+0x118>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	fb 01       	movw	r30, r22
     f0a:	90 83       	st	Z, r25
               TIFR |= TIMER_1B_COMPARE_FLAG;
     f0c:	98 b7       	in	r25, 0x38	; 56
     f0e:	98 60       	ori	r25, 0x08	; 8
     f10:	98 bf       	out	0x38, r25	; 56
     f12:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	fc 01       	movw	r30, r24
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	8e 0f       	add	r24, r30
     f1e:	9f 1f       	adc	r25, r31
     f20:	fc 01       	movw	r30, r24
     f22:	e8 58       	subi	r30, 0x88	; 136
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	80 81       	ld	r24, Z
     f28:	81 11       	cpse	r24, r1
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <TIM_GetStatus+0xe2>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
     f2c:	08 b6       	in	r0, 0x38	; 56
     f2e:	06 fe       	sbrs	r0, 6
     f30:	23 c0       	rjmp	.+70     	; 0xf78 <TIM_GetStatus+0x11c>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
     f32:	fb 01       	movw	r30, r22
     f34:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
     f36:	98 b7       	in	r25, 0x38	; 56
     f38:	90 64       	ori	r25, 0x40	; 64
     f3a:	98 bf       	out	0x38, r25	; 56
     f3c:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
     f3e:	88 30       	cpi	r24, 0x08	; 8
     f40:	e9 f4       	brne	.+58     	; 0xf7c <TIM_GetStatus+0x120>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
     f42:	08 b6       	in	r0, 0x38	; 56
     f44:	07 fe       	sbrs	r0, 7
     f46:	1c c0       	rjmp	.+56     	; 0xf80 <TIM_GetStatus+0x124>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	fb 01       	movw	r30, r22
     f4c:	80 83       	st	Z, r24
               TIFR |= TIMER_2_COMPARE_FLAG;
     f4e:	88 b7       	in	r24, 0x38	; 56
     f50:	80 68       	ori	r24, 0x80	; 128
     f52:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	08 95       	ret
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
     f58:	8f ef       	ldi	r24, 0xFF	; 255
     f5a:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
     f5c:	8e ef       	ldi	r24, 0xFE	; 254
     f5e:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
     f60:	8d ef       	ldi	r24, 0xFD	; 253
     f62:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
     f68:	8d ef       	ldi	r24, 0xFD	; 253
     f6a:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
     f6c:	8d ef       	ldi	r24, 0xFD	; 253
     f6e:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
     f74:	8d ef       	ldi	r24, 0xFD	; 253
     f76:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
     f78:	8d ef       	ldi	r24, 0xFD	; 253
     f7a:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
     f80:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
}
     f82:	08 95       	ret

00000f84 <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
     f84:	8f 92       	push	r8
     f86:	9f 92       	push	r9
     f88:	af 92       	push	r10
     f8a:	bf 92       	push	r11
     f8c:	cf 92       	push	r12
     f8e:	df 92       	push	r13
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <TIM_DelayUs+0x18>
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <TIM_DelayUs+0x1a>
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	18 2f       	mov	r17, r24
     fa4:	6a 01       	movw	r12, r20
     fa6:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
     fa8:	83 30       	cpi	r24, 0x03	; 3
     faa:	08 f0       	brcs	.+2      	; 0xfae <TIM_DelayUs+0x2a>
     fac:	54 c0       	rjmp	.+168    	; 0x1056 <TIM_DelayUs+0xd2>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
     fae:	21 15       	cp	r18, r1
     fb0:	31 05       	cpc	r19, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <TIM_DelayUs+0x32>
     fb4:	52 c0       	rjmp	.+164    	; 0x105a <TIM_DelayUs+0xd6>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
     fb6:	30 93 c2 00 	sts	0x00C2, r19	; 0x8000c2 <gptr_CallerFunc+0x1>
     fba:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <gptr_CallerFunc>
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
     fbe:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <gEnu_State>
     fc2:	81 11       	cpse	r24, r1
     fc4:	4c c0       	rjmp	.+152    	; 0x105e <TIM_DelayUs+0xda>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
     fc6:	be 01       	movw	r22, r28
     fc8:	6f 5f       	subi	r22, 0xFF	; 255
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	81 2f       	mov	r24, r17
     fce:	0e 94 fe 05 	call	0xbfc	; 0xbfc <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
     fd2:	8c 3f       	cpi	r24, 0xFC	; 252
     fd4:	f1 f1       	breq	.+124    	; 0x1052 <TIM_DelayUs+0xce>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
     fd6:	89 80       	ldd	r8, Y+1	; 0x01
     fd8:	9a 80       	ldd	r9, Y+2	; 0x02
     fda:	ab 80       	ldd	r10, Y+3	; 0x03
     fdc:	bc 80       	ldd	r11, Y+4	; 0x04
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	a9 01       	movw	r20, r18
     fe4:	c5 01       	movw	r24, r10
     fe6:	b4 01       	movw	r22, r8
     fe8:	0e 94 be 09 	call	0x137c	; 0x137c <__cmpsf2>
     fec:	88 23       	and	r24, r24
     fee:	61 f0       	breq	.+24     	; 0x1008 <TIM_DelayUs+0x84>
      {
         TIM_Delay /= f32_FreqRatio;
     ff0:	c7 01       	movw	r24, r14
     ff2:	b6 01       	movw	r22, r12
     ff4:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__floatunsisf>
     ff8:	a5 01       	movw	r20, r10
     ffa:	94 01       	movw	r18, r8
     ffc:	0e 94 c3 09 	call	0x1386	; 0x1386 <__divsf3>
    1000:	0e 94 35 0a 	call	0x146a	; 0x146a <__fixunssfsi>
    1004:	6b 01       	movw	r12, r22
    1006:	7c 01       	movw	r14, r24
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    1008:	bb 27       	eor	r27, r27
    100a:	af 2d       	mov	r26, r15
    100c:	9e 2d       	mov	r25, r14
    100e:	8d 2d       	mov	r24, r13
    1010:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <gu32_Overflows>
    1014:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <gu32_Overflows+0x1>
    1018:	a0 93 c8 00 	sts	0x00C8, r26	; 0x8000c8 <gu32_Overflows+0x2>
    101c:	b0 93 c9 00 	sts	0x00C9, r27	; 0x8000c9 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    1020:	c0 92 c4 00 	sts	0x00C4, r12	; 0x8000c4 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    1024:	89 2b       	or	r24, r25
    1026:	8a 2b       	or	r24, r26
    1028:	8b 2b       	or	r24, r27
    102a:	49 f4       	brne	.+18     	; 0x103e <TIM_DelayUs+0xba>
      {
         gu8_OverflowsComplete = HIGH;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    1032:	6c 2d       	mov	r22, r12
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	81 2f       	mov	r24, r17
    1038:	0e 94 07 07 	call	0xe0e	; 0xe0e <TIM_Start>
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <TIM_DelayUs+0xc4>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    103e:	6f ef       	ldi	r22, 0xFF	; 255
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	81 2f       	mov	r24, r17
    1044:	0e 94 07 07 	call	0xe0e	; 0xe0e <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <gEnu_State>
      return TIMER_E_PENDING;
    104e:	8d ef       	ldi	r24, 0xFD	; 253
    1050:	07 c0       	rjmp	.+14     	; 0x1060 <TIM_DelayUs+0xdc>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1052:	8c ef       	ldi	r24, 0xFC	; 252
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <TIM_DelayUs+0xdc>
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    1056:	8e ef       	ldi	r24, 0xFE	; 254
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <TIM_DelayUs+0xdc>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <TIM_DelayUs+0xdc>
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
    105e:	81 e0       	ldi	r24, 0x01	; 1
}
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	bf 90       	pop	r11
    1078:	af 90       	pop	r10
    107a:	9f 90       	pop	r9
    107c:	8f 90       	pop	r8
    107e:	08 95       	ret

00001080 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1080:	8f 92       	push	r8
    1082:	9f 92       	push	r9
    1084:	af 92       	push	r10
    1086:	bf 92       	push	r11
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	00 d0       	rcall	.+0      	; 0x1098 <TIM_DelayMs+0x18>
    1098:	00 d0       	rcall	.+0      	; 0x109a <TIM_DelayMs+0x1a>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	18 2f       	mov	r17, r24
    10a0:	04 2f       	mov	r16, r20
    10a2:	d5 2e       	mov	r13, r21
    10a4:	e6 2e       	mov	r14, r22
    10a6:	f7 2e       	mov	r15, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    10a8:	83 30       	cpi	r24, 0x03	; 3
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <TIM_DelayMs+0x2e>
    10ac:	65 c0       	rjmp	.+202    	; 0x1178 <TIM_DelayMs+0xf8>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    10ae:	21 15       	cp	r18, r1
    10b0:	31 05       	cpc	r19, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <TIM_DelayMs+0x36>
    10b4:	63 c0       	rjmp	.+198    	; 0x117c <TIM_DelayMs+0xfc>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    10b6:	30 93 c2 00 	sts	0x00C2, r19	; 0x8000c2 <gptr_CallerFunc+0x1>
    10ba:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <gptr_CallerFunc>
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    10be:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <gEnu_State>
    10c2:	81 11       	cpse	r24, r1
    10c4:	5d c0       	rjmp	.+186    	; 0x1180 <TIM_DelayMs+0x100>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    10c6:	be 01       	movw	r22, r28
    10c8:	6f 5f       	subi	r22, 0xFF	; 255
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	81 2f       	mov	r24, r17
    10ce:	0e 94 fe 05 	call	0xbfc	; 0xbfc <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    10d2:	8c 3f       	cpi	r24, 0xFC	; 252
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <TIM_DelayMs+0x58>
    10d6:	4e c0       	rjmp	.+156    	; 0x1174 <TIM_DelayMs+0xf4>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    10d8:	89 80       	ldd	r8, Y+1	; 0x01
    10da:	9a 80       	ldd	r9, Y+2	; 0x02
    10dc:	ab 80       	ldd	r10, Y+3	; 0x03
    10de:	bc 80       	ldd	r11, Y+4	; 0x04
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	a9 01       	movw	r20, r18
    10e6:	c5 01       	movw	r24, r10
    10e8:	b4 01       	movw	r22, r8
    10ea:	0e 94 be 09 	call	0x137c	; 0x137c <__cmpsf2>
    10ee:	88 23       	and	r24, r24
    10f0:	81 f0       	breq	.+32     	; 0x1112 <TIM_DelayMs+0x92>
      {
         TIM_Delay /= f32_FreqRatio;
    10f2:	60 2f       	mov	r22, r16
    10f4:	7d 2d       	mov	r23, r13
    10f6:	8e 2d       	mov	r24, r14
    10f8:	9f 2d       	mov	r25, r15
    10fa:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__floatunsisf>
    10fe:	a5 01       	movw	r20, r10
    1100:	94 01       	movw	r18, r8
    1102:	0e 94 c3 09 	call	0x1386	; 0x1386 <__divsf3>
    1106:	0e 94 35 0a 	call	0x146a	; 0x146a <__fixunssfsi>
    110a:	06 2f       	mov	r16, r22
    110c:	d7 2e       	mov	r13, r23
    110e:	e8 2e       	mov	r14, r24
    1110:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    1112:	a8 ee       	ldi	r26, 0xE8	; 232
    1114:	b3 e0       	ldi	r27, 0x03	; 3
    1116:	20 2f       	mov	r18, r16
    1118:	3d 2d       	mov	r19, r13
    111a:	4e 2d       	mov	r20, r14
    111c:	5f 2d       	mov	r21, r15
    111e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__muluhisi3>
    1122:	bb 27       	eor	r27, r27
    1124:	a9 2f       	mov	r26, r25
    1126:	98 2f       	mov	r25, r24
    1128:	87 2f       	mov	r24, r23
    112a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <gu32_Overflows>
    112e:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <gu32_Overflows+0x1>
    1132:	a0 93 c8 00 	sts	0x00C8, r26	; 0x8000c8 <gu32_Overflows+0x2>
    1136:	b0 93 c9 00 	sts	0x00C9, r27	; 0x8000c9 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    113a:	28 ee       	ldi	r18, 0xE8	; 232
    113c:	02 9f       	mul	r16, r18
    113e:	00 2d       	mov	r16, r0
    1140:	11 24       	eor	r1, r1
    1142:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    1146:	89 2b       	or	r24, r25
    1148:	8a 2b       	or	r24, r26
    114a:	8b 2b       	or	r24, r27
    114c:	49 f4       	brne	.+18     	; 0x1160 <TIM_DelayMs+0xe0>
      {
         gu8_OverflowsComplete = HIGH;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    1154:	60 2f       	mov	r22, r16
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	81 2f       	mov	r24, r17
    115a:	0e 94 07 07 	call	0xe0e	; 0xe0e <TIM_Start>
    115e:	05 c0       	rjmp	.+10     	; 0x116a <TIM_DelayMs+0xea>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1160:	6f ef       	ldi	r22, 0xFF	; 255
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	81 2f       	mov	r24, r17
    1166:	0e 94 07 07 	call	0xe0e	; 0xe0e <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <gEnu_State>
      return TIMER_E_PENDING;
    1170:	8d ef       	ldi	r24, 0xFD	; 253
    1172:	07 c0       	rjmp	.+14     	; 0x1182 <TIM_DelayMs+0x102>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1174:	8c ef       	ldi	r24, 0xFC	; 252
    1176:	05 c0       	rjmp	.+10     	; 0x1182 <TIM_DelayMs+0x102>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    1178:	8e ef       	ldi	r24, 0xFE	; 254
    117a:	03 c0       	rjmp	.+6      	; 0x1182 <TIM_DelayMs+0x102>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <TIM_DelayMs+0x102>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
    1180:	81 e0       	ldi	r24, 0x01	; 1
}
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	bf 90       	pop	r11
    119a:	af 90       	pop	r10
    119c:	9f 90       	pop	r9
    119e:	8f 90       	pop	r8
    11a0:	08 95       	ret

000011a2 <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	1f 92       	push	r1
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
   if(DelayReady == gEnu_State)
    11ae:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <gEnu_State>
    11b2:	99 23       	and	r25, r25
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <TIM_DelayStatus+0x16>
    11b6:	4c c0       	rjmp	.+152    	; 0x1250 <TIM_DelayStatus+0xae>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
    11b8:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <gptr_CallerFunc>
    11bc:	30 91 c2 00 	lds	r19, 0x00C2	; 0x8000c2 <gptr_CallerFunc+0x1>
    11c0:	26 17       	cp	r18, r22
    11c2:	37 07       	cpc	r19, r23
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <TIM_DelayStatus+0x26>
    11c6:	46 c0       	rjmp	.+140    	; 0x1254 <TIM_DelayStatus+0xb2>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    11c8:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <gEnu_State>
    11cc:	91 30       	cpi	r25, 0x01	; 1
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <TIM_DelayStatus+0x30>
    11d0:	43 c0       	rjmp	.+134    	; 0x1258 <TIM_DelayStatus+0xb6>
    11d2:	18 2f       	mov	r17, r24
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    11d4:	be 01       	movw	r22, r28
    11d6:	6f 5f       	subi	r22, 0xFF	; 255
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	0e 94 2e 07 	call	0xe5c	; 0xe5c <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    11de:	81 11       	cpse	r24, r1
    11e0:	35 c0       	rjmp	.+106    	; 0x124c <TIM_DelayStatus+0xaa>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    11e2:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <gu8_OverflowsComplete>
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	41 f4       	brne	.+16     	; 0x11fa <TIM_DelayStatus+0x58>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    11ea:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <gEnu_State>
            gu8_OverflowsComplete = LOW;
    11ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <gu8_OverflowsComplete>
            gu8_Remindar = 0;
    11f2:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <gu8_Remindar>
            /* return success message. */
            return ERROR_OK;
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	30 c0       	rjmp	.+96     	; 0x125a <TIM_DelayStatus+0xb8>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    11fa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <gu32_Overflows>
    11fe:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <gu32_Overflows+0x1>
    1202:	a0 91 c8 00 	lds	r26, 0x00C8	; 0x8000c8 <gu32_Overflows+0x2>
    1206:	b0 91 c9 00 	lds	r27, 0x00C9	; 0x8000c9 <gu32_Overflows+0x3>
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	a1 09       	sbc	r26, r1
    120e:	b1 09       	sbc	r27, r1
    1210:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <gu32_Overflows>
    1214:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <gu32_Overflows+0x1>
    1218:	a0 93 c8 00 	sts	0x00C8, r26	; 0x8000c8 <gu32_Overflows+0x2>
    121c:	b0 93 c9 00 	sts	0x00C9, r27	; 0x8000c9 <gu32_Overflows+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    1220:	89 2b       	or	r24, r25
    1222:	8a 2b       	or	r24, r26
    1224:	8b 2b       	or	r24, r27
    1226:	59 f4       	brne	.+22     	; 0x123e <TIM_DelayStatus+0x9c>
         {
            gu8_OverflowsComplete = HIGH;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <gu8_OverflowsComplete>
            TIM_Start(TIM_channel, gu8_Remindar);
    122e:	60 91 c4 00 	lds	r22, 0x00C4	; 0x8000c4 <gu8_Remindar>
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	81 2f       	mov	r24, r17
    1236:	0e 94 07 07 	call	0xe0e	; 0xe0e <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
    123a:	8d ef       	ldi	r24, 0xFD	; 253
    123c:	0e c0       	rjmp	.+28     	; 0x125a <TIM_DelayStatus+0xb8>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    123e:	6f ef       	ldi	r22, 0xFF	; 255
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	81 2f       	mov	r24, r17
    1244:	0e 94 07 07 	call	0xe0e	; 0xe0e <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    1248:	8d ef       	ldi	r24, 0xFD	; 253
    124a:	07 c0       	rjmp	.+14     	; 0x125a <TIM_DelayStatus+0xb8>
   }
   else
   {
      return ERROR_NOK;
   }
   return 0;
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	05 c0       	rjmp	.+10     	; 0x125a <TIM_DelayStatus+0xb8>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
    1250:	8b ef       	ldi	r24, 0xFB	; 251
    1252:	03 c0       	rjmp	.+6      	; 0x125a <TIM_DelayStatus+0xb8>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	01 c0       	rjmp	.+2      	; 0x125a <TIM_DelayStatus+0xb8>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
    1258:	81 e0       	ldi	r24, 0x01	; 1
   }
   return 0;
    125a:	0f 90       	pop	r0
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	08 95       	ret

00001264 <main>:
#include "task.h"
#include "DISPLAY.h"
#include "STORAGE.h"

int main(void)
{
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	28 97       	sbiw	r28, 0x08	; 8
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
	*/
	//while( != OperationSuccess);
	uint8_t passworLength = 4;
	uint8_t const wordLength = 9;
	uint8_t positionaftefirstlineword = 0xc0;
	while(LCD_Init() != OperationSuccess);
    1278:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_Init>
    127c:	81 11       	cpse	r24, r1
    127e:	fc cf       	rjmp	.-8      	; 0x1278 <main+0x14>
	while(LCD_SendCommand(0X80|7)!= OperationSuccess);
    1280:	87 e8       	ldi	r24, 0x87	; 135
    1282:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
    1286:	81 11       	cpse	r24, r1
    1288:	fb cf       	rjmp	.-10     	; 0x1280 <main+0x1c>
	while(LCD_SendString((uint8_t*)"AhmedAdel") != OperationSuccess);
    128a:	81 e8       	ldi	r24, 0x81	; 129
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCD_SendString>
    1292:	81 11       	cpse	r24, r1
    1294:	fa cf       	rjmp	.-12     	; 0x128a <main+0x26>
	while(LCD_SendCommand(positionaftefirstlineword)!= OperationSuccess);
    1296:	80 ec       	ldi	r24, 0xC0	; 192
    1298:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
    129c:	81 11       	cpse	r24, r1
    129e:	fb cf       	rjmp	.-10     	; 0x1296 <main+0x32>
    12a0:	10 e0       	ldi	r17, 0x00	; 0
    12a2:	06 c0       	rjmp	.+12     	; 0x12b0 <main+0x4c>
	for(uint8_t i = 0; i< passworLength; i++)
	{
		while(LCD_SendData('*')!= OperationSuccess);
    12a4:	8a e2       	ldi	r24, 0x2A	; 42
    12a6:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_SendData>
    12aa:	81 11       	cpse	r24, r1
    12ac:	fb cf       	rjmp	.-10     	; 0x12a4 <main+0x40>
	uint8_t positionaftefirstlineword = 0xc0;
	while(LCD_Init() != OperationSuccess);
	while(LCD_SendCommand(0X80|7)!= OperationSuccess);
	while(LCD_SendString((uint8_t*)"AhmedAdel") != OperationSuccess);
	while(LCD_SendCommand(positionaftefirstlineword)!= OperationSuccess);
	for(uint8_t i = 0; i< passworLength; i++)
    12ae:	1f 5f       	subi	r17, 0xFF	; 255
    12b0:	14 30       	cpi	r17, 0x04	; 4
    12b2:	c0 f3       	brcs	.-16     	; 0x12a4 <main+0x40>
	}
	uint8_t l = (passworLength+(16-wordLength));
	/*DISPLAY_SetState(PassEntering);*/
	while (1) 
    {
		for(uint8_t y = 0; y<(16-wordLength); y++)
    12b4:	10 e0       	ldi	r17, 0x00	; 0
    12b6:	24 c0       	rjmp	.+72     	; 0x1300 <main+0x9c>
		{
			while(LCD_SendCommand(LCD_SHIFTDISPLEFT)!= OperationSuccess);
    12b8:	88 e1       	ldi	r24, 0x18	; 24
    12ba:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
    12be:	81 11       	cpse	r24, r1
    12c0:	fb cf       	rjmp	.-10     	; 0x12b8 <main+0x54>
			while(LCD_SendData('*')!= OperationSuccess);
    12c2:	8a e2       	ldi	r24, 0x2A	; 42
    12c4:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_SendData>
    12c8:	81 11       	cpse	r24, r1
    12ca:	fb cf       	rjmp	.-10     	; 0x12c2 <main+0x5e>
			for(uint32_t volatile x = 0; x < 50000; x++);
    12cc:	1d 82       	std	Y+5, r1	; 0x05
    12ce:	1e 82       	std	Y+6, r1	; 0x06
    12d0:	1f 82       	std	Y+7, r1	; 0x07
    12d2:	18 86       	std	Y+8, r1	; 0x08
    12d4:	0b c0       	rjmp	.+22     	; 0x12ec <main+0x88>
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	af 81       	ldd	r26, Y+7	; 0x07
    12dc:	b8 85       	ldd	r27, Y+8	; 0x08
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	a1 1d       	adc	r26, r1
    12e2:	b1 1d       	adc	r27, r1
    12e4:	8d 83       	std	Y+5, r24	; 0x05
    12e6:	9e 83       	std	Y+6, r25	; 0x06
    12e8:	af 83       	std	Y+7, r26	; 0x07
    12ea:	b8 87       	std	Y+8, r27	; 0x08
    12ec:	8d 81       	ldd	r24, Y+5	; 0x05
    12ee:	9e 81       	ldd	r25, Y+6	; 0x06
    12f0:	af 81       	ldd	r26, Y+7	; 0x07
    12f2:	b8 85       	ldd	r27, Y+8	; 0x08
    12f4:	80 35       	cpi	r24, 0x50	; 80
    12f6:	93 4c       	sbci	r25, 0xC3	; 195
    12f8:	a1 05       	cpc	r26, r1
    12fa:	b1 05       	cpc	r27, r1
    12fc:	60 f3       	brcs	.-40     	; 0x12d6 <main+0x72>
	}
	uint8_t l = (passworLength+(16-wordLength));
	/*DISPLAY_SetState(PassEntering);*/
	while (1) 
    {
		for(uint8_t y = 0; y<(16-wordLength); y++)
    12fe:	1f 5f       	subi	r17, 0xFF	; 255
    1300:	81 2f       	mov	r24, r17
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	07 97       	sbiw	r24, 0x07	; 7
    1306:	c4 f2       	brlt	.-80     	; 0x12b8 <main+0x54>
    1308:	f1 2c       	mov	r15, r1
    130a:	0b e0       	ldi	r16, 0x0B	; 11
    130c:	32 c0       	rjmp	.+100    	; 0x1372 <main+0x10e>
			for(uint32_t volatile x = 0; x < 50000; x++);
		}
		for(uint8_t y = 0; y<(16-wordLength);y++)
		{
			
			while(LCD_SendCommand(LCD_SHIFTDISPRIGHT)!= OperationSuccess);
    130e:	8c e1       	ldi	r24, 0x1C	; 28
    1310:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
    1314:	81 11       	cpse	r24, r1
    1316:	fb cf       	rjmp	.-10     	; 0x130e <main+0xaa>
			while(LCD_SendCommand(0xc0|l)!= OperationSuccess);
    1318:	10 2f       	mov	r17, r16
    131a:	10 6c       	ori	r17, 0xC0	; 192
    131c:	81 2f       	mov	r24, r17
    131e:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
    1322:	81 11       	cpse	r24, r1
    1324:	f9 cf       	rjmp	.-14     	; 0x1318 <main+0xb4>
			while(LCD_SendData(' ')!= OperationSuccess);
    1326:	80 e2       	ldi	r24, 0x20	; 32
    1328:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_SendData>
    132c:	81 11       	cpse	r24, r1
    132e:	fb cf       	rjmp	.-10     	; 0x1326 <main+0xc2>
			while(LCD_SendCommand((0xc0|l)-1)!= OperationSuccess);
    1330:	8f ef       	ldi	r24, 0xFF	; 255
    1332:	81 0f       	add	r24, r17
    1334:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
    1338:	81 11       	cpse	r24, r1
    133a:	fa cf       	rjmp	.-12     	; 0x1330 <main+0xcc>
			for(uint32_t volatile x = 0; x < 50000; x++);
    133c:	19 82       	std	Y+1, r1	; 0x01
    133e:	1a 82       	std	Y+2, r1	; 0x02
    1340:	1b 82       	std	Y+3, r1	; 0x03
    1342:	1c 82       	std	Y+4, r1	; 0x04
    1344:	0b c0       	rjmp	.+22     	; 0x135c <main+0xf8>
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	9a 81       	ldd	r25, Y+2	; 0x02
    134a:	ab 81       	ldd	r26, Y+3	; 0x03
    134c:	bc 81       	ldd	r27, Y+4	; 0x04
    134e:	01 96       	adiw	r24, 0x01	; 1
    1350:	a1 1d       	adc	r26, r1
    1352:	b1 1d       	adc	r27, r1
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	ab 83       	std	Y+3, r26	; 0x03
    135a:	bc 83       	std	Y+4, r27	; 0x04
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	9a 81       	ldd	r25, Y+2	; 0x02
    1360:	ab 81       	ldd	r26, Y+3	; 0x03
    1362:	bc 81       	ldd	r27, Y+4	; 0x04
    1364:	80 35       	cpi	r24, 0x50	; 80
    1366:	93 4c       	sbci	r25, 0xC3	; 195
    1368:	a1 05       	cpc	r26, r1
    136a:	b1 05       	cpc	r27, r1
    136c:	60 f3       	brcs	.-40     	; 0x1346 <main+0xe2>
			l--;
    136e:	01 50       	subi	r16, 0x01	; 1
		{
			while(LCD_SendCommand(LCD_SHIFTDISPLEFT)!= OperationSuccess);
			while(LCD_SendData('*')!= OperationSuccess);
			for(uint32_t volatile x = 0; x < 50000; x++);
		}
		for(uint8_t y = 0; y<(16-wordLength);y++)
    1370:	f3 94       	inc	r15
    1372:	8f 2d       	mov	r24, r15
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	07 97       	sbiw	r24, 0x07	; 7
    1378:	54 f2       	brlt	.-108    	; 0x130e <main+0xaa>
    137a:	9c cf       	rjmp	.-200    	; 0x12b4 <main+0x50>

0000137c <__cmpsf2>:
    137c:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__fp_cmp>
    1380:	08 f4       	brcc	.+2      	; 0x1384 <__cmpsf2+0x8>
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	08 95       	ret

00001386 <__divsf3>:
    1386:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__divsf3x>
    138a:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <__fp_round>
    138e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__fp_pscB>
    1392:	58 f0       	brcs	.+22     	; 0x13aa <__divsf3+0x24>
    1394:	0e 94 ce 0a 	call	0x159c	; 0x159c <__fp_pscA>
    1398:	40 f0       	brcs	.+16     	; 0x13aa <__divsf3+0x24>
    139a:	29 f4       	brne	.+10     	; 0x13a6 <__divsf3+0x20>
    139c:	5f 3f       	cpi	r21, 0xFF	; 255
    139e:	29 f0       	breq	.+10     	; 0x13aa <__divsf3+0x24>
    13a0:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_inf>
    13a4:	51 11       	cpse	r21, r1
    13a6:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_szero>
    13aa:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_nan>

000013ae <__divsf3x>:
    13ae:	0e 94 ed 0a 	call	0x15da	; 0x15da <__fp_split3>
    13b2:	68 f3       	brcs	.-38     	; 0x138e <__divsf3+0x8>

000013b4 <__divsf3_pse>:
    13b4:	99 23       	and	r25, r25
    13b6:	b1 f3       	breq	.-20     	; 0x13a4 <__divsf3+0x1e>
    13b8:	55 23       	and	r21, r21
    13ba:	91 f3       	breq	.-28     	; 0x13a0 <__divsf3+0x1a>
    13bc:	95 1b       	sub	r25, r21
    13be:	55 0b       	sbc	r21, r21
    13c0:	bb 27       	eor	r27, r27
    13c2:	aa 27       	eor	r26, r26
    13c4:	62 17       	cp	r22, r18
    13c6:	73 07       	cpc	r23, r19
    13c8:	84 07       	cpc	r24, r20
    13ca:	38 f0       	brcs	.+14     	; 0x13da <__divsf3_pse+0x26>
    13cc:	9f 5f       	subi	r25, 0xFF	; 255
    13ce:	5f 4f       	sbci	r21, 0xFF	; 255
    13d0:	22 0f       	add	r18, r18
    13d2:	33 1f       	adc	r19, r19
    13d4:	44 1f       	adc	r20, r20
    13d6:	aa 1f       	adc	r26, r26
    13d8:	a9 f3       	breq	.-22     	; 0x13c4 <__divsf3_pse+0x10>
    13da:	35 d0       	rcall	.+106    	; 0x1446 <__divsf3_pse+0x92>
    13dc:	0e 2e       	mov	r0, r30
    13de:	3a f0       	brmi	.+14     	; 0x13ee <__divsf3_pse+0x3a>
    13e0:	e0 e8       	ldi	r30, 0x80	; 128
    13e2:	32 d0       	rcall	.+100    	; 0x1448 <__divsf3_pse+0x94>
    13e4:	91 50       	subi	r25, 0x01	; 1
    13e6:	50 40       	sbci	r21, 0x00	; 0
    13e8:	e6 95       	lsr	r30
    13ea:	00 1c       	adc	r0, r0
    13ec:	ca f7       	brpl	.-14     	; 0x13e0 <__divsf3_pse+0x2c>
    13ee:	2b d0       	rcall	.+86     	; 0x1446 <__divsf3_pse+0x92>
    13f0:	fe 2f       	mov	r31, r30
    13f2:	29 d0       	rcall	.+82     	; 0x1446 <__divsf3_pse+0x92>
    13f4:	66 0f       	add	r22, r22
    13f6:	77 1f       	adc	r23, r23
    13f8:	88 1f       	adc	r24, r24
    13fa:	bb 1f       	adc	r27, r27
    13fc:	26 17       	cp	r18, r22
    13fe:	37 07       	cpc	r19, r23
    1400:	48 07       	cpc	r20, r24
    1402:	ab 07       	cpc	r26, r27
    1404:	b0 e8       	ldi	r27, 0x80	; 128
    1406:	09 f0       	breq	.+2      	; 0x140a <__divsf3_pse+0x56>
    1408:	bb 0b       	sbc	r27, r27
    140a:	80 2d       	mov	r24, r0
    140c:	bf 01       	movw	r22, r30
    140e:	ff 27       	eor	r31, r31
    1410:	93 58       	subi	r25, 0x83	; 131
    1412:	5f 4f       	sbci	r21, 0xFF	; 255
    1414:	3a f0       	brmi	.+14     	; 0x1424 <__divsf3_pse+0x70>
    1416:	9e 3f       	cpi	r25, 0xFE	; 254
    1418:	51 05       	cpc	r21, r1
    141a:	78 f0       	brcs	.+30     	; 0x143a <__divsf3_pse+0x86>
    141c:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_inf>
    1420:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__fp_szero>
    1424:	5f 3f       	cpi	r21, 0xFF	; 255
    1426:	e4 f3       	brlt	.-8      	; 0x1420 <__divsf3_pse+0x6c>
    1428:	98 3e       	cpi	r25, 0xE8	; 232
    142a:	d4 f3       	brlt	.-12     	; 0x1420 <__divsf3_pse+0x6c>
    142c:	86 95       	lsr	r24
    142e:	77 95       	ror	r23
    1430:	67 95       	ror	r22
    1432:	b7 95       	ror	r27
    1434:	f7 95       	ror	r31
    1436:	9f 5f       	subi	r25, 0xFF	; 255
    1438:	c9 f7       	brne	.-14     	; 0x142c <__divsf3_pse+0x78>
    143a:	88 0f       	add	r24, r24
    143c:	91 1d       	adc	r25, r1
    143e:	96 95       	lsr	r25
    1440:	87 95       	ror	r24
    1442:	97 f9       	bld	r25, 7
    1444:	08 95       	ret
    1446:	e1 e0       	ldi	r30, 0x01	; 1
    1448:	66 0f       	add	r22, r22
    144a:	77 1f       	adc	r23, r23
    144c:	88 1f       	adc	r24, r24
    144e:	bb 1f       	adc	r27, r27
    1450:	62 17       	cp	r22, r18
    1452:	73 07       	cpc	r23, r19
    1454:	84 07       	cpc	r24, r20
    1456:	ba 07       	cpc	r27, r26
    1458:	20 f0       	brcs	.+8      	; 0x1462 <__divsf3_pse+0xae>
    145a:	62 1b       	sub	r22, r18
    145c:	73 0b       	sbc	r23, r19
    145e:	84 0b       	sbc	r24, r20
    1460:	ba 0b       	sbc	r27, r26
    1462:	ee 1f       	adc	r30, r30
    1464:	88 f7       	brcc	.-30     	; 0x1448 <__divsf3_pse+0x94>
    1466:	e0 95       	com	r30
    1468:	08 95       	ret

0000146a <__fixunssfsi>:
    146a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__fp_splitA>
    146e:	88 f0       	brcs	.+34     	; 0x1492 <__fixunssfsi+0x28>
    1470:	9f 57       	subi	r25, 0x7F	; 127
    1472:	98 f0       	brcs	.+38     	; 0x149a <__fixunssfsi+0x30>
    1474:	b9 2f       	mov	r27, r25
    1476:	99 27       	eor	r25, r25
    1478:	b7 51       	subi	r27, 0x17	; 23
    147a:	b0 f0       	brcs	.+44     	; 0x14a8 <__fixunssfsi+0x3e>
    147c:	e1 f0       	breq	.+56     	; 0x14b6 <__fixunssfsi+0x4c>
    147e:	66 0f       	add	r22, r22
    1480:	77 1f       	adc	r23, r23
    1482:	88 1f       	adc	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	1a f0       	brmi	.+6      	; 0x148e <__fixunssfsi+0x24>
    1488:	ba 95       	dec	r27
    148a:	c9 f7       	brne	.-14     	; 0x147e <__fixunssfsi+0x14>
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <__fixunssfsi+0x4c>
    148e:	b1 30       	cpi	r27, 0x01	; 1
    1490:	91 f0       	breq	.+36     	; 0x14b6 <__fixunssfsi+0x4c>
    1492:	0e 94 0f 0b 	call	0x161e	; 0x161e <__fp_zero>
    1496:	b1 e0       	ldi	r27, 0x01	; 1
    1498:	08 95       	ret
    149a:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__fp_zero>
    149e:	67 2f       	mov	r22, r23
    14a0:	78 2f       	mov	r23, r24
    14a2:	88 27       	eor	r24, r24
    14a4:	b8 5f       	subi	r27, 0xF8	; 248
    14a6:	39 f0       	breq	.+14     	; 0x14b6 <__fixunssfsi+0x4c>
    14a8:	b9 3f       	cpi	r27, 0xF9	; 249
    14aa:	cc f3       	brlt	.-14     	; 0x149e <__fixunssfsi+0x34>
    14ac:	86 95       	lsr	r24
    14ae:	77 95       	ror	r23
    14b0:	67 95       	ror	r22
    14b2:	b3 95       	inc	r27
    14b4:	d9 f7       	brne	.-10     	; 0x14ac <__fixunssfsi+0x42>
    14b6:	3e f4       	brtc	.+14     	; 0x14c6 <__fixunssfsi+0x5c>
    14b8:	90 95       	com	r25
    14ba:	80 95       	com	r24
    14bc:	70 95       	com	r23
    14be:	61 95       	neg	r22
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
    14c2:	8f 4f       	sbci	r24, 0xFF	; 255
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	08 95       	ret

000014c8 <__floatunsisf>:
    14c8:	e8 94       	clt
    14ca:	09 c0       	rjmp	.+18     	; 0x14de <__floatsisf+0x12>

000014cc <__floatsisf>:
    14cc:	97 fb       	bst	r25, 7
    14ce:	3e f4       	brtc	.+14     	; 0x14de <__floatsisf+0x12>
    14d0:	90 95       	com	r25
    14d2:	80 95       	com	r24
    14d4:	70 95       	com	r23
    14d6:	61 95       	neg	r22
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	8f 4f       	sbci	r24, 0xFF	; 255
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	99 23       	and	r25, r25
    14e0:	a9 f0       	breq	.+42     	; 0x150c <__floatsisf+0x40>
    14e2:	f9 2f       	mov	r31, r25
    14e4:	96 e9       	ldi	r25, 0x96	; 150
    14e6:	bb 27       	eor	r27, r27
    14e8:	93 95       	inc	r25
    14ea:	f6 95       	lsr	r31
    14ec:	87 95       	ror	r24
    14ee:	77 95       	ror	r23
    14f0:	67 95       	ror	r22
    14f2:	b7 95       	ror	r27
    14f4:	f1 11       	cpse	r31, r1
    14f6:	f8 cf       	rjmp	.-16     	; 0x14e8 <__floatsisf+0x1c>
    14f8:	fa f4       	brpl	.+62     	; 0x1538 <__floatsisf+0x6c>
    14fa:	bb 0f       	add	r27, r27
    14fc:	11 f4       	brne	.+4      	; 0x1502 <__floatsisf+0x36>
    14fe:	60 ff       	sbrs	r22, 0
    1500:	1b c0       	rjmp	.+54     	; 0x1538 <__floatsisf+0x6c>
    1502:	6f 5f       	subi	r22, 0xFF	; 255
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	8f 4f       	sbci	r24, 0xFF	; 255
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	16 c0       	rjmp	.+44     	; 0x1538 <__floatsisf+0x6c>
    150c:	88 23       	and	r24, r24
    150e:	11 f0       	breq	.+4      	; 0x1514 <__floatsisf+0x48>
    1510:	96 e9       	ldi	r25, 0x96	; 150
    1512:	11 c0       	rjmp	.+34     	; 0x1536 <__floatsisf+0x6a>
    1514:	77 23       	and	r23, r23
    1516:	21 f0       	breq	.+8      	; 0x1520 <__floatsisf+0x54>
    1518:	9e e8       	ldi	r25, 0x8E	; 142
    151a:	87 2f       	mov	r24, r23
    151c:	76 2f       	mov	r23, r22
    151e:	05 c0       	rjmp	.+10     	; 0x152a <__floatsisf+0x5e>
    1520:	66 23       	and	r22, r22
    1522:	71 f0       	breq	.+28     	; 0x1540 <__floatsisf+0x74>
    1524:	96 e8       	ldi	r25, 0x86	; 134
    1526:	86 2f       	mov	r24, r22
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	2a f0       	brmi	.+10     	; 0x1538 <__floatsisf+0x6c>
    152e:	9a 95       	dec	r25
    1530:	66 0f       	add	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	da f7       	brpl	.-10     	; 0x152e <__floatsisf+0x62>
    1538:	88 0f       	add	r24, r24
    153a:	96 95       	lsr	r25
    153c:	87 95       	ror	r24
    153e:	97 f9       	bld	r25, 7
    1540:	08 95       	ret

00001542 <__fp_cmp>:
    1542:	99 0f       	add	r25, r25
    1544:	00 08       	sbc	r0, r0
    1546:	55 0f       	add	r21, r21
    1548:	aa 0b       	sbc	r26, r26
    154a:	e0 e8       	ldi	r30, 0x80	; 128
    154c:	fe ef       	ldi	r31, 0xFE	; 254
    154e:	16 16       	cp	r1, r22
    1550:	17 06       	cpc	r1, r23
    1552:	e8 07       	cpc	r30, r24
    1554:	f9 07       	cpc	r31, r25
    1556:	c0 f0       	brcs	.+48     	; 0x1588 <__fp_cmp+0x46>
    1558:	12 16       	cp	r1, r18
    155a:	13 06       	cpc	r1, r19
    155c:	e4 07       	cpc	r30, r20
    155e:	f5 07       	cpc	r31, r21
    1560:	98 f0       	brcs	.+38     	; 0x1588 <__fp_cmp+0x46>
    1562:	62 1b       	sub	r22, r18
    1564:	73 0b       	sbc	r23, r19
    1566:	84 0b       	sbc	r24, r20
    1568:	95 0b       	sbc	r25, r21
    156a:	39 f4       	brne	.+14     	; 0x157a <__fp_cmp+0x38>
    156c:	0a 26       	eor	r0, r26
    156e:	61 f0       	breq	.+24     	; 0x1588 <__fp_cmp+0x46>
    1570:	23 2b       	or	r18, r19
    1572:	24 2b       	or	r18, r20
    1574:	25 2b       	or	r18, r21
    1576:	21 f4       	brne	.+8      	; 0x1580 <__fp_cmp+0x3e>
    1578:	08 95       	ret
    157a:	0a 26       	eor	r0, r26
    157c:	09 f4       	brne	.+2      	; 0x1580 <__fp_cmp+0x3e>
    157e:	a1 40       	sbci	r26, 0x01	; 1
    1580:	a6 95       	lsr	r26
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	81 1d       	adc	r24, r1
    1586:	81 1d       	adc	r24, r1
    1588:	08 95       	ret

0000158a <__fp_inf>:
    158a:	97 f9       	bld	r25, 7
    158c:	9f 67       	ori	r25, 0x7F	; 127
    158e:	80 e8       	ldi	r24, 0x80	; 128
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	08 95       	ret

00001596 <__fp_nan>:
    1596:	9f ef       	ldi	r25, 0xFF	; 255
    1598:	80 ec       	ldi	r24, 0xC0	; 192
    159a:	08 95       	ret

0000159c <__fp_pscA>:
    159c:	00 24       	eor	r0, r0
    159e:	0a 94       	dec	r0
    15a0:	16 16       	cp	r1, r22
    15a2:	17 06       	cpc	r1, r23
    15a4:	18 06       	cpc	r1, r24
    15a6:	09 06       	cpc	r0, r25
    15a8:	08 95       	ret

000015aa <__fp_pscB>:
    15aa:	00 24       	eor	r0, r0
    15ac:	0a 94       	dec	r0
    15ae:	12 16       	cp	r1, r18
    15b0:	13 06       	cpc	r1, r19
    15b2:	14 06       	cpc	r1, r20
    15b4:	05 06       	cpc	r0, r21
    15b6:	08 95       	ret

000015b8 <__fp_round>:
    15b8:	09 2e       	mov	r0, r25
    15ba:	03 94       	inc	r0
    15bc:	00 0c       	add	r0, r0
    15be:	11 f4       	brne	.+4      	; 0x15c4 <__fp_round+0xc>
    15c0:	88 23       	and	r24, r24
    15c2:	52 f0       	brmi	.+20     	; 0x15d8 <__fp_round+0x20>
    15c4:	bb 0f       	add	r27, r27
    15c6:	40 f4       	brcc	.+16     	; 0x15d8 <__fp_round+0x20>
    15c8:	bf 2b       	or	r27, r31
    15ca:	11 f4       	brne	.+4      	; 0x15d0 <__fp_round+0x18>
    15cc:	60 ff       	sbrs	r22, 0
    15ce:	04 c0       	rjmp	.+8      	; 0x15d8 <__fp_round+0x20>
    15d0:	6f 5f       	subi	r22, 0xFF	; 255
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	8f 4f       	sbci	r24, 0xFF	; 255
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	08 95       	ret

000015da <__fp_split3>:
    15da:	57 fd       	sbrc	r21, 7
    15dc:	90 58       	subi	r25, 0x80	; 128
    15de:	44 0f       	add	r20, r20
    15e0:	55 1f       	adc	r21, r21
    15e2:	59 f0       	breq	.+22     	; 0x15fa <__fp_splitA+0x10>
    15e4:	5f 3f       	cpi	r21, 0xFF	; 255
    15e6:	71 f0       	breq	.+28     	; 0x1604 <__fp_splitA+0x1a>
    15e8:	47 95       	ror	r20

000015ea <__fp_splitA>:
    15ea:	88 0f       	add	r24, r24
    15ec:	97 fb       	bst	r25, 7
    15ee:	99 1f       	adc	r25, r25
    15f0:	61 f0       	breq	.+24     	; 0x160a <__fp_splitA+0x20>
    15f2:	9f 3f       	cpi	r25, 0xFF	; 255
    15f4:	79 f0       	breq	.+30     	; 0x1614 <__fp_splitA+0x2a>
    15f6:	87 95       	ror	r24
    15f8:	08 95       	ret
    15fa:	12 16       	cp	r1, r18
    15fc:	13 06       	cpc	r1, r19
    15fe:	14 06       	cpc	r1, r20
    1600:	55 1f       	adc	r21, r21
    1602:	f2 cf       	rjmp	.-28     	; 0x15e8 <__fp_split3+0xe>
    1604:	46 95       	lsr	r20
    1606:	f1 df       	rcall	.-30     	; 0x15ea <__fp_splitA>
    1608:	08 c0       	rjmp	.+16     	; 0x161a <__fp_splitA+0x30>
    160a:	16 16       	cp	r1, r22
    160c:	17 06       	cpc	r1, r23
    160e:	18 06       	cpc	r1, r24
    1610:	99 1f       	adc	r25, r25
    1612:	f1 cf       	rjmp	.-30     	; 0x15f6 <__fp_splitA+0xc>
    1614:	86 95       	lsr	r24
    1616:	71 05       	cpc	r23, r1
    1618:	61 05       	cpc	r22, r1
    161a:	08 94       	sec
    161c:	08 95       	ret

0000161e <__fp_zero>:
    161e:	e8 94       	clt

00001620 <__fp_szero>:
    1620:	bb 27       	eor	r27, r27
    1622:	66 27       	eor	r22, r22
    1624:	77 27       	eor	r23, r23
    1626:	cb 01       	movw	r24, r22
    1628:	97 f9       	bld	r25, 7
    162a:	08 95       	ret

0000162c <__tablejump2__>:
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	05 90       	lpm	r0, Z+
    1632:	f4 91       	lpm	r31, Z
    1634:	e0 2d       	mov	r30, r0
    1636:	09 94       	ijmp

00001638 <__muluhisi3>:
    1638:	0e 94 27 0b 	call	0x164e	; 0x164e <__umulhisi3>
    163c:	a5 9f       	mul	r26, r21
    163e:	90 0d       	add	r25, r0
    1640:	b4 9f       	mul	r27, r20
    1642:	90 0d       	add	r25, r0
    1644:	a4 9f       	mul	r26, r20
    1646:	80 0d       	add	r24, r0
    1648:	91 1d       	adc	r25, r1
    164a:	11 24       	eor	r1, r1
    164c:	08 95       	ret

0000164e <__umulhisi3>:
    164e:	a2 9f       	mul	r26, r18
    1650:	b0 01       	movw	r22, r0
    1652:	b3 9f       	mul	r27, r19
    1654:	c0 01       	movw	r24, r0
    1656:	a3 9f       	mul	r26, r19
    1658:	70 0d       	add	r23, r0
    165a:	81 1d       	adc	r24, r1
    165c:	11 24       	eor	r1, r1
    165e:	91 1d       	adc	r25, r1
    1660:	b2 9f       	mul	r27, r18
    1662:	70 0d       	add	r23, r0
    1664:	81 1d       	adc	r24, r1
    1666:	11 24       	eor	r1, r1
    1668:	91 1d       	adc	r25, r1
    166a:	08 95       	ret

0000166c <_exit>:
    166c:	f8 94       	cli

0000166e <__stop_program>:
    166e:	ff cf       	rjmp	.-2      	; 0x166e <__stop_program>
