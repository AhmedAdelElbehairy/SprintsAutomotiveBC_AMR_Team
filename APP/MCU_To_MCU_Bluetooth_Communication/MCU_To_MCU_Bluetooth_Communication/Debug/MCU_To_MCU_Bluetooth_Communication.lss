
MCU_To_MCU_Bluetooth_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000173e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000173e  000017d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  0080007e  0080007e  000017f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001820  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040a7  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e7c  00000000  00000000  00005bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000269d  00000000  00000000  00006a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000870  00000000  00000000  000090ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001451  00000000  00000000  0000995c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003408  00000000  00000000  0000adad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000e1b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_7>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	d1 06       	cpc	r13, r17
      56:	dc 06       	cpc	r13, r28
      58:	e7 06       	cpc	r14, r23
      5a:	f2 06       	cpc	r15, r18
      5c:	fd 06       	cpc	r15, r29
      5e:	08 07       	cpc	r16, r24
      60:	13 07       	cpc	r17, r19

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	ee e3       	ldi	r30, 0x3E	; 62
      76:	f7 e1       	ldi	r31, 0x17	; 23
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ae 37       	cpi	r26, 0x7E	; 126
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	ae e7       	ldi	r26, 0x7E	; 126
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ac 3b       	cpi	r26, 0xBC	; 188
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 99 09 	call	0x1332	; 0x1332 <main>
      98:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
      a0:	0f 92       	push	r0
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	0f 92       	push	r0
      a8:	1f 92       	push	r1
      aa:	11 24       	eor	r1, r1
      ac:	2f 92       	push	r2
      ae:	3f 92       	push	r3
      b0:	4f 92       	push	r4
      b2:	5f 92       	push	r5
      b4:	6f 92       	push	r6
      b6:	7f 92       	push	r7
      b8:	8f 92       	push	r8
      ba:	9f 92       	push	r9
      bc:	af 92       	push	r10
      be:	bf 92       	push	r11
      c0:	cf 92       	push	r12
      c2:	df 92       	push	r13
      c4:	ef 92       	push	r14
      c6:	ff 92       	push	r15
      c8:	0f 93       	push	r16
      ca:	1f 93       	push	r17
      cc:	2f 93       	push	r18
      ce:	3f 93       	push	r19
      d0:	4f 93       	push	r20
      d2:	5f 93       	push	r21
      d4:	6f 93       	push	r22
      d6:	7f 93       	push	r23
      d8:	8f 93       	push	r24
      da:	9f 93       	push	r25
      dc:	af 93       	push	r26
      de:	bf 93       	push	r27
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	ef 93       	push	r30
      e6:	ff 93       	push	r31
      e8:	a0 91 b0 00 	lds	r26, 0x00B0	; 0x8000b0 <pxCurrentTCB>
      ec:	b0 91 b1 00 	lds	r27, 0x00B1	; 0x8000b1 <pxCurrentTCB+0x1>
      f0:	0d b6       	in	r0, 0x3d	; 61
      f2:	0d 92       	st	X+, r0
      f4:	0e b6       	in	r0, 0x3e	; 62
      f6:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
      f8:	0e 94 cb 00 	call	0x196	; 0x196 <xTaskIncrementTick>
      fc:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
      fe:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     102:	a0 91 b0 00 	lds	r26, 0x00B0	; 0x8000b0 <pxCurrentTCB>
     106:	b0 91 b1 00 	lds	r27, 0x00B1	; 0x8000b1 <pxCurrentTCB+0x1>
     10a:	cd 91       	ld	r28, X+
     10c:	cd bf       	out	0x3d, r28	; 61
     10e:	dd 91       	ld	r29, X+
     110:	de bf       	out	0x3e, r29	; 62
     112:	ff 91       	pop	r31
     114:	ef 91       	pop	r30
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	bf 91       	pop	r27
     11c:	af 91       	pop	r26
     11e:	9f 91       	pop	r25
     120:	8f 91       	pop	r24
     122:	7f 91       	pop	r23
     124:	6f 91       	pop	r22
     126:	5f 91       	pop	r21
     128:	4f 91       	pop	r20
     12a:	3f 91       	pop	r19
     12c:	2f 91       	pop	r18
     12e:	1f 91       	pop	r17
     130:	0f 91       	pop	r16
     132:	ff 90       	pop	r15
     134:	ef 90       	pop	r14
     136:	df 90       	pop	r13
     138:	cf 90       	pop	r12
     13a:	bf 90       	pop	r11
     13c:	af 90       	pop	r10
     13e:	9f 90       	pop	r9
     140:	8f 90       	pop	r8
     142:	7f 90       	pop	r7
     144:	6f 90       	pop	r6
     146:	5f 90       	pop	r5
     148:	4f 90       	pop	r4
     14a:	3f 90       	pop	r3
     14c:	2f 90       	pop	r2
     14e:	1f 90       	pop	r1
     150:	0f 90       	pop	r0
     152:	0f be       	out	0x3f, r0	; 63
     154:	0f 90       	pop	r0

	asm volatile ( "ret" );
     156:	08 95       	ret

00000158 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     158:	0e 94 50 00 	call	0xa0	; 0xa0 <vPortYieldFromTick>
		asm volatile ( "reti" );
     15c:	18 95       	reti

0000015e <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     15e:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <pxDelayedTaskList>
     162:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <pxDelayedTaskList+0x1>
     166:	80 81       	ld	r24, Z
     168:	81 11       	cpse	r24, r1
     16a:	07 c0       	rjmp	.+14     	; 0x17a <prvResetNextTaskUnblockTime+0x1c>
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	9f ef       	ldi	r25, 0xFF	; 255
     170:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <xNextTaskUnblockTime+0x1>
     174:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <xNextTaskUnblockTime>
     178:	08 95       	ret
     17a:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <pxDelayedTaskList>
     17e:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <pxDelayedTaskList+0x1>
     182:	05 80       	ldd	r0, Z+5	; 0x05
     184:	f6 81       	ldd	r31, Z+6	; 0x06
     186:	e0 2d       	mov	r30, r0
     188:	80 81       	ld	r24, Z
     18a:	91 81       	ldd	r25, Z+1	; 0x01
     18c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <xNextTaskUnblockTime+0x1>
     190:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <xNextTaskUnblockTime>
     194:	08 95       	ret

00000196 <xTaskIncrementTick>:
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
     1a2:	81 11       	cpse	r24, r1
     1a4:	01 c1       	rjmp	.+514    	; 0x3a8 <xTaskIncrementTick+0x212>
     1a6:	c0 91 86 00 	lds	r28, 0x0086	; 0x800086 <xTickCount>
     1aa:	d0 91 87 00 	lds	r29, 0x0087	; 0x800087 <xTickCount+0x1>
     1ae:	8e 01       	movw	r16, r28
     1b0:	0f 5f       	subi	r16, 0xFF	; 255
     1b2:	1f 4f       	sbci	r17, 0xFF	; 255
     1b4:	10 93 87 00 	sts	0x0087, r17	; 0x800087 <xTickCount+0x1>
     1b8:	00 93 86 00 	sts	0x0086, r16	; 0x800086 <xTickCount>
     1bc:	01 15       	cp	r16, r1
     1be:	11 05       	cpc	r17, r1
     1c0:	b9 f4       	brne	.+46     	; 0x1f0 <xTaskIncrementTick+0x5a>
     1c2:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <pxDelayedTaskList>
     1c6:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <pxDelayedTaskList+0x1>
     1ca:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <pxOverflowDelayedTaskList>
     1ce:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <pxOverflowDelayedTaskList+0x1>
     1d2:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <pxDelayedTaskList+0x1>
     1d6:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <pxDelayedTaskList>
     1da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <pxOverflowDelayedTaskList+0x1>
     1de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <pxOverflowDelayedTaskList>
     1e2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <xNumOfOverflows>
     1e6:	8f 5f       	subi	r24, 0xFF	; 255
     1e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <xNumOfOverflows>
     1ec:	0e 94 af 00 	call	0x15e	; 0x15e <prvResetNextTaskUnblockTime>
     1f0:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <xNextTaskUnblockTime>
     1f4:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <xNextTaskUnblockTime+0x1>
     1f8:	08 17       	cp	r16, r24
     1fa:	19 07       	cpc	r17, r25
     1fc:	20 f4       	brcc	.+8      	; 0x206 <xTaskIncrementTick+0x70>
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	b8 c0       	rjmp	.+368    	; 0x372 <xTaskIncrementTick+0x1dc>
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	01 c0       	rjmp	.+2      	; 0x208 <xTaskIncrementTick+0x72>
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <pxDelayedTaskList>
     20c:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <pxDelayedTaskList+0x1>
     210:	90 81       	ld	r25, Z
     212:	91 11       	cpse	r25, r1
     214:	07 c0       	rjmp	.+14     	; 0x224 <xTaskIncrementTick+0x8e>
     216:	2f ef       	ldi	r18, 0xFF	; 255
     218:	3f ef       	ldi	r19, 0xFF	; 255
     21a:	30 93 80 00 	sts	0x0080, r19	; 0x800080 <xNextTaskUnblockTime+0x1>
     21e:	20 93 7f 00 	sts	0x007F, r18	; 0x80007f <xNextTaskUnblockTime>
     222:	a7 c0       	rjmp	.+334    	; 0x372 <xTaskIncrementTick+0x1dc>
     224:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <pxDelayedTaskList>
     228:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <pxDelayedTaskList+0x1>
     22c:	05 80       	ldd	r0, Z+5	; 0x05
     22e:	f6 81       	ldd	r31, Z+6	; 0x06
     230:	e0 2d       	mov	r30, r0
     232:	06 80       	ldd	r0, Z+6	; 0x06
     234:	f7 81       	ldd	r31, Z+7	; 0x07
     236:	e0 2d       	mov	r30, r0
     238:	22 81       	ldd	r18, Z+2	; 0x02
     23a:	33 81       	ldd	r19, Z+3	; 0x03
     23c:	02 17       	cp	r16, r18
     23e:	13 07       	cpc	r17, r19
     240:	28 f4       	brcc	.+10     	; 0x24c <xTaskIncrementTick+0xb6>
     242:	30 93 80 00 	sts	0x0080, r19	; 0x800080 <xNextTaskUnblockTime+0x1>
     246:	20 93 7f 00 	sts	0x007F, r18	; 0x80007f <xNextTaskUnblockTime>
     24a:	93 c0       	rjmp	.+294    	; 0x372 <xTaskIncrementTick+0x1dc>
     24c:	a2 85       	ldd	r26, Z+10	; 0x0a
     24e:	b3 85       	ldd	r27, Z+11	; 0x0b
     250:	24 81       	ldd	r18, Z+4	; 0x04
     252:	35 81       	ldd	r19, Z+5	; 0x05
     254:	46 81       	ldd	r20, Z+6	; 0x06
     256:	57 81       	ldd	r21, Z+7	; 0x07
     258:	e9 01       	movw	r28, r18
     25a:	5d 83       	std	Y+5, r21	; 0x05
     25c:	4c 83       	std	Y+4, r20	; 0x04
     25e:	26 81       	ldd	r18, Z+6	; 0x06
     260:	37 81       	ldd	r19, Z+7	; 0x07
     262:	44 81       	ldd	r20, Z+4	; 0x04
     264:	55 81       	ldd	r21, Z+5	; 0x05
     266:	e9 01       	movw	r28, r18
     268:	5b 83       	std	Y+3, r21	; 0x03
     26a:	4a 83       	std	Y+2, r20	; 0x02
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	2d 91       	ld	r18, X+
     270:	3c 91       	ld	r19, X
     272:	12 97       	sbiw	r26, 0x02	; 2
     274:	af 01       	movw	r20, r30
     276:	4e 5f       	subi	r20, 0xFE	; 254
     278:	5f 4f       	sbci	r21, 0xFF	; 255
     27a:	24 17       	cp	r18, r20
     27c:	35 07       	cpc	r19, r21
     27e:	31 f4       	brne	.+12     	; 0x28c <xTaskIncrementTick+0xf6>
     280:	26 81       	ldd	r18, Z+6	; 0x06
     282:	37 81       	ldd	r19, Z+7	; 0x07
     284:	12 96       	adiw	r26, 0x02	; 2
     286:	3c 93       	st	X, r19
     288:	2e 93       	st	-X, r18
     28a:	11 97       	sbiw	r26, 0x01	; 1
     28c:	13 86       	std	Z+11, r1	; 0x0b
     28e:	12 86       	std	Z+10, r1	; 0x0a
     290:	9c 91       	ld	r25, X
     292:	91 50       	subi	r25, 0x01	; 1
     294:	9c 93       	st	X, r25
     296:	a4 89       	ldd	r26, Z+20	; 0x14
     298:	b5 89       	ldd	r27, Z+21	; 0x15
     29a:	10 97       	sbiw	r26, 0x00	; 0
     29c:	19 f1       	breq	.+70     	; 0x2e4 <xTaskIncrementTick+0x14e>
     29e:	26 85       	ldd	r18, Z+14	; 0x0e
     2a0:	37 85       	ldd	r19, Z+15	; 0x0f
     2a2:	60 89       	ldd	r22, Z+16	; 0x10
     2a4:	71 89       	ldd	r23, Z+17	; 0x11
     2a6:	e9 01       	movw	r28, r18
     2a8:	7d 83       	std	Y+5, r23	; 0x05
     2aa:	6c 83       	std	Y+4, r22	; 0x04
     2ac:	20 89       	ldd	r18, Z+16	; 0x10
     2ae:	31 89       	ldd	r19, Z+17	; 0x11
     2b0:	66 85       	ldd	r22, Z+14	; 0x0e
     2b2:	77 85       	ldd	r23, Z+15	; 0x0f
     2b4:	e9 01       	movw	r28, r18
     2b6:	7b 83       	std	Y+3, r23	; 0x03
     2b8:	6a 83       	std	Y+2, r22	; 0x02
     2ba:	11 96       	adiw	r26, 0x01	; 1
     2bc:	6d 91       	ld	r22, X+
     2be:	7c 91       	ld	r23, X
     2c0:	12 97       	sbiw	r26, 0x02	; 2
     2c2:	9f 01       	movw	r18, r30
     2c4:	24 5f       	subi	r18, 0xF4	; 244
     2c6:	3f 4f       	sbci	r19, 0xFF	; 255
     2c8:	62 17       	cp	r22, r18
     2ca:	73 07       	cpc	r23, r19
     2cc:	31 f4       	brne	.+12     	; 0x2da <xTaskIncrementTick+0x144>
     2ce:	20 89       	ldd	r18, Z+16	; 0x10
     2d0:	31 89       	ldd	r19, Z+17	; 0x11
     2d2:	12 96       	adiw	r26, 0x02	; 2
     2d4:	3c 93       	st	X, r19
     2d6:	2e 93       	st	-X, r18
     2d8:	11 97       	sbiw	r26, 0x01	; 1
     2da:	15 8a       	std	Z+21, r1	; 0x15
     2dc:	14 8a       	std	Z+20, r1	; 0x14
     2de:	9c 91       	ld	r25, X
     2e0:	91 50       	subi	r25, 0x01	; 1
     2e2:	9c 93       	st	X, r25
     2e4:	26 89       	ldd	r18, Z+22	; 0x16
     2e6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <uxTopReadyPriority>
     2ea:	92 17       	cp	r25, r18
     2ec:	10 f4       	brcc	.+4      	; 0x2f2 <xTaskIncrementTick+0x15c>
     2ee:	20 93 85 00 	sts	0x0085, r18	; 0x800085 <uxTopReadyPriority>
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	d9 01       	movw	r26, r18
     2f6:	aa 0f       	add	r26, r26
     2f8:	bb 1f       	adc	r27, r27
     2fa:	aa 0f       	add	r26, r26
     2fc:	bb 1f       	adc	r27, r27
     2fe:	aa 0f       	add	r26, r26
     300:	bb 1f       	adc	r27, r27
     302:	2a 0f       	add	r18, r26
     304:	3b 1f       	adc	r19, r27
     306:	d9 01       	movw	r26, r18
     308:	a4 57       	subi	r26, 0x74	; 116
     30a:	bf 4f       	sbci	r27, 0xFF	; 255
     30c:	11 96       	adiw	r26, 0x01	; 1
     30e:	0d 90       	ld	r0, X+
     310:	bc 91       	ld	r27, X
     312:	a0 2d       	mov	r26, r0
     314:	b5 83       	std	Z+5, r27	; 0x05
     316:	a4 83       	std	Z+4, r26	; 0x04
     318:	14 96       	adiw	r26, 0x04	; 4
     31a:	2d 91       	ld	r18, X+
     31c:	3c 91       	ld	r19, X
     31e:	15 97       	sbiw	r26, 0x05	; 5
     320:	37 83       	std	Z+7, r19	; 0x07
     322:	26 83       	std	Z+6, r18	; 0x06
     324:	14 96       	adiw	r26, 0x04	; 4
     326:	2d 91       	ld	r18, X+
     328:	3c 91       	ld	r19, X
     32a:	15 97       	sbiw	r26, 0x05	; 5
     32c:	e9 01       	movw	r28, r18
     32e:	5b 83       	std	Y+3, r21	; 0x03
     330:	4a 83       	std	Y+2, r20	; 0x02
     332:	15 96       	adiw	r26, 0x05	; 5
     334:	5c 93       	st	X, r21
     336:	4e 93       	st	-X, r20
     338:	14 97       	sbiw	r26, 0x04	; 4
     33a:	a6 89       	ldd	r26, Z+22	; 0x16
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	9d 01       	movw	r18, r26
     340:	22 0f       	add	r18, r18
     342:	33 1f       	adc	r19, r19
     344:	22 0f       	add	r18, r18
     346:	33 1f       	adc	r19, r19
     348:	22 0f       	add	r18, r18
     34a:	33 1f       	adc	r19, r19
     34c:	a2 0f       	add	r26, r18
     34e:	b3 1f       	adc	r27, r19
     350:	a4 57       	subi	r26, 0x74	; 116
     352:	bf 4f       	sbci	r27, 0xFF	; 255
     354:	b3 87       	std	Z+11, r27	; 0x0b
     356:	a2 87       	std	Z+10, r26	; 0x0a
     358:	9c 91       	ld	r25, X
     35a:	9f 5f       	subi	r25, 0xFF	; 255
     35c:	9c 93       	st	X, r25
     35e:	26 89       	ldd	r18, Z+22	; 0x16
     360:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <pxCurrentTCB>
     364:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <pxCurrentTCB+0x1>
     368:	96 89       	ldd	r25, Z+22	; 0x16
     36a:	29 17       	cp	r18, r25
     36c:	08 f0       	brcs	.+2      	; 0x370 <xTaskIncrementTick+0x1da>
     36e:	49 cf       	rjmp	.-366    	; 0x202 <xTaskIncrementTick+0x6c>
     370:	4b cf       	rjmp	.-362    	; 0x208 <xTaskIncrementTick+0x72>
     372:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <pxCurrentTCB>
     376:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <pxCurrentTCB+0x1>
     37a:	26 89       	ldd	r18, Z+22	; 0x16
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	f9 01       	movw	r30, r18
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	ee 0f       	add	r30, r30
     386:	ff 1f       	adc	r31, r31
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	2e 0f       	add	r18, r30
     38e:	3f 1f       	adc	r19, r31
     390:	f9 01       	movw	r30, r18
     392:	e4 57       	subi	r30, 0x74	; 116
     394:	ff 4f       	sbci	r31, 0xFF	; 255
     396:	90 81       	ld	r25, Z
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	08 f0       	brcs	.+2      	; 0x39e <xTaskIncrementTick+0x208>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <xYieldPending>
     3a2:	91 11       	cpse	r25, r1
     3a4:	0c c0       	rjmp	.+24     	; 0x3be <xTaskIncrementTick+0x228>
     3a6:	0c c0       	rjmp	.+24     	; 0x3c0 <xTaskIncrementTick+0x22a>
     3a8:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <xPendedTicks>
     3ac:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <xPendedTicks+0x1>
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <xPendedTicks+0x1>
     3b6:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <xPendedTicks>
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <xTaskIncrementTick+0x22a>
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     3ca:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
     3ce:	88 23       	and	r24, r24
     3d0:	21 f0       	breq	.+8      	; 0x3da <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <xYieldPending>
     3d8:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     3da:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     3de:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <uxTopReadyPriority>
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <vTaskSwitchContext+0x1c>
     3e4:	21 50       	subi	r18, 0x01	; 1
     3e6:	82 2f       	mov	r24, r18
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	fc 01       	movw	r30, r24
     3ec:	ee 0f       	add	r30, r30
     3ee:	ff 1f       	adc	r31, r31
     3f0:	ee 0f       	add	r30, r30
     3f2:	ff 1f       	adc	r31, r31
     3f4:	ee 0f       	add	r30, r30
     3f6:	ff 1f       	adc	r31, r31
     3f8:	e8 0f       	add	r30, r24
     3fa:	f9 1f       	adc	r31, r25
     3fc:	e4 57       	subi	r30, 0x74	; 116
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	30 81       	ld	r19, Z
     402:	33 23       	and	r19, r19
     404:	79 f3       	breq	.-34     	; 0x3e4 <vTaskSwitchContext+0x1a>
     406:	ac 01       	movw	r20, r24
     408:	44 0f       	add	r20, r20
     40a:	55 1f       	adc	r21, r21
     40c:	44 0f       	add	r20, r20
     40e:	55 1f       	adc	r21, r21
     410:	44 0f       	add	r20, r20
     412:	55 1f       	adc	r21, r21
     414:	48 0f       	add	r20, r24
     416:	59 1f       	adc	r21, r25
     418:	df 01       	movw	r26, r30
     41a:	01 80       	ldd	r0, Z+1	; 0x01
     41c:	f2 81       	ldd	r31, Z+2	; 0x02
     41e:	e0 2d       	mov	r30, r0
     420:	02 80       	ldd	r0, Z+2	; 0x02
     422:	f3 81       	ldd	r31, Z+3	; 0x03
     424:	e0 2d       	mov	r30, r0
     426:	12 96       	adiw	r26, 0x02	; 2
     428:	fc 93       	st	X, r31
     42a:	ee 93       	st	-X, r30
     42c:	11 97       	sbiw	r26, 0x01	; 1
     42e:	41 57       	subi	r20, 0x71	; 113
     430:	5f 4f       	sbci	r21, 0xFF	; 255
     432:	e4 17       	cp	r30, r20
     434:	f5 07       	cpc	r31, r21
     436:	29 f4       	brne	.+10     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     438:	42 81       	ldd	r20, Z+2	; 0x02
     43a:	53 81       	ldd	r21, Z+3	; 0x03
     43c:	fd 01       	movw	r30, r26
     43e:	52 83       	std	Z+2, r21	; 0x02
     440:	41 83       	std	Z+1, r20	; 0x01
     442:	fc 01       	movw	r30, r24
     444:	ee 0f       	add	r30, r30
     446:	ff 1f       	adc	r31, r31
     448:	ee 0f       	add	r30, r30
     44a:	ff 1f       	adc	r31, r31
     44c:	ee 0f       	add	r30, r30
     44e:	ff 1f       	adc	r31, r31
     450:	8e 0f       	add	r24, r30
     452:	9f 1f       	adc	r25, r31
     454:	fc 01       	movw	r30, r24
     456:	e4 57       	subi	r30, 0x74	; 116
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	01 80       	ldd	r0, Z+1	; 0x01
     45c:	f2 81       	ldd	r31, Z+2	; 0x02
     45e:	e0 2d       	mov	r30, r0
     460:	86 81       	ldd	r24, Z+6	; 0x06
     462:	97 81       	ldd	r25, Z+7	; 0x07
     464:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <pxCurrentTCB+0x1>
     468:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <pxCurrentTCB>
     46c:	20 93 85 00 	sts	0x0085, r18	; 0x800085 <uxTopReadyPriority>
     470:	08 95       	ret

00000472 <LCD_SendData>:
				DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
				*Data = Character;
			}
	}
	return ErrRetVal;
}
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	c8 2f       	mov	r28, r24
     47c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <State.1761>
     480:	82 30       	cpi	r24, 0x02	; 2
     482:	09 f4       	brne	.+2      	; 0x486 <LCD_SendData+0x14>
     484:	84 c0       	rjmp	.+264    	; 0x58e <LCD_SendData+0x11c>
     486:	20 f4       	brcc	.+8      	; 0x490 <LCD_SendData+0x1e>
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	09 f4       	brne	.+2      	; 0x48e <LCD_SendData+0x1c>
     48c:	5c c0       	rjmp	.+184    	; 0x546 <LCD_SendData+0xd4>
     48e:	e7 c0       	rjmp	.+462    	; 0x65e <LCD_SendData+0x1ec>
     490:	83 30       	cpi	r24, 0x03	; 3
     492:	09 f4       	brne	.+2      	; 0x496 <LCD_SendData+0x24>
     494:	c1 c0       	rjmp	.+386    	; 0x618 <LCD_SendData+0x1a6>
     496:	8f 3f       	cpi	r24, 0xFF	; 255
     498:	09 f0       	breq	.+2      	; 0x49c <LCD_SendData+0x2a>
     49a:	e1 c0       	rjmp	.+450    	; 0x65e <LCD_SendData+0x1ec>
     49c:	03 e6       	ldi	r16, 0x63	; 99
     49e:	10 e0       	ldi	r17, 0x00	; 0
     4a0:	f8 01       	movw	r30, r16
     4a2:	d0 81       	ld	r29, Z
     4a4:	41 e0       	ldi	r20, 0x01	; 1
     4a6:	61 81       	ldd	r22, Z+1	; 0x01
     4a8:	8d 2f       	mov	r24, r29
     4aa:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	f8 01       	movw	r30, r16
     4b2:	62 81       	ldd	r22, Z+2	; 0x02
     4b4:	8d 2f       	mov	r24, r29
     4b6:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     4ba:	4c 2f       	mov	r20, r28
     4bc:	44 1f       	adc	r20, r20
     4be:	44 27       	eor	r20, r20
     4c0:	44 1f       	adc	r20, r20
     4c2:	f8 01       	movw	r30, r16
     4c4:	64 81       	ldd	r22, Z+4	; 0x04
     4c6:	8d 2f       	mov	r24, r29
     4c8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     4cc:	4c 2f       	mov	r20, r28
     4ce:	40 74       	andi	r20, 0x40	; 64
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	04 2e       	mov	r0, r20
     4d4:	45 2f       	mov	r20, r21
     4d6:	00 0c       	add	r0, r0
     4d8:	44 1f       	adc	r20, r20
     4da:	55 0b       	sbc	r21, r21
     4dc:	00 0c       	add	r0, r0
     4de:	44 1f       	adc	r20, r20
     4e0:	55 1f       	adc	r21, r21
     4e2:	f8 01       	movw	r30, r16
     4e4:	65 81       	ldd	r22, Z+5	; 0x05
     4e6:	8d 2f       	mov	r24, r29
     4e8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     4ec:	4c 2f       	mov	r20, r28
     4ee:	40 72       	andi	r20, 0x20	; 32
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	55 95       	asr	r21
     4f4:	47 95       	ror	r20
     4f6:	55 95       	asr	r21
     4f8:	47 95       	ror	r20
     4fa:	55 95       	asr	r21
     4fc:	47 95       	ror	r20
     4fe:	55 95       	asr	r21
     500:	47 95       	ror	r20
     502:	55 95       	asr	r21
     504:	47 95       	ror	r20
     506:	f8 01       	movw	r30, r16
     508:	66 81       	ldd	r22, Z+6	; 0x06
     50a:	8d 2f       	mov	r24, r29
     50c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     510:	c0 71       	andi	r28, 0x10	; 16
     512:	4c 2f       	mov	r20, r28
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	55 95       	asr	r21
     518:	47 95       	ror	r20
     51a:	55 95       	asr	r21
     51c:	47 95       	ror	r20
     51e:	55 95       	asr	r21
     520:	47 95       	ror	r20
     522:	55 95       	asr	r21
     524:	47 95       	ror	r20
     526:	f8 01       	movw	r30, r16
     528:	67 81       	ldd	r22, Z+7	; 0x07
     52a:	8d 2f       	mov	r24, r29
     52c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     530:	41 e0       	ldi	r20, 0x01	; 1
     532:	f8 01       	movw	r30, r16
     534:	63 81       	ldd	r22, Z+3	; 0x03
     536:	8d 2f       	mov	r24, r29
     538:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1761>
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	91 c0       	rjmp	.+290    	; 0x668 <LCD_SendData+0x1f6>
     546:	69 e3       	ldi	r22, 0x39	; 57
     548:	72 e0       	ldi	r23, 0x02	; 2
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	0e 94 3a 09 	call	0x1274	; 0x1274 <TIM_DelayStatus>
     550:	8b 3f       	cpi	r24, 0xFB	; 251
     552:	09 f0       	breq	.+2      	; 0x556 <LCD_SendData+0xe4>
     554:	86 c0       	rjmp	.+268    	; 0x662 <LCD_SendData+0x1f0>
     556:	29 e3       	ldi	r18, 0x39	; 57
     558:	32 e0       	ldi	r19, 0x02	; 2
     55a:	41 e0       	ldi	r20, 0x01	; 1
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	0e 94 2b 08 	call	0x1056	; 0x1056 <TIM_DelayUs>
     568:	69 e3       	ldi	r22, 0x39	; 57
     56a:	72 e0       	ldi	r23, 0x02	; 2
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	0e 94 3a 09 	call	0x1274	; 0x1274 <TIM_DelayStatus>
     572:	81 11       	cpse	r24, r1
     574:	f9 cf       	rjmp	.-14     	; 0x568 <LCD_SendData+0xf6>
     576:	e3 e6       	ldi	r30, 0x63	; 99
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	63 81       	ldd	r22, Z+3	; 0x03
     57e:	80 81       	ld	r24, Z
     580:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1761>
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	6d c0       	rjmp	.+218    	; 0x668 <LCD_SendData+0x1f6>
     58e:	03 e6       	ldi	r16, 0x63	; 99
     590:	10 e0       	ldi	r17, 0x00	; 0
     592:	f8 01       	movw	r30, r16
     594:	d0 81       	ld	r29, Z
     596:	41 e0       	ldi	r20, 0x01	; 1
     598:	61 81       	ldd	r22, Z+1	; 0x01
     59a:	8d 2f       	mov	r24, r29
     59c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     5a0:	40 e0       	ldi	r20, 0x00	; 0
     5a2:	f8 01       	movw	r30, r16
     5a4:	62 81       	ldd	r22, Z+2	; 0x02
     5a6:	8d 2f       	mov	r24, r29
     5a8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     5ac:	4c 2f       	mov	r20, r28
     5ae:	48 70       	andi	r20, 0x08	; 8
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	55 95       	asr	r21
     5b4:	47 95       	ror	r20
     5b6:	55 95       	asr	r21
     5b8:	47 95       	ror	r20
     5ba:	55 95       	asr	r21
     5bc:	47 95       	ror	r20
     5be:	f8 01       	movw	r30, r16
     5c0:	64 81       	ldd	r22, Z+4	; 0x04
     5c2:	8d 2f       	mov	r24, r29
     5c4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     5c8:	4c 2f       	mov	r20, r28
     5ca:	44 70       	andi	r20, 0x04	; 4
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	55 95       	asr	r21
     5d0:	47 95       	ror	r20
     5d2:	55 95       	asr	r21
     5d4:	47 95       	ror	r20
     5d6:	f8 01       	movw	r30, r16
     5d8:	65 81       	ldd	r22, Z+5	; 0x05
     5da:	8d 2f       	mov	r24, r29
     5dc:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     5e0:	4c 2f       	mov	r20, r28
     5e2:	42 70       	andi	r20, 0x02	; 2
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	55 95       	asr	r21
     5e8:	47 95       	ror	r20
     5ea:	f8 01       	movw	r30, r16
     5ec:	66 81       	ldd	r22, Z+6	; 0x06
     5ee:	8d 2f       	mov	r24, r29
     5f0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     5f4:	4c 2f       	mov	r20, r28
     5f6:	41 70       	andi	r20, 0x01	; 1
     5f8:	f8 01       	movw	r30, r16
     5fa:	67 81       	ldd	r22, Z+7	; 0x07
     5fc:	8d 2f       	mov	r24, r29
     5fe:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     602:	41 e0       	ldi	r20, 0x01	; 1
     604:	f8 01       	movw	r30, r16
     606:	63 81       	ldd	r22, Z+3	; 0x03
     608:	8d 2f       	mov	r24, r29
     60a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1761>
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	28 c0       	rjmp	.+80     	; 0x668 <LCD_SendData+0x1f6>
     618:	69 e3       	ldi	r22, 0x39	; 57
     61a:	72 e0       	ldi	r23, 0x02	; 2
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	0e 94 3a 09 	call	0x1274	; 0x1274 <TIM_DelayStatus>
     622:	8b 3f       	cpi	r24, 0xFB	; 251
     624:	01 f5       	brne	.+64     	; 0x666 <LCD_SendData+0x1f4>
     626:	29 e3       	ldi	r18, 0x39	; 57
     628:	32 e0       	ldi	r19, 0x02	; 2
     62a:	41 e0       	ldi	r20, 0x01	; 1
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	0e 94 2b 08 	call	0x1056	; 0x1056 <TIM_DelayUs>
     638:	69 e3       	ldi	r22, 0x39	; 57
     63a:	72 e0       	ldi	r23, 0x02	; 2
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	0e 94 3a 09 	call	0x1274	; 0x1274 <TIM_DelayStatus>
     642:	81 11       	cpse	r24, r1
     644:	f9 cf       	rjmp	.-14     	; 0x638 <LCD_SendData+0x1c6>
     646:	e3 e6       	ldi	r30, 0x63	; 99
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	63 81       	ldd	r22, Z+3	; 0x03
     64e:	80 81       	ld	r24, Z
     650:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1761>
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	05 c0       	rjmp	.+10     	; 0x668 <LCD_SendData+0x1f6>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	03 c0       	rjmp	.+6      	; 0x668 <LCD_SendData+0x1f6>
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	01 c0       	rjmp	.+2      	; 0x668 <LCD_SendData+0x1f6>
     666:	8f ef       	ldi	r24, 0xFF	; 255
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	08 95       	ret

00000672 <LCD_SendCommand>:
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	c8 2f       	mov	r28, r24
     67c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <State.1734>
     680:	83 30       	cpi	r24, 0x03	; 3
     682:	09 f4       	brne	.+2      	; 0x686 <LCD_SendCommand+0x14>
     684:	cc c0       	rjmp	.+408    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     686:	38 f4       	brcc	.+14     	; 0x696 <LCD_SendCommand+0x24>
     688:	81 30       	cpi	r24, 0x01	; 1
     68a:	09 f4       	brne	.+2      	; 0x68e <LCD_SendCommand+0x1c>
     68c:	5f c0       	rjmp	.+190    	; 0x74c <LCD_SendCommand+0xda>
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	09 f4       	brne	.+2      	; 0x694 <LCD_SendCommand+0x22>
     692:	80 c0       	rjmp	.+256    	; 0x794 <LCD_SendCommand+0x122>
     694:	ff c0       	rjmp	.+510    	; 0x894 <__stack+0x35>
     696:	84 30       	cpi	r24, 0x04	; 4
     698:	09 f4       	brne	.+2      	; 0x69c <LCD_SendCommand+0x2a>
     69a:	e4 c0       	rjmp	.+456    	; 0x864 <__stack+0x5>
     69c:	8f 3f       	cpi	r24, 0xFF	; 255
     69e:	09 f0       	breq	.+2      	; 0x6a2 <LCD_SendCommand+0x30>
     6a0:	f9 c0       	rjmp	.+498    	; 0x894 <__stack+0x35>
     6a2:	03 e6       	ldi	r16, 0x63	; 99
     6a4:	10 e0       	ldi	r17, 0x00	; 0
     6a6:	f8 01       	movw	r30, r16
     6a8:	d0 81       	ld	r29, Z
     6aa:	40 e0       	ldi	r20, 0x00	; 0
     6ac:	61 81       	ldd	r22, Z+1	; 0x01
     6ae:	8d 2f       	mov	r24, r29
     6b0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     6b4:	40 e0       	ldi	r20, 0x00	; 0
     6b6:	f8 01       	movw	r30, r16
     6b8:	62 81       	ldd	r22, Z+2	; 0x02
     6ba:	8d 2f       	mov	r24, r29
     6bc:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     6c0:	4c 2f       	mov	r20, r28
     6c2:	40 71       	andi	r20, 0x10	; 16
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	55 95       	asr	r21
     6c8:	47 95       	ror	r20
     6ca:	55 95       	asr	r21
     6cc:	47 95       	ror	r20
     6ce:	55 95       	asr	r21
     6d0:	47 95       	ror	r20
     6d2:	55 95       	asr	r21
     6d4:	47 95       	ror	r20
     6d6:	f8 01       	movw	r30, r16
     6d8:	67 81       	ldd	r22, Z+7	; 0x07
     6da:	8d 2f       	mov	r24, r29
     6dc:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     6e0:	4c 2f       	mov	r20, r28
     6e2:	40 72       	andi	r20, 0x20	; 32
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	55 95       	asr	r21
     6e8:	47 95       	ror	r20
     6ea:	55 95       	asr	r21
     6ec:	47 95       	ror	r20
     6ee:	55 95       	asr	r21
     6f0:	47 95       	ror	r20
     6f2:	55 95       	asr	r21
     6f4:	47 95       	ror	r20
     6f6:	55 95       	asr	r21
     6f8:	47 95       	ror	r20
     6fa:	f8 01       	movw	r30, r16
     6fc:	66 81       	ldd	r22, Z+6	; 0x06
     6fe:	8d 2f       	mov	r24, r29
     700:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     704:	4c 2f       	mov	r20, r28
     706:	40 74       	andi	r20, 0x40	; 64
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	04 2e       	mov	r0, r20
     70c:	45 2f       	mov	r20, r21
     70e:	00 0c       	add	r0, r0
     710:	44 1f       	adc	r20, r20
     712:	55 0b       	sbc	r21, r21
     714:	00 0c       	add	r0, r0
     716:	44 1f       	adc	r20, r20
     718:	55 1f       	adc	r21, r21
     71a:	f8 01       	movw	r30, r16
     71c:	65 81       	ldd	r22, Z+5	; 0x05
     71e:	8d 2f       	mov	r24, r29
     720:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     724:	4c 2f       	mov	r20, r28
     726:	44 1f       	adc	r20, r20
     728:	44 27       	eor	r20, r20
     72a:	44 1f       	adc	r20, r20
     72c:	f8 01       	movw	r30, r16
     72e:	64 81       	ldd	r22, Z+4	; 0x04
     730:	8d 2f       	mov	r24, r29
     732:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     736:	41 e0       	ldi	r20, 0x01	; 1
     738:	f8 01       	movw	r30, r16
     73a:	63 81       	ldd	r22, Z+3	; 0x03
     73c:	8d 2f       	mov	r24, r29
     73e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1734>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	ab c0       	rjmp	.+342    	; 0x8a2 <__stack+0x43>
     74c:	69 e3       	ldi	r22, 0x39	; 57
     74e:	73 e0       	ldi	r23, 0x03	; 3
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	0e 94 3a 09 	call	0x1274	; 0x1274 <TIM_DelayStatus>
     756:	8b 3f       	cpi	r24, 0xFB	; 251
     758:	09 f0       	breq	.+2      	; 0x75c <LCD_SendCommand+0xea>
     75a:	9e c0       	rjmp	.+316    	; 0x898 <__stack+0x39>
     75c:	29 e3       	ldi	r18, 0x39	; 57
     75e:	33 e0       	ldi	r19, 0x03	; 3
     760:	41 e0       	ldi	r20, 0x01	; 1
     762:	50 e0       	ldi	r21, 0x00	; 0
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	0e 94 2b 08 	call	0x1056	; 0x1056 <TIM_DelayUs>
     76e:	69 e3       	ldi	r22, 0x39	; 57
     770:	73 e0       	ldi	r23, 0x03	; 3
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	0e 94 3a 09 	call	0x1274	; 0x1274 <TIM_DelayStatus>
     778:	81 11       	cpse	r24, r1
     77a:	f9 cf       	rjmp	.-14     	; 0x76e <LCD_SendCommand+0xfc>
     77c:	e3 e6       	ldi	r30, 0x63	; 99
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	63 81       	ldd	r22, Z+3	; 0x03
     784:	80 81       	ld	r24, Z
     786:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1734>
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	87 c0       	rjmp	.+270    	; 0x8a2 <__stack+0x43>
     794:	03 e6       	ldi	r16, 0x63	; 99
     796:	10 e0       	ldi	r17, 0x00	; 0
     798:	f8 01       	movw	r30, r16
     79a:	d0 81       	ld	r29, Z
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	61 81       	ldd	r22, Z+1	; 0x01
     7a0:	8d 2f       	mov	r24, r29
     7a2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	f8 01       	movw	r30, r16
     7aa:	62 81       	ldd	r22, Z+2	; 0x02
     7ac:	8d 2f       	mov	r24, r29
     7ae:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     7b2:	4c 2f       	mov	r20, r28
     7b4:	41 70       	andi	r20, 0x01	; 1
     7b6:	f8 01       	movw	r30, r16
     7b8:	67 81       	ldd	r22, Z+7	; 0x07
     7ba:	8d 2f       	mov	r24, r29
     7bc:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     7c0:	4c 2f       	mov	r20, r28
     7c2:	42 70       	andi	r20, 0x02	; 2
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	55 95       	asr	r21
     7c8:	47 95       	ror	r20
     7ca:	f8 01       	movw	r30, r16
     7cc:	66 81       	ldd	r22, Z+6	; 0x06
     7ce:	8d 2f       	mov	r24, r29
     7d0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     7d4:	4c 2f       	mov	r20, r28
     7d6:	44 70       	andi	r20, 0x04	; 4
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	55 95       	asr	r21
     7dc:	47 95       	ror	r20
     7de:	55 95       	asr	r21
     7e0:	47 95       	ror	r20
     7e2:	f8 01       	movw	r30, r16
     7e4:	65 81       	ldd	r22, Z+5	; 0x05
     7e6:	8d 2f       	mov	r24, r29
     7e8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     7ec:	c8 70       	andi	r28, 0x08	; 8
     7ee:	4c 2f       	mov	r20, r28
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	55 95       	asr	r21
     7f4:	47 95       	ror	r20
     7f6:	55 95       	asr	r21
     7f8:	47 95       	ror	r20
     7fa:	55 95       	asr	r21
     7fc:	47 95       	ror	r20
     7fe:	f8 01       	movw	r30, r16
     800:	64 81       	ldd	r22, Z+4	; 0x04
     802:	8d 2f       	mov	r24, r29
     804:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     808:	41 e0       	ldi	r20, 0x01	; 1
     80a:	f8 01       	movw	r30, r16
     80c:	63 81       	ldd	r22, Z+3	; 0x03
     80e:	8d 2f       	mov	r24, r29
     810:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1734>
     81a:	8f ef       	ldi	r24, 0xFF	; 255
     81c:	42 c0       	rjmp	.+132    	; 0x8a2 <__stack+0x43>
     81e:	69 e3       	ldi	r22, 0x39	; 57
     820:	73 e0       	ldi	r23, 0x03	; 3
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	0e 94 3a 09 	call	0x1274	; 0x1274 <TIM_DelayStatus>
     828:	8b 3f       	cpi	r24, 0xFB	; 251
     82a:	c1 f5       	brne	.+112    	; 0x89c <__stack+0x3d>
     82c:	29 e3       	ldi	r18, 0x39	; 57
     82e:	33 e0       	ldi	r19, 0x03	; 3
     830:	41 e0       	ldi	r20, 0x01	; 1
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	0e 94 2b 08 	call	0x1056	; 0x1056 <TIM_DelayUs>
     83e:	69 e3       	ldi	r22, 0x39	; 57
     840:	73 e0       	ldi	r23, 0x03	; 3
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	0e 94 3a 09 	call	0x1274	; 0x1274 <TIM_DelayStatus>
     848:	81 11       	cpse	r24, r1
     84a:	f9 cf       	rjmp	.-14     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     84c:	e3 e6       	ldi	r30, 0x63	; 99
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	63 81       	ldd	r22, Z+3	; 0x03
     854:	80 81       	ld	r24, Z
     856:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
     85a:	84 e0       	ldi	r24, 0x04	; 4
     85c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1734>
     860:	8f ef       	ldi	r24, 0xFF	; 255
     862:	1f c0       	rjmp	.+62     	; 0x8a2 <__stack+0x43>
     864:	69 e3       	ldi	r22, 0x39	; 57
     866:	73 e0       	ldi	r23, 0x03	; 3
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	0e 94 3a 09 	call	0x1274	; 0x1274 <TIM_DelayStatus>
     86e:	c8 2f       	mov	r28, r24
     870:	8b 3f       	cpi	r24, 0xFB	; 251
     872:	49 f4       	brne	.+18     	; 0x886 <__stack+0x27>
     874:	29 e3       	ldi	r18, 0x39	; 57
     876:	33 e0       	ldi	r19, 0x03	; 3
     878:	42 e0       	ldi	r20, 0x02	; 2
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	0e 94 a9 08 	call	0x1152	; 0x1152 <TIM_DelayMs>
     886:	c1 11       	cpse	r28, r1
     888:	0b c0       	rjmp	.+22     	; 0x8a0 <__stack+0x41>
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1734>
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	07 c0       	rjmp	.+14     	; 0x8a2 <__stack+0x43>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	05 c0       	rjmp	.+10     	; 0x8a2 <__stack+0x43>
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <__stack+0x43>
     89c:	8f ef       	ldi	r24, 0xFF	; 255
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	08 95       	ret

000008ac <LCD_Init>:




ERROR_STATE_t LCD_Init()
{
     8ac:	bf 92       	push	r11
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	uint8_t LCD_SendCommandRetVal = OperationStarted;
	#if LCD_4_BIT
	switch (State) {
     8be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     8c2:	8b 30       	cpi	r24, 0x0B	; 11
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <LCD_Init+0x1c>
     8c6:	c3 c0       	rjmp	.+390    	; 0xa4e <LCD_Init+0x1a2>
     8c8:	90 f4       	brcc	.+36     	; 0x8ee <LCD_Init+0x42>
     8ca:	88 30       	cpi	r24, 0x08	; 8
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <LCD_Init+0x24>
     8ce:	a1 c0       	rjmp	.+322    	; 0xa12 <LCD_Init+0x166>
     8d0:	38 f4       	brcc	.+14     	; 0x8e0 <LCD_Init+0x34>
     8d2:	85 30       	cpi	r24, 0x05	; 5
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <LCD_Init+0x2c>
     8d6:	7b c0       	rjmp	.+246    	; 0x9ce <LCD_Init+0x122>
     8d8:	86 30       	cpi	r24, 0x06	; 6
     8da:	09 f4       	brne	.+2      	; 0x8de <LCD_Init+0x32>
     8dc:	90 c0       	rjmp	.+288    	; 0x9fe <LCD_Init+0x152>
     8de:	e9 c0       	rjmp	.+466    	; 0xab2 <LCD_Init+0x206>
     8e0:	89 30       	cpi	r24, 0x09	; 9
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <LCD_Init+0x3a>
     8e4:	a0 c0       	rjmp	.+320    	; 0xa26 <LCD_Init+0x17a>
     8e6:	8a 30       	cpi	r24, 0x0A	; 10
     8e8:	09 f4       	brne	.+2      	; 0x8ec <LCD_Init+0x40>
     8ea:	a7 c0       	rjmp	.+334    	; 0xa3a <LCD_Init+0x18e>
     8ec:	e2 c0       	rjmp	.+452    	; 0xab2 <LCD_Init+0x206>
     8ee:	8e 30       	cpi	r24, 0x0E	; 14
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <LCD_Init+0x48>
     8f2:	cb c0       	rjmp	.+406    	; 0xa8a <LCD_Init+0x1de>
     8f4:	38 f4       	brcc	.+14     	; 0x904 <LCD_Init+0x58>
     8f6:	8c 30       	cpi	r24, 0x0C	; 12
     8f8:	09 f4       	brne	.+2      	; 0x8fc <LCD_Init+0x50>
     8fa:	b3 c0       	rjmp	.+358    	; 0xa62 <LCD_Init+0x1b6>
     8fc:	8d 30       	cpi	r24, 0x0D	; 13
     8fe:	09 f4       	brne	.+2      	; 0x902 <LCD_Init+0x56>
     900:	ba c0       	rjmp	.+372    	; 0xa76 <LCD_Init+0x1ca>
     902:	d7 c0       	rjmp	.+430    	; 0xab2 <LCD_Init+0x206>
     904:	8f 30       	cpi	r24, 0x0F	; 15
     906:	09 f4       	brne	.+2      	; 0x90a <LCD_Init+0x5e>
     908:	ca c0       	rjmp	.+404    	; 0xa9e <LCD_Init+0x1f2>
     90a:	8f 3f       	cpi	r24, 0xFF	; 255
     90c:	09 f0       	breq	.+2      	; 0x910 <LCD_Init+0x64>
     90e:	d1 c0       	rjmp	.+418    	; 0xab2 <LCD_Init+0x206>
	case OperationStarted:
		/*Dio and Timer Initialize for the*/
		TIM_Init(TIMER_2);
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	0e 94 24 07 	call	0xe48	; 0xe48 <TIM_Init>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     916:	03 e6       	ldi	r16, 0x63	; 99
     918:	10 e0       	ldi	r17, 0x00	; 0
     91a:	f8 01       	movw	r30, r16
     91c:	b4 80       	ldd	r11, Z+4	; 0x04
     91e:	c0 81       	ld	r28, Z
     920:	41 e0       	ldi	r20, 0x01	; 1
     922:	6b 2d       	mov	r22, r11
     924:	8c 2f       	mov	r24, r28
     926:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     92a:	f8 01       	movw	r30, r16
     92c:	c5 80       	ldd	r12, Z+5	; 0x05
     92e:	41 e0       	ldi	r20, 0x01	; 1
     930:	6c 2d       	mov	r22, r12
     932:	8c 2f       	mov	r24, r28
     934:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     938:	f8 01       	movw	r30, r16
     93a:	d6 80       	ldd	r13, Z+6	; 0x06
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	6d 2d       	mov	r22, r13
     940:	8c 2f       	mov	r24, r28
     942:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     946:	f8 01       	movw	r30, r16
     948:	e7 80       	ldd	r14, Z+7	; 0x07
     94a:	41 e0       	ldi	r20, 0x01	; 1
     94c:	6e 2d       	mov	r22, r14
     94e:	8c 2f       	mov	r24, r28
     950:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     954:	f8 01       	movw	r30, r16
     956:	f1 80       	ldd	r15, Z+1	; 0x01
     958:	41 e0       	ldi	r20, 0x01	; 1
     95a:	6f 2d       	mov	r22, r15
     95c:	8c 2f       	mov	r24, r28
     95e:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     962:	f8 01       	movw	r30, r16
     964:	d2 81       	ldd	r29, Z+2	; 0x02
     966:	41 e0       	ldi	r20, 0x01	; 1
     968:	6d 2f       	mov	r22, r29
     96a:	8c 2f       	mov	r24, r28
     96c:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     970:	f8 01       	movw	r30, r16
     972:	13 81       	ldd	r17, Z+3	; 0x03
     974:	41 e0       	ldi	r20, 0x01	; 1
     976:	61 2f       	mov	r22, r17
     978:	8c 2f       	mov	r24, r28
     97a:	0e 94 95 05 	call	0xb2a	; 0xb2a <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	6b 2d       	mov	r22, r11
     982:	8c 2f       	mov	r24, r28
     984:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	6c 2d       	mov	r22, r12
     98c:	8c 2f       	mov	r24, r28
     98e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	6d 2d       	mov	r22, r13
     996:	8c 2f       	mov	r24, r28
     998:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	6e 2d       	mov	r22, r14
     9a0:	8c 2f       	mov	r24, r28
     9a2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	6f 2d       	mov	r22, r15
     9aa:	8c 2f       	mov	r24, r28
     9ac:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	6d 2f       	mov	r22, r29
     9b4:	8c 2f       	mov	r24, r28
     9b6:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	61 2f       	mov	r22, r17
     9be:	8c 2f       	mov	r24, r28
     9c0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_WritePin>
		/*set status of the function*/
		State = LCD_Pin_Initializing;
     9c4:	85 e0       	ldi	r24, 0x05	; 5
     9c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
		/*set status of the function*/
		State = LCD_Pin_Initializing;
		break;
     9cc:	87 c0       	rjmp	.+270    	; 0xadc <LCD_Init+0x230>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
     9ce:	69 e3       	ldi	r22, 0x39	; 57
     9d0:	73 e0       	ldi	r23, 0x03	; 3
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	0e 94 3a 09 	call	0x1274	; 0x1274 <TIM_DelayStatus>
     9d8:	c8 2f       	mov	r28, r24
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     9da:	8b 3f       	cpi	r24, 0xFB	; 251
     9dc:	49 f4       	brne	.+18     	; 0x9f0 <LCD_Init+0x144>
		{
   		TIM_DelayMs(TIMER_2,15, (void (*)(void))LCD_SendCommand);
     9de:	29 e3       	ldi	r18, 0x39	; 57
     9e0:	33 e0       	ldi	r19, 0x03	; 3
     9e2:	4f e0       	ldi	r20, 0x0F	; 15
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	82 e0       	ldi	r24, 0x02	; 2
     9ec:	0e 94 a9 08 	call	0x1152	; 0x1152 <TIM_DelayMs>
		}
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     9f0:	c1 11       	cpse	r28, r1
     9f2:	61 c0       	rjmp	.+194    	; 0xab6 <LCD_Init+0x20a>
		{
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
     9f4:	86 e0       	ldi	r24, 0x06	; 6
     9f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	6f c0       	rjmp	.+222    	; 0xadc <LCD_Init+0x230>
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
	case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a04:	81 11       	cpse	r24, r1
     a06:	59 c0       	rjmp	.+178    	; 0xaba <LCD_Init+0x20e>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     a08:	88 e0       	ldi	r24, 0x08	; 8
     a0a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	65 c0       	rjmp	.+202    	; 0xadc <LCD_Init+0x230>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a18:	81 11       	cpse	r24, r1
     a1a:	51 c0       	rjmp	.+162    	; 0xabe <LCD_Init+0x212>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     a1c:	89 e0       	ldi	r24, 0x09	; 9
     a1e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	5b c0       	rjmp	.+182    	; 0xadc <LCD_Init+0x230>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a2c:	81 11       	cpse	r24, r1
     a2e:	49 c0       	rjmp	.+146    	; 0xac2 <LCD_Init+0x216>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     a30:	8a e0       	ldi	r24, 0x0A	; 10
     a32:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a36:	8f ef       	ldi	r24, 0xFF	; 255
     a38:	51 c0       	rjmp	.+162    	; 0xadc <LCD_Init+0x230>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a40:	81 11       	cpse	r24, r1
     a42:	41 c0       	rjmp	.+130    	; 0xac6 <LCD_Init+0x21a>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     a44:	8b e0       	ldi	r24, 0x0B	; 11
     a46:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a4a:	8f ef       	ldi	r24, 0xFF	; 255
     a4c:	47 c0       	rjmp	.+142    	; 0xadc <LCD_Init+0x230>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_6);
     a4e:	88 e2       	ldi	r24, 0x28	; 40
     a50:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a54:	81 11       	cpse	r24, r1
     a56:	39 c0       	rjmp	.+114    	; 0xaca <LCD_Init+0x21e>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     a58:	8c e0       	ldi	r24, 0x0C	; 12
     a5a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	3d c0       	rjmp	.+122    	; 0xadc <LCD_Init+0x230>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
     a62:	8c e0       	ldi	r24, 0x0C	; 12
     a64:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a68:	81 11       	cpse	r24, r1
     a6a:	31 c0       	rjmp	.+98     	; 0xace <LCD_Init+0x222>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     a6c:	8d e0       	ldi	r24, 0x0D	; 13
     a6e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	33 c0       	rjmp	.+102    	; 0xadc <LCD_Init+0x230>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);//LCD_INCREMENTENTRYMODE/LCD_SHIFTINCREMENTENTRYMODE
     a76:	86 e0       	ldi	r24, 0x06	; 6
     a78:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a7c:	81 11       	cpse	r24, r1
     a7e:	29 c0       	rjmp	.+82     	; 0xad2 <LCD_Init+0x226>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     a80:	8e e0       	ldi	r24, 0x0E	; 14
     a82:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	29 c0       	rjmp	.+82     	; 0xadc <LCD_Init+0x230>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a90:	81 11       	cpse	r24, r1
     a92:	21 c0       	rjmp	.+66     	; 0xad6 <LCD_Init+0x22a>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     a94:	8f e0       	ldi	r24, 0x0F	; 15
     a96:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	1f c0       	rjmp	.+62     	; 0xadc <LCD_Init+0x230>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     a9e:	80 e8       	ldi	r24, 0x80	; 128
     aa0:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     aa4:	81 11       	cpse	r24, r1
     aa6:	19 c0       	rjmp	.+50     	; 0xada <LCD_Init+0x22e>
		{
			State = OperationStarted;
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			ErrRetVal = OperationSuccess;
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	15 c0       	rjmp	.+42     	; 0xadc <LCD_Init+0x230>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	13 c0       	rjmp	.+38     	; 0xadc <LCD_Init+0x230>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	11 c0       	rjmp	.+34     	; 0xadc <LCD_Init+0x230>
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	0f c0       	rjmp	.+30     	; 0xadc <LCD_Init+0x230>
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	0d c0       	rjmp	.+26     	; 0xadc <LCD_Init+0x230>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	0b c0       	rjmp	.+22     	; 0xadc <LCD_Init+0x230>
     ac6:	8f ef       	ldi	r24, 0xFF	; 255
     ac8:	09 c0       	rjmp	.+18     	; 0xadc <LCD_Init+0x230>
     aca:	8f ef       	ldi	r24, 0xFF	; 255
     acc:	07 c0       	rjmp	.+14     	; 0xadc <LCD_Init+0x230>
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <LCD_Init+0x230>
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	03 c0       	rjmp	.+6      	; 0xadc <LCD_Init+0x230>
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <LCD_Init+0x230>
     ada:	8f ef       	ldi	r24, 0xFF	; 255
		ErrRetVal = OperationFail;
		break;
	}
	#endif
	return ErrRetVal;
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	bf 90       	pop	r11
     aee:	08 95       	ret

00000af0 <LCD_SendString>:
ERROR_STATE_t LCD_SendString(const uint8_t* String)
{
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
     af0:	00 97       	sbiw	r24, 0x00	; 0
     af2:	b9 f0       	breq	.+46     	; 0xb22 <LCD_SendString+0x32>
		if (String[Number] != NULL_TERMINATOR ) {
     af4:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <Number.1806>
     af8:	fc 01       	movw	r30, r24
     afa:	e2 0f       	add	r30, r18
     afc:	f1 1d       	adc	r31, r1
     afe:	80 81       	ld	r24, Z
     b00:	88 23       	and	r24, r24
     b02:	59 f0       	breq	.+22     	; 0xb1a <LCD_SendString+0x2a>
			ErrRetVal = OperationRunning;
			LCD_SendDataRetVal = LCD_SendData(String[Number]);
     b04:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendData>
			if(LCD_SendDataRetVal == OperationSuccess)
     b08:	81 11       	cpse	r24, r1
     b0a:	0d c0       	rjmp	.+26     	; 0xb26 <LCD_SendString+0x36>
			{
				Number++;
     b0c:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Number.1806>
     b10:	8f 5f       	subi	r24, 0xFF	; 255
     b12:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <Number.1806>
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	08 95       	ret
				Number++;
			}
		}
		else
		{
			Number = 0;
     b1a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <Number.1806>
			ErrRetVal = OperationSuccess;
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	08 95       	ret
		}
	} else {
		ErrRetVal = OperationFail;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	08 95       	ret
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     b26:	82 e0       	ldi	r24, 0x02	; 2
		}
	} else {
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     b28:	08 95       	ret

00000b2a <DIO_SetPinDirection>:
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
     b2a:	42 30       	cpi	r20, 0x02	; 2
     b2c:	08 f0       	brcs	.+2      	; 0xb30 <DIO_SetPinDirection+0x6>
     b2e:	60 c0       	rjmp	.+192    	; 0xbf0 <DIO_SetPinDirection+0xc6>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
     b30:	68 30       	cpi	r22, 0x08	; 8
     b32:	08 f0       	brcs	.+2      	; 0xb36 <DIO_SetPinDirection+0xc>
     b34:	5f c0       	rjmp	.+190    	; 0xbf4 <DIO_SetPinDirection+0xca>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	e1 f0       	breq	.+56     	; 0xb72 <DIO_SetPinDirection+0x48>
     b3a:	30 f0       	brcs	.+12     	; 0xb48 <DIO_SetPinDirection+0x1e>
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	71 f1       	breq	.+92     	; 0xb9c <DIO_SetPinDirection+0x72>
     b40:	83 30       	cpi	r24, 0x03	; 3
     b42:	09 f4       	brne	.+2      	; 0xb46 <DIO_SetPinDirection+0x1c>
     b44:	40 c0       	rjmp	.+128    	; 0xbc6 <DIO_SetPinDirection+0x9c>
     b46:	58 c0       	rjmp	.+176    	; 0xbf8 <DIO_SetPinDirection+0xce>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
     b48:	2a b3       	in	r18, 0x1a	; 26
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	06 2e       	mov	r0, r22
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <DIO_SetPinDirection+0x2c>
     b52:	88 0f       	add	r24, r24
     b54:	99 1f       	adc	r25, r25
     b56:	0a 94       	dec	r0
     b58:	e2 f7       	brpl	.-8      	; 0xb52 <DIO_SetPinDirection+0x28>
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <DIO_SetPinDirection+0x38>
     b5e:	44 0f       	add	r20, r20
     b60:	55 1f       	adc	r21, r21
     b62:	6a 95       	dec	r22
     b64:	e2 f7       	brpl	.-8      	; 0xb5e <DIO_SetPinDirection+0x34>
     b66:	80 95       	com	r24
     b68:	82 23       	and	r24, r18
     b6a:	48 2b       	or	r20, r24
     b6c:	4a bb       	out	0x1a, r20	; 26
				u8_ErrorState=ERROR_OK;
     b6e:	80 e0       	ldi	r24, 0x00	; 0
				break;
     b70:	08 95       	ret
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
     b72:	27 b3       	in	r18, 0x17	; 23
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	06 2e       	mov	r0, r22
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <DIO_SetPinDirection+0x56>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	0a 94       	dec	r0
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <DIO_SetPinDirection+0x52>
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <DIO_SetPinDirection+0x62>
     b88:	44 0f       	add	r20, r20
     b8a:	55 1f       	adc	r21, r21
     b8c:	6a 95       	dec	r22
     b8e:	e2 f7       	brpl	.-8      	; 0xb88 <DIO_SetPinDirection+0x5e>
     b90:	80 95       	com	r24
     b92:	82 23       	and	r24, r18
     b94:	48 2b       	or	r20, r24
     b96:	47 bb       	out	0x17, r20	; 23
				u8_ErrorState=ERROR_OK;
     b98:	80 e0       	ldi	r24, 0x00	; 0
				break;
     b9a:	08 95       	ret
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
     b9c:	24 b3       	in	r18, 0x14	; 20
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	06 2e       	mov	r0, r22
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <DIO_SetPinDirection+0x80>
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	0a 94       	dec	r0
     bac:	e2 f7       	brpl	.-8      	; 0xba6 <DIO_SetPinDirection+0x7c>
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <DIO_SetPinDirection+0x8c>
     bb2:	44 0f       	add	r20, r20
     bb4:	55 1f       	adc	r21, r21
     bb6:	6a 95       	dec	r22
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <DIO_SetPinDirection+0x88>
     bba:	80 95       	com	r24
     bbc:	82 23       	and	r24, r18
     bbe:	48 2b       	or	r20, r24
     bc0:	44 bb       	out	0x14, r20	; 20
				u8_ErrorState=ERROR_OK;
     bc2:	80 e0       	ldi	r24, 0x00	; 0
				break;
     bc4:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
     bc6:	21 b3       	in	r18, 0x11	; 17
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	06 2e       	mov	r0, r22
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <DIO_SetPinDirection+0xaa>
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	0a 94       	dec	r0
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <DIO_SetPinDirection+0xa6>
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <DIO_SetPinDirection+0xb6>
     bdc:	44 0f       	add	r20, r20
     bde:	55 1f       	adc	r21, r21
     be0:	6a 95       	dec	r22
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <DIO_SetPinDirection+0xb2>
     be4:	80 95       	com	r24
     be6:	82 23       	and	r24, r18
     be8:	48 2b       	or	r20, r24
     bea:	41 bb       	out	0x11, r20	; 17
				u8_ErrorState=ERROR_OK;
     bec:	80 e0       	ldi	r24, 0x00	; 0
				break;
     bee:	08 95       	ret
ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
	{
		u8_ErrorState=ERROR_NOK;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}		
	}
	return u8_ErrorState;
}
     bfa:	08 95       	ret

00000bfc <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
     bfc:	42 30       	cpi	r20, 0x02	; 2
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <DIO_WritePin+0x6>
     c00:	60 c0       	rjmp	.+192    	; 0xcc2 <DIO_WritePin+0xc6>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
     c02:	68 30       	cpi	r22, 0x08	; 8
     c04:	08 f0       	brcs	.+2      	; 0xc08 <DIO_WritePin+0xc>
     c06:	5f c0       	rjmp	.+190    	; 0xcc6 <DIO_WritePin+0xca>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	e1 f0       	breq	.+56     	; 0xc44 <DIO_WritePin+0x48>
     c0c:	30 f0       	brcs	.+12     	; 0xc1a <DIO_WritePin+0x1e>
     c0e:	82 30       	cpi	r24, 0x02	; 2
     c10:	71 f1       	breq	.+92     	; 0xc6e <DIO_WritePin+0x72>
     c12:	83 30       	cpi	r24, 0x03	; 3
     c14:	09 f4       	brne	.+2      	; 0xc18 <DIO_WritePin+0x1c>
     c16:	40 c0       	rjmp	.+128    	; 0xc98 <DIO_WritePin+0x9c>
     c18:	58 c0       	rjmp	.+176    	; 0xcca <DIO_WritePin+0xce>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
     c1a:	2b b3       	in	r18, 0x1b	; 27
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	06 2e       	mov	r0, r22
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <DIO_WritePin+0x2c>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <DIO_WritePin+0x28>
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <DIO_WritePin+0x38>
     c30:	44 0f       	add	r20, r20
     c32:	55 1f       	adc	r21, r21
     c34:	6a 95       	dec	r22
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <DIO_WritePin+0x34>
     c38:	80 95       	com	r24
     c3a:	82 23       	and	r24, r18
     c3c:	48 2b       	or	r20, r24
     c3e:	4b bb       	out	0x1b, r20	; 27
				u8_ErrorState=ERROR_OK;
     c40:	80 e0       	ldi	r24, 0x00	; 0
				break;
     c42:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
     c44:	28 b3       	in	r18, 0x18	; 24
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	06 2e       	mov	r0, r22
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <DIO_WritePin+0x56>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <DIO_WritePin+0x52>
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <DIO_WritePin+0x62>
     c5a:	44 0f       	add	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	6a 95       	dec	r22
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <DIO_WritePin+0x5e>
     c62:	80 95       	com	r24
     c64:	82 23       	and	r24, r18
     c66:	48 2b       	or	r20, r24
     c68:	48 bb       	out	0x18, r20	; 24
				u8_ErrorState=ERROR_OK;
     c6a:	80 e0       	ldi	r24, 0x00	; 0
				break;
     c6c:	08 95       	ret
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
     c6e:	25 b3       	in	r18, 0x15	; 21
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	06 2e       	mov	r0, r22
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <DIO_WritePin+0x80>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <DIO_WritePin+0x7c>
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <DIO_WritePin+0x8c>
     c84:	44 0f       	add	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	6a 95       	dec	r22
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <DIO_WritePin+0x88>
     c8c:	80 95       	com	r24
     c8e:	82 23       	and	r24, r18
     c90:	48 2b       	or	r20, r24
     c92:	45 bb       	out	0x15, r20	; 21
				u8_ErrorState=ERROR_OK;
     c94:	80 e0       	ldi	r24, 0x00	; 0
				break;
     c96:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
     c98:	22 b3       	in	r18, 0x12	; 18
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	06 2e       	mov	r0, r22
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <DIO_WritePin+0xaa>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0a 94       	dec	r0
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <DIO_WritePin+0xa6>
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <DIO_WritePin+0xb6>
     cae:	44 0f       	add	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	e2 f7       	brpl	.-8      	; 0xcae <DIO_WritePin+0xb2>
     cb6:	80 95       	com	r24
     cb8:	82 23       	and	r24, r18
     cba:	48 2b       	or	r20, r24
     cbc:	42 bb       	out	0x12, r20	; 18
				u8_ErrorState=ERROR_OK;
     cbe:	80 e0       	ldi	r24, 0x00	; 0
				break;
     cc0:	08 95       	ret
ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
	{
		u8_ErrorState=ERROR_NOK;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
     cca:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
     ccc:	08 95       	ret

00000cce <GetFreqPrescaleRatio>:
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	08 f0       	brcs	.+2      	; 0xcd4 <GetFreqPrescaleRatio+0x6>
     cd2:	4e c0       	rjmp	.+156    	; 0xd70 <GetFreqPrescaleRatio+0xa2>
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	fc 01       	movw	r30, r24
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	8e 0f       	add	r24, r30
     cde:	9f 1f       	adc	r25, r31
     ce0:	fc 01       	movw	r30, r24
     ce2:	e5 59       	subi	r30, 0x95	; 149
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	82 81       	ldd	r24, Z+2	; 0x02
     ce8:	83 30       	cpi	r24, 0x03	; 3
     cea:	09 f1       	breq	.+66     	; 0xd2e <GetFreqPrescaleRatio+0x60>
     cec:	28 f4       	brcc	.+10     	; 0xcf8 <GetFreqPrescaleRatio+0x2a>
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	41 f0       	breq	.+16     	; 0xd02 <GetFreqPrescaleRatio+0x34>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	89 f0       	breq	.+34     	; 0xd18 <GetFreqPrescaleRatio+0x4a>
     cf6:	a2 c0       	rjmp	.+324    	; 0xe3c <GetFreqPrescaleRatio+0x16e>
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	21 f1       	breq	.+72     	; 0xd44 <GetFreqPrescaleRatio+0x76>
     cfc:	85 30       	cpi	r24, 0x05	; 5
     cfe:	69 f1       	breq	.+90     	; 0xd5a <GetFreqPrescaleRatio+0x8c>
     d00:	9d c0       	rjmp	.+314    	; 0xe3c <GetFreqPrescaleRatio+0x16e>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	a0 e8       	ldi	r26, 0x80	; 128
     d08:	bd e3       	ldi	r27, 0x3D	; 61
     d0a:	fb 01       	movw	r30, r22
     d0c:	80 83       	st	Z, r24
     d0e:	91 83       	std	Z+1, r25	; 0x01
     d10:	a2 83       	std	Z+2, r26	; 0x02
     d12:	b3 83       	std	Z+3, r27	; 0x03
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	08 95       	ret
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	a0 e0       	ldi	r26, 0x00	; 0
     d1e:	bf e3       	ldi	r27, 0x3F	; 63
     d20:	fb 01       	movw	r30, r22
     d22:	80 83       	st	Z, r24
     d24:	91 83       	std	Z+1, r25	; 0x01
     d26:	a2 83       	std	Z+2, r26	; 0x02
     d28:	b3 83       	std	Z+3, r27	; 0x03
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	08 95       	ret
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	a0 e8       	ldi	r26, 0x80	; 128
     d34:	b0 e4       	ldi	r27, 0x40	; 64
     d36:	fb 01       	movw	r30, r22
     d38:	80 83       	st	Z, r24
     d3a:	91 83       	std	Z+1, r25	; 0x01
     d3c:	a2 83       	std	Z+2, r26	; 0x02
     d3e:	b3 83       	std	Z+3, r27	; 0x03
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	08 95       	ret
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a0 e8       	ldi	r26, 0x80	; 128
     d4a:	b1 e4       	ldi	r27, 0x41	; 65
     d4c:	fb 01       	movw	r30, r22
     d4e:	80 83       	st	Z, r24
     d50:	91 83       	std	Z+1, r25	; 0x01
     d52:	a2 83       	std	Z+2, r26	; 0x02
     d54:	b3 83       	std	Z+3, r27	; 0x03
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	08 95       	ret
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	a0 e8       	ldi	r26, 0x80	; 128
     d60:	b2 e4       	ldi	r27, 0x42	; 66
     d62:	fb 01       	movw	r30, r22
     d64:	80 83       	st	Z, r24
     d66:	91 83       	std	Z+1, r25	; 0x01
     d68:	a2 83       	std	Z+2, r26	; 0x02
     d6a:	b3 83       	std	Z+3, r27	; 0x03
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	08 95       	ret
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	09 f0       	breq	.+2      	; 0xd76 <GetFreqPrescaleRatio+0xa8>
     d74:	65 c0       	rjmp	.+202    	; 0xe40 <GetFreqPrescaleRatio+0x172>
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	fc 01       	movw	r30, r24
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	8e 0f       	add	r24, r30
     d80:	9f 1f       	adc	r25, r31
     d82:	fc 01       	movw	r30, r24
     d84:	e5 59       	subi	r30, 0x95	; 149
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	e2 81       	ldd	r30, Z+2	; 0x02
     d8a:	8e 2f       	mov	r24, r30
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	fc 01       	movw	r30, r24
     d90:	31 97       	sbiw	r30, 0x01	; 1
     d92:	e7 30       	cpi	r30, 0x07	; 7
     d94:	f1 05       	cpc	r31, r1
     d96:	08 f0       	brcs	.+2      	; 0xd9a <GetFreqPrescaleRatio+0xcc>
     d98:	55 c0       	rjmp	.+170    	; 0xe44 <GetFreqPrescaleRatio+0x176>
     d9a:	e6 5d       	subi	r30, 0xD6	; 214
     d9c:	ff 4f       	sbci	r31, 0xFF	; 255
     d9e:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__tablejump2__>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a0 e8       	ldi	r26, 0x80	; 128
     da8:	bd e3       	ldi	r27, 0x3D	; 61
     daa:	fb 01       	movw	r30, r22
     dac:	80 83       	st	Z, r24
     dae:	91 83       	std	Z+1, r25	; 0x01
     db0:	a2 83       	std	Z+2, r26	; 0x02
     db2:	b3 83       	std	Z+3, r27	; 0x03
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	08 95       	ret
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	a0 e0       	ldi	r26, 0x00	; 0
     dbe:	bf e3       	ldi	r27, 0x3F	; 63
     dc0:	fb 01       	movw	r30, r22
     dc2:	80 83       	st	Z, r24
     dc4:	91 83       	std	Z+1, r25	; 0x01
     dc6:	a2 83       	std	Z+2, r26	; 0x02
     dc8:	b3 83       	std	Z+3, r27	; 0x03
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	08 95       	ret
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	a0 e0       	ldi	r26, 0x00	; 0
     dd4:	b0 e4       	ldi	r27, 0x40	; 64
     dd6:	fb 01       	movw	r30, r22
     dd8:	80 83       	st	Z, r24
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	a2 83       	std	Z+2, r26	; 0x02
     dde:	b3 83       	std	Z+3, r27	; 0x03
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	08 95       	ret
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	a0 e8       	ldi	r26, 0x80	; 128
     dea:	b0 e4       	ldi	r27, 0x40	; 64
     dec:	fb 01       	movw	r30, r22
     dee:	80 83       	st	Z, r24
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	a2 83       	std	Z+2, r26	; 0x02
     df4:	b3 83       	std	Z+3, r27	; 0x03
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	08 95       	ret
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	a0 e0       	ldi	r26, 0x00	; 0
     e00:	b1 e4       	ldi	r27, 0x41	; 65
     e02:	fb 01       	movw	r30, r22
     e04:	80 83       	st	Z, r24
     e06:	91 83       	std	Z+1, r25	; 0x01
     e08:	a2 83       	std	Z+2, r26	; 0x02
     e0a:	b3 83       	std	Z+3, r27	; 0x03
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	08 95       	ret
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	a0 e8       	ldi	r26, 0x80	; 128
     e16:	b1 e4       	ldi	r27, 0x41	; 65
     e18:	fb 01       	movw	r30, r22
     e1a:	80 83       	st	Z, r24
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	a2 83       	std	Z+2, r26	; 0x02
     e20:	b3 83       	std	Z+3, r27	; 0x03
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	08 95       	ret
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	a0 e8       	ldi	r26, 0x80	; 128
     e2c:	b2 e4       	ldi	r27, 0x42	; 66
     e2e:	fb 01       	movw	r30, r22
     e30:	80 83       	st	Z, r24
     e32:	91 83       	std	Z+1, r25	; 0x01
     e34:	a2 83       	std	Z+2, r26	; 0x02
     e36:	b3 83       	std	Z+3, r27	; 0x03
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	08 95       	ret
     e3c:	8c ef       	ldi	r24, 0xFC	; 252
     e3e:	08 95       	ret
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	08 95       	ret
     e44:	8c ef       	ldi	r24, 0xFC	; 252
     e46:	08 95       	ret

00000e48 <TIM_Init>:
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	b1 f0       	breq	.+44     	; 0xe78 <TIM_Init+0x30>
     e4c:	18 f0       	brcs	.+6      	; 0xe54 <TIM_Init+0xc>
     e4e:	82 30       	cpi	r24, 0x02	; 2
     e50:	71 f1       	breq	.+92     	; 0xeae <TIM_Init+0x66>
     e52:	44 c0       	rjmp	.+136    	; 0xedc <TIM_Init+0x94>
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	fc 01       	movw	r30, r24
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	8e 0f       	add	r24, r30
     e5e:	9f 1f       	adc	r25, r31
     e60:	fc 01       	movw	r30, r24
     e62:	e5 59       	subi	r30, 0x95	; 149
     e64:	ff 4f       	sbci	r31, 0xFF	; 255
     e66:	80 81       	ld	r24, Z
     e68:	83 bf       	out	0x33, r24	; 51
     e6a:	89 b7       	in	r24, 0x39	; 57
     e6c:	8c 7f       	andi	r24, 0xFC	; 252
     e6e:	91 81       	ldd	r25, Z+1	; 0x01
     e70:	89 2b       	or	r24, r25
     e72:	89 bf       	out	0x39, r24	; 57
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	08 95       	ret
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	fc 01       	movw	r30, r24
     e7c:	ee 0f       	add	r30, r30
     e7e:	ff 1f       	adc	r31, r31
     e80:	8e 0f       	add	r24, r30
     e82:	9f 1f       	adc	r25, r31
     e84:	fc 01       	movw	r30, r24
     e86:	e5 59       	subi	r30, 0x95	; 149
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	80 81       	ld	r24, Z
     e8c:	8e bd       	out	0x2e, r24	; 46
     e8e:	89 b7       	in	r24, 0x39	; 57
     e90:	28 2f       	mov	r18, r24
     e92:	27 7e       	andi	r18, 0xE7	; 231
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	89 2f       	mov	r24, r25
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	82 2b       	or	r24, r18
     ea8:	89 bf       	out	0x39, r24	; 57
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	08 95       	ret
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	fc 01       	movw	r30, r24
     eb2:	ee 0f       	add	r30, r30
     eb4:	ff 1f       	adc	r31, r31
     eb6:	8e 0f       	add	r24, r30
     eb8:	9f 1f       	adc	r25, r31
     eba:	fc 01       	movw	r30, r24
     ebc:	e5 59       	subi	r30, 0x95	; 149
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	80 81       	ld	r24, Z
     ec2:	85 bd       	out	0x25, r24	; 37
     ec4:	89 b7       	in	r24, 0x39	; 57
     ec6:	28 2f       	mov	r18, r24
     ec8:	2f 73       	andi	r18, 0x3F	; 63
     eca:	91 81       	ldd	r25, Z+1	; 0x01
     ecc:	30 e4       	ldi	r19, 0x40	; 64
     ece:	93 9f       	mul	r25, r19
     ed0:	c0 01       	movw	r24, r0
     ed2:	11 24       	eor	r1, r1
     ed4:	82 2b       	or	r24, r18
     ed6:	89 bf       	out	0x39, r24	; 57
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	08 95       	ret
     edc:	8e ef       	ldi	r24, 0xFE	; 254
     ede:	08 95       	ret

00000ee0 <TIM_Start>:
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	71 f0       	breq	.+28     	; 0xf00 <TIM_Start+0x20>
     ee4:	18 f0       	brcs	.+6      	; 0xeec <TIM_Start+0xc>
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	31 f0       	breq	.+12     	; 0xef6 <TIM_Start+0x16>
     eea:	1f c0       	rjmp	.+62     	; 0xf2a <TIM_Start+0x4a>
     eec:	e2 e5       	ldi	r30, 0x52	; 82
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	a3 e5       	ldi	r26, 0x53	; 83
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	09 c0       	rjmp	.+18     	; 0xf08 <TIM_Start+0x28>
     ef6:	e4 e4       	ldi	r30, 0x44	; 68
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	a5 e4       	ldi	r26, 0x45	; 69
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <TIM_Start+0x28>
     f00:	ec e4       	ldi	r30, 0x4C	; 76
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	ae e4       	ldi	r26, 0x4E	; 78
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	71 83       	std	Z+1, r23	; 0x01
     f0a:	60 83       	st	Z, r22
     f0c:	2c 91       	ld	r18, X
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	fc 01       	movw	r30, r24
     f12:	ee 0f       	add	r30, r30
     f14:	ff 1f       	adc	r31, r31
     f16:	8e 0f       	add	r24, r30
     f18:	9f 1f       	adc	r25, r31
     f1a:	fc 01       	movw	r30, r24
     f1c:	e5 59       	subi	r30, 0x95	; 149
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	82 2b       	or	r24, r18
     f24:	8c 93       	st	X, r24
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	08 95       	ret
     f2a:	8e ef       	ldi	r24, 0xFE	; 254
     f2c:	08 95       	ret

00000f2e <TIM_GetStatus>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
     f2e:	61 15       	cp	r22, r1
     f30:	71 05       	cpc	r23, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <TIM_GetStatus+0x8>
     f34:	7a c0       	rjmp	.+244    	; 0x102a <TIM_GetStatus+0xfc>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	41 f1       	breq	.+80     	; 0xf8a <TIM_GetStatus+0x5c>
     f3a:	20 f0       	brcs	.+8      	; 0xf44 <TIM_GetStatus+0x16>
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	09 f4       	brne	.+2      	; 0xf42 <TIM_GetStatus+0x14>
     f40:	52 c0       	rjmp	.+164    	; 0xfe6 <TIM_GetStatus+0xb8>
     f42:	75 c0       	rjmp	.+234    	; 0x102e <TIM_GetStatus+0x100>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	fc 01       	movw	r30, r24
     f48:	ee 0f       	add	r30, r30
     f4a:	ff 1f       	adc	r31, r31
     f4c:	8e 0f       	add	r24, r30
     f4e:	9f 1f       	adc	r25, r31
     f50:	fc 01       	movw	r30, r24
     f52:	e5 59       	subi	r30, 0x95	; 149
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	80 81       	ld	r24, Z
     f58:	81 11       	cpse	r24, r1
     f5a:	09 c0       	rjmp	.+18     	; 0xf6e <TIM_GetStatus+0x40>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
     f5c:	08 b6       	in	r0, 0x38	; 56
     f5e:	00 fe       	sbrs	r0, 0
     f60:	68 c0       	rjmp	.+208    	; 0x1032 <TIM_GetStatus+0x104>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
     f62:	fb 01       	movw	r30, r22
     f64:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
     f66:	98 b7       	in	r25, 0x38	; 56
     f68:	91 60       	ori	r25, 0x01	; 1
     f6a:	98 bf       	out	0x38, r25	; 56
     f6c:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
     f6e:	88 30       	cpi	r24, 0x08	; 8
     f70:	09 f0       	breq	.+2      	; 0xf74 <TIM_GetStatus+0x46>
     f72:	61 c0       	rjmp	.+194    	; 0x1036 <TIM_GetStatus+0x108>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
     f74:	08 b6       	in	r0, 0x38	; 56
     f76:	01 fe       	sbrs	r0, 1
     f78:	60 c0       	rjmp	.+192    	; 0x103a <TIM_GetStatus+0x10c>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	fb 01       	movw	r30, r22
     f7e:	80 83       	st	Z, r24
               TIFR |= TIMER_0_COMPARE_FLAG;
     f80:	88 b7       	in	r24, 0x38	; 56
     f82:	82 60       	ori	r24, 0x02	; 2
     f84:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	fc 01       	movw	r30, r24
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	8e 0f       	add	r24, r30
     f94:	9f 1f       	adc	r25, r31
     f96:	fc 01       	movw	r30, r24
     f98:	e5 59       	subi	r30, 0x95	; 149
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	80 81       	ld	r24, Z
     f9e:	81 11       	cpse	r24, r1
     fa0:	09 c0       	rjmp	.+18     	; 0xfb4 <TIM_GetStatus+0x86>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
     fa2:	08 b6       	in	r0, 0x38	; 56
     fa4:	02 fe       	sbrs	r0, 2
     fa6:	4b c0       	rjmp	.+150    	; 0x103e <TIM_GetStatus+0x110>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
     fa8:	fb 01       	movw	r30, r22
     faa:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
     fac:	98 b7       	in	r25, 0x38	; 56
     fae:	94 60       	ori	r25, 0x04	; 4
     fb0:	98 bf       	out	0x38, r25	; 56
     fb2:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
     fb4:	88 30       	cpi	r24, 0x08	; 8
     fb6:	09 f0       	breq	.+2      	; 0xfba <TIM_GetStatus+0x8c>
     fb8:	44 c0       	rjmp	.+136    	; 0x1042 <TIM_GetStatus+0x114>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
     fba:	98 b7       	in	r25, 0x38	; 56
     fbc:	89 2f       	mov	r24, r25
     fbe:	80 71       	andi	r24, 0x10	; 16
     fc0:	94 ff       	sbrs	r25, 4
     fc2:	08 c0       	rjmp	.+16     	; 0xfd4 <TIM_GetStatus+0xa6>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	fb 01       	movw	r30, r22
     fc8:	80 83       	st	Z, r24
               TIFR |= TIMER_1A_COMPARE_FLAG;
     fca:	88 b7       	in	r24, 0x38	; 56
     fcc:	80 61       	ori	r24, 0x10	; 16
     fce:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	08 95       	ret
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
     fd4:	93 ff       	sbrs	r25, 3
     fd6:	37 c0       	rjmp	.+110    	; 0x1046 <TIM_GetStatus+0x118>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	fb 01       	movw	r30, r22
     fdc:	90 83       	st	Z, r25
               TIFR |= TIMER_1B_COMPARE_FLAG;
     fde:	98 b7       	in	r25, 0x38	; 56
     fe0:	98 60       	ori	r25, 0x08	; 8
     fe2:	98 bf       	out	0x38, r25	; 56
     fe4:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	fc 01       	movw	r30, r24
     fea:	ee 0f       	add	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	8e 0f       	add	r24, r30
     ff0:	9f 1f       	adc	r25, r31
     ff2:	fc 01       	movw	r30, r24
     ff4:	e5 59       	subi	r30, 0x95	; 149
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	80 81       	ld	r24, Z
     ffa:	81 11       	cpse	r24, r1
     ffc:	09 c0       	rjmp	.+18     	; 0x1010 <TIM_GetStatus+0xe2>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
     ffe:	08 b6       	in	r0, 0x38	; 56
    1000:	06 fe       	sbrs	r0, 6
    1002:	23 c0       	rjmp	.+70     	; 0x104a <TIM_GetStatus+0x11c>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1004:	fb 01       	movw	r30, r22
    1006:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
    1008:	98 b7       	in	r25, 0x38	; 56
    100a:	90 64       	ori	r25, 0x40	; 64
    100c:	98 bf       	out	0x38, r25	; 56
    100e:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1010:	88 30       	cpi	r24, 0x08	; 8
    1012:	e9 f4       	brne	.+58     	; 0x104e <TIM_GetStatus+0x120>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
    1014:	08 b6       	in	r0, 0x38	; 56
    1016:	07 fe       	sbrs	r0, 7
    1018:	1c c0       	rjmp	.+56     	; 0x1052 <TIM_GetStatus+0x124>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	fb 01       	movw	r30, r22
    101e:	80 83       	st	Z, r24
               TIFR |= TIMER_2_COMPARE_FLAG;
    1020:	88 b7       	in	r24, 0x38	; 56
    1022:	80 68       	ori	r24, 0x80	; 128
    1024:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	08 95       	ret
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    102e:	8e ef       	ldi	r24, 0xFE	; 254
    1030:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1032:	8d ef       	ldi	r24, 0xFD	; 253
    1034:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    103a:	8d ef       	ldi	r24, 0xFD	; 253
    103c:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    103e:	8d ef       	ldi	r24, 0xFD	; 253
    1040:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1046:	8d ef       	ldi	r24, 0xFD	; 253
    1048:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    104a:	8d ef       	ldi	r24, 0xFD	; 253
    104c:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1052:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
}
    1054:	08 95       	ret

00001056 <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1056:	8f 92       	push	r8
    1058:	9f 92       	push	r9
    105a:	af 92       	push	r10
    105c:	bf 92       	push	r11
    105e:	cf 92       	push	r12
    1060:	df 92       	push	r13
    1062:	ef 92       	push	r14
    1064:	ff 92       	push	r15
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	00 d0       	rcall	.+0      	; 0x106e <TIM_DelayUs+0x18>
    106e:	00 d0       	rcall	.+0      	; 0x1070 <TIM_DelayUs+0x1a>
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	18 2f       	mov	r17, r24
    1076:	6a 01       	movw	r12, r20
    1078:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    107a:	83 30       	cpi	r24, 0x03	; 3
    107c:	08 f0       	brcs	.+2      	; 0x1080 <TIM_DelayUs+0x2a>
    107e:	54 c0       	rjmp	.+168    	; 0x1128 <TIM_DelayUs+0xd2>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    1080:	21 15       	cp	r18, r1
    1082:	31 05       	cpc	r19, r1
    1084:	09 f4       	brne	.+2      	; 0x1088 <TIM_DelayUs+0x32>
    1086:	52 c0       	rjmp	.+164    	; 0x112c <TIM_DelayUs+0xd6>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    1088:	30 93 b4 00 	sts	0x00B4, r19	; 0x8000b4 <gptr_CallerFunc+0x1>
    108c:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <gptr_CallerFunc>
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    1090:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gEnu_State>
    1094:	81 11       	cpse	r24, r1
    1096:	4c c0       	rjmp	.+152    	; 0x1130 <TIM_DelayUs+0xda>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    1098:	be 01       	movw	r22, r28
    109a:	6f 5f       	subi	r22, 0xFF	; 255
    109c:	7f 4f       	sbci	r23, 0xFF	; 255
    109e:	81 2f       	mov	r24, r17
    10a0:	0e 94 67 06 	call	0xcce	; 0xcce <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    10a4:	8c 3f       	cpi	r24, 0xFC	; 252
    10a6:	f1 f1       	breq	.+124    	; 0x1124 <TIM_DelayUs+0xce>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    10a8:	89 80       	ldd	r8, Y+1	; 0x01
    10aa:	9a 80       	ldd	r9, Y+2	; 0x02
    10ac:	ab 80       	ldd	r10, Y+3	; 0x03
    10ae:	bc 80       	ldd	r11, Y+4	; 0x04
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	a9 01       	movw	r20, r18
    10b6:	c5 01       	movw	r24, r10
    10b8:	b4 01       	movw	r22, r8
    10ba:	0e 94 25 0a 	call	0x144a	; 0x144a <__cmpsf2>
    10be:	88 23       	and	r24, r24
    10c0:	61 f0       	breq	.+24     	; 0x10da <TIM_DelayUs+0x84>
      {
         TIM_Delay /= f32_FreqRatio;
    10c2:	c7 01       	movw	r24, r14
    10c4:	b6 01       	movw	r22, r12
    10c6:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__floatunsisf>
    10ca:	a5 01       	movw	r20, r10
    10cc:	94 01       	movw	r18, r8
    10ce:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__divsf3>
    10d2:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fixunssfsi>
    10d6:	6b 01       	movw	r12, r22
    10d8:	7c 01       	movw	r14, r24
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    10da:	bb 27       	eor	r27, r27
    10dc:	af 2d       	mov	r26, r15
    10de:	9e 2d       	mov	r25, r14
    10e0:	8d 2d       	mov	r24, r13
    10e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <gu32_Overflows>
    10e6:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <gu32_Overflows+0x1>
    10ea:	a0 93 ba 00 	sts	0x00BA, r26	; 0x8000ba <gu32_Overflows+0x2>
    10ee:	b0 93 bb 00 	sts	0x00BB, r27	; 0x8000bb <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    10f2:	c0 92 b6 00 	sts	0x00B6, r12	; 0x8000b6 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    10f6:	89 2b       	or	r24, r25
    10f8:	8a 2b       	or	r24, r26
    10fa:	8b 2b       	or	r24, r27
    10fc:	49 f4       	brne	.+18     	; 0x1110 <TIM_DelayUs+0xba>
      {
         gu8_OverflowsComplete = HIGH;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    1104:	6c 2d       	mov	r22, r12
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	81 2f       	mov	r24, r17
    110a:	0e 94 70 07 	call	0xee0	; 0xee0 <TIM_Start>
    110e:	05 c0       	rjmp	.+10     	; 0x111a <TIM_DelayUs+0xc4>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1110:	6f ef       	ldi	r22, 0xFF	; 255
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	81 2f       	mov	r24, r17
    1116:	0e 94 70 07 	call	0xee0	; 0xee0 <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gEnu_State>
      return TIMER_E_PENDING;
    1120:	8d ef       	ldi	r24, 0xFD	; 253
    1122:	07 c0       	rjmp	.+14     	; 0x1132 <TIM_DelayUs+0xdc>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1124:	8c ef       	ldi	r24, 0xFC	; 252
    1126:	05 c0       	rjmp	.+10     	; 0x1132 <TIM_DelayUs+0xdc>
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    1128:	8e ef       	ldi	r24, 0xFE	; 254
    112a:	03 c0       	rjmp	.+6      	; 0x1132 <TIM_DelayUs+0xdc>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <TIM_DelayUs+0xdc>
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
    1130:	81 e0       	ldi	r24, 0x01	; 1
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	df 90       	pop	r13
    1146:	cf 90       	pop	r12
    1148:	bf 90       	pop	r11
    114a:	af 90       	pop	r10
    114c:	9f 90       	pop	r9
    114e:	8f 90       	pop	r8
    1150:	08 95       	ret

00001152 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1152:	8f 92       	push	r8
    1154:	9f 92       	push	r9
    1156:	af 92       	push	r10
    1158:	bf 92       	push	r11
    115a:	df 92       	push	r13
    115c:	ef 92       	push	r14
    115e:	ff 92       	push	r15
    1160:	0f 93       	push	r16
    1162:	1f 93       	push	r17
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	00 d0       	rcall	.+0      	; 0x116a <TIM_DelayMs+0x18>
    116a:	00 d0       	rcall	.+0      	; 0x116c <TIM_DelayMs+0x1a>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	18 2f       	mov	r17, r24
    1172:	04 2f       	mov	r16, r20
    1174:	d5 2e       	mov	r13, r21
    1176:	e6 2e       	mov	r14, r22
    1178:	f7 2e       	mov	r15, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	08 f0       	brcs	.+2      	; 0x1180 <TIM_DelayMs+0x2e>
    117e:	65 c0       	rjmp	.+202    	; 0x124a <TIM_DelayMs+0xf8>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    1180:	21 15       	cp	r18, r1
    1182:	31 05       	cpc	r19, r1
    1184:	09 f4       	brne	.+2      	; 0x1188 <TIM_DelayMs+0x36>
    1186:	63 c0       	rjmp	.+198    	; 0x124e <TIM_DelayMs+0xfc>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    1188:	30 93 b4 00 	sts	0x00B4, r19	; 0x8000b4 <gptr_CallerFunc+0x1>
    118c:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <gptr_CallerFunc>
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    1190:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gEnu_State>
    1194:	81 11       	cpse	r24, r1
    1196:	5d c0       	rjmp	.+186    	; 0x1252 <TIM_DelayMs+0x100>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    1198:	be 01       	movw	r22, r28
    119a:	6f 5f       	subi	r22, 0xFF	; 255
    119c:	7f 4f       	sbci	r23, 0xFF	; 255
    119e:	81 2f       	mov	r24, r17
    11a0:	0e 94 67 06 	call	0xcce	; 0xcce <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    11a4:	8c 3f       	cpi	r24, 0xFC	; 252
    11a6:	09 f4       	brne	.+2      	; 0x11aa <TIM_DelayMs+0x58>
    11a8:	4e c0       	rjmp	.+156    	; 0x1246 <TIM_DelayMs+0xf4>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    11aa:	89 80       	ldd	r8, Y+1	; 0x01
    11ac:	9a 80       	ldd	r9, Y+2	; 0x02
    11ae:	ab 80       	ldd	r10, Y+3	; 0x03
    11b0:	bc 80       	ldd	r11, Y+4	; 0x04
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	a9 01       	movw	r20, r18
    11b8:	c5 01       	movw	r24, r10
    11ba:	b4 01       	movw	r22, r8
    11bc:	0e 94 25 0a 	call	0x144a	; 0x144a <__cmpsf2>
    11c0:	88 23       	and	r24, r24
    11c2:	81 f0       	breq	.+32     	; 0x11e4 <TIM_DelayMs+0x92>
      {
         TIM_Delay /= f32_FreqRatio;
    11c4:	60 2f       	mov	r22, r16
    11c6:	7d 2d       	mov	r23, r13
    11c8:	8e 2d       	mov	r24, r14
    11ca:	9f 2d       	mov	r25, r15
    11cc:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__floatunsisf>
    11d0:	a5 01       	movw	r20, r10
    11d2:	94 01       	movw	r18, r8
    11d4:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__divsf3>
    11d8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fixunssfsi>
    11dc:	06 2f       	mov	r16, r22
    11de:	d7 2e       	mov	r13, r23
    11e0:	e8 2e       	mov	r14, r24
    11e2:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    11e4:	a8 ee       	ldi	r26, 0xE8	; 232
    11e6:	b3 e0       	ldi	r27, 0x03	; 3
    11e8:	20 2f       	mov	r18, r16
    11ea:	3d 2d       	mov	r19, r13
    11ec:	4e 2d       	mov	r20, r14
    11ee:	5f 2d       	mov	r21, r15
    11f0:	0e 94 83 0b 	call	0x1706	; 0x1706 <__muluhisi3>
    11f4:	bb 27       	eor	r27, r27
    11f6:	a9 2f       	mov	r26, r25
    11f8:	98 2f       	mov	r25, r24
    11fa:	87 2f       	mov	r24, r23
    11fc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <gu32_Overflows>
    1200:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <gu32_Overflows+0x1>
    1204:	a0 93 ba 00 	sts	0x00BA, r26	; 0x8000ba <gu32_Overflows+0x2>
    1208:	b0 93 bb 00 	sts	0x00BB, r27	; 0x8000bb <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    120c:	28 ee       	ldi	r18, 0xE8	; 232
    120e:	02 9f       	mul	r16, r18
    1210:	00 2d       	mov	r16, r0
    1212:	11 24       	eor	r1, r1
    1214:	00 93 b6 00 	sts	0x00B6, r16	; 0x8000b6 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    1218:	89 2b       	or	r24, r25
    121a:	8a 2b       	or	r24, r26
    121c:	8b 2b       	or	r24, r27
    121e:	49 f4       	brne	.+18     	; 0x1232 <TIM_DelayMs+0xe0>
      {
         gu8_OverflowsComplete = HIGH;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    1226:	60 2f       	mov	r22, r16
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	81 2f       	mov	r24, r17
    122c:	0e 94 70 07 	call	0xee0	; 0xee0 <TIM_Start>
    1230:	05 c0       	rjmp	.+10     	; 0x123c <TIM_DelayMs+0xea>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1232:	6f ef       	ldi	r22, 0xFF	; 255
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	81 2f       	mov	r24, r17
    1238:	0e 94 70 07 	call	0xee0	; 0xee0 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gEnu_State>
      return TIMER_E_PENDING;
    1242:	8d ef       	ldi	r24, 0xFD	; 253
    1244:	07 c0       	rjmp	.+14     	; 0x1254 <TIM_DelayMs+0x102>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1246:	8c ef       	ldi	r24, 0xFC	; 252
    1248:	05 c0       	rjmp	.+10     	; 0x1254 <TIM_DelayMs+0x102>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    124a:	8e ef       	ldi	r24, 0xFE	; 254
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <TIM_DelayMs+0x102>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <TIM_DelayMs+0x102>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
    1252:	81 e0       	ldi	r24, 0x01	; 1
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	df 90       	pop	r13
    126a:	bf 90       	pop	r11
    126c:	af 90       	pop	r10
    126e:	9f 90       	pop	r9
    1270:	8f 90       	pop	r8
    1272:	08 95       	ret

00001274 <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	1f 92       	push	r1
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
   if(DelayReady == gEnu_State)
    1280:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <gEnu_State>
    1284:	99 23       	and	r25, r25
    1286:	09 f4       	brne	.+2      	; 0x128a <TIM_DelayStatus+0x16>
    1288:	4a c0       	rjmp	.+148    	; 0x131e <TIM_DelayStatus+0xaa>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
    128a:	20 91 b3 00 	lds	r18, 0x00B3	; 0x8000b3 <gptr_CallerFunc>
    128e:	30 91 b4 00 	lds	r19, 0x00B4	; 0x8000b4 <gptr_CallerFunc+0x1>
    1292:	26 17       	cp	r18, r22
    1294:	37 07       	cpc	r19, r23
    1296:	09 f0       	breq	.+2      	; 0x129a <TIM_DelayStatus+0x26>
    1298:	44 c0       	rjmp	.+136    	; 0x1322 <TIM_DelayStatus+0xae>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    129a:	91 30       	cpi	r25, 0x01	; 1
    129c:	09 f0       	breq	.+2      	; 0x12a0 <TIM_DelayStatus+0x2c>
    129e:	43 c0       	rjmp	.+134    	; 0x1326 <TIM_DelayStatus+0xb2>
    12a0:	18 2f       	mov	r17, r24
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    12a2:	be 01       	movw	r22, r28
    12a4:	6f 5f       	subi	r22, 0xFF	; 255
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255
    12a8:	0e 94 97 07 	call	0xf2e	; 0xf2e <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    12ac:	81 11       	cpse	r24, r1
    12ae:	35 c0       	rjmp	.+106    	; 0x131a <TIM_DelayStatus+0xa6>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    12b0:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <gu8_OverflowsComplete>
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	41 f4       	brne	.+16     	; 0x12c8 <TIM_DelayStatus+0x54>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    12b8:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <gEnu_State>
            gu8_OverflowsComplete = LOW;
    12bc:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <gu8_OverflowsComplete>
            gu8_Remindar = 0;
    12c0:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <gu8_Remindar>
            /* return success message. */
            return ERROR_OK;
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	30 c0       	rjmp	.+96     	; 0x1328 <TIM_DelayStatus+0xb4>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    12c8:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <gu32_Overflows>
    12cc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <gu32_Overflows+0x1>
    12d0:	a0 91 ba 00 	lds	r26, 0x00BA	; 0x8000ba <gu32_Overflows+0x2>
    12d4:	b0 91 bb 00 	lds	r27, 0x00BB	; 0x8000bb <gu32_Overflows+0x3>
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	a1 09       	sbc	r26, r1
    12dc:	b1 09       	sbc	r27, r1
    12de:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <gu32_Overflows>
    12e2:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <gu32_Overflows+0x1>
    12e6:	a0 93 ba 00 	sts	0x00BA, r26	; 0x8000ba <gu32_Overflows+0x2>
    12ea:	b0 93 bb 00 	sts	0x00BB, r27	; 0x8000bb <gu32_Overflows+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    12ee:	89 2b       	or	r24, r25
    12f0:	8a 2b       	or	r24, r26
    12f2:	8b 2b       	or	r24, r27
    12f4:	59 f4       	brne	.+22     	; 0x130c <TIM_DelayStatus+0x98>
         {
            gu8_OverflowsComplete = HIGH;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <gu8_OverflowsComplete>
            TIM_Start(TIM_channel, gu8_Remindar);
    12fc:	60 91 b6 00 	lds	r22, 0x00B6	; 0x8000b6 <gu8_Remindar>
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	81 2f       	mov	r24, r17
    1304:	0e 94 70 07 	call	0xee0	; 0xee0 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
    1308:	8d ef       	ldi	r24, 0xFD	; 253
    130a:	0e c0       	rjmp	.+28     	; 0x1328 <TIM_DelayStatus+0xb4>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    130c:	6f ef       	ldi	r22, 0xFF	; 255
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	81 2f       	mov	r24, r17
    1312:	0e 94 70 07 	call	0xee0	; 0xee0 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    1316:	8d ef       	ldi	r24, 0xFD	; 253
    1318:	07 c0       	rjmp	.+14     	; 0x1328 <TIM_DelayStatus+0xb4>
   }
   else
   {
      return ERROR_NOK;
   }
   return 0;
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <TIM_DelayStatus+0xb4>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
    131e:	8b ef       	ldi	r24, 0xFB	; 251
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <TIM_DelayStatus+0xb4>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <TIM_DelayStatus+0xb4>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
    1326:	81 e0       	ldi	r24, 0x01	; 1
   }
   return 0;
    1328:	0f 90       	pop	r0
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	08 95       	ret

00001332 <main>:
#include "task.h"
#include "DISPLAY.h"
#include "STORAGE.h"

int main(void)
{
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	28 97       	sbiw	r28, 0x08	; 8
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
	*/
	//while( != OperationSuccess);
	uint8_t passworLength = 4;
	uint8_t const wordLength = 9;
	uint8_t positionaftefirstlineword = 0xc0;
	while(LCD_Init() != OperationSuccess);
    1346:	0e 94 56 04 	call	0x8ac	; 0x8ac <LCD_Init>
    134a:	81 11       	cpse	r24, r1
    134c:	fc cf       	rjmp	.-8      	; 0x1346 <main+0x14>
	while(LCD_SendCommand(0X80|7)!= OperationSuccess);
    134e:	87 e8       	ldi	r24, 0x87	; 135
    1350:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
    1354:	81 11       	cpse	r24, r1
    1356:	fb cf       	rjmp	.-10     	; 0x134e <main+0x1c>
	while(LCD_SendString((uint8_t*)"AhmedAdel") != OperationSuccess);
    1358:	84 e7       	ldi	r24, 0x74	; 116
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <LCD_SendString>
    1360:	81 11       	cpse	r24, r1
    1362:	fa cf       	rjmp	.-12     	; 0x1358 <main+0x26>
	while(LCD_SendCommand(positionaftefirstlineword)!= OperationSuccess);
    1364:	80 ec       	ldi	r24, 0xC0	; 192
    1366:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
    136a:	81 11       	cpse	r24, r1
    136c:	fb cf       	rjmp	.-10     	; 0x1364 <main+0x32>
    136e:	10 e0       	ldi	r17, 0x00	; 0
    1370:	06 c0       	rjmp	.+12     	; 0x137e <main+0x4c>
	for(uint8_t i = 0; i< passworLength; i++)
	{
		while(LCD_SendData('*')!= OperationSuccess);
    1372:	8a e2       	ldi	r24, 0x2A	; 42
    1374:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendData>
    1378:	81 11       	cpse	r24, r1
    137a:	fb cf       	rjmp	.-10     	; 0x1372 <main+0x40>
	uint8_t positionaftefirstlineword = 0xc0;
	while(LCD_Init() != OperationSuccess);
	while(LCD_SendCommand(0X80|7)!= OperationSuccess);
	while(LCD_SendString((uint8_t*)"AhmedAdel") != OperationSuccess);
	while(LCD_SendCommand(positionaftefirstlineword)!= OperationSuccess);
	for(uint8_t i = 0; i< passworLength; i++)
    137c:	1f 5f       	subi	r17, 0xFF	; 255
    137e:	14 30       	cpi	r17, 0x04	; 4
    1380:	c0 f3       	brcs	.-16     	; 0x1372 <main+0x40>
	}
	uint8_t l = (passworLength+(16-wordLength));
	/*DISPLAY_SetState(PassEntering);*/
	while (1) 
    {
		for(uint8_t y = 0; y<(16-wordLength); y++)
    1382:	10 e0       	ldi	r17, 0x00	; 0
    1384:	24 c0       	rjmp	.+72     	; 0x13ce <main+0x9c>
		{
			while(LCD_SendCommand(LCD_SHIFTDISPLEFT)!= OperationSuccess);
    1386:	88 e1       	ldi	r24, 0x18	; 24
    1388:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
    138c:	81 11       	cpse	r24, r1
    138e:	fb cf       	rjmp	.-10     	; 0x1386 <main+0x54>
			while(LCD_SendData('*')!= OperationSuccess);
    1390:	8a e2       	ldi	r24, 0x2A	; 42
    1392:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendData>
    1396:	81 11       	cpse	r24, r1
    1398:	fb cf       	rjmp	.-10     	; 0x1390 <main+0x5e>
			for(uint32_t volatile x = 0; x < 50000; x++);
    139a:	1d 82       	std	Y+5, r1	; 0x05
    139c:	1e 82       	std	Y+6, r1	; 0x06
    139e:	1f 82       	std	Y+7, r1	; 0x07
    13a0:	18 86       	std	Y+8, r1	; 0x08
    13a2:	0b c0       	rjmp	.+22     	; 0x13ba <main+0x88>
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	af 81       	ldd	r26, Y+7	; 0x07
    13aa:	b8 85       	ldd	r27, Y+8	; 0x08
    13ac:	01 96       	adiw	r24, 0x01	; 1
    13ae:	a1 1d       	adc	r26, r1
    13b0:	b1 1d       	adc	r27, r1
    13b2:	8d 83       	std	Y+5, r24	; 0x05
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	af 83       	std	Y+7, r26	; 0x07
    13b8:	b8 87       	std	Y+8, r27	; 0x08
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	af 81       	ldd	r26, Y+7	; 0x07
    13c0:	b8 85       	ldd	r27, Y+8	; 0x08
    13c2:	80 35       	cpi	r24, 0x50	; 80
    13c4:	93 4c       	sbci	r25, 0xC3	; 195
    13c6:	a1 05       	cpc	r26, r1
    13c8:	b1 05       	cpc	r27, r1
    13ca:	60 f3       	brcs	.-40     	; 0x13a4 <main+0x72>
	}
	uint8_t l = (passworLength+(16-wordLength));
	/*DISPLAY_SetState(PassEntering);*/
	while (1) 
    {
		for(uint8_t y = 0; y<(16-wordLength); y++)
    13cc:	1f 5f       	subi	r17, 0xFF	; 255
    13ce:	81 2f       	mov	r24, r17
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	07 97       	sbiw	r24, 0x07	; 7
    13d4:	c4 f2       	brlt	.-80     	; 0x1386 <main+0x54>
    13d6:	f1 2c       	mov	r15, r1
    13d8:	0b e0       	ldi	r16, 0x0B	; 11
    13da:	32 c0       	rjmp	.+100    	; 0x1440 <main+0x10e>
			for(uint32_t volatile x = 0; x < 50000; x++);
		}
		for(uint8_t y = 0; y<(16-wordLength);y++)
		{
			
			while(LCD_SendCommand(LCD_SHIFTDISPRIGHT)!= OperationSuccess);
    13dc:	8c e1       	ldi	r24, 0x1C	; 28
    13de:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
    13e2:	81 11       	cpse	r24, r1
    13e4:	fb cf       	rjmp	.-10     	; 0x13dc <main+0xaa>
			while(LCD_SendCommand(0xc0|l)!= OperationSuccess);
    13e6:	10 2f       	mov	r17, r16
    13e8:	10 6c       	ori	r17, 0xC0	; 192
    13ea:	81 2f       	mov	r24, r17
    13ec:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
    13f0:	81 11       	cpse	r24, r1
    13f2:	f9 cf       	rjmp	.-14     	; 0x13e6 <main+0xb4>
			while(LCD_SendData(' ')!= OperationSuccess);
    13f4:	80 e2       	ldi	r24, 0x20	; 32
    13f6:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendData>
    13fa:	81 11       	cpse	r24, r1
    13fc:	fb cf       	rjmp	.-10     	; 0x13f4 <main+0xc2>
			while(LCD_SendCommand((0xc0|l)-1)!= OperationSuccess);
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	81 0f       	add	r24, r17
    1402:	0e 94 39 03 	call	0x672	; 0x672 <LCD_SendCommand>
    1406:	81 11       	cpse	r24, r1
    1408:	fa cf       	rjmp	.-12     	; 0x13fe <main+0xcc>
			for(uint32_t volatile x = 0; x < 50000; x++);
    140a:	19 82       	std	Y+1, r1	; 0x01
    140c:	1a 82       	std	Y+2, r1	; 0x02
    140e:	1b 82       	std	Y+3, r1	; 0x03
    1410:	1c 82       	std	Y+4, r1	; 0x04
    1412:	0b c0       	rjmp	.+22     	; 0x142a <main+0xf8>
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	9a 81       	ldd	r25, Y+2	; 0x02
    1418:	ab 81       	ldd	r26, Y+3	; 0x03
    141a:	bc 81       	ldd	r27, Y+4	; 0x04
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	a1 1d       	adc	r26, r1
    1420:	b1 1d       	adc	r27, r1
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	9a 83       	std	Y+2, r25	; 0x02
    1426:	ab 83       	std	Y+3, r26	; 0x03
    1428:	bc 83       	std	Y+4, r27	; 0x04
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	ab 81       	ldd	r26, Y+3	; 0x03
    1430:	bc 81       	ldd	r27, Y+4	; 0x04
    1432:	80 35       	cpi	r24, 0x50	; 80
    1434:	93 4c       	sbci	r25, 0xC3	; 195
    1436:	a1 05       	cpc	r26, r1
    1438:	b1 05       	cpc	r27, r1
    143a:	60 f3       	brcs	.-40     	; 0x1414 <main+0xe2>
			l--;
    143c:	01 50       	subi	r16, 0x01	; 1
		{
			while(LCD_SendCommand(LCD_SHIFTDISPLEFT)!= OperationSuccess);
			while(LCD_SendData('*')!= OperationSuccess);
			for(uint32_t volatile x = 0; x < 50000; x++);
		}
		for(uint8_t y = 0; y<(16-wordLength);y++)
    143e:	f3 94       	inc	r15
    1440:	8f 2d       	mov	r24, r15
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	07 97       	sbiw	r24, 0x07	; 7
    1446:	54 f2       	brlt	.-108    	; 0x13dc <main+0xaa>
    1448:	9c cf       	rjmp	.-200    	; 0x1382 <main+0x50>

0000144a <__cmpsf2>:
    144a:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_cmp>
    144e:	08 f4       	brcc	.+2      	; 0x1452 <__cmpsf2+0x8>
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	08 95       	ret

00001454 <__divsf3>:
    1454:	0e 94 3e 0a 	call	0x147c	; 0x147c <__divsf3x>
    1458:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_round>
    145c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__fp_pscB>
    1460:	58 f0       	brcs	.+22     	; 0x1478 <__divsf3+0x24>
    1462:	0e 94 35 0b 	call	0x166a	; 0x166a <__fp_pscA>
    1466:	40 f0       	brcs	.+16     	; 0x1478 <__divsf3+0x24>
    1468:	29 f4       	brne	.+10     	; 0x1474 <__divsf3+0x20>
    146a:	5f 3f       	cpi	r21, 0xFF	; 255
    146c:	29 f0       	breq	.+10     	; 0x1478 <__divsf3+0x24>
    146e:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_inf>
    1472:	51 11       	cpse	r21, r1
    1474:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__fp_szero>
    1478:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_nan>

0000147c <__divsf3x>:
    147c:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_split3>
    1480:	68 f3       	brcs	.-38     	; 0x145c <__divsf3+0x8>

00001482 <__divsf3_pse>:
    1482:	99 23       	and	r25, r25
    1484:	b1 f3       	breq	.-20     	; 0x1472 <__divsf3+0x1e>
    1486:	55 23       	and	r21, r21
    1488:	91 f3       	breq	.-28     	; 0x146e <__divsf3+0x1a>
    148a:	95 1b       	sub	r25, r21
    148c:	55 0b       	sbc	r21, r21
    148e:	bb 27       	eor	r27, r27
    1490:	aa 27       	eor	r26, r26
    1492:	62 17       	cp	r22, r18
    1494:	73 07       	cpc	r23, r19
    1496:	84 07       	cpc	r24, r20
    1498:	38 f0       	brcs	.+14     	; 0x14a8 <__divsf3_pse+0x26>
    149a:	9f 5f       	subi	r25, 0xFF	; 255
    149c:	5f 4f       	sbci	r21, 0xFF	; 255
    149e:	22 0f       	add	r18, r18
    14a0:	33 1f       	adc	r19, r19
    14a2:	44 1f       	adc	r20, r20
    14a4:	aa 1f       	adc	r26, r26
    14a6:	a9 f3       	breq	.-22     	; 0x1492 <__divsf3_pse+0x10>
    14a8:	35 d0       	rcall	.+106    	; 0x1514 <__divsf3_pse+0x92>
    14aa:	0e 2e       	mov	r0, r30
    14ac:	3a f0       	brmi	.+14     	; 0x14bc <__divsf3_pse+0x3a>
    14ae:	e0 e8       	ldi	r30, 0x80	; 128
    14b0:	32 d0       	rcall	.+100    	; 0x1516 <__divsf3_pse+0x94>
    14b2:	91 50       	subi	r25, 0x01	; 1
    14b4:	50 40       	sbci	r21, 0x00	; 0
    14b6:	e6 95       	lsr	r30
    14b8:	00 1c       	adc	r0, r0
    14ba:	ca f7       	brpl	.-14     	; 0x14ae <__divsf3_pse+0x2c>
    14bc:	2b d0       	rcall	.+86     	; 0x1514 <__divsf3_pse+0x92>
    14be:	fe 2f       	mov	r31, r30
    14c0:	29 d0       	rcall	.+82     	; 0x1514 <__divsf3_pse+0x92>
    14c2:	66 0f       	add	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	88 1f       	adc	r24, r24
    14c8:	bb 1f       	adc	r27, r27
    14ca:	26 17       	cp	r18, r22
    14cc:	37 07       	cpc	r19, r23
    14ce:	48 07       	cpc	r20, r24
    14d0:	ab 07       	cpc	r26, r27
    14d2:	b0 e8       	ldi	r27, 0x80	; 128
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <__divsf3_pse+0x56>
    14d6:	bb 0b       	sbc	r27, r27
    14d8:	80 2d       	mov	r24, r0
    14da:	bf 01       	movw	r22, r30
    14dc:	ff 27       	eor	r31, r31
    14de:	93 58       	subi	r25, 0x83	; 131
    14e0:	5f 4f       	sbci	r21, 0xFF	; 255
    14e2:	3a f0       	brmi	.+14     	; 0x14f2 <__divsf3_pse+0x70>
    14e4:	9e 3f       	cpi	r25, 0xFE	; 254
    14e6:	51 05       	cpc	r21, r1
    14e8:	78 f0       	brcs	.+30     	; 0x1508 <__divsf3_pse+0x86>
    14ea:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_inf>
    14ee:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__fp_szero>
    14f2:	5f 3f       	cpi	r21, 0xFF	; 255
    14f4:	e4 f3       	brlt	.-8      	; 0x14ee <__divsf3_pse+0x6c>
    14f6:	98 3e       	cpi	r25, 0xE8	; 232
    14f8:	d4 f3       	brlt	.-12     	; 0x14ee <__divsf3_pse+0x6c>
    14fa:	86 95       	lsr	r24
    14fc:	77 95       	ror	r23
    14fe:	67 95       	ror	r22
    1500:	b7 95       	ror	r27
    1502:	f7 95       	ror	r31
    1504:	9f 5f       	subi	r25, 0xFF	; 255
    1506:	c9 f7       	brne	.-14     	; 0x14fa <__divsf3_pse+0x78>
    1508:	88 0f       	add	r24, r24
    150a:	91 1d       	adc	r25, r1
    150c:	96 95       	lsr	r25
    150e:	87 95       	ror	r24
    1510:	97 f9       	bld	r25, 7
    1512:	08 95       	ret
    1514:	e1 e0       	ldi	r30, 0x01	; 1
    1516:	66 0f       	add	r22, r22
    1518:	77 1f       	adc	r23, r23
    151a:	88 1f       	adc	r24, r24
    151c:	bb 1f       	adc	r27, r27
    151e:	62 17       	cp	r22, r18
    1520:	73 07       	cpc	r23, r19
    1522:	84 07       	cpc	r24, r20
    1524:	ba 07       	cpc	r27, r26
    1526:	20 f0       	brcs	.+8      	; 0x1530 <__divsf3_pse+0xae>
    1528:	62 1b       	sub	r22, r18
    152a:	73 0b       	sbc	r23, r19
    152c:	84 0b       	sbc	r24, r20
    152e:	ba 0b       	sbc	r27, r26
    1530:	ee 1f       	adc	r30, r30
    1532:	88 f7       	brcc	.-30     	; 0x1516 <__divsf3_pse+0x94>
    1534:	e0 95       	com	r30
    1536:	08 95       	ret

00001538 <__fixunssfsi>:
    1538:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__fp_splitA>
    153c:	88 f0       	brcs	.+34     	; 0x1560 <__fixunssfsi+0x28>
    153e:	9f 57       	subi	r25, 0x7F	; 127
    1540:	98 f0       	brcs	.+38     	; 0x1568 <__fixunssfsi+0x30>
    1542:	b9 2f       	mov	r27, r25
    1544:	99 27       	eor	r25, r25
    1546:	b7 51       	subi	r27, 0x17	; 23
    1548:	b0 f0       	brcs	.+44     	; 0x1576 <__fixunssfsi+0x3e>
    154a:	e1 f0       	breq	.+56     	; 0x1584 <__fixunssfsi+0x4c>
    154c:	66 0f       	add	r22, r22
    154e:	77 1f       	adc	r23, r23
    1550:	88 1f       	adc	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	1a f0       	brmi	.+6      	; 0x155c <__fixunssfsi+0x24>
    1556:	ba 95       	dec	r27
    1558:	c9 f7       	brne	.-14     	; 0x154c <__fixunssfsi+0x14>
    155a:	14 c0       	rjmp	.+40     	; 0x1584 <__fixunssfsi+0x4c>
    155c:	b1 30       	cpi	r27, 0x01	; 1
    155e:	91 f0       	breq	.+36     	; 0x1584 <__fixunssfsi+0x4c>
    1560:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__fp_zero>
    1564:	b1 e0       	ldi	r27, 0x01	; 1
    1566:	08 95       	ret
    1568:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__fp_zero>
    156c:	67 2f       	mov	r22, r23
    156e:	78 2f       	mov	r23, r24
    1570:	88 27       	eor	r24, r24
    1572:	b8 5f       	subi	r27, 0xF8	; 248
    1574:	39 f0       	breq	.+14     	; 0x1584 <__fixunssfsi+0x4c>
    1576:	b9 3f       	cpi	r27, 0xF9	; 249
    1578:	cc f3       	brlt	.-14     	; 0x156c <__fixunssfsi+0x34>
    157a:	86 95       	lsr	r24
    157c:	77 95       	ror	r23
    157e:	67 95       	ror	r22
    1580:	b3 95       	inc	r27
    1582:	d9 f7       	brne	.-10     	; 0x157a <__fixunssfsi+0x42>
    1584:	3e f4       	brtc	.+14     	; 0x1594 <__fixunssfsi+0x5c>
    1586:	90 95       	com	r25
    1588:	80 95       	com	r24
    158a:	70 95       	com	r23
    158c:	61 95       	neg	r22
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	8f 4f       	sbci	r24, 0xFF	; 255
    1592:	9f 4f       	sbci	r25, 0xFF	; 255
    1594:	08 95       	ret

00001596 <__floatunsisf>:
    1596:	e8 94       	clt
    1598:	09 c0       	rjmp	.+18     	; 0x15ac <__floatsisf+0x12>

0000159a <__floatsisf>:
    159a:	97 fb       	bst	r25, 7
    159c:	3e f4       	brtc	.+14     	; 0x15ac <__floatsisf+0x12>
    159e:	90 95       	com	r25
    15a0:	80 95       	com	r24
    15a2:	70 95       	com	r23
    15a4:	61 95       	neg	r22
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	8f 4f       	sbci	r24, 0xFF	; 255
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	99 23       	and	r25, r25
    15ae:	a9 f0       	breq	.+42     	; 0x15da <__floatsisf+0x40>
    15b0:	f9 2f       	mov	r31, r25
    15b2:	96 e9       	ldi	r25, 0x96	; 150
    15b4:	bb 27       	eor	r27, r27
    15b6:	93 95       	inc	r25
    15b8:	f6 95       	lsr	r31
    15ba:	87 95       	ror	r24
    15bc:	77 95       	ror	r23
    15be:	67 95       	ror	r22
    15c0:	b7 95       	ror	r27
    15c2:	f1 11       	cpse	r31, r1
    15c4:	f8 cf       	rjmp	.-16     	; 0x15b6 <__floatsisf+0x1c>
    15c6:	fa f4       	brpl	.+62     	; 0x1606 <__floatsisf+0x6c>
    15c8:	bb 0f       	add	r27, r27
    15ca:	11 f4       	brne	.+4      	; 0x15d0 <__floatsisf+0x36>
    15cc:	60 ff       	sbrs	r22, 0
    15ce:	1b c0       	rjmp	.+54     	; 0x1606 <__floatsisf+0x6c>
    15d0:	6f 5f       	subi	r22, 0xFF	; 255
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	8f 4f       	sbci	r24, 0xFF	; 255
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	16 c0       	rjmp	.+44     	; 0x1606 <__floatsisf+0x6c>
    15da:	88 23       	and	r24, r24
    15dc:	11 f0       	breq	.+4      	; 0x15e2 <__floatsisf+0x48>
    15de:	96 e9       	ldi	r25, 0x96	; 150
    15e0:	11 c0       	rjmp	.+34     	; 0x1604 <__floatsisf+0x6a>
    15e2:	77 23       	and	r23, r23
    15e4:	21 f0       	breq	.+8      	; 0x15ee <__floatsisf+0x54>
    15e6:	9e e8       	ldi	r25, 0x8E	; 142
    15e8:	87 2f       	mov	r24, r23
    15ea:	76 2f       	mov	r23, r22
    15ec:	05 c0       	rjmp	.+10     	; 0x15f8 <__floatsisf+0x5e>
    15ee:	66 23       	and	r22, r22
    15f0:	71 f0       	breq	.+28     	; 0x160e <__floatsisf+0x74>
    15f2:	96 e8       	ldi	r25, 0x86	; 134
    15f4:	86 2f       	mov	r24, r22
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	2a f0       	brmi	.+10     	; 0x1606 <__floatsisf+0x6c>
    15fc:	9a 95       	dec	r25
    15fe:	66 0f       	add	r22, r22
    1600:	77 1f       	adc	r23, r23
    1602:	88 1f       	adc	r24, r24
    1604:	da f7       	brpl	.-10     	; 0x15fc <__floatsisf+0x62>
    1606:	88 0f       	add	r24, r24
    1608:	96 95       	lsr	r25
    160a:	87 95       	ror	r24
    160c:	97 f9       	bld	r25, 7
    160e:	08 95       	ret

00001610 <__fp_cmp>:
    1610:	99 0f       	add	r25, r25
    1612:	00 08       	sbc	r0, r0
    1614:	55 0f       	add	r21, r21
    1616:	aa 0b       	sbc	r26, r26
    1618:	e0 e8       	ldi	r30, 0x80	; 128
    161a:	fe ef       	ldi	r31, 0xFE	; 254
    161c:	16 16       	cp	r1, r22
    161e:	17 06       	cpc	r1, r23
    1620:	e8 07       	cpc	r30, r24
    1622:	f9 07       	cpc	r31, r25
    1624:	c0 f0       	brcs	.+48     	; 0x1656 <__fp_cmp+0x46>
    1626:	12 16       	cp	r1, r18
    1628:	13 06       	cpc	r1, r19
    162a:	e4 07       	cpc	r30, r20
    162c:	f5 07       	cpc	r31, r21
    162e:	98 f0       	brcs	.+38     	; 0x1656 <__fp_cmp+0x46>
    1630:	62 1b       	sub	r22, r18
    1632:	73 0b       	sbc	r23, r19
    1634:	84 0b       	sbc	r24, r20
    1636:	95 0b       	sbc	r25, r21
    1638:	39 f4       	brne	.+14     	; 0x1648 <__fp_cmp+0x38>
    163a:	0a 26       	eor	r0, r26
    163c:	61 f0       	breq	.+24     	; 0x1656 <__fp_cmp+0x46>
    163e:	23 2b       	or	r18, r19
    1640:	24 2b       	or	r18, r20
    1642:	25 2b       	or	r18, r21
    1644:	21 f4       	brne	.+8      	; 0x164e <__fp_cmp+0x3e>
    1646:	08 95       	ret
    1648:	0a 26       	eor	r0, r26
    164a:	09 f4       	brne	.+2      	; 0x164e <__fp_cmp+0x3e>
    164c:	a1 40       	sbci	r26, 0x01	; 1
    164e:	a6 95       	lsr	r26
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    1652:	81 1d       	adc	r24, r1
    1654:	81 1d       	adc	r24, r1
    1656:	08 95       	ret

00001658 <__fp_inf>:
    1658:	97 f9       	bld	r25, 7
    165a:	9f 67       	ori	r25, 0x7F	; 127
    165c:	80 e8       	ldi	r24, 0x80	; 128
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	08 95       	ret

00001664 <__fp_nan>:
    1664:	9f ef       	ldi	r25, 0xFF	; 255
    1666:	80 ec       	ldi	r24, 0xC0	; 192
    1668:	08 95       	ret

0000166a <__fp_pscA>:
    166a:	00 24       	eor	r0, r0
    166c:	0a 94       	dec	r0
    166e:	16 16       	cp	r1, r22
    1670:	17 06       	cpc	r1, r23
    1672:	18 06       	cpc	r1, r24
    1674:	09 06       	cpc	r0, r25
    1676:	08 95       	ret

00001678 <__fp_pscB>:
    1678:	00 24       	eor	r0, r0
    167a:	0a 94       	dec	r0
    167c:	12 16       	cp	r1, r18
    167e:	13 06       	cpc	r1, r19
    1680:	14 06       	cpc	r1, r20
    1682:	05 06       	cpc	r0, r21
    1684:	08 95       	ret

00001686 <__fp_round>:
    1686:	09 2e       	mov	r0, r25
    1688:	03 94       	inc	r0
    168a:	00 0c       	add	r0, r0
    168c:	11 f4       	brne	.+4      	; 0x1692 <__fp_round+0xc>
    168e:	88 23       	and	r24, r24
    1690:	52 f0       	brmi	.+20     	; 0x16a6 <__fp_round+0x20>
    1692:	bb 0f       	add	r27, r27
    1694:	40 f4       	brcc	.+16     	; 0x16a6 <__fp_round+0x20>
    1696:	bf 2b       	or	r27, r31
    1698:	11 f4       	brne	.+4      	; 0x169e <__fp_round+0x18>
    169a:	60 ff       	sbrs	r22, 0
    169c:	04 c0       	rjmp	.+8      	; 0x16a6 <__fp_round+0x20>
    169e:	6f 5f       	subi	r22, 0xFF	; 255
    16a0:	7f 4f       	sbci	r23, 0xFF	; 255
    16a2:	8f 4f       	sbci	r24, 0xFF	; 255
    16a4:	9f 4f       	sbci	r25, 0xFF	; 255
    16a6:	08 95       	ret

000016a8 <__fp_split3>:
    16a8:	57 fd       	sbrc	r21, 7
    16aa:	90 58       	subi	r25, 0x80	; 128
    16ac:	44 0f       	add	r20, r20
    16ae:	55 1f       	adc	r21, r21
    16b0:	59 f0       	breq	.+22     	; 0x16c8 <__fp_splitA+0x10>
    16b2:	5f 3f       	cpi	r21, 0xFF	; 255
    16b4:	71 f0       	breq	.+28     	; 0x16d2 <__fp_splitA+0x1a>
    16b6:	47 95       	ror	r20

000016b8 <__fp_splitA>:
    16b8:	88 0f       	add	r24, r24
    16ba:	97 fb       	bst	r25, 7
    16bc:	99 1f       	adc	r25, r25
    16be:	61 f0       	breq	.+24     	; 0x16d8 <__fp_splitA+0x20>
    16c0:	9f 3f       	cpi	r25, 0xFF	; 255
    16c2:	79 f0       	breq	.+30     	; 0x16e2 <__fp_splitA+0x2a>
    16c4:	87 95       	ror	r24
    16c6:	08 95       	ret
    16c8:	12 16       	cp	r1, r18
    16ca:	13 06       	cpc	r1, r19
    16cc:	14 06       	cpc	r1, r20
    16ce:	55 1f       	adc	r21, r21
    16d0:	f2 cf       	rjmp	.-28     	; 0x16b6 <__fp_split3+0xe>
    16d2:	46 95       	lsr	r20
    16d4:	f1 df       	rcall	.-30     	; 0x16b8 <__fp_splitA>
    16d6:	08 c0       	rjmp	.+16     	; 0x16e8 <__fp_splitA+0x30>
    16d8:	16 16       	cp	r1, r22
    16da:	17 06       	cpc	r1, r23
    16dc:	18 06       	cpc	r1, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	f1 cf       	rjmp	.-30     	; 0x16c4 <__fp_splitA+0xc>
    16e2:	86 95       	lsr	r24
    16e4:	71 05       	cpc	r23, r1
    16e6:	61 05       	cpc	r22, r1
    16e8:	08 94       	sec
    16ea:	08 95       	ret

000016ec <__fp_zero>:
    16ec:	e8 94       	clt

000016ee <__fp_szero>:
    16ee:	bb 27       	eor	r27, r27
    16f0:	66 27       	eor	r22, r22
    16f2:	77 27       	eor	r23, r23
    16f4:	cb 01       	movw	r24, r22
    16f6:	97 f9       	bld	r25, 7
    16f8:	08 95       	ret

000016fa <__tablejump2__>:
    16fa:	ee 0f       	add	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	05 90       	lpm	r0, Z+
    1700:	f4 91       	lpm	r31, Z
    1702:	e0 2d       	mov	r30, r0
    1704:	09 94       	ijmp

00001706 <__muluhisi3>:
    1706:	0e 94 8e 0b 	call	0x171c	; 0x171c <__umulhisi3>
    170a:	a5 9f       	mul	r26, r21
    170c:	90 0d       	add	r25, r0
    170e:	b4 9f       	mul	r27, r20
    1710:	90 0d       	add	r25, r0
    1712:	a4 9f       	mul	r26, r20
    1714:	80 0d       	add	r24, r0
    1716:	91 1d       	adc	r25, r1
    1718:	11 24       	eor	r1, r1
    171a:	08 95       	ret

0000171c <__umulhisi3>:
    171c:	a2 9f       	mul	r26, r18
    171e:	b0 01       	movw	r22, r0
    1720:	b3 9f       	mul	r27, r19
    1722:	c0 01       	movw	r24, r0
    1724:	a3 9f       	mul	r26, r19
    1726:	70 0d       	add	r23, r0
    1728:	81 1d       	adc	r24, r1
    172a:	11 24       	eor	r1, r1
    172c:	91 1d       	adc	r25, r1
    172e:	b2 9f       	mul	r27, r18
    1730:	70 0d       	add	r23, r0
    1732:	81 1d       	adc	r24, r1
    1734:	11 24       	eor	r1, r1
    1736:	91 1d       	adc	r25, r1
    1738:	08 95       	ret

0000173a <_exit>:
    173a:	f8 94       	cli

0000173c <__stop_program>:
    173c:	ff cf       	rjmp	.-2      	; 0x173c <__stop_program>
