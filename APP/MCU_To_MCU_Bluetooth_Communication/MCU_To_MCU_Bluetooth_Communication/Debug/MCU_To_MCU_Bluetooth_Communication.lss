
MCU_To_MCU_Bluetooth_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000021f0  00002284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000655  00800080  00800080  000022a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000022d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00002310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046ad  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001183  00000000  00000000  00006d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cbe  00000000  00000000  00007eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f4  00000000  00000000  0000ab70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016f5  00000000  00000000  0000b564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003973  00000000  00000000  0000cc59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  000105cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_7>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	91 0c       	add	r9, r1
      56:	9c 0c       	add	r9, r12
      58:	a7 0c       	add	r10, r7
      5a:	b2 0c       	add	r11, r2
      5c:	bd 0c       	add	r11, r13
      5e:	c8 0c       	add	r12, r8
      60:	d3 0c       	add	r13, r3

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e0 ef       	ldi	r30, 0xF0	; 240
      76:	f1 e2       	ldi	r31, 0x21	; 33
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a0 38       	cpi	r26, 0x80	; 128
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	26 e0       	ldi	r18, 0x06	; 6
      86:	a0 e8       	ldi	r26, 0x80	; 128
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a5 3d       	cpi	r26, 0xD5	; 213
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <main>
      98:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
      a0:	fc 01       	movw	r30, r24
      a2:	03 96       	adiw	r24, 0x03	; 3
      a4:	92 83       	std	Z+2, r25	; 0x02
      a6:	81 83       	std	Z+1, r24	; 0x01
      a8:	2f ef       	ldi	r18, 0xFF	; 255
      aa:	3f ef       	ldi	r19, 0xFF	; 255
      ac:	34 83       	std	Z+4, r19	; 0x04
      ae:	23 83       	std	Z+3, r18	; 0x03
      b0:	96 83       	std	Z+6, r25	; 0x06
      b2:	85 83       	std	Z+5, r24	; 0x05
      b4:	90 87       	std	Z+8, r25	; 0x08
      b6:	87 83       	std	Z+7, r24	; 0x07
      b8:	10 82       	st	Z, r1
      ba:	08 95       	ret

000000bc <vListInitialiseItem>:
      bc:	fc 01       	movw	r30, r24
      be:	11 86       	std	Z+9, r1	; 0x09
      c0:	10 86       	std	Z+8, r1	; 0x08
      c2:	08 95       	ret

000000c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
      c8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
      ca:	48 81       	ld	r20, Y
      cc:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
      ce:	4f 3f       	cpi	r20, 0xFF	; 255
      d0:	2f ef       	ldi	r18, 0xFF	; 255
      d2:	52 07       	cpc	r21, r18
      d4:	21 f4       	brne	.+8      	; 0xde <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
      d6:	fc 01       	movw	r30, r24
      d8:	a7 81       	ldd	r26, Z+7	; 0x07
      da:	b0 85       	ldd	r27, Z+8	; 0x08
      dc:	0d c0       	rjmp	.+26     	; 0xf8 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
      de:	dc 01       	movw	r26, r24
      e0:	13 96       	adiw	r26, 0x03	; 3
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <vListInsert+0x22>
      e4:	df 01       	movw	r26, r30
      e6:	12 96       	adiw	r26, 0x02	; 2
      e8:	ed 91       	ld	r30, X+
      ea:	fc 91       	ld	r31, X
      ec:	13 97       	sbiw	r26, 0x03	; 3
      ee:	20 81       	ld	r18, Z
      f0:	31 81       	ldd	r19, Z+1	; 0x01
      f2:	42 17       	cp	r20, r18
      f4:	53 07       	cpc	r21, r19
      f6:	b0 f7       	brcc	.-20     	; 0xe4 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
      f8:	12 96       	adiw	r26, 0x02	; 2
      fa:	ed 91       	ld	r30, X+
      fc:	fc 91       	ld	r31, X
      fe:	13 97       	sbiw	r26, 0x03	; 3
     100:	fb 83       	std	Y+3, r31	; 0x03
     102:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     104:	d5 83       	std	Z+5, r29	; 0x05
     106:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     108:	bd 83       	std	Y+5, r27	; 0x05
     10a:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     10c:	13 96       	adiw	r26, 0x03	; 3
     10e:	dc 93       	st	X, r29
     110:	ce 93       	st	-X, r28
     112:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     114:	99 87       	std	Y+9, r25	; 0x09
     116:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     118:	fc 01       	movw	r30, r24
     11a:	20 81       	ld	r18, Z
     11c:	2f 5f       	subi	r18, 0xFF	; 255
     11e:	20 83       	st	Z, r18
}
     120:	df 91       	pop	r29
     122:	cf 91       	pop	r28
     124:	08 95       	ret

00000126 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     12c:	a0 85       	ldd	r26, Z+8	; 0x08
     12e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     130:	c2 81       	ldd	r28, Z+2	; 0x02
     132:	d3 81       	ldd	r29, Z+3	; 0x03
     134:	84 81       	ldd	r24, Z+4	; 0x04
     136:	95 81       	ldd	r25, Z+5	; 0x05
     138:	9d 83       	std	Y+5, r25	; 0x05
     13a:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     13c:	c4 81       	ldd	r28, Z+4	; 0x04
     13e:	d5 81       	ldd	r29, Z+5	; 0x05
     140:	82 81       	ldd	r24, Z+2	; 0x02
     142:	93 81       	ldd	r25, Z+3	; 0x03
     144:	9b 83       	std	Y+3, r25	; 0x03
     146:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     148:	11 96       	adiw	r26, 0x01	; 1
     14a:	8d 91       	ld	r24, X+
     14c:	9c 91       	ld	r25, X
     14e:	12 97       	sbiw	r26, 0x02	; 2
     150:	e8 17       	cp	r30, r24
     152:	f9 07       	cpc	r31, r25
     154:	31 f4       	brne	.+12     	; 0x162 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     156:	84 81       	ldd	r24, Z+4	; 0x04
     158:	95 81       	ldd	r25, Z+5	; 0x05
     15a:	12 96       	adiw	r26, 0x02	; 2
     15c:	9c 93       	st	X, r25
     15e:	8e 93       	st	-X, r24
     160:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     162:	11 86       	std	Z+9, r1	; 0x09
     164:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     166:	8c 91       	ld	r24, X
     168:	81 50       	subi	r24, 0x01	; 1
     16a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     16c:	8c 91       	ld	r24, X
}
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     174:	1b bc       	out	0x2b, r1	; 43
     176:	8c e7       	ldi	r24, 0x7C	; 124
     178:	8a bd       	out	0x2a, r24	; 42
     17a:	8b e0       	ldi	r24, 0x0B	; 11
     17c:	8e bd       	out	0x2e, r24	; 46
     17e:	89 b7       	in	r24, 0x39	; 57
     180:	80 61       	ori	r24, 0x10	; 16
     182:	89 bf       	out	0x39, r24	; 57
     184:	08 95       	ret

00000186 <pxPortInitialiseStack>:
     186:	31 e1       	ldi	r19, 0x11	; 17
     188:	fc 01       	movw	r30, r24
     18a:	30 83       	st	Z, r19
     18c:	31 97       	sbiw	r30, 0x01	; 1
     18e:	22 e2       	ldi	r18, 0x22	; 34
     190:	20 83       	st	Z, r18
     192:	31 97       	sbiw	r30, 0x01	; 1
     194:	a3 e3       	ldi	r26, 0x33	; 51
     196:	a0 83       	st	Z, r26
     198:	31 97       	sbiw	r30, 0x01	; 1
     19a:	60 83       	st	Z, r22
     19c:	31 97       	sbiw	r30, 0x01	; 1
     19e:	70 83       	st	Z, r23
     1a0:	31 97       	sbiw	r30, 0x01	; 1
     1a2:	10 82       	st	Z, r1
     1a4:	31 97       	sbiw	r30, 0x01	; 1
     1a6:	60 e8       	ldi	r22, 0x80	; 128
     1a8:	60 83       	st	Z, r22
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	10 82       	st	Z, r1
     1ae:	31 97       	sbiw	r30, 0x01	; 1
     1b0:	62 e0       	ldi	r22, 0x02	; 2
     1b2:	60 83       	st	Z, r22
     1b4:	31 97       	sbiw	r30, 0x01	; 1
     1b6:	63 e0       	ldi	r22, 0x03	; 3
     1b8:	60 83       	st	Z, r22
     1ba:	31 97       	sbiw	r30, 0x01	; 1
     1bc:	64 e0       	ldi	r22, 0x04	; 4
     1be:	60 83       	st	Z, r22
     1c0:	31 97       	sbiw	r30, 0x01	; 1
     1c2:	65 e0       	ldi	r22, 0x05	; 5
     1c4:	60 83       	st	Z, r22
     1c6:	31 97       	sbiw	r30, 0x01	; 1
     1c8:	66 e0       	ldi	r22, 0x06	; 6
     1ca:	60 83       	st	Z, r22
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	67 e0       	ldi	r22, 0x07	; 7
     1d0:	60 83       	st	Z, r22
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	68 e0       	ldi	r22, 0x08	; 8
     1d6:	60 83       	st	Z, r22
     1d8:	31 97       	sbiw	r30, 0x01	; 1
     1da:	69 e0       	ldi	r22, 0x09	; 9
     1dc:	60 83       	st	Z, r22
     1de:	31 97       	sbiw	r30, 0x01	; 1
     1e0:	60 e1       	ldi	r22, 0x10	; 16
     1e2:	60 83       	st	Z, r22
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	30 83       	st	Z, r19
     1e8:	31 97       	sbiw	r30, 0x01	; 1
     1ea:	32 e1       	ldi	r19, 0x12	; 18
     1ec:	30 83       	st	Z, r19
     1ee:	31 97       	sbiw	r30, 0x01	; 1
     1f0:	33 e1       	ldi	r19, 0x13	; 19
     1f2:	30 83       	st	Z, r19
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	34 e1       	ldi	r19, 0x14	; 20
     1f8:	30 83       	st	Z, r19
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	35 e1       	ldi	r19, 0x15	; 21
     1fe:	30 83       	st	Z, r19
     200:	31 97       	sbiw	r30, 0x01	; 1
     202:	36 e1       	ldi	r19, 0x16	; 22
     204:	30 83       	st	Z, r19
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	37 e1       	ldi	r19, 0x17	; 23
     20a:	30 83       	st	Z, r19
     20c:	31 97       	sbiw	r30, 0x01	; 1
     20e:	38 e1       	ldi	r19, 0x18	; 24
     210:	30 83       	st	Z, r19
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	39 e1       	ldi	r19, 0x19	; 25
     216:	30 83       	st	Z, r19
     218:	31 97       	sbiw	r30, 0x01	; 1
     21a:	30 e2       	ldi	r19, 0x20	; 32
     21c:	30 83       	st	Z, r19
     21e:	31 97       	sbiw	r30, 0x01	; 1
     220:	31 e2       	ldi	r19, 0x21	; 33
     222:	30 83       	st	Z, r19
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	20 83       	st	Z, r18
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	23 e2       	ldi	r18, 0x23	; 35
     22c:	20 83       	st	Z, r18
     22e:	31 97       	sbiw	r30, 0x01	; 1
     230:	40 83       	st	Z, r20
     232:	31 97       	sbiw	r30, 0x01	; 1
     234:	50 83       	st	Z, r21
     236:	31 97       	sbiw	r30, 0x01	; 1
     238:	26 e2       	ldi	r18, 0x26	; 38
     23a:	20 83       	st	Z, r18
     23c:	31 97       	sbiw	r30, 0x01	; 1
     23e:	27 e2       	ldi	r18, 0x27	; 39
     240:	20 83       	st	Z, r18
     242:	31 97       	sbiw	r30, 0x01	; 1
     244:	28 e2       	ldi	r18, 0x28	; 40
     246:	20 83       	st	Z, r18
     248:	31 97       	sbiw	r30, 0x01	; 1
     24a:	29 e2       	ldi	r18, 0x29	; 41
     24c:	20 83       	st	Z, r18
     24e:	31 97       	sbiw	r30, 0x01	; 1
     250:	20 e3       	ldi	r18, 0x30	; 48
     252:	20 83       	st	Z, r18
     254:	31 97       	sbiw	r30, 0x01	; 1
     256:	21 e3       	ldi	r18, 0x31	; 49
     258:	20 83       	st	Z, r18
     25a:	86 97       	sbiw	r24, 0x26	; 38
     25c:	08 95       	ret

0000025e <xPortStartScheduler>:
     25e:	0e 94 ba 00 	call	0x174	; 0x174 <prvSetupTimerInterrupt>
     262:	a0 91 c8 06 	lds	r26, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     266:	b0 91 c9 06 	lds	r27, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     26a:	cd 91       	ld	r28, X+
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	dd 91       	ld	r29, X+
     270:	de bf       	out	0x3e, r29	; 62
     272:	ff 91       	pop	r31
     274:	ef 91       	pop	r30
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	bf 91       	pop	r27
     27c:	af 91       	pop	r26
     27e:	9f 91       	pop	r25
     280:	8f 91       	pop	r24
     282:	7f 91       	pop	r23
     284:	6f 91       	pop	r22
     286:	5f 91       	pop	r21
     288:	4f 91       	pop	r20
     28a:	3f 91       	pop	r19
     28c:	2f 91       	pop	r18
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	cf 90       	pop	r12
     29a:	bf 90       	pop	r11
     29c:	af 90       	pop	r10
     29e:	9f 90       	pop	r9
     2a0:	8f 90       	pop	r8
     2a2:	7f 90       	pop	r7
     2a4:	6f 90       	pop	r6
     2a6:	5f 90       	pop	r5
     2a8:	4f 90       	pop	r4
     2aa:	3f 90       	pop	r3
     2ac:	2f 90       	pop	r2
     2ae:	1f 90       	pop	r1
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	08 95       	ret
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	08 95       	ret

000002bc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	0f 92       	push	r0
     2c4:	1f 92       	push	r1
     2c6:	11 24       	eor	r1, r1
     2c8:	2f 92       	push	r2
     2ca:	3f 92       	push	r3
     2cc:	4f 92       	push	r4
     2ce:	5f 92       	push	r5
     2d0:	6f 92       	push	r6
     2d2:	7f 92       	push	r7
     2d4:	8f 92       	push	r8
     2d6:	9f 92       	push	r9
     2d8:	af 92       	push	r10
     2da:	bf 92       	push	r11
     2dc:	cf 92       	push	r12
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	2f 93       	push	r18
     2ea:	3f 93       	push	r19
     2ec:	4f 93       	push	r20
     2ee:	5f 93       	push	r21
     2f0:	6f 93       	push	r22
     2f2:	7f 93       	push	r23
     2f4:	8f 93       	push	r24
     2f6:	9f 93       	push	r25
     2f8:	af 93       	push	r26
     2fa:	bf 93       	push	r27
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ef 93       	push	r30
     302:	ff 93       	push	r31
     304:	a0 91 c8 06 	lds	r26, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     308:	b0 91 c9 06 	lds	r27, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     30c:	0d b6       	in	r0, 0x3d	; 61
     30e:	0d 92       	st	X+, r0
     310:	0e b6       	in	r0, 0x3e	; 62
     312:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     314:	0e 94 c2 07 	call	0xf84	; 0xf84 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     318:	a0 91 c8 06 	lds	r26, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     31c:	b0 91 c9 06 	lds	r27, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     320:	cd 91       	ld	r28, X+
     322:	cd bf       	out	0x3d, r28	; 61
     324:	dd 91       	ld	r29, X+
     326:	de bf       	out	0x3e, r29	; 62
     328:	ff 91       	pop	r31
     32a:	ef 91       	pop	r30
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	bf 91       	pop	r27
     332:	af 91       	pop	r26
     334:	9f 91       	pop	r25
     336:	8f 91       	pop	r24
     338:	7f 91       	pop	r23
     33a:	6f 91       	pop	r22
     33c:	5f 91       	pop	r21
     33e:	4f 91       	pop	r20
     340:	3f 91       	pop	r19
     342:	2f 91       	pop	r18
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	df 90       	pop	r13
     34e:	cf 90       	pop	r12
     350:	bf 90       	pop	r11
     352:	af 90       	pop	r10
     354:	9f 90       	pop	r9
     356:	8f 90       	pop	r8
     358:	7f 90       	pop	r7
     35a:	6f 90       	pop	r6
     35c:	5f 90       	pop	r5
     35e:	4f 90       	pop	r4
     360:	3f 90       	pop	r3
     362:	2f 90       	pop	r2
     364:	1f 90       	pop	r1
     366:	0f 90       	pop	r0
     368:	0f be       	out	0x3f, r0	; 63
     36a:	0f 90       	pop	r0

	asm volatile ( "ret" );
     36c:	08 95       	ret

0000036e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     36e:	0f 92       	push	r0
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	0f 92       	push	r0
     376:	1f 92       	push	r1
     378:	11 24       	eor	r1, r1
     37a:	2f 92       	push	r2
     37c:	3f 92       	push	r3
     37e:	4f 92       	push	r4
     380:	5f 92       	push	r5
     382:	6f 92       	push	r6
     384:	7f 92       	push	r7
     386:	8f 92       	push	r8
     388:	9f 92       	push	r9
     38a:	af 92       	push	r10
     38c:	bf 92       	push	r11
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	2f 93       	push	r18
     39c:	3f 93       	push	r19
     39e:	4f 93       	push	r20
     3a0:	5f 93       	push	r21
     3a2:	6f 93       	push	r22
     3a4:	7f 93       	push	r23
     3a6:	8f 93       	push	r24
     3a8:	9f 93       	push	r25
     3aa:	af 93       	push	r26
     3ac:	bf 93       	push	r27
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	ef 93       	push	r30
     3b4:	ff 93       	push	r31
     3b6:	a0 91 c8 06 	lds	r26, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     3ba:	b0 91 c9 06 	lds	r27, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     3be:	0d b6       	in	r0, 0x3d	; 61
     3c0:	0d 92       	st	X+, r0
     3c2:	0e b6       	in	r0, 0x3e	; 62
     3c4:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     3c6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <xTaskIncrementTick>
     3ca:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     3cc:	0e 94 c2 07 	call	0xf84	; 0xf84 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     3d0:	a0 91 c8 06 	lds	r26, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     3d4:	b0 91 c9 06 	lds	r27, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     3d8:	cd 91       	ld	r28, X+
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	dd 91       	ld	r29, X+
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	ff 91       	pop	r31
     3e2:	ef 91       	pop	r30
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	bf 91       	pop	r27
     3ea:	af 91       	pop	r26
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	7f 91       	pop	r23
     3f2:	6f 91       	pop	r22
     3f4:	5f 91       	pop	r21
     3f6:	4f 91       	pop	r20
     3f8:	3f 91       	pop	r19
     3fa:	2f 91       	pop	r18
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
     408:	bf 90       	pop	r11
     40a:	af 90       	pop	r10
     40c:	9f 90       	pop	r9
     40e:	8f 90       	pop	r8
     410:	7f 90       	pop	r7
     412:	6f 90       	pop	r6
     414:	5f 90       	pop	r5
     416:	4f 90       	pop	r4
     418:	3f 90       	pop	r3
     41a:	2f 90       	pop	r2
     41c:	1f 90       	pop	r1
     41e:	0f 90       	pop	r0
     420:	0f be       	out	0x3f, r0	; 63
     422:	0f 90       	pop	r0

	asm volatile ( "ret" );
     424:	08 95       	ret

00000426 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     426:	0e 94 b7 01 	call	0x36e	; 0x36e <vPortYieldFromTick>
		asm volatile ( "reti" );
     42a:	18 95       	reti

0000042c <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     42c:	ec e8       	ldi	r30, 0x8C	; 140
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	a0 e9       	ldi	r26, 0x90	; 144
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	b1 83       	std	Z+1, r27	; 0x01
     436:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     438:	13 82       	std	Z+3, r1	; 0x03
     43a:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     43c:	e8 e6       	ldi	r30, 0x68	; 104
     43e:	f6 e0       	ldi	r31, 0x06	; 6
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     440:	f0 93 8b 00 	sts	0x008B, r31	; 0x80008b <pxEnd+0x1>
     444:	e0 93 8a 00 	sts	0x008A, r30	; 0x80008a <pxEnd>
    pxEnd->xBlockSize = 0;
     448:	13 82       	std	Z+3, r1	; 0x03
     44a:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     44c:	11 82       	std	Z+1, r1	; 0x01
     44e:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     450:	88 ed       	ldi	r24, 0xD8	; 216
     452:	95 e0       	ldi	r25, 0x05	; 5
     454:	13 96       	adiw	r26, 0x03	; 3
     456:	9c 93       	st	X, r25
     458:	8e 93       	st	-X, r24
     45a:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     45c:	ed 93       	st	X+, r30
     45e:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     460:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <xMinimumEverFreeBytesRemaining+0x1>
     464:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     468:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <xFreeBytesRemaining+0x1>
     46c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	90 e8       	ldi	r25, 0x80	; 128
     474:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__data_end+0x1>
     478:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
     47c:	08 95       	ret

0000047e <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     484:	ac e8       	ldi	r26, 0x8C	; 140
     486:	b0 e0       	ldi	r27, 0x00	; 0
     488:	01 c0       	rjmp	.+2      	; 0x48c <prvInsertBlockIntoFreeList+0xe>
     48a:	df 01       	movw	r26, r30
     48c:	ed 91       	ld	r30, X+
     48e:	fc 91       	ld	r31, X
     490:	11 97       	sbiw	r26, 0x01	; 1
     492:	ec 17       	cp	r30, r28
     494:	fd 07       	cpc	r31, r29
     496:	c8 f3       	brcs	.-14     	; 0x48a <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     498:	12 96       	adiw	r26, 0x02	; 2
     49a:	8d 91       	ld	r24, X+
     49c:	9c 91       	ld	r25, X
     49e:	13 97       	sbiw	r26, 0x03	; 3
     4a0:	9d 01       	movw	r18, r26
     4a2:	28 0f       	add	r18, r24
     4a4:	39 1f       	adc	r19, r25
     4a6:	c2 17       	cp	r28, r18
     4a8:	d3 07       	cpc	r29, r19
     4aa:	49 f4       	brne	.+18     	; 0x4be <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     4ac:	2a 81       	ldd	r18, Y+2	; 0x02
     4ae:	3b 81       	ldd	r19, Y+3	; 0x03
     4b0:	82 0f       	add	r24, r18
     4b2:	93 1f       	adc	r25, r19
     4b4:	13 96       	adiw	r26, 0x03	; 3
     4b6:	9c 93       	st	X, r25
     4b8:	8e 93       	st	-X, r24
     4ba:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     4bc:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     4be:	8a 81       	ldd	r24, Y+2	; 0x02
     4c0:	9b 81       	ldd	r25, Y+3	; 0x03
     4c2:	9e 01       	movw	r18, r28
     4c4:	28 0f       	add	r18, r24
     4c6:	39 1f       	adc	r19, r25
     4c8:	e2 17       	cp	r30, r18
     4ca:	f3 07       	cpc	r31, r19
     4cc:	c1 f4       	brne	.+48     	; 0x4fe <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     4ce:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <pxEnd>
     4d2:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <pxEnd+0x1>
     4d6:	e2 17       	cp	r30, r18
     4d8:	f3 07       	cpc	r31, r19
     4da:	71 f0       	breq	.+28     	; 0x4f8 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     4dc:	22 81       	ldd	r18, Z+2	; 0x02
     4de:	33 81       	ldd	r19, Z+3	; 0x03
     4e0:	82 0f       	add	r24, r18
     4e2:	93 1f       	adc	r25, r19
     4e4:	9b 83       	std	Y+3, r25	; 0x03
     4e6:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     4e8:	ed 91       	ld	r30, X+
     4ea:	fc 91       	ld	r31, X
     4ec:	11 97       	sbiw	r26, 0x01	; 1
     4ee:	80 81       	ld	r24, Z
     4f0:	91 81       	ldd	r25, Z+1	; 0x01
     4f2:	99 83       	std	Y+1, r25	; 0x01
     4f4:	88 83       	st	Y, r24
     4f6:	05 c0       	rjmp	.+10     	; 0x502 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     4f8:	39 83       	std	Y+1, r19	; 0x01
     4fa:	28 83       	st	Y, r18
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     4fe:	f9 83       	std	Y+1, r31	; 0x01
     500:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     502:	ca 17       	cp	r28, r26
     504:	db 07       	cpc	r29, r27
     506:	11 f0       	breq	.+4      	; 0x50c <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     508:	cd 93       	st	X+, r28
     50a:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     512:	ef 92       	push	r14
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     520:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     524:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <pxEnd>
     528:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <pxEnd+0x1>
     52c:	89 2b       	or	r24, r25
     52e:	11 f4       	brne	.+4      	; 0x534 <pvPortMalloc+0x22>
        {
            prvHeapInit();
     530:	0e 94 16 02 	call	0x42c	; 0x42c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     534:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
     538:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__data_end+0x1>
     53c:	80 23       	and	r24, r16
     53e:	91 23       	and	r25, r17
     540:	89 2b       	or	r24, r25
     542:	09 f0       	breq	.+2      	; 0x546 <pvPortMalloc+0x34>
     544:	77 c0       	rjmp	.+238    	; 0x634 <pvPortMalloc+0x122>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
     546:	01 15       	cp	r16, r1
     548:	11 05       	cpc	r17, r1
     54a:	49 f0       	breq	.+18     	; 0x55e <pvPortMalloc+0x4c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     54c:	c8 01       	movw	r24, r16
     54e:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
     550:	08 17       	cp	r16, r24
     552:	19 07       	cpc	r17, r25
     554:	18 f0       	brcs	.+6      	; 0x55c <pvPortMalloc+0x4a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
     556:	00 e0       	ldi	r16, 0x00	; 0
     558:	10 e0       	ldi	r17, 0x00	; 0
     55a:	01 c0       	rjmp	.+2      	; 0x55e <pvPortMalloc+0x4c>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     55c:	8c 01       	movw	r16, r24
            else
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     55e:	01 15       	cp	r16, r1
     560:	11 05       	cpc	r17, r1
     562:	09 f4       	brne	.+2      	; 0x566 <pvPortMalloc+0x54>
     564:	6a c0       	rjmp	.+212    	; 0x63a <pvPortMalloc+0x128>
     566:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <xFreeBytesRemaining>
     56a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <xFreeBytesRemaining+0x1>
     56e:	80 17       	cp	r24, r16
     570:	91 07       	cpc	r25, r17
     572:	08 f4       	brcc	.+2      	; 0x576 <pvPortMalloc+0x64>
     574:	65 c0       	rjmp	.+202    	; 0x640 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     576:	c0 91 8c 00 	lds	r28, 0x008C	; 0x80008c <xStart>
     57a:	d0 91 8d 00 	lds	r29, 0x008D	; 0x80008d <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     57e:	ec e8       	ldi	r30, 0x8C	; 140
     580:	f0 e0       	ldi	r31, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     582:	02 c0       	rjmp	.+4      	; 0x588 <pvPortMalloc+0x76>
                {
                    pxPreviousBlock = pxBlock;
     584:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     586:	ec 01       	movw	r28, r24
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     588:	8a 81       	ldd	r24, Y+2	; 0x02
     58a:	9b 81       	ldd	r25, Y+3	; 0x03
     58c:	80 17       	cp	r24, r16
     58e:	91 07       	cpc	r25, r17
     590:	20 f4       	brcc	.+8      	; 0x59a <pvPortMalloc+0x88>
     592:	88 81       	ld	r24, Y
     594:	99 81       	ldd	r25, Y+1	; 0x01
     596:	00 97       	sbiw	r24, 0x00	; 0
     598:	a9 f7       	brne	.-22     	; 0x584 <pvPortMalloc+0x72>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     59a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <pxEnd>
     59e:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <pxEnd+0x1>
     5a2:	c8 17       	cp	r28, r24
     5a4:	d9 07       	cpc	r29, r25
     5a6:	09 f4       	brne	.+2      	; 0x5aa <pvPortMalloc+0x98>
     5a8:	4e c0       	rjmp	.+156    	; 0x646 <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     5aa:	e0 80       	ld	r14, Z
     5ac:	f1 80       	ldd	r15, Z+1	; 0x01
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	e8 0e       	add	r14, r24
     5b2:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     5b4:	88 81       	ld	r24, Y
     5b6:	99 81       	ldd	r25, Y+1	; 0x01
     5b8:	91 83       	std	Z+1, r25	; 0x01
     5ba:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     5bc:	2a 81       	ldd	r18, Y+2	; 0x02
     5be:	3b 81       	ldd	r19, Y+3	; 0x03
     5c0:	20 1b       	sub	r18, r16
     5c2:	31 0b       	sbc	r19, r17
     5c4:	29 30       	cpi	r18, 0x09	; 9
     5c6:	31 05       	cpc	r19, r1
     5c8:	50 f0       	brcs	.+20     	; 0x5de <pvPortMalloc+0xcc>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     5ca:	ce 01       	movw	r24, r28
     5cc:	80 0f       	add	r24, r16
     5ce:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     5d0:	fc 01       	movw	r30, r24
     5d2:	33 83       	std	Z+3, r19	; 0x03
     5d4:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     5d6:	1b 83       	std	Y+3, r17	; 0x03
     5d8:	0a 83       	std	Y+2, r16	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     5da:	0e 94 3f 02 	call	0x47e	; 0x47e <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     5de:	2a 81       	ldd	r18, Y+2	; 0x02
     5e0:	3b 81       	ldd	r19, Y+3	; 0x03
     5e2:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <xFreeBytesRemaining>
     5e6:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <xFreeBytesRemaining+0x1>
     5ea:	82 1b       	sub	r24, r18
     5ec:	93 0b       	sbc	r25, r19
     5ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <xFreeBytesRemaining+0x1>
     5f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     5f6:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <xMinimumEverFreeBytesRemaining>
     5fa:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <xMinimumEverFreeBytesRemaining+0x1>
     5fe:	84 17       	cp	r24, r20
     600:	95 07       	cpc	r25, r21
     602:	20 f4       	brcc	.+8      	; 0x60c <pvPortMalloc+0xfa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     604:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <xMinimumEverFreeBytesRemaining+0x1>
     608:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     60c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
     610:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__data_end+0x1>
     614:	28 2b       	or	r18, r24
     616:	39 2b       	or	r19, r25
     618:	3b 83       	std	Y+3, r19	; 0x03
     61a:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     61c:	19 82       	std	Y+1, r1	; 0x01
     61e:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     620:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <xNumberOfSuccessfulAllocations>
     624:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <xNumberOfSuccessfulAllocations+0x1>
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <xNumberOfSuccessfulAllocations+0x1>
     62e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <xNumberOfSuccessfulAllocations>
     632:	0b c0       	rjmp	.+22     	; 0x64a <pvPortMalloc+0x138>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     634:	e1 2c       	mov	r14, r1
     636:	f1 2c       	mov	r15, r1
     638:	08 c0       	rjmp	.+16     	; 0x64a <pvPortMalloc+0x138>
     63a:	e1 2c       	mov	r14, r1
     63c:	f1 2c       	mov	r15, r1
     63e:	05 c0       	rjmp	.+10     	; 0x64a <pvPortMalloc+0x138>
     640:	e1 2c       	mov	r14, r1
     642:	f1 2c       	mov	r15, r1
     644:	02 c0       	rjmp	.+4      	; 0x64a <pvPortMalloc+0x138>
     646:	e1 2c       	mov	r14, r1
     648:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     64a:	0e 94 d7 06 	call	0xdae	; 0xdae <xTaskResumeAll>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     64e:	c7 01       	movw	r24, r14
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	08 95       	ret

0000065e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     666:	00 97       	sbiw	r24, 0x00	; 0
     668:	99 f1       	breq	.+102    	; 0x6d0 <vPortFree+0x72>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     66a:	ec 01       	movw	r28, r24
     66c:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     66e:	4a 81       	ldd	r20, Y+2	; 0x02
     670:	5b 81       	ldd	r21, Y+3	; 0x03
     672:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__data_end>
     676:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <__data_end+0x1>
     67a:	ba 01       	movw	r22, r20
     67c:	62 23       	and	r22, r18
     67e:	73 23       	and	r23, r19
     680:	67 2b       	or	r22, r23
     682:	31 f1       	breq	.+76     	; 0x6d0 <vPortFree+0x72>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     684:	68 81       	ld	r22, Y
     686:	79 81       	ldd	r23, Y+1	; 0x01
     688:	67 2b       	or	r22, r23
     68a:	11 f5       	brne	.+68     	; 0x6d0 <vPortFree+0x72>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     68c:	20 95       	com	r18
     68e:	30 95       	com	r19
     690:	24 23       	and	r18, r20
     692:	35 23       	and	r19, r21
     694:	3b 83       	std	Y+3, r19	; 0x03
     696:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     698:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     69c:	8a 81       	ldd	r24, Y+2	; 0x02
     69e:	9b 81       	ldd	r25, Y+3	; 0x03
     6a0:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <xFreeBytesRemaining>
     6a4:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <xFreeBytesRemaining+0x1>
     6a8:	82 0f       	add	r24, r18
     6aa:	93 1f       	adc	r25, r19
     6ac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <xFreeBytesRemaining+0x1>
     6b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     6b4:	ce 01       	movw	r24, r28
     6b6:	0e 94 3f 02 	call	0x47e	; 0x47e <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     6ba:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <xNumberOfSuccessfulFrees>
     6be:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <xNumberOfSuccessfulFrees+0x1>
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <xNumberOfSuccessfulFrees+0x1>
     6c8:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     6cc:	0e 94 d7 06 	call	0xdae	; 0xdae <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	08 95       	ret

000006da <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     6da:	e0 91 90 06 	lds	r30, 0x0690	; 0x800690 <pxDelayedTaskList>
     6de:	f0 91 91 06 	lds	r31, 0x0691	; 0x800691 <pxDelayedTaskList+0x1>
     6e2:	80 81       	ld	r24, Z
     6e4:	81 11       	cpse	r24, r1
     6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <prvResetNextTaskUnblockTime+0x1c>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	9f ef       	ldi	r25, 0xFF	; 255
     6ec:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <xNextTaskUnblockTime+0x1>
     6f0:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <xNextTaskUnblockTime>
     6f4:	08 95       	ret
     6f6:	e0 91 90 06 	lds	r30, 0x0690	; 0x800690 <pxDelayedTaskList>
     6fa:	f0 91 91 06 	lds	r31, 0x0691	; 0x800691 <pxDelayedTaskList+0x1>
     6fe:	05 80       	ldd	r0, Z+5	; 0x05
     700:	f6 81       	ldd	r31, Z+6	; 0x06
     702:	e0 2d       	mov	r30, r0
     704:	80 81       	ld	r24, Z
     706:	91 81       	ldd	r25, Z+1	; 0x01
     708:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <xNextTaskUnblockTime+0x1>
     70c:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <xNextTaskUnblockTime>
     710:	08 95       	ret

00000712 <prvDeleteTCB>:
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	ec 01       	movw	r28, r24
     718:	8f 89       	ldd	r24, Y+23	; 0x17
     71a:	98 8d       	ldd	r25, Y+24	; 0x18
     71c:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortFree>
     720:	ce 01       	movw	r24, r28
     722:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortFree>
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <prvInitialiseNewTask>:
     72c:	6f 92       	push	r6
     72e:	7f 92       	push	r7
     730:	8f 92       	push	r8
     732:	9f 92       	push	r9
     734:	af 92       	push	r10
     736:	bf 92       	push	r11
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
     74a:	4c 01       	movw	r8, r24
     74c:	d5 01       	movw	r26, r10
     74e:	57 96       	adiw	r26, 0x17	; 23
     750:	8d 91       	ld	r24, X+
     752:	9c 91       	ld	r25, X
     754:	58 97       	sbiw	r26, 0x18	; 24
     756:	21 50       	subi	r18, 0x01	; 1
     758:	31 09       	sbc	r19, r1
     75a:	3c 01       	movw	r6, r24
     75c:	62 0e       	add	r6, r18
     75e:	73 1e       	adc	r7, r19
     760:	61 15       	cp	r22, r1
     762:	71 05       	cpc	r23, r1
     764:	89 f4       	brne	.+34     	; 0x788 <prvInitialiseNewTask+0x5c>
     766:	16 c0       	rjmp	.+44     	; 0x794 <prvInitialiseNewTask+0x68>
     768:	82 2f       	mov	r24, r18
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	fb 01       	movw	r30, r22
     76e:	e8 0f       	add	r30, r24
     770:	f9 1f       	adc	r31, r25
     772:	30 81       	ld	r19, Z
     774:	d5 01       	movw	r26, r10
     776:	a8 0f       	add	r26, r24
     778:	b9 1f       	adc	r27, r25
     77a:	59 96       	adiw	r26, 0x19	; 25
     77c:	3c 93       	st	X, r19
     77e:	80 81       	ld	r24, Z
     780:	88 23       	and	r24, r24
     782:	29 f0       	breq	.+10     	; 0x78e <prvInitialiseNewTask+0x62>
     784:	2f 5f       	subi	r18, 0xFF	; 255
     786:	01 c0       	rjmp	.+2      	; 0x78a <prvInitialiseNewTask+0x5e>
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	28 30       	cpi	r18, 0x08	; 8
     78c:	68 f3       	brcs	.-38     	; 0x768 <prvInitialiseNewTask+0x3c>
     78e:	f5 01       	movw	r30, r10
     790:	10 a2       	std	Z+32, r1	; 0x20
     792:	03 c0       	rjmp	.+6      	; 0x79a <prvInitialiseNewTask+0x6e>
     794:	d5 01       	movw	r26, r10
     796:	59 96       	adiw	r26, 0x19	; 25
     798:	1c 92       	st	X, r1
     79a:	b3 e0       	ldi	r27, 0x03	; 3
     79c:	be 15       	cp	r27, r14
     79e:	20 f4       	brcc	.+8      	; 0x7a8 <prvInitialiseNewTask+0x7c>
     7a0:	0f 2e       	mov	r0, r31
     7a2:	f3 e0       	ldi	r31, 0x03	; 3
     7a4:	ef 2e       	mov	r14, r31
     7a6:	f0 2d       	mov	r31, r0
     7a8:	f5 01       	movw	r30, r10
     7aa:	e6 8a       	std	Z+22, r14	; 0x16
     7ac:	c5 01       	movw	r24, r10
     7ae:	02 96       	adiw	r24, 0x02	; 2
     7b0:	0e 94 5e 00 	call	0xbc	; 0xbc <vListInitialiseItem>
     7b4:	c5 01       	movw	r24, r10
     7b6:	0c 96       	adiw	r24, 0x0c	; 12
     7b8:	0e 94 5e 00 	call	0xbc	; 0xbc <vListInitialiseItem>
     7bc:	d5 01       	movw	r26, r10
     7be:	19 96       	adiw	r26, 0x09	; 9
     7c0:	bc 92       	st	X, r11
     7c2:	ae 92       	st	-X, r10
     7c4:	18 97       	sbiw	r26, 0x08	; 8
     7c6:	84 e0       	ldi	r24, 0x04	; 4
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	8e 19       	sub	r24, r14
     7cc:	91 09       	sbc	r25, r1
     7ce:	1d 96       	adiw	r26, 0x0d	; 13
     7d0:	9c 93       	st	X, r25
     7d2:	8e 93       	st	-X, r24
     7d4:	1c 97       	sbiw	r26, 0x0c	; 12
     7d6:	53 96       	adiw	r26, 0x13	; 19
     7d8:	bc 92       	st	X, r11
     7da:	ae 92       	st	-X, r10
     7dc:	52 97       	sbiw	r26, 0x12	; 18
     7de:	84 e0       	ldi	r24, 0x04	; 4
     7e0:	f5 01       	movw	r30, r10
     7e2:	b1 96       	adiw	r30, 0x21	; 33
     7e4:	df 01       	movw	r26, r30
     7e6:	1d 92       	st	X+, r1
     7e8:	8a 95       	dec	r24
     7ea:	e9 f7       	brne	.-6      	; 0x7e6 <prvInitialiseNewTask+0xba>
     7ec:	f5 01       	movw	r30, r10
     7ee:	15 a2       	std	Z+37, r1	; 0x25
     7f0:	a8 01       	movw	r20, r16
     7f2:	b4 01       	movw	r22, r8
     7f4:	c3 01       	movw	r24, r6
     7f6:	0e 94 c3 00 	call	0x186	; 0x186 <pxPortInitialiseStack>
     7fa:	d5 01       	movw	r26, r10
     7fc:	8d 93       	st	X+, r24
     7fe:	9c 93       	st	X, r25
     800:	c1 14       	cp	r12, r1
     802:	d1 04       	cpc	r13, r1
     804:	19 f0       	breq	.+6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     806:	f6 01       	movw	r30, r12
     808:	b1 82       	std	Z+1, r11	; 0x01
     80a:	a0 82       	st	Z, r10
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ef 90       	pop	r14
     816:	df 90       	pop	r13
     818:	cf 90       	pop	r12
     81a:	bf 90       	pop	r11
     81c:	af 90       	pop	r10
     81e:	9f 90       	pop	r9
     820:	8f 90       	pop	r8
     822:	7f 90       	pop	r7
     824:	6f 90       	pop	r6
     826:	08 95       	ret

00000828 <prvInitialiseTaskLists>:
     828:	cf 93       	push	r28
     82a:	c0 e0       	ldi	r28, 0x00	; 0
     82c:	10 c0       	rjmp	.+32     	; 0x84e <prvInitialiseTaskLists+0x26>
     82e:	8c 2f       	mov	r24, r28
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	9c 01       	movw	r18, r24
     834:	22 0f       	add	r18, r18
     836:	33 1f       	adc	r19, r19
     838:	22 0f       	add	r18, r18
     83a:	33 1f       	adc	r19, r19
     83c:	22 0f       	add	r18, r18
     83e:	33 1f       	adc	r19, r19
     840:	82 0f       	add	r24, r18
     842:	93 1f       	adc	r25, r19
     844:	8c 55       	subi	r24, 0x5C	; 92
     846:	99 4f       	sbci	r25, 0xF9	; 249
     848:	0e 94 50 00 	call	0xa0	; 0xa0 <vListInitialise>
     84c:	cf 5f       	subi	r28, 0xFF	; 255
     84e:	c4 30       	cpi	r28, 0x04	; 4
     850:	70 f3       	brcs	.-36     	; 0x82e <prvInitialiseTaskLists+0x6>
     852:	8b e9       	ldi	r24, 0x9B	; 155
     854:	96 e0       	ldi	r25, 0x06	; 6
     856:	0e 94 50 00 	call	0xa0	; 0xa0 <vListInitialise>
     85a:	82 e9       	ldi	r24, 0x92	; 146
     85c:	96 e0       	ldi	r25, 0x06	; 6
     85e:	0e 94 50 00 	call	0xa0	; 0xa0 <vListInitialise>
     862:	85 e8       	ldi	r24, 0x85	; 133
     864:	96 e0       	ldi	r25, 0x06	; 6
     866:	0e 94 50 00 	call	0xa0	; 0xa0 <vListInitialise>
     86a:	8c e7       	ldi	r24, 0x7C	; 124
     86c:	96 e0       	ldi	r25, 0x06	; 6
     86e:	0e 94 50 00 	call	0xa0	; 0xa0 <vListInitialise>
     872:	8b e9       	ldi	r24, 0x9B	; 155
     874:	96 e0       	ldi	r25, 0x06	; 6
     876:	90 93 91 06 	sts	0x0691, r25	; 0x800691 <pxDelayedTaskList+0x1>
     87a:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <pxDelayedTaskList>
     87e:	82 e9       	ldi	r24, 0x92	; 146
     880:	96 e0       	ldi	r25, 0x06	; 6
     882:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <pxOverflowDelayedTaskList+0x1>
     886:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <pxOverflowDelayedTaskList>
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <prvAddNewTaskToReadyList>:
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	ec 01       	movw	r28, r24
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	0f 92       	push	r0
     89a:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <uxCurrentNumberOfTasks>
     89e:	8f 5f       	subi	r24, 0xFF	; 255
     8a0:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <uxCurrentNumberOfTasks>
     8a4:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     8a8:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     8ac:	89 2b       	or	r24, r25
     8ae:	59 f4       	brne	.+22     	; 0x8c6 <prvAddNewTaskToReadyList+0x38>
     8b0:	d0 93 c9 06 	sts	0x06C9, r29	; 0x8006c9 <pxCurrentTCB+0x1>
     8b4:	c0 93 c8 06 	sts	0x06C8, r28	; 0x8006c8 <pxCurrentTCB>
     8b8:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <uxCurrentNumberOfTasks>
     8bc:	81 30       	cpi	r24, 0x01	; 1
     8be:	99 f4       	brne	.+38     	; 0x8e6 <prvAddNewTaskToReadyList+0x58>
     8c0:	0e 94 14 04 	call	0x828	; 0x828 <prvInitialiseTaskLists>
     8c4:	10 c0       	rjmp	.+32     	; 0x8e6 <prvAddNewTaskToReadyList+0x58>
     8c6:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <xSchedulerRunning>
     8ca:	81 11       	cpse	r24, r1
     8cc:	0c c0       	rjmp	.+24     	; 0x8e6 <prvAddNewTaskToReadyList+0x58>
     8ce:	e0 91 c8 06 	lds	r30, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     8d2:	f0 91 c9 06 	lds	r31, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     8d6:	96 89       	ldd	r25, Z+22	; 0x16
     8d8:	8e 89       	ldd	r24, Y+22	; 0x16
     8da:	89 17       	cp	r24, r25
     8dc:	20 f0       	brcs	.+8      	; 0x8e6 <prvAddNewTaskToReadyList+0x58>
     8de:	d0 93 c9 06 	sts	0x06C9, r29	; 0x8006c9 <pxCurrentTCB+0x1>
     8e2:	c0 93 c8 06 	sts	0x06C8, r28	; 0x8006c8 <pxCurrentTCB>
     8e6:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <uxTaskNumber>
     8ea:	8f 5f       	subi	r24, 0xFF	; 255
     8ec:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <uxTaskNumber>
     8f0:	8e 89       	ldd	r24, Y+22	; 0x16
     8f2:	90 91 77 06 	lds	r25, 0x0677	; 0x800677 <uxTopReadyPriority>
     8f6:	98 17       	cp	r25, r24
     8f8:	10 f4       	brcc	.+4      	; 0x8fe <prvAddNewTaskToReadyList+0x70>
     8fa:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <uxTopReadyPriority>
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	fc 01       	movw	r30, r24
     902:	ee 0f       	add	r30, r30
     904:	ff 1f       	adc	r31, r31
     906:	ee 0f       	add	r30, r30
     908:	ff 1f       	adc	r31, r31
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	8e 0f       	add	r24, r30
     910:	9f 1f       	adc	r25, r31
     912:	fc 01       	movw	r30, r24
     914:	ec 55       	subi	r30, 0x5C	; 92
     916:	f9 4f       	sbci	r31, 0xF9	; 249
     918:	01 80       	ldd	r0, Z+1	; 0x01
     91a:	f2 81       	ldd	r31, Z+2	; 0x02
     91c:	e0 2d       	mov	r30, r0
     91e:	fd 83       	std	Y+5, r31	; 0x05
     920:	ec 83       	std	Y+4, r30	; 0x04
     922:	84 81       	ldd	r24, Z+4	; 0x04
     924:	95 81       	ldd	r25, Z+5	; 0x05
     926:	9f 83       	std	Y+7, r25	; 0x07
     928:	8e 83       	std	Y+6, r24	; 0x06
     92a:	a4 81       	ldd	r26, Z+4	; 0x04
     92c:	b5 81       	ldd	r27, Z+5	; 0x05
     92e:	ce 01       	movw	r24, r28
     930:	02 96       	adiw	r24, 0x02	; 2
     932:	13 96       	adiw	r26, 0x03	; 3
     934:	9c 93       	st	X, r25
     936:	8e 93       	st	-X, r24
     938:	12 97       	sbiw	r26, 0x02	; 2
     93a:	95 83       	std	Z+5, r25	; 0x05
     93c:	84 83       	std	Z+4, r24	; 0x04
     93e:	ee 89       	ldd	r30, Y+22	; 0x16
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	cf 01       	movw	r24, r30
     944:	88 0f       	add	r24, r24
     946:	99 1f       	adc	r25, r25
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	e8 0f       	add	r30, r24
     952:	f9 1f       	adc	r31, r25
     954:	ec 55       	subi	r30, 0x5C	; 92
     956:	f9 4f       	sbci	r31, 0xF9	; 249
     958:	fb 87       	std	Y+11, r31	; 0x0b
     95a:	ea 87       	std	Y+10, r30	; 0x0a
     95c:	80 81       	ld	r24, Z
     95e:	8f 5f       	subi	r24, 0xFF	; 255
     960:	80 83       	st	Z, r24
     962:	0f 90       	pop	r0
     964:	0f be       	out	0x3f, r0	; 63
     966:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <xSchedulerRunning>
     96a:	88 23       	and	r24, r24
     96c:	51 f0       	breq	.+20     	; 0x982 <prvAddNewTaskToReadyList+0xf4>
     96e:	e0 91 c8 06 	lds	r30, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     972:	f0 91 c9 06 	lds	r31, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     976:	96 89       	ldd	r25, Z+22	; 0x16
     978:	8e 89       	ldd	r24, Y+22	; 0x16
     97a:	98 17       	cp	r25, r24
     97c:	10 f4       	brcc	.+4      	; 0x982 <prvAddNewTaskToReadyList+0xf4>
     97e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <vPortYield>
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <prvCheckTasksWaitingTermination>:
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	1c c0       	rjmp	.+56     	; 0x9c6 <prvCheckTasksWaitingTermination+0x3e>
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	0f 92       	push	r0
     994:	e0 91 81 06 	lds	r30, 0x0681	; 0x800681 <xTasksWaitingTermination+0x5>
     998:	f0 91 82 06 	lds	r31, 0x0682	; 0x800682 <xTasksWaitingTermination+0x6>
     99c:	c6 81       	ldd	r28, Z+6	; 0x06
     99e:	d7 81       	ldd	r29, Z+7	; 0x07
     9a0:	ce 01       	movw	r24, r28
     9a2:	02 96       	adiw	r24, 0x02	; 2
     9a4:	0e 94 93 00 	call	0x126	; 0x126 <uxListRemove>
     9a8:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <uxCurrentNumberOfTasks>
     9ac:	81 50       	subi	r24, 0x01	; 1
     9ae:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <uxCurrentNumberOfTasks>
     9b2:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <uxDeletedTasksWaitingCleanUp>
     9b6:	81 50       	subi	r24, 0x01	; 1
     9b8:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <uxDeletedTasksWaitingCleanUp>
     9bc:	0f 90       	pop	r0
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	ce 01       	movw	r24, r28
     9c2:	0e 94 89 03 	call	0x712	; 0x712 <prvDeleteTCB>
     9c6:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <uxDeletedTasksWaitingCleanUp>
     9ca:	81 11       	cpse	r24, r1
     9cc:	e0 cf       	rjmp	.-64     	; 0x98e <prvCheckTasksWaitingTermination+0x6>
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <prvIdleTask>:
     9d4:	0e 94 c4 04 	call	0x988	; 0x988 <prvCheckTasksWaitingTermination>
     9d8:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <pxReadyTasksLists>
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	d0 f3       	brcs	.-12     	; 0x9d4 <prvIdleTask>
     9e0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <vPortYield>
     9e4:	f7 cf       	rjmp	.-18     	; 0x9d4 <prvIdleTask>

000009e6 <prvAddCurrentTaskToDelayedList>:
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	ec 01       	movw	r28, r24
     9f0:	00 91 78 06 	lds	r16, 0x0678	; 0x800678 <xTickCount>
     9f4:	10 91 79 06 	lds	r17, 0x0679	; 0x800679 <xTickCount+0x1>
     9f8:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     9fc:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     a00:	02 96       	adiw	r24, 0x02	; 2
     a02:	0e 94 93 00 	call	0x126	; 0x126 <uxListRemove>
     a06:	c0 0f       	add	r28, r16
     a08:	d1 1f       	adc	r29, r17
     a0a:	e0 91 c8 06 	lds	r30, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     a0e:	f0 91 c9 06 	lds	r31, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     a12:	d3 83       	std	Z+3, r29	; 0x03
     a14:	c2 83       	std	Z+2, r28	; 0x02
     a16:	c0 17       	cp	r28, r16
     a18:	d1 07       	cpc	r29, r17
     a1a:	68 f4       	brcc	.+26     	; 0xa36 <prvAddCurrentTaskToDelayedList+0x50>
     a1c:	60 91 c8 06 	lds	r22, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     a20:	70 91 c9 06 	lds	r23, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     a24:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <pxOverflowDelayedTaskList>
     a28:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <pxOverflowDelayedTaskList+0x1>
     a2c:	6e 5f       	subi	r22, 0xFE	; 254
     a2e:	7f 4f       	sbci	r23, 0xFF	; 255
     a30:	0e 94 62 00 	call	0xc4	; 0xc4 <vListInsert>
     a34:	17 c0       	rjmp	.+46     	; 0xa64 <prvAddCurrentTaskToDelayedList+0x7e>
     a36:	60 91 c8 06 	lds	r22, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     a3a:	70 91 c9 06 	lds	r23, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     a3e:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <pxDelayedTaskList>
     a42:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <pxDelayedTaskList+0x1>
     a46:	6e 5f       	subi	r22, 0xFE	; 254
     a48:	7f 4f       	sbci	r23, 0xFF	; 255
     a4a:	0e 94 62 00 	call	0xc4	; 0xc4 <vListInsert>
     a4e:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <xNextTaskUnblockTime>
     a52:	90 91 70 06 	lds	r25, 0x0670	; 0x800670 <xNextTaskUnblockTime+0x1>
     a56:	c8 17       	cp	r28, r24
     a58:	d9 07       	cpc	r29, r25
     a5a:	20 f4       	brcc	.+8      	; 0xa64 <prvAddCurrentTaskToDelayedList+0x7e>
     a5c:	d0 93 70 06 	sts	0x0670, r29	; 0x800670 <xNextTaskUnblockTime+0x1>
     a60:	c0 93 6f 06 	sts	0x066F, r28	; 0x80066f <xNextTaskUnblockTime>
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <xTaskCreate>:
     a6e:	2f 92       	push	r2
     a70:	3f 92       	push	r3
     a72:	4f 92       	push	r4
     a74:	5f 92       	push	r5
     a76:	6f 92       	push	r6
     a78:	7f 92       	push	r7
     a7a:	8f 92       	push	r8
     a7c:	9f 92       	push	r9
     a7e:	af 92       	push	r10
     a80:	bf 92       	push	r11
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	3c 01       	movw	r6, r24
     a94:	1b 01       	movw	r2, r22
     a96:	5a 01       	movw	r10, r20
     a98:	29 01       	movw	r4, r18
     a9a:	ca 01       	movw	r24, r20
     a9c:	0e 94 89 02 	call	0x512	; 0x512 <pvPortMalloc>
     aa0:	6c 01       	movw	r12, r24
     aa2:	89 2b       	or	r24, r25
     aa4:	71 f0       	breq	.+28     	; 0xac2 <xTaskCreate+0x54>
     aa6:	86 e2       	ldi	r24, 0x26	; 38
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 89 02 	call	0x512	; 0x512 <pvPortMalloc>
     aae:	ec 01       	movw	r28, r24
     ab0:	89 2b       	or	r24, r25
     ab2:	19 f0       	breq	.+6      	; 0xaba <xTaskCreate+0x4c>
     ab4:	d8 8e       	std	Y+24, r13	; 0x18
     ab6:	cf 8a       	std	Y+23, r12	; 0x17
     ab8:	06 c0       	rjmp	.+12     	; 0xac6 <xTaskCreate+0x58>
     aba:	c6 01       	movw	r24, r12
     abc:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortFree>
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <xTaskCreate+0x58>
     ac2:	c0 e0       	ldi	r28, 0x00	; 0
     ac4:	d0 e0       	ldi	r29, 0x00	; 0
     ac6:	20 97       	sbiw	r28, 0x00	; 0
     ac8:	91 f0       	breq	.+36     	; 0xaee <xTaskCreate+0x80>
     aca:	95 01       	movw	r18, r10
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	81 2c       	mov	r8, r1
     ad2:	91 2c       	mov	r9, r1
     ad4:	5e 01       	movw	r10, r28
     ad6:	67 01       	movw	r12, r14
     ad8:	e0 2e       	mov	r14, r16
     ada:	82 01       	movw	r16, r4
     adc:	b1 01       	movw	r22, r2
     ade:	c3 01       	movw	r24, r6
     ae0:	0e 94 96 03 	call	0x72c	; 0x72c <prvInitialiseNewTask>
     ae4:	ce 01       	movw	r24, r28
     ae6:	0e 94 47 04 	call	0x88e	; 0x88e <prvAddNewTaskToReadyList>
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	01 c0       	rjmp	.+2      	; 0xaf0 <xTaskCreate+0x82>
     aee:	8f ef       	ldi	r24, 0xFF	; 255
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	cf 90       	pop	r12
     b00:	bf 90       	pop	r11
     b02:	af 90       	pop	r10
     b04:	9f 90       	pop	r9
     b06:	8f 90       	pop	r8
     b08:	7f 90       	pop	r7
     b0a:	6f 90       	pop	r6
     b0c:	5f 90       	pop	r5
     b0e:	4f 90       	pop	r4
     b10:	3f 90       	pop	r3
     b12:	2f 90       	pop	r2
     b14:	08 95       	ret

00000b16 <vTaskStartScheduler>:
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	0f 2e       	mov	r0, r31
     b1e:	fd e6       	ldi	r31, 0x6D	; 109
     b20:	ef 2e       	mov	r14, r31
     b22:	f6 e0       	ldi	r31, 0x06	; 6
     b24:	ff 2e       	mov	r15, r31
     b26:	f0 2d       	mov	r31, r0
     b28:	00 e0       	ldi	r16, 0x00	; 0
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	45 e5       	ldi	r20, 0x55	; 85
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	64 e6       	ldi	r22, 0x64	; 100
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	8a ee       	ldi	r24, 0xEA	; 234
     b38:	94 e0       	ldi	r25, 0x04	; 4
     b3a:	0e 94 37 05 	call	0xa6e	; 0xa6e <xTaskCreate>
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	81 f4       	brne	.+32     	; 0xb62 <vTaskStartScheduler+0x4c>
     b42:	f8 94       	cli
     b44:	8f ef       	ldi	r24, 0xFF	; 255
     b46:	9f ef       	ldi	r25, 0xFF	; 255
     b48:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <xNextTaskUnblockTime+0x1>
     b4c:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <xNextTaskUnblockTime>
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <xSchedulerRunning>
     b56:	10 92 79 06 	sts	0x0679, r1	; 0x800679 <xTickCount+0x1>
     b5a:	10 92 78 06 	sts	0x0678, r1	; 0x800678 <xTickCount>
     b5e:	0e 94 2f 01 	call	0x25e	; 0x25e <xPortStartScheduler>
     b62:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	08 95       	ret

00000b6e <vTaskSuspendAll>:
     b6e:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxSchedulerSuspended>
     b72:	8f 5f       	subi	r24, 0xFF	; 255
     b74:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxSchedulerSuspended>
     b78:	08 95       	ret

00000b7a <xTaskIncrementTick>:
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxSchedulerSuspended>
     b86:	81 11       	cpse	r24, r1
     b88:	01 c1       	rjmp	.+514    	; 0xd8c <xTaskIncrementTick+0x212>
     b8a:	c0 91 78 06 	lds	r28, 0x0678	; 0x800678 <xTickCount>
     b8e:	d0 91 79 06 	lds	r29, 0x0679	; 0x800679 <xTickCount+0x1>
     b92:	8e 01       	movw	r16, r28
     b94:	0f 5f       	subi	r16, 0xFF	; 255
     b96:	1f 4f       	sbci	r17, 0xFF	; 255
     b98:	10 93 79 06 	sts	0x0679, r17	; 0x800679 <xTickCount+0x1>
     b9c:	00 93 78 06 	sts	0x0678, r16	; 0x800678 <xTickCount>
     ba0:	01 15       	cp	r16, r1
     ba2:	11 05       	cpc	r17, r1
     ba4:	b9 f4       	brne	.+46     	; 0xbd4 <xTaskIncrementTick+0x5a>
     ba6:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <pxDelayedTaskList>
     baa:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <pxDelayedTaskList+0x1>
     bae:	20 91 8e 06 	lds	r18, 0x068E	; 0x80068e <pxOverflowDelayedTaskList>
     bb2:	30 91 8f 06 	lds	r19, 0x068F	; 0x80068f <pxOverflowDelayedTaskList+0x1>
     bb6:	30 93 91 06 	sts	0x0691, r19	; 0x800691 <pxDelayedTaskList+0x1>
     bba:	20 93 90 06 	sts	0x0690, r18	; 0x800690 <pxDelayedTaskList>
     bbe:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <pxOverflowDelayedTaskList+0x1>
     bc2:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <pxOverflowDelayedTaskList>
     bc6:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <xNumOfOverflows>
     bca:	8f 5f       	subi	r24, 0xFF	; 255
     bcc:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <xNumOfOverflows>
     bd0:	0e 94 6d 03 	call	0x6da	; 0x6da <prvResetNextTaskUnblockTime>
     bd4:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <xNextTaskUnblockTime>
     bd8:	90 91 70 06 	lds	r25, 0x0670	; 0x800670 <xNextTaskUnblockTime+0x1>
     bdc:	08 17       	cp	r16, r24
     bde:	19 07       	cpc	r17, r25
     be0:	20 f4       	brcc	.+8      	; 0xbea <xTaskIncrementTick+0x70>
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	b8 c0       	rjmp	.+368    	; 0xd56 <xTaskIncrementTick+0x1dc>
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	01 c0       	rjmp	.+2      	; 0xbec <xTaskIncrementTick+0x72>
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	e0 91 90 06 	lds	r30, 0x0690	; 0x800690 <pxDelayedTaskList>
     bf0:	f0 91 91 06 	lds	r31, 0x0691	; 0x800691 <pxDelayedTaskList+0x1>
     bf4:	90 81       	ld	r25, Z
     bf6:	91 11       	cpse	r25, r1
     bf8:	07 c0       	rjmp	.+14     	; 0xc08 <xTaskIncrementTick+0x8e>
     bfa:	2f ef       	ldi	r18, 0xFF	; 255
     bfc:	3f ef       	ldi	r19, 0xFF	; 255
     bfe:	30 93 70 06 	sts	0x0670, r19	; 0x800670 <xNextTaskUnblockTime+0x1>
     c02:	20 93 6f 06 	sts	0x066F, r18	; 0x80066f <xNextTaskUnblockTime>
     c06:	a7 c0       	rjmp	.+334    	; 0xd56 <xTaskIncrementTick+0x1dc>
     c08:	e0 91 90 06 	lds	r30, 0x0690	; 0x800690 <pxDelayedTaskList>
     c0c:	f0 91 91 06 	lds	r31, 0x0691	; 0x800691 <pxDelayedTaskList+0x1>
     c10:	05 80       	ldd	r0, Z+5	; 0x05
     c12:	f6 81       	ldd	r31, Z+6	; 0x06
     c14:	e0 2d       	mov	r30, r0
     c16:	06 80       	ldd	r0, Z+6	; 0x06
     c18:	f7 81       	ldd	r31, Z+7	; 0x07
     c1a:	e0 2d       	mov	r30, r0
     c1c:	22 81       	ldd	r18, Z+2	; 0x02
     c1e:	33 81       	ldd	r19, Z+3	; 0x03
     c20:	02 17       	cp	r16, r18
     c22:	13 07       	cpc	r17, r19
     c24:	28 f4       	brcc	.+10     	; 0xc30 <xTaskIncrementTick+0xb6>
     c26:	30 93 70 06 	sts	0x0670, r19	; 0x800670 <xNextTaskUnblockTime+0x1>
     c2a:	20 93 6f 06 	sts	0x066F, r18	; 0x80066f <xNextTaskUnblockTime>
     c2e:	93 c0       	rjmp	.+294    	; 0xd56 <xTaskIncrementTick+0x1dc>
     c30:	a2 85       	ldd	r26, Z+10	; 0x0a
     c32:	b3 85       	ldd	r27, Z+11	; 0x0b
     c34:	24 81       	ldd	r18, Z+4	; 0x04
     c36:	35 81       	ldd	r19, Z+5	; 0x05
     c38:	46 81       	ldd	r20, Z+6	; 0x06
     c3a:	57 81       	ldd	r21, Z+7	; 0x07
     c3c:	e9 01       	movw	r28, r18
     c3e:	5d 83       	std	Y+5, r21	; 0x05
     c40:	4c 83       	std	Y+4, r20	; 0x04
     c42:	26 81       	ldd	r18, Z+6	; 0x06
     c44:	37 81       	ldd	r19, Z+7	; 0x07
     c46:	44 81       	ldd	r20, Z+4	; 0x04
     c48:	55 81       	ldd	r21, Z+5	; 0x05
     c4a:	e9 01       	movw	r28, r18
     c4c:	5b 83       	std	Y+3, r21	; 0x03
     c4e:	4a 83       	std	Y+2, r20	; 0x02
     c50:	11 96       	adiw	r26, 0x01	; 1
     c52:	2d 91       	ld	r18, X+
     c54:	3c 91       	ld	r19, X
     c56:	12 97       	sbiw	r26, 0x02	; 2
     c58:	af 01       	movw	r20, r30
     c5a:	4e 5f       	subi	r20, 0xFE	; 254
     c5c:	5f 4f       	sbci	r21, 0xFF	; 255
     c5e:	24 17       	cp	r18, r20
     c60:	35 07       	cpc	r19, r21
     c62:	31 f4       	brne	.+12     	; 0xc70 <xTaskIncrementTick+0xf6>
     c64:	26 81       	ldd	r18, Z+6	; 0x06
     c66:	37 81       	ldd	r19, Z+7	; 0x07
     c68:	12 96       	adiw	r26, 0x02	; 2
     c6a:	3c 93       	st	X, r19
     c6c:	2e 93       	st	-X, r18
     c6e:	11 97       	sbiw	r26, 0x01	; 1
     c70:	13 86       	std	Z+11, r1	; 0x0b
     c72:	12 86       	std	Z+10, r1	; 0x0a
     c74:	9c 91       	ld	r25, X
     c76:	91 50       	subi	r25, 0x01	; 1
     c78:	9c 93       	st	X, r25
     c7a:	a4 89       	ldd	r26, Z+20	; 0x14
     c7c:	b5 89       	ldd	r27, Z+21	; 0x15
     c7e:	10 97       	sbiw	r26, 0x00	; 0
     c80:	19 f1       	breq	.+70     	; 0xcc8 <xTaskIncrementTick+0x14e>
     c82:	26 85       	ldd	r18, Z+14	; 0x0e
     c84:	37 85       	ldd	r19, Z+15	; 0x0f
     c86:	60 89       	ldd	r22, Z+16	; 0x10
     c88:	71 89       	ldd	r23, Z+17	; 0x11
     c8a:	e9 01       	movw	r28, r18
     c8c:	7d 83       	std	Y+5, r23	; 0x05
     c8e:	6c 83       	std	Y+4, r22	; 0x04
     c90:	20 89       	ldd	r18, Z+16	; 0x10
     c92:	31 89       	ldd	r19, Z+17	; 0x11
     c94:	66 85       	ldd	r22, Z+14	; 0x0e
     c96:	77 85       	ldd	r23, Z+15	; 0x0f
     c98:	e9 01       	movw	r28, r18
     c9a:	7b 83       	std	Y+3, r23	; 0x03
     c9c:	6a 83       	std	Y+2, r22	; 0x02
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	6d 91       	ld	r22, X+
     ca2:	7c 91       	ld	r23, X
     ca4:	12 97       	sbiw	r26, 0x02	; 2
     ca6:	9f 01       	movw	r18, r30
     ca8:	24 5f       	subi	r18, 0xF4	; 244
     caa:	3f 4f       	sbci	r19, 0xFF	; 255
     cac:	62 17       	cp	r22, r18
     cae:	73 07       	cpc	r23, r19
     cb0:	31 f4       	brne	.+12     	; 0xcbe <xTaskIncrementTick+0x144>
     cb2:	20 89       	ldd	r18, Z+16	; 0x10
     cb4:	31 89       	ldd	r19, Z+17	; 0x11
     cb6:	12 96       	adiw	r26, 0x02	; 2
     cb8:	3c 93       	st	X, r19
     cba:	2e 93       	st	-X, r18
     cbc:	11 97       	sbiw	r26, 0x01	; 1
     cbe:	15 8a       	std	Z+21, r1	; 0x15
     cc0:	14 8a       	std	Z+20, r1	; 0x14
     cc2:	9c 91       	ld	r25, X
     cc4:	91 50       	subi	r25, 0x01	; 1
     cc6:	9c 93       	st	X, r25
     cc8:	26 89       	ldd	r18, Z+22	; 0x16
     cca:	90 91 77 06 	lds	r25, 0x0677	; 0x800677 <uxTopReadyPriority>
     cce:	92 17       	cp	r25, r18
     cd0:	10 f4       	brcc	.+4      	; 0xcd6 <xTaskIncrementTick+0x15c>
     cd2:	20 93 77 06 	sts	0x0677, r18	; 0x800677 <uxTopReadyPriority>
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	d9 01       	movw	r26, r18
     cda:	aa 0f       	add	r26, r26
     cdc:	bb 1f       	adc	r27, r27
     cde:	aa 0f       	add	r26, r26
     ce0:	bb 1f       	adc	r27, r27
     ce2:	aa 0f       	add	r26, r26
     ce4:	bb 1f       	adc	r27, r27
     ce6:	2a 0f       	add	r18, r26
     ce8:	3b 1f       	adc	r19, r27
     cea:	d9 01       	movw	r26, r18
     cec:	ac 55       	subi	r26, 0x5C	; 92
     cee:	b9 4f       	sbci	r27, 0xF9	; 249
     cf0:	11 96       	adiw	r26, 0x01	; 1
     cf2:	0d 90       	ld	r0, X+
     cf4:	bc 91       	ld	r27, X
     cf6:	a0 2d       	mov	r26, r0
     cf8:	b5 83       	std	Z+5, r27	; 0x05
     cfa:	a4 83       	std	Z+4, r26	; 0x04
     cfc:	14 96       	adiw	r26, 0x04	; 4
     cfe:	2d 91       	ld	r18, X+
     d00:	3c 91       	ld	r19, X
     d02:	15 97       	sbiw	r26, 0x05	; 5
     d04:	37 83       	std	Z+7, r19	; 0x07
     d06:	26 83       	std	Z+6, r18	; 0x06
     d08:	14 96       	adiw	r26, 0x04	; 4
     d0a:	2d 91       	ld	r18, X+
     d0c:	3c 91       	ld	r19, X
     d0e:	15 97       	sbiw	r26, 0x05	; 5
     d10:	e9 01       	movw	r28, r18
     d12:	5b 83       	std	Y+3, r21	; 0x03
     d14:	4a 83       	std	Y+2, r20	; 0x02
     d16:	15 96       	adiw	r26, 0x05	; 5
     d18:	5c 93       	st	X, r21
     d1a:	4e 93       	st	-X, r20
     d1c:	14 97       	sbiw	r26, 0x04	; 4
     d1e:	a6 89       	ldd	r26, Z+22	; 0x16
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	9d 01       	movw	r18, r26
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	22 0f       	add	r18, r18
     d2a:	33 1f       	adc	r19, r19
     d2c:	22 0f       	add	r18, r18
     d2e:	33 1f       	adc	r19, r19
     d30:	a2 0f       	add	r26, r18
     d32:	b3 1f       	adc	r27, r19
     d34:	ac 55       	subi	r26, 0x5C	; 92
     d36:	b9 4f       	sbci	r27, 0xF9	; 249
     d38:	b3 87       	std	Z+11, r27	; 0x0b
     d3a:	a2 87       	std	Z+10, r26	; 0x0a
     d3c:	9c 91       	ld	r25, X
     d3e:	9f 5f       	subi	r25, 0xFF	; 255
     d40:	9c 93       	st	X, r25
     d42:	26 89       	ldd	r18, Z+22	; 0x16
     d44:	e0 91 c8 06 	lds	r30, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     d48:	f0 91 c9 06 	lds	r31, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     d4c:	96 89       	ldd	r25, Z+22	; 0x16
     d4e:	29 17       	cp	r18, r25
     d50:	08 f0       	brcs	.+2      	; 0xd54 <xTaskIncrementTick+0x1da>
     d52:	49 cf       	rjmp	.-366    	; 0xbe6 <xTaskIncrementTick+0x6c>
     d54:	4b cf       	rjmp	.-362    	; 0xbec <xTaskIncrementTick+0x72>
     d56:	e0 91 c8 06 	lds	r30, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     d5a:	f0 91 c9 06 	lds	r31, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     d5e:	26 89       	ldd	r18, Z+22	; 0x16
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	f9 01       	movw	r30, r18
     d64:	ee 0f       	add	r30, r30
     d66:	ff 1f       	adc	r31, r31
     d68:	ee 0f       	add	r30, r30
     d6a:	ff 1f       	adc	r31, r31
     d6c:	ee 0f       	add	r30, r30
     d6e:	ff 1f       	adc	r31, r31
     d70:	2e 0f       	add	r18, r30
     d72:	3f 1f       	adc	r19, r31
     d74:	f9 01       	movw	r30, r18
     d76:	ec 55       	subi	r30, 0x5C	; 92
     d78:	f9 4f       	sbci	r31, 0xF9	; 249
     d7a:	90 81       	ld	r25, Z
     d7c:	92 30       	cpi	r25, 0x02	; 2
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <xTaskIncrementTick+0x208>
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 91 73 06 	lds	r25, 0x0673	; 0x800673 <xYieldPending>
     d86:	91 11       	cpse	r25, r1
     d88:	0c c0       	rjmp	.+24     	; 0xda2 <xTaskIncrementTick+0x228>
     d8a:	0c c0       	rjmp	.+24     	; 0xda4 <xTaskIncrementTick+0x22a>
     d8c:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <xPendedTicks>
     d90:	90 91 75 06 	lds	r25, 0x0675	; 0x800675 <xPendedTicks+0x1>
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	90 93 75 06 	sts	0x0675, r25	; 0x800675 <xPendedTicks+0x1>
     d9a:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <xPendedTicks>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <xTaskIncrementTick+0x22a>
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	08 95       	ret

00000dae <xTaskResumeAll>:
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	0f 92       	push	r0
     db8:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxSchedulerSuspended>
     dbc:	81 50       	subi	r24, 0x01	; 1
     dbe:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <uxSchedulerSuspended>
     dc2:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxSchedulerSuspended>
     dc6:	81 11       	cpse	r24, r1
     dc8:	bf c0       	rjmp	.+382    	; 0xf48 <xTaskResumeAll+0x19a>
     dca:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <uxCurrentNumberOfTasks>
     dce:	81 11       	cpse	r24, r1
     dd0:	96 c0       	rjmp	.+300    	; 0xefe <xTaskResumeAll+0x150>
     dd2:	bd c0       	rjmp	.+378    	; 0xf4e <xTaskResumeAll+0x1a0>
     dd4:	e0 91 8a 06 	lds	r30, 0x068A	; 0x80068a <xPendingReadyList+0x5>
     dd8:	f0 91 8b 06 	lds	r31, 0x068B	; 0x80068b <xPendingReadyList+0x6>
     ddc:	06 80       	ldd	r0, Z+6	; 0x06
     dde:	f7 81       	ldd	r31, Z+7	; 0x07
     de0:	e0 2d       	mov	r30, r0
     de2:	a4 89       	ldd	r26, Z+20	; 0x14
     de4:	b5 89       	ldd	r27, Z+21	; 0x15
     de6:	c6 85       	ldd	r28, Z+14	; 0x0e
     de8:	d7 85       	ldd	r29, Z+15	; 0x0f
     dea:	80 89       	ldd	r24, Z+16	; 0x10
     dec:	91 89       	ldd	r25, Z+17	; 0x11
     dee:	9d 83       	std	Y+5, r25	; 0x05
     df0:	8c 83       	std	Y+4, r24	; 0x04
     df2:	c0 89       	ldd	r28, Z+16	; 0x10
     df4:	d1 89       	ldd	r29, Z+17	; 0x11
     df6:	86 85       	ldd	r24, Z+14	; 0x0e
     df8:	97 85       	ldd	r25, Z+15	; 0x0f
     dfa:	9b 83       	std	Y+3, r25	; 0x03
     dfc:	8a 83       	std	Y+2, r24	; 0x02
     dfe:	11 96       	adiw	r26, 0x01	; 1
     e00:	2d 91       	ld	r18, X+
     e02:	3c 91       	ld	r19, X
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	cf 01       	movw	r24, r30
     e08:	0c 96       	adiw	r24, 0x0c	; 12
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	31 f4       	brne	.+12     	; 0xe1c <xTaskResumeAll+0x6e>
     e10:	80 89       	ldd	r24, Z+16	; 0x10
     e12:	91 89       	ldd	r25, Z+17	; 0x11
     e14:	12 96       	adiw	r26, 0x02	; 2
     e16:	9c 93       	st	X, r25
     e18:	8e 93       	st	-X, r24
     e1a:	11 97       	sbiw	r26, 0x01	; 1
     e1c:	15 8a       	std	Z+21, r1	; 0x15
     e1e:	14 8a       	std	Z+20, r1	; 0x14
     e20:	8c 91       	ld	r24, X
     e22:	81 50       	subi	r24, 0x01	; 1
     e24:	8c 93       	st	X, r24
     e26:	a2 85       	ldd	r26, Z+10	; 0x0a
     e28:	b3 85       	ldd	r27, Z+11	; 0x0b
     e2a:	c4 81       	ldd	r28, Z+4	; 0x04
     e2c:	d5 81       	ldd	r29, Z+5	; 0x05
     e2e:	86 81       	ldd	r24, Z+6	; 0x06
     e30:	97 81       	ldd	r25, Z+7	; 0x07
     e32:	9d 83       	std	Y+5, r25	; 0x05
     e34:	8c 83       	std	Y+4, r24	; 0x04
     e36:	c6 81       	ldd	r28, Z+6	; 0x06
     e38:	d7 81       	ldd	r29, Z+7	; 0x07
     e3a:	84 81       	ldd	r24, Z+4	; 0x04
     e3c:	95 81       	ldd	r25, Z+5	; 0x05
     e3e:	9b 83       	std	Y+3, r25	; 0x03
     e40:	8a 83       	std	Y+2, r24	; 0x02
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	8d 91       	ld	r24, X+
     e46:	9c 91       	ld	r25, X
     e48:	12 97       	sbiw	r26, 0x02	; 2
     e4a:	9f 01       	movw	r18, r30
     e4c:	2e 5f       	subi	r18, 0xFE	; 254
     e4e:	3f 4f       	sbci	r19, 0xFF	; 255
     e50:	82 17       	cp	r24, r18
     e52:	93 07       	cpc	r25, r19
     e54:	31 f4       	brne	.+12     	; 0xe62 <xTaskResumeAll+0xb4>
     e56:	86 81       	ldd	r24, Z+6	; 0x06
     e58:	97 81       	ldd	r25, Z+7	; 0x07
     e5a:	12 96       	adiw	r26, 0x02	; 2
     e5c:	9c 93       	st	X, r25
     e5e:	8e 93       	st	-X, r24
     e60:	11 97       	sbiw	r26, 0x01	; 1
     e62:	13 86       	std	Z+11, r1	; 0x0b
     e64:	12 86       	std	Z+10, r1	; 0x0a
     e66:	8c 91       	ld	r24, X
     e68:	81 50       	subi	r24, 0x01	; 1
     e6a:	8c 93       	st	X, r24
     e6c:	86 89       	ldd	r24, Z+22	; 0x16
     e6e:	90 91 77 06 	lds	r25, 0x0677	; 0x800677 <uxTopReadyPriority>
     e72:	98 17       	cp	r25, r24
     e74:	10 f4       	brcc	.+4      	; 0xe7a <xTaskResumeAll+0xcc>
     e76:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <uxTopReadyPriority>
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	dc 01       	movw	r26, r24
     e7e:	aa 0f       	add	r26, r26
     e80:	bb 1f       	adc	r27, r27
     e82:	aa 0f       	add	r26, r26
     e84:	bb 1f       	adc	r27, r27
     e86:	aa 0f       	add	r26, r26
     e88:	bb 1f       	adc	r27, r27
     e8a:	8a 0f       	add	r24, r26
     e8c:	9b 1f       	adc	r25, r27
     e8e:	dc 01       	movw	r26, r24
     e90:	ac 55       	subi	r26, 0x5C	; 92
     e92:	b9 4f       	sbci	r27, 0xF9	; 249
     e94:	11 96       	adiw	r26, 0x01	; 1
     e96:	0d 90       	ld	r0, X+
     e98:	bc 91       	ld	r27, X
     e9a:	a0 2d       	mov	r26, r0
     e9c:	b5 83       	std	Z+5, r27	; 0x05
     e9e:	a4 83       	std	Z+4, r26	; 0x04
     ea0:	14 96       	adiw	r26, 0x04	; 4
     ea2:	8d 91       	ld	r24, X+
     ea4:	9c 91       	ld	r25, X
     ea6:	15 97       	sbiw	r26, 0x05	; 5
     ea8:	97 83       	std	Z+7, r25	; 0x07
     eaa:	86 83       	std	Z+6, r24	; 0x06
     eac:	14 96       	adiw	r26, 0x04	; 4
     eae:	cd 91       	ld	r28, X+
     eb0:	dc 91       	ld	r29, X
     eb2:	15 97       	sbiw	r26, 0x05	; 5
     eb4:	3b 83       	std	Y+3, r19	; 0x03
     eb6:	2a 83       	std	Y+2, r18	; 0x02
     eb8:	15 96       	adiw	r26, 0x05	; 5
     eba:	3c 93       	st	X, r19
     ebc:	2e 93       	st	-X, r18
     ebe:	14 97       	sbiw	r26, 0x04	; 4
     ec0:	a6 89       	ldd	r26, Z+22	; 0x16
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	cd 01       	movw	r24, r26
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	a8 0f       	add	r26, r24
     ed4:	b9 1f       	adc	r27, r25
     ed6:	ac 55       	subi	r26, 0x5C	; 92
     ed8:	b9 4f       	sbci	r27, 0xF9	; 249
     eda:	b3 87       	std	Z+11, r27	; 0x0b
     edc:	a2 87       	std	Z+10, r26	; 0x0a
     ede:	8c 91       	ld	r24, X
     ee0:	8f 5f       	subi	r24, 0xFF	; 255
     ee2:	8c 93       	st	X, r24
     ee4:	96 89       	ldd	r25, Z+22	; 0x16
     ee6:	a0 91 c8 06 	lds	r26, 0x06C8	; 0x8006c8 <pxCurrentTCB>
     eea:	b0 91 c9 06 	lds	r27, 0x06C9	; 0x8006c9 <pxCurrentTCB+0x1>
     eee:	56 96       	adiw	r26, 0x16	; 22
     ef0:	8c 91       	ld	r24, X
     ef2:	98 17       	cp	r25, r24
     ef4:	30 f0       	brcs	.+12     	; 0xf02 <xTaskResumeAll+0x154>
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <xYieldPending>
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <xTaskResumeAll+0x154>
     efe:	e0 e0       	ldi	r30, 0x00	; 0
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 91 85 06 	lds	r24, 0x0685	; 0x800685 <xPendingReadyList>
     f06:	81 11       	cpse	r24, r1
     f08:	65 cf       	rjmp	.-310    	; 0xdd4 <xTaskResumeAll+0x26>
     f0a:	ef 2b       	or	r30, r31
     f0c:	11 f0       	breq	.+4      	; 0xf12 <xTaskResumeAll+0x164>
     f0e:	0e 94 6d 03 	call	0x6da	; 0x6da <prvResetNextTaskUnblockTime>
     f12:	c0 91 74 06 	lds	r28, 0x0674	; 0x800674 <xPendedTicks>
     f16:	d0 91 75 06 	lds	r29, 0x0675	; 0x800675 <xPendedTicks+0x1>
     f1a:	20 97       	sbiw	r28, 0x00	; 0
     f1c:	69 f0       	breq	.+26     	; 0xf38 <xTaskResumeAll+0x18a>
     f1e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <xTaskIncrementTick>
     f22:	88 23       	and	r24, r24
     f24:	19 f0       	breq	.+6      	; 0xf2c <xTaskResumeAll+0x17e>
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <xYieldPending>
     f2c:	21 97       	sbiw	r28, 0x01	; 1
     f2e:	b9 f7       	brne	.-18     	; 0xf1e <xTaskResumeAll+0x170>
     f30:	10 92 75 06 	sts	0x0675, r1	; 0x800675 <xPendedTicks+0x1>
     f34:	10 92 74 06 	sts	0x0674, r1	; 0x800674 <xPendedTicks>
     f38:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <xYieldPending>
     f3c:	88 23       	and	r24, r24
     f3e:	31 f0       	breq	.+12     	; 0xf4c <xTaskResumeAll+0x19e>
     f40:	0e 94 5e 01 	call	0x2bc	; 0x2bc <vPortYield>
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	03 c0       	rjmp	.+6      	; 0xf4e <xTaskResumeAll+0x1a0>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	01 c0       	rjmp	.+2      	; 0xf4e <xTaskResumeAll+0x1a0>
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	08 95       	ret

00000f58 <vTaskDelay>:
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	ec 01       	movw	r28, r24
     f5e:	89 2b       	or	r24, r25
     f60:	49 f0       	breq	.+18     	; 0xf74 <vTaskDelay+0x1c>
     f62:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vTaskSuspendAll>
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	ce 01       	movw	r24, r28
     f6a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <prvAddCurrentTaskToDelayedList>
     f6e:	0e 94 d7 06 	call	0xdae	; 0xdae <xTaskResumeAll>
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <vTaskDelay+0x1e>
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	81 11       	cpse	r24, r1
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <vTaskDelay+0x26>
     f7a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <vPortYield>
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     f84:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <uxSchedulerSuspended>
     f88:	88 23       	and	r24, r24
     f8a:	21 f0       	breq	.+8      	; 0xf94 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <xYieldPending>
     f92:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     f94:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     f98:	20 91 77 06 	lds	r18, 0x0677	; 0x800677 <uxTopReadyPriority>
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <vTaskSwitchContext+0x1c>
     f9e:	21 50       	subi	r18, 0x01	; 1
     fa0:	82 2f       	mov	r24, r18
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	fc 01       	movw	r30, r24
     fa6:	ee 0f       	add	r30, r30
     fa8:	ff 1f       	adc	r31, r31
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	e8 0f       	add	r30, r24
     fb4:	f9 1f       	adc	r31, r25
     fb6:	ec 55       	subi	r30, 0x5C	; 92
     fb8:	f9 4f       	sbci	r31, 0xF9	; 249
     fba:	30 81       	ld	r19, Z
     fbc:	33 23       	and	r19, r19
     fbe:	79 f3       	breq	.-34     	; 0xf9e <vTaskSwitchContext+0x1a>
     fc0:	ac 01       	movw	r20, r24
     fc2:	44 0f       	add	r20, r20
     fc4:	55 1f       	adc	r21, r21
     fc6:	44 0f       	add	r20, r20
     fc8:	55 1f       	adc	r21, r21
     fca:	44 0f       	add	r20, r20
     fcc:	55 1f       	adc	r21, r21
     fce:	48 0f       	add	r20, r24
     fd0:	59 1f       	adc	r21, r25
     fd2:	df 01       	movw	r26, r30
     fd4:	01 80       	ldd	r0, Z+1	; 0x01
     fd6:	f2 81       	ldd	r31, Z+2	; 0x02
     fd8:	e0 2d       	mov	r30, r0
     fda:	02 80       	ldd	r0, Z+2	; 0x02
     fdc:	f3 81       	ldd	r31, Z+3	; 0x03
     fde:	e0 2d       	mov	r30, r0
     fe0:	12 96       	adiw	r26, 0x02	; 2
     fe2:	fc 93       	st	X, r31
     fe4:	ee 93       	st	-X, r30
     fe6:	11 97       	sbiw	r26, 0x01	; 1
     fe8:	49 55       	subi	r20, 0x59	; 89
     fea:	59 4f       	sbci	r21, 0xF9	; 249
     fec:	e4 17       	cp	r30, r20
     fee:	f5 07       	cpc	r31, r21
     ff0:	29 f4       	brne	.+10     	; 0xffc <vTaskSwitchContext+0x78>
     ff2:	42 81       	ldd	r20, Z+2	; 0x02
     ff4:	53 81       	ldd	r21, Z+3	; 0x03
     ff6:	fd 01       	movw	r30, r26
     ff8:	52 83       	std	Z+2, r21	; 0x02
     ffa:	41 83       	std	Z+1, r20	; 0x01
     ffc:	fc 01       	movw	r30, r24
     ffe:	ee 0f       	add	r30, r30
    1000:	ff 1f       	adc	r31, r31
    1002:	ee 0f       	add	r30, r30
    1004:	ff 1f       	adc	r31, r31
    1006:	ee 0f       	add	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	8e 0f       	add	r24, r30
    100c:	9f 1f       	adc	r25, r31
    100e:	fc 01       	movw	r30, r24
    1010:	ec 55       	subi	r30, 0x5C	; 92
    1012:	f9 4f       	sbci	r31, 0xF9	; 249
    1014:	01 80       	ldd	r0, Z+1	; 0x01
    1016:	f2 81       	ldd	r31, Z+2	; 0x02
    1018:	e0 2d       	mov	r30, r0
    101a:	86 81       	ldd	r24, Z+6	; 0x06
    101c:	97 81       	ldd	r25, Z+7	; 0x07
    101e:	90 93 c9 06 	sts	0x06C9, r25	; 0x8006c9 <pxCurrentTCB+0x1>
    1022:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <pxCurrentTCB>
    1026:	20 93 77 06 	sts	0x0677, r18	; 0x800677 <uxTopReadyPriority>
    102a:	08 95       	ret

0000102c <LCD_SendCommand>:
				DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
				*Data = Character;
			}
	}
	return ErrRetVal;
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	c8 2f       	mov	r28, r24
    1036:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <State.1714>
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	09 f4       	brne	.+2      	; 0x1040 <LCD_SendCommand+0x14>
    103e:	cc c0       	rjmp	.+408    	; 0x11d8 <LCD_SendCommand+0x1ac>
    1040:	38 f4       	brcc	.+14     	; 0x1050 <LCD_SendCommand+0x24>
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	09 f4       	brne	.+2      	; 0x1048 <LCD_SendCommand+0x1c>
    1046:	5f c0       	rjmp	.+190    	; 0x1106 <LCD_SendCommand+0xda>
    1048:	82 30       	cpi	r24, 0x02	; 2
    104a:	09 f4       	brne	.+2      	; 0x104e <LCD_SendCommand+0x22>
    104c:	80 c0       	rjmp	.+256    	; 0x114e <LCD_SendCommand+0x122>
    104e:	ff c0       	rjmp	.+510    	; 0x124e <LCD_SendCommand+0x222>
    1050:	84 30       	cpi	r24, 0x04	; 4
    1052:	09 f4       	brne	.+2      	; 0x1056 <LCD_SendCommand+0x2a>
    1054:	e4 c0       	rjmp	.+456    	; 0x121e <LCD_SendCommand+0x1f2>
    1056:	8f 3f       	cpi	r24, 0xFF	; 255
    1058:	09 f0       	breq	.+2      	; 0x105c <LCD_SendCommand+0x30>
    105a:	f9 c0       	rjmp	.+498    	; 0x124e <LCD_SendCommand+0x222>
    105c:	09 e6       	ldi	r16, 0x69	; 105
    105e:	10 e0       	ldi	r17, 0x00	; 0
    1060:	f8 01       	movw	r30, r16
    1062:	d0 81       	ld	r29, Z
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	61 81       	ldd	r22, Z+1	; 0x01
    1068:	8d 2f       	mov	r24, r29
    106a:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	f8 01       	movw	r30, r16
    1072:	62 81       	ldd	r22, Z+2	; 0x02
    1074:	8d 2f       	mov	r24, r29
    1076:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    107a:	4c 2f       	mov	r20, r28
    107c:	40 71       	andi	r20, 0x10	; 16
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	55 95       	asr	r21
    1082:	47 95       	ror	r20
    1084:	55 95       	asr	r21
    1086:	47 95       	ror	r20
    1088:	55 95       	asr	r21
    108a:	47 95       	ror	r20
    108c:	55 95       	asr	r21
    108e:	47 95       	ror	r20
    1090:	f8 01       	movw	r30, r16
    1092:	67 81       	ldd	r22, Z+7	; 0x07
    1094:	8d 2f       	mov	r24, r29
    1096:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    109a:	4c 2f       	mov	r20, r28
    109c:	40 72       	andi	r20, 0x20	; 32
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	55 95       	asr	r21
    10a2:	47 95       	ror	r20
    10a4:	55 95       	asr	r21
    10a6:	47 95       	ror	r20
    10a8:	55 95       	asr	r21
    10aa:	47 95       	ror	r20
    10ac:	55 95       	asr	r21
    10ae:	47 95       	ror	r20
    10b0:	55 95       	asr	r21
    10b2:	47 95       	ror	r20
    10b4:	f8 01       	movw	r30, r16
    10b6:	66 81       	ldd	r22, Z+6	; 0x06
    10b8:	8d 2f       	mov	r24, r29
    10ba:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    10be:	4c 2f       	mov	r20, r28
    10c0:	40 74       	andi	r20, 0x40	; 64
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	04 2e       	mov	r0, r20
    10c6:	45 2f       	mov	r20, r21
    10c8:	00 0c       	add	r0, r0
    10ca:	44 1f       	adc	r20, r20
    10cc:	55 0b       	sbc	r21, r21
    10ce:	00 0c       	add	r0, r0
    10d0:	44 1f       	adc	r20, r20
    10d2:	55 1f       	adc	r21, r21
    10d4:	f8 01       	movw	r30, r16
    10d6:	65 81       	ldd	r22, Z+5	; 0x05
    10d8:	8d 2f       	mov	r24, r29
    10da:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    10de:	4c 2f       	mov	r20, r28
    10e0:	44 1f       	adc	r20, r20
    10e2:	44 27       	eor	r20, r20
    10e4:	44 1f       	adc	r20, r20
    10e6:	f8 01       	movw	r30, r16
    10e8:	64 81       	ldd	r22, Z+4	; 0x04
    10ea:	8d 2f       	mov	r24, r29
    10ec:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    10f0:	41 e0       	ldi	r20, 0x01	; 1
    10f2:	f8 01       	movw	r30, r16
    10f4:	63 81       	ldd	r22, Z+3	; 0x03
    10f6:	8d 2f       	mov	r24, r29
    10f8:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1714>
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	ab c0       	rjmp	.+342    	; 0x125c <LCD_SendCommand+0x230>
    1106:	66 e1       	ldi	r22, 0x16	; 22
    1108:	78 e0       	ldi	r23, 0x08	; 8
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <TIM_DelayStatus>
    1110:	8b 3f       	cpi	r24, 0xFB	; 251
    1112:	09 f0       	breq	.+2      	; 0x1116 <LCD_SendCommand+0xea>
    1114:	9e c0       	rjmp	.+316    	; 0x1252 <LCD_SendCommand+0x226>
    1116:	26 e1       	ldi	r18, 0x16	; 22
    1118:	38 e0       	ldi	r19, 0x08	; 8
    111a:	41 e0       	ldi	r20, 0x01	; 1
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <TIM_DelayUs>
    1128:	66 e1       	ldi	r22, 0x16	; 22
    112a:	78 e0       	ldi	r23, 0x08	; 8
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <TIM_DelayStatus>
    1132:	81 11       	cpse	r24, r1
    1134:	f9 cf       	rjmp	.-14     	; 0x1128 <LCD_SendCommand+0xfc>
    1136:	e9 e6       	ldi	r30, 0x69	; 105
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	63 81       	ldd	r22, Z+3	; 0x03
    113e:	80 81       	ld	r24, Z
    1140:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1714>
    114a:	8f ef       	ldi	r24, 0xFF	; 255
    114c:	87 c0       	rjmp	.+270    	; 0x125c <LCD_SendCommand+0x230>
    114e:	09 e6       	ldi	r16, 0x69	; 105
    1150:	10 e0       	ldi	r17, 0x00	; 0
    1152:	f8 01       	movw	r30, r16
    1154:	d0 81       	ld	r29, Z
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	61 81       	ldd	r22, Z+1	; 0x01
    115a:	8d 2f       	mov	r24, r29
    115c:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    1160:	40 e0       	ldi	r20, 0x00	; 0
    1162:	f8 01       	movw	r30, r16
    1164:	62 81       	ldd	r22, Z+2	; 0x02
    1166:	8d 2f       	mov	r24, r29
    1168:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    116c:	4c 2f       	mov	r20, r28
    116e:	41 70       	andi	r20, 0x01	; 1
    1170:	f8 01       	movw	r30, r16
    1172:	67 81       	ldd	r22, Z+7	; 0x07
    1174:	8d 2f       	mov	r24, r29
    1176:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    117a:	4c 2f       	mov	r20, r28
    117c:	42 70       	andi	r20, 0x02	; 2
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	55 95       	asr	r21
    1182:	47 95       	ror	r20
    1184:	f8 01       	movw	r30, r16
    1186:	66 81       	ldd	r22, Z+6	; 0x06
    1188:	8d 2f       	mov	r24, r29
    118a:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    118e:	4c 2f       	mov	r20, r28
    1190:	44 70       	andi	r20, 0x04	; 4
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	55 95       	asr	r21
    1196:	47 95       	ror	r20
    1198:	55 95       	asr	r21
    119a:	47 95       	ror	r20
    119c:	f8 01       	movw	r30, r16
    119e:	65 81       	ldd	r22, Z+5	; 0x05
    11a0:	8d 2f       	mov	r24, r29
    11a2:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    11a6:	c8 70       	andi	r28, 0x08	; 8
    11a8:	4c 2f       	mov	r20, r28
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	55 95       	asr	r21
    11ae:	47 95       	ror	r20
    11b0:	55 95       	asr	r21
    11b2:	47 95       	ror	r20
    11b4:	55 95       	asr	r21
    11b6:	47 95       	ror	r20
    11b8:	f8 01       	movw	r30, r16
    11ba:	64 81       	ldd	r22, Z+4	; 0x04
    11bc:	8d 2f       	mov	r24, r29
    11be:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    11c2:	41 e0       	ldi	r20, 0x01	; 1
    11c4:	f8 01       	movw	r30, r16
    11c6:	63 81       	ldd	r22, Z+3	; 0x03
    11c8:	8d 2f       	mov	r24, r29
    11ca:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    11ce:	83 e0       	ldi	r24, 0x03	; 3
    11d0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1714>
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	42 c0       	rjmp	.+132    	; 0x125c <LCD_SendCommand+0x230>
    11d8:	66 e1       	ldi	r22, 0x16	; 22
    11da:	78 e0       	ldi	r23, 0x08	; 8
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <TIM_DelayStatus>
    11e2:	8b 3f       	cpi	r24, 0xFB	; 251
    11e4:	c1 f5       	brne	.+112    	; 0x1256 <LCD_SendCommand+0x22a>
    11e6:	26 e1       	ldi	r18, 0x16	; 22
    11e8:	38 e0       	ldi	r19, 0x08	; 8
    11ea:	41 e0       	ldi	r20, 0x01	; 1
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <TIM_DelayUs>
    11f8:	66 e1       	ldi	r22, 0x16	; 22
    11fa:	78 e0       	ldi	r23, 0x08	; 8
    11fc:	82 e0       	ldi	r24, 0x02	; 2
    11fe:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <TIM_DelayStatus>
    1202:	81 11       	cpse	r24, r1
    1204:	f9 cf       	rjmp	.-14     	; 0x11f8 <LCD_SendCommand+0x1cc>
    1206:	e9 e6       	ldi	r30, 0x69	; 105
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	63 81       	ldd	r22, Z+3	; 0x03
    120e:	80 81       	ld	r24, Z
    1210:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
    1214:	84 e0       	ldi	r24, 0x04	; 4
    1216:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1714>
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	1f c0       	rjmp	.+62     	; 0x125c <LCD_SendCommand+0x230>
    121e:	66 e1       	ldi	r22, 0x16	; 22
    1220:	78 e0       	ldi	r23, 0x08	; 8
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <TIM_DelayStatus>
    1228:	c8 2f       	mov	r28, r24
    122a:	8b 3f       	cpi	r24, 0xFB	; 251
    122c:	49 f4       	brne	.+18     	; 0x1240 <LCD_SendCommand+0x214>
    122e:	26 e1       	ldi	r18, 0x16	; 22
    1230:	38 e0       	ldi	r19, 0x08	; 8
    1232:	42 e0       	ldi	r20, 0x02	; 2
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <TIM_DelayMs>
    1240:	c1 11       	cpse	r28, r1
    1242:	0b c0       	rjmp	.+22     	; 0x125a <LCD_SendCommand+0x22e>
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1714>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	07 c0       	rjmp	.+14     	; 0x125c <LCD_SendCommand+0x230>
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	05 c0       	rjmp	.+10     	; 0x125c <LCD_SendCommand+0x230>
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	03 c0       	rjmp	.+6      	; 0x125c <LCD_SendCommand+0x230>
    1256:	8f ef       	ldi	r24, 0xFF	; 255
    1258:	01 c0       	rjmp	.+2      	; 0x125c <LCD_SendCommand+0x230>
    125a:	8f ef       	ldi	r24, 0xFF	; 255
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	08 95       	ret

00001266 <LCD_SendData>:
	}
	/*return from function*/
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	c8 2f       	mov	r28, r24
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	switch (State) {
    1270:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <State.1741>
    1274:	82 30       	cpi	r24, 0x02	; 2
    1276:	09 f4       	brne	.+2      	; 0x127a <LCD_SendData+0x14>
    1278:	84 c0       	rjmp	.+264    	; 0x1382 <LCD_SendData+0x11c>
    127a:	20 f4       	brcc	.+8      	; 0x1284 <LCD_SendData+0x1e>
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	09 f4       	brne	.+2      	; 0x1282 <LCD_SendData+0x1c>
    1280:	5c c0       	rjmp	.+184    	; 0x133a <LCD_SendData+0xd4>
    1282:	e7 c0       	rjmp	.+462    	; 0x1452 <LCD_SendData+0x1ec>
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	09 f4       	brne	.+2      	; 0x128a <LCD_SendData+0x24>
    1288:	c1 c0       	rjmp	.+386    	; 0x140c <LCD_SendData+0x1a6>
    128a:	8f 3f       	cpi	r24, 0xFF	; 255
    128c:	09 f0       	breq	.+2      	; 0x1290 <LCD_SendData+0x2a>
    128e:	e1 c0       	rjmp	.+450    	; 0x1452 <LCD_SendData+0x1ec>
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
    1290:	09 e6       	ldi	r16, 0x69	; 105
    1292:	10 e0       	ldi	r17, 0x00	; 0
    1294:	f8 01       	movw	r30, r16
    1296:	d0 81       	ld	r29, Z
    1298:	41 e0       	ldi	r20, 0x01	; 1
    129a:	61 81       	ldd	r22, Z+1	; 0x01
    129c:	8d 2f       	mov	r24, r29
    129e:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
    12a2:	40 e0       	ldi	r20, 0x00	; 0
    12a4:	f8 01       	movw	r30, r16
    12a6:	62 81       	ldd	r22, Z+2	; 0x02
    12a8:	8d 2f       	mov	r24, r29
    12aa:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_7));
    12ae:	4c 2f       	mov	r20, r28
    12b0:	44 1f       	adc	r20, r20
    12b2:	44 27       	eor	r20, r20
    12b4:	44 1f       	adc	r20, r20
    12b6:	f8 01       	movw	r30, r16
    12b8:	64 81       	ldd	r22, Z+4	; 0x04
    12ba:	8d 2f       	mov	r24, r29
    12bc:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_6));
    12c0:	4c 2f       	mov	r20, r28
    12c2:	40 74       	andi	r20, 0x40	; 64
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	04 2e       	mov	r0, r20
    12c8:	45 2f       	mov	r20, r21
    12ca:	00 0c       	add	r0, r0
    12cc:	44 1f       	adc	r20, r20
    12ce:	55 0b       	sbc	r21, r21
    12d0:	00 0c       	add	r0, r0
    12d2:	44 1f       	adc	r20, r20
    12d4:	55 1f       	adc	r21, r21
    12d6:	f8 01       	movw	r30, r16
    12d8:	65 81       	ldd	r22, Z+5	; 0x05
    12da:	8d 2f       	mov	r24, r29
    12dc:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_5));
    12e0:	4c 2f       	mov	r20, r28
    12e2:	40 72       	andi	r20, 0x20	; 32
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	55 95       	asr	r21
    12e8:	47 95       	ror	r20
    12ea:	55 95       	asr	r21
    12ec:	47 95       	ror	r20
    12ee:	55 95       	asr	r21
    12f0:	47 95       	ror	r20
    12f2:	55 95       	asr	r21
    12f4:	47 95       	ror	r20
    12f6:	55 95       	asr	r21
    12f8:	47 95       	ror	r20
    12fa:	f8 01       	movw	r30, r16
    12fc:	66 81       	ldd	r22, Z+6	; 0x06
    12fe:	8d 2f       	mov	r24, r29
    1300:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_4));
    1304:	c0 71       	andi	r28, 0x10	; 16
    1306:	4c 2f       	mov	r20, r28
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	55 95       	asr	r21
    130c:	47 95       	ror	r20
    130e:	55 95       	asr	r21
    1310:	47 95       	ror	r20
    1312:	55 95       	asr	r21
    1314:	47 95       	ror	r20
    1316:	55 95       	asr	r21
    1318:	47 95       	ror	r20
    131a:	f8 01       	movw	r30, r16
    131c:	67 81       	ldd	r22, Z+7	; 0x07
    131e:	8d 2f       	mov	r24, r29
    1320:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
    1324:	41 e0       	ldi	r20, 0x01	; 1
    1326:	f8 01       	movw	r30, r16
    1328:	63 81       	ldd	r22, Z+3	; 0x03
    132a:	8d 2f       	mov	r24, r29
    132c:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		#if Timer_Usage
		/*set status of the function*/
		State = First_Nibble_Sent;
		#else
		/*set status of the function*/
		State = Sending_First_Nibble;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1741>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    1336:	8f ef       	ldi	r24, 0xFF	; 255
		State = First_Nibble_Sent;
		#else
		/*set status of the function*/
		State = Sending_First_Nibble;
		#endif
		break;
    1338:	91 c0       	rjmp	.+290    	; 0x145c <LCD_SendData+0x1f6>
	case Sending_First_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
    133a:	66 e1       	ldi	r22, 0x16	; 22
    133c:	78 e0       	ldi	r23, 0x08	; 8
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <TIM_DelayStatus>
    1344:	8b 3f       	cpi	r24, 0xFB	; 251
    1346:	09 f0       	breq	.+2      	; 0x134a <LCD_SendData+0xe4>
    1348:	86 c0       	rjmp	.+268    	; 0x1456 <LCD_SendData+0x1f0>
      {
         TIM_DelayUs(TIMER_2, 1,(void (*)(void)) LCD_SendCommand);
    134a:	26 e1       	ldi	r18, 0x16	; 22
    134c:	38 e0       	ldi	r19, 0x08	; 8
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
    135c:	66 e1       	ldi	r22, 0x16	; 22
    135e:	78 e0       	ldi	r23, 0x08	; 8
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <TIM_DelayStatus>
    1366:	81 11       	cpse	r24, r1
    1368:	f9 cf       	rjmp	.-14     	; 0x135c <LCD_SendData+0xf6>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
    136a:	e9 e6       	ldi	r30, 0x69	; 105
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	63 81       	ldd	r22, Z+3	; 0x03
    1372:	80 81       	ld	r24, Z
    1374:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1741>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	6d c0       	rjmp	.+218    	; 0x145c <LCD_SendData+0x1f6>
         State = First_Nibble_Sent;
      }
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
    1382:	09 e6       	ldi	r16, 0x69	; 105
    1384:	10 e0       	ldi	r17, 0x00	; 0
    1386:	f8 01       	movw	r30, r16
    1388:	d0 81       	ld	r29, Z
    138a:	41 e0       	ldi	r20, 0x01	; 1
    138c:	61 81       	ldd	r22, Z+1	; 0x01
    138e:	8d 2f       	mov	r24, r29
    1390:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	f8 01       	movw	r30, r16
    1398:	62 81       	ldd	r22, Z+2	; 0x02
    139a:	8d 2f       	mov	r24, r29
    139c:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		/*copying lower nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_3));
    13a0:	4c 2f       	mov	r20, r28
    13a2:	48 70       	andi	r20, 0x08	; 8
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	55 95       	asr	r21
    13a8:	47 95       	ror	r20
    13aa:	55 95       	asr	r21
    13ac:	47 95       	ror	r20
    13ae:	55 95       	asr	r21
    13b0:	47 95       	ror	r20
    13b2:	f8 01       	movw	r30, r16
    13b4:	64 81       	ldd	r22, Z+4	; 0x04
    13b6:	8d 2f       	mov	r24, r29
    13b8:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_2));
    13bc:	4c 2f       	mov	r20, r28
    13be:	44 70       	andi	r20, 0x04	; 4
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	55 95       	asr	r21
    13c4:	47 95       	ror	r20
    13c6:	55 95       	asr	r21
    13c8:	47 95       	ror	r20
    13ca:	f8 01       	movw	r30, r16
    13cc:	65 81       	ldd	r22, Z+5	; 0x05
    13ce:	8d 2f       	mov	r24, r29
    13d0:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_1));
    13d4:	4c 2f       	mov	r20, r28
    13d6:	42 70       	andi	r20, 0x02	; 2
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	55 95       	asr	r21
    13dc:	47 95       	ror	r20
    13de:	f8 01       	movw	r30, r16
    13e0:	66 81       	ldd	r22, Z+6	; 0x06
    13e2:	8d 2f       	mov	r24, r29
    13e4:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_0));
    13e8:	4c 2f       	mov	r20, r28
    13ea:	41 70       	andi	r20, 0x01	; 1
    13ec:	f8 01       	movw	r30, r16
    13ee:	67 81       	ldd	r22, Z+7	; 0x07
    13f0:	8d 2f       	mov	r24, r29
    13f2:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
    13f6:	41 e0       	ldi	r20, 0x01	; 1
    13f8:	f8 01       	movw	r30, r16
    13fa:	63 81       	ldd	r22, Z+3	; 0x03
    13fc:	8d 2f       	mov	r24, r29
    13fe:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		#if Timer_Usage
		/*set status of the function*/
		State = OperationStarted;
		#else
		/*set status of the function*/
		State = Sending_Second_Nibble;
    1402:	83 e0       	ldi	r24, 0x03	; 3
    1404:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1741>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    1408:	8f ef       	ldi	r24, 0xFF	; 255
		State = OperationStarted;
		#else
		/*set status of the function*/
		State = Sending_Second_Nibble;
		#endif
		break;
    140a:	28 c0       	rjmp	.+80     	; 0x145c <LCD_SendData+0x1f6>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
    140c:	66 e1       	ldi	r22, 0x16	; 22
    140e:	78 e0       	ldi	r23, 0x08	; 8
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <TIM_DelayStatus>
    1416:	8b 3f       	cpi	r24, 0xFB	; 251
    1418:	01 f5       	brne	.+64     	; 0x145a <LCD_SendData+0x1f4>
      {
         TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendCommand);
    141a:	26 e1       	ldi	r18, 0x16	; 22
    141c:	38 e0       	ldi	r19, 0x08	; 8
    141e:	41 e0       	ldi	r20, 0x01	; 1
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
    142c:	66 e1       	ldi	r22, 0x16	; 22
    142e:	78 e0       	ldi	r23, 0x08	; 8
    1430:	82 e0       	ldi	r24, 0x02	; 2
    1432:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <TIM_DelayStatus>
    1436:	81 11       	cpse	r24, r1
    1438:	f9 cf       	rjmp	.-14     	; 0x142c <LCD_SendData+0x1c6>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
    143a:	e9 e6       	ldi	r30, 0x69	; 105
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	63 81       	ldd	r22, Z+3	; 0x03
    1442:	80 81       	ld	r24, Z
    1444:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
         /*reset the function's state*/
         State = OperationStarted;
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1741>
         /*process finished successfully*/
         ErrRetVal = OperationSuccess;
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	05 c0       	rjmp	.+10     	; 0x145c <LCD_SendData+0x1f6>
      }
		break;
	default:
		ErrRetVal = OperationFail;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	03 c0       	rjmp	.+6      	; 0x145c <LCD_SendData+0x1f6>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    1456:	8f ef       	ldi	r24, 0xFF	; 255
    1458:	01 c0       	rjmp	.+2      	; 0x145c <LCD_SendData+0x1f6>
    145a:	8f ef       	ldi	r24, 0xFF	; 255
		ErrRetVal = OperationFail;
	}
	/*return from function*/
	return ErrRetVal;

}
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	08 95       	ret

00001466 <LCD_Init>:
ERROR_STATE_t LCD_Init()
{
    1466:	bf 92       	push	r11
    1468:	cf 92       	push	r12
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	uint8_t LCD_SendCommandRetVal = OperationStarted;
	switch (State) {
    1478:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <State.1763>
    147c:	8b 30       	cpi	r24, 0x0B	; 11
    147e:	09 f4       	brne	.+2      	; 0x1482 <LCD_Init+0x1c>
    1480:	c3 c0       	rjmp	.+390    	; 0x1608 <LCD_Init+0x1a2>
    1482:	90 f4       	brcc	.+36     	; 0x14a8 <LCD_Init+0x42>
    1484:	88 30       	cpi	r24, 0x08	; 8
    1486:	09 f4       	brne	.+2      	; 0x148a <LCD_Init+0x24>
    1488:	a1 c0       	rjmp	.+322    	; 0x15cc <LCD_Init+0x166>
    148a:	38 f4       	brcc	.+14     	; 0x149a <LCD_Init+0x34>
    148c:	85 30       	cpi	r24, 0x05	; 5
    148e:	09 f4       	brne	.+2      	; 0x1492 <LCD_Init+0x2c>
    1490:	7b c0       	rjmp	.+246    	; 0x1588 <LCD_Init+0x122>
    1492:	86 30       	cpi	r24, 0x06	; 6
    1494:	09 f4       	brne	.+2      	; 0x1498 <LCD_Init+0x32>
    1496:	90 c0       	rjmp	.+288    	; 0x15b8 <LCD_Init+0x152>
    1498:	e9 c0       	rjmp	.+466    	; 0x166c <LCD_Init+0x206>
    149a:	89 30       	cpi	r24, 0x09	; 9
    149c:	09 f4       	brne	.+2      	; 0x14a0 <LCD_Init+0x3a>
    149e:	a0 c0       	rjmp	.+320    	; 0x15e0 <LCD_Init+0x17a>
    14a0:	8a 30       	cpi	r24, 0x0A	; 10
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <LCD_Init+0x40>
    14a4:	a7 c0       	rjmp	.+334    	; 0x15f4 <LCD_Init+0x18e>
    14a6:	e2 c0       	rjmp	.+452    	; 0x166c <LCD_Init+0x206>
    14a8:	8e 30       	cpi	r24, 0x0E	; 14
    14aa:	09 f4       	brne	.+2      	; 0x14ae <LCD_Init+0x48>
    14ac:	cb c0       	rjmp	.+406    	; 0x1644 <LCD_Init+0x1de>
    14ae:	38 f4       	brcc	.+14     	; 0x14be <LCD_Init+0x58>
    14b0:	8c 30       	cpi	r24, 0x0C	; 12
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <LCD_Init+0x50>
    14b4:	b3 c0       	rjmp	.+358    	; 0x161c <LCD_Init+0x1b6>
    14b6:	8d 30       	cpi	r24, 0x0D	; 13
    14b8:	09 f4       	brne	.+2      	; 0x14bc <LCD_Init+0x56>
    14ba:	ba c0       	rjmp	.+372    	; 0x1630 <LCD_Init+0x1ca>
    14bc:	d7 c0       	rjmp	.+430    	; 0x166c <LCD_Init+0x206>
    14be:	8f 30       	cpi	r24, 0x0F	; 15
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <LCD_Init+0x5e>
    14c2:	ca c0       	rjmp	.+404    	; 0x1658 <LCD_Init+0x1f2>
    14c4:	8f 3f       	cpi	r24, 0xFF	; 255
    14c6:	09 f0       	breq	.+2      	; 0x14ca <LCD_Init+0x64>
    14c8:	d1 c0       	rjmp	.+418    	; 0x166c <LCD_Init+0x206>
	case OperationStarted:
		/*Dio and Timer Initialize for the*/
		TIM_Init(TIMER_2);
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <TIM_Init>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
    14d0:	09 e6       	ldi	r16, 0x69	; 105
    14d2:	10 e0       	ldi	r17, 0x00	; 0
    14d4:	f8 01       	movw	r30, r16
    14d6:	b4 80       	ldd	r11, Z+4	; 0x04
    14d8:	c0 81       	ld	r28, Z
    14da:	41 e0       	ldi	r20, 0x01	; 1
    14dc:	6b 2d       	mov	r22, r11
    14de:	8c 2f       	mov	r24, r28
    14e0:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
    14e4:	f8 01       	movw	r30, r16
    14e6:	c5 80       	ldd	r12, Z+5	; 0x05
    14e8:	41 e0       	ldi	r20, 0x01	; 1
    14ea:	6c 2d       	mov	r22, r12
    14ec:	8c 2f       	mov	r24, r28
    14ee:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
    14f2:	f8 01       	movw	r30, r16
    14f4:	d6 80       	ldd	r13, Z+6	; 0x06
    14f6:	41 e0       	ldi	r20, 0x01	; 1
    14f8:	6d 2d       	mov	r22, r13
    14fa:	8c 2f       	mov	r24, r28
    14fc:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
    1500:	f8 01       	movw	r30, r16
    1502:	e7 80       	ldd	r14, Z+7	; 0x07
    1504:	41 e0       	ldi	r20, 0x01	; 1
    1506:	6e 2d       	mov	r22, r14
    1508:	8c 2f       	mov	r24, r28
    150a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
    150e:	f8 01       	movw	r30, r16
    1510:	f1 80       	ldd	r15, Z+1	; 0x01
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	6f 2d       	mov	r22, r15
    1516:	8c 2f       	mov	r24, r28
    1518:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
    151c:	f8 01       	movw	r30, r16
    151e:	d2 81       	ldd	r29, Z+2	; 0x02
    1520:	41 e0       	ldi	r20, 0x01	; 1
    1522:	6d 2f       	mov	r22, r29
    1524:	8c 2f       	mov	r24, r28
    1526:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
    152a:	f8 01       	movw	r30, r16
    152c:	13 81       	ldd	r17, Z+3	; 0x03
    152e:	41 e0       	ldi	r20, 0x01	; 1
    1530:	61 2f       	mov	r22, r17
    1532:	8c 2f       	mov	r24, r28
    1534:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	6b 2d       	mov	r22, r11
    153c:	8c 2f       	mov	r24, r28
    153e:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	6c 2d       	mov	r22, r12
    1546:	8c 2f       	mov	r24, r28
    1548:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
    154c:	40 e0       	ldi	r20, 0x00	; 0
    154e:	6d 2d       	mov	r22, r13
    1550:	8c 2f       	mov	r24, r28
    1552:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
    1556:	40 e0       	ldi	r20, 0x00	; 0
    1558:	6e 2d       	mov	r22, r14
    155a:	8c 2f       	mov	r24, r28
    155c:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	6f 2d       	mov	r22, r15
    1564:	8c 2f       	mov	r24, r28
    1566:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	6d 2f       	mov	r22, r29
    156e:	8c 2f       	mov	r24, r28
    1570:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	61 2f       	mov	r22, r17
    1578:	8c 2f       	mov	r24, r28
    157a:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_WritePin>
		/*set status of the function*/
		State = LCD_Pin_Initializing;
    157e:	85 e0       	ldi	r24, 0x05	; 5
    1580:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    1584:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
		/*set status of the function*/
		State = LCD_Pin_Initializing;
		break;
    1586:	87 c0       	rjmp	.+270    	; 0x1696 <LCD_Init+0x230>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
    1588:	66 e1       	ldi	r22, 0x16	; 22
    158a:	78 e0       	ldi	r23, 0x08	; 8
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <TIM_DelayStatus>
    1592:	c8 2f       	mov	r28, r24
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
    1594:	8b 3f       	cpi	r24, 0xFB	; 251
    1596:	49 f4       	brne	.+18     	; 0x15aa <LCD_Init+0x144>
		{
   		TIM_DelayMs(TIMER_2,15, (void (*)(void))LCD_SendCommand);
    1598:	26 e1       	ldi	r18, 0x16	; 22
    159a:	38 e0       	ldi	r19, 0x08	; 8
    159c:	4f e0       	ldi	r20, 0x0F	; 15
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	82 e0       	ldi	r24, 0x02	; 2
    15a6:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <TIM_DelayMs>
		}
		if(TimerRetVal == ((uint8_t)ERROR_OK))
    15aa:	c1 11       	cpse	r28, r1
    15ac:	61 c0       	rjmp	.+194    	; 0x1670 <LCD_Init+0x20a>
		{
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
    15ae:	86 e0       	ldi	r24, 0x06	; 6
    15b0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	6f c0       	rjmp	.+222    	; 0x1696 <LCD_Init+0x230>
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
	case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
    15b8:	83 e0       	ldi	r24, 0x03	; 3
    15ba:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
    15be:	81 11       	cpse	r24, r1
    15c0:	59 c0       	rjmp	.+178    	; 0x1674 <LCD_Init+0x20e>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
    15c2:	88 e0       	ldi	r24, 0x08	; 8
    15c4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    15c8:	8f ef       	ldi	r24, 0xFF	; 255
    15ca:	65 c0       	rjmp	.+202    	; 0x1696 <LCD_Init+0x230>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
    15cc:	83 e0       	ldi	r24, 0x03	; 3
    15ce:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
    15d2:	81 11       	cpse	r24, r1
    15d4:	51 c0       	rjmp	.+162    	; 0x1678 <LCD_Init+0x212>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
    15d6:	89 e0       	ldi	r24, 0x09	; 9
    15d8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	5b c0       	rjmp	.+182    	; 0x1696 <LCD_Init+0x230>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
    15e0:	83 e0       	ldi	r24, 0x03	; 3
    15e2:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
    15e6:	81 11       	cpse	r24, r1
    15e8:	49 c0       	rjmp	.+146    	; 0x167c <LCD_Init+0x216>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
    15ea:	8a e0       	ldi	r24, 0x0A	; 10
    15ec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    15f0:	8f ef       	ldi	r24, 0xFF	; 255
    15f2:	51 c0       	rjmp	.+162    	; 0x1696 <LCD_Init+0x230>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
    15fa:	81 11       	cpse	r24, r1
    15fc:	41 c0       	rjmp	.+130    	; 0x1680 <LCD_Init+0x21a>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
    15fe:	8b e0       	ldi	r24, 0x0B	; 11
    1600:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    1604:	8f ef       	ldi	r24, 0xFF	; 255
    1606:	47 c0       	rjmp	.+142    	; 0x1696 <LCD_Init+0x230>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_6);
    1608:	88 e2       	ldi	r24, 0x28	; 40
    160a:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
    160e:	81 11       	cpse	r24, r1
    1610:	39 c0       	rjmp	.+114    	; 0x1684 <LCD_Init+0x21e>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
    1612:	8c e0       	ldi	r24, 0x0C	; 12
    1614:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    1618:	8f ef       	ldi	r24, 0xFF	; 255
    161a:	3d c0       	rjmp	.+122    	; 0x1696 <LCD_Init+0x230>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
    161c:	8c e0       	ldi	r24, 0x0C	; 12
    161e:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
    1622:	81 11       	cpse	r24, r1
    1624:	31 c0       	rjmp	.+98     	; 0x1688 <LCD_Init+0x222>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
    1626:	8d e0       	ldi	r24, 0x0D	; 13
    1628:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    162c:	8f ef       	ldi	r24, 0xFF	; 255
    162e:	33 c0       	rjmp	.+102    	; 0x1696 <LCD_Init+0x230>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_SHIFTINCREMENTENTRYMODE);//LCD_INCREMENTENTRYMODE/LCD_SHIFTINCREMENTENTRYMODE
    1630:	87 e0       	ldi	r24, 0x07	; 7
    1632:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
    1636:	81 11       	cpse	r24, r1
    1638:	29 c0       	rjmp	.+82     	; 0x168c <LCD_Init+0x226>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
    163a:	8e e0       	ldi	r24, 0x0E	; 14
    163c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    1640:	8f ef       	ldi	r24, 0xFF	; 255
    1642:	29 c0       	rjmp	.+82     	; 0x1696 <LCD_Init+0x230>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
    164a:	81 11       	cpse	r24, r1
    164c:	21 c0       	rjmp	.+66     	; 0x1690 <LCD_Init+0x22a>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
    164e:	8f e0       	ldi	r24, 0x0F	; 15
    1650:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    1654:	8f ef       	ldi	r24, 0xFF	; 255
    1656:	1f c0       	rjmp	.+62     	; 0x1696 <LCD_Init+0x230>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
    1658:	80 e8       	ldi	r24, 0x80	; 128
    165a:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
    165e:	81 11       	cpse	r24, r1
    1660:	19 c0       	rjmp	.+50     	; 0x1694 <LCD_Init+0x22e>
		{
			State = OperationStarted;
    1662:	8f ef       	ldi	r24, 0xFF	; 255
    1664:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>
			ErrRetVal = OperationSuccess;
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	15 c0       	rjmp	.+42     	; 0x1696 <LCD_Init+0x230>
		}
		break;
	default:
		ErrRetVal = OperationFail;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	13 c0       	rjmp	.+38     	; 0x1696 <LCD_Init+0x230>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	11 c0       	rjmp	.+34     	; 0x1696 <LCD_Init+0x230>
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	0f c0       	rjmp	.+30     	; 0x1696 <LCD_Init+0x230>
    1678:	8f ef       	ldi	r24, 0xFF	; 255
    167a:	0d c0       	rjmp	.+26     	; 0x1696 <LCD_Init+0x230>
    167c:	8f ef       	ldi	r24, 0xFF	; 255
    167e:	0b c0       	rjmp	.+22     	; 0x1696 <LCD_Init+0x230>
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	09 c0       	rjmp	.+18     	; 0x1696 <LCD_Init+0x230>
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	07 c0       	rjmp	.+14     	; 0x1696 <LCD_Init+0x230>
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	05 c0       	rjmp	.+10     	; 0x1696 <LCD_Init+0x230>
    168c:	8f ef       	ldi	r24, 0xFF	; 255
    168e:	03 c0       	rjmp	.+6      	; 0x1696 <LCD_Init+0x230>
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <LCD_Init+0x230>
    1694:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	default:
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	df 90       	pop	r13
    16a4:	cf 90       	pop	r12
    16a6:	bf 90       	pop	r11
    16a8:	08 95       	ret

000016aa <DIO_SetPinDirection>:
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
    16aa:	42 30       	cpi	r20, 0x02	; 2
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <DIO_SetPinDirection+0x6>
    16ae:	60 c0       	rjmp	.+192    	; 0x1770 <DIO_SetPinDirection+0xc6>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
    16b0:	68 30       	cpi	r22, 0x08	; 8
    16b2:	08 f0       	brcs	.+2      	; 0x16b6 <DIO_SetPinDirection+0xc>
    16b4:	5f c0       	rjmp	.+190    	; 0x1774 <DIO_SetPinDirection+0xca>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	e1 f0       	breq	.+56     	; 0x16f2 <DIO_SetPinDirection+0x48>
    16ba:	30 f0       	brcs	.+12     	; 0x16c8 <DIO_SetPinDirection+0x1e>
    16bc:	82 30       	cpi	r24, 0x02	; 2
    16be:	71 f1       	breq	.+92     	; 0x171c <DIO_SetPinDirection+0x72>
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <DIO_SetPinDirection+0x1c>
    16c4:	40 c0       	rjmp	.+128    	; 0x1746 <DIO_SetPinDirection+0x9c>
    16c6:	58 c0       	rjmp	.+176    	; 0x1778 <DIO_SetPinDirection+0xce>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
    16c8:	2a b3       	in	r18, 0x1a	; 26
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	06 2e       	mov	r0, r22
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <DIO_SetPinDirection+0x2c>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	0a 94       	dec	r0
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <DIO_SetPinDirection+0x28>
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <DIO_SetPinDirection+0x38>
    16de:	44 0f       	add	r20, r20
    16e0:	55 1f       	adc	r21, r21
    16e2:	6a 95       	dec	r22
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <DIO_SetPinDirection+0x34>
    16e6:	80 95       	com	r24
    16e8:	82 23       	and	r24, r18
    16ea:	48 2b       	or	r20, r24
    16ec:	4a bb       	out	0x1a, r20	; 26
				u8_ErrorState=ERROR_OK;
    16ee:	80 e0       	ldi	r24, 0x00	; 0
				break;
    16f0:	08 95       	ret
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
    16f2:	27 b3       	in	r18, 0x17	; 23
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	06 2e       	mov	r0, r22
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_SetPinDirection+0x56>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_SetPinDirection+0x52>
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	02 c0       	rjmp	.+4      	; 0x170c <DIO_SetPinDirection+0x62>
    1708:	44 0f       	add	r20, r20
    170a:	55 1f       	adc	r21, r21
    170c:	6a 95       	dec	r22
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <DIO_SetPinDirection+0x5e>
    1710:	80 95       	com	r24
    1712:	82 23       	and	r24, r18
    1714:	48 2b       	or	r20, r24
    1716:	47 bb       	out	0x17, r20	; 23
				u8_ErrorState=ERROR_OK;
    1718:	80 e0       	ldi	r24, 0x00	; 0
				break;
    171a:	08 95       	ret
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
    171c:	24 b3       	in	r18, 0x14	; 20
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	06 2e       	mov	r0, r22
    1724:	02 c0       	rjmp	.+4      	; 0x172a <DIO_SetPinDirection+0x80>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <DIO_SetPinDirection+0x7c>
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_SetPinDirection+0x8c>
    1732:	44 0f       	add	r20, r20
    1734:	55 1f       	adc	r21, r21
    1736:	6a 95       	dec	r22
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <DIO_SetPinDirection+0x88>
    173a:	80 95       	com	r24
    173c:	82 23       	and	r24, r18
    173e:	48 2b       	or	r20, r24
    1740:	44 bb       	out	0x14, r20	; 20
				u8_ErrorState=ERROR_OK;
    1742:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1744:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
    1746:	21 b3       	in	r18, 0x11	; 17
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	06 2e       	mov	r0, r22
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_SetPinDirection+0xaa>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <DIO_SetPinDirection+0xa6>
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <DIO_SetPinDirection+0xb6>
    175c:	44 0f       	add	r20, r20
    175e:	55 1f       	adc	r21, r21
    1760:	6a 95       	dec	r22
    1762:	e2 f7       	brpl	.-8      	; 0x175c <DIO_SetPinDirection+0xb2>
    1764:	80 95       	com	r24
    1766:	82 23       	and	r24, r18
    1768:	48 2b       	or	r20, r24
    176a:	41 bb       	out	0x11, r20	; 17
				u8_ErrorState=ERROR_OK;
    176c:	80 e0       	ldi	r24, 0x00	; 0
				break;
    176e:	08 95       	ret
ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
	{
		u8_ErrorState=ERROR_NOK;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    1778:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}		
	}
	return u8_ErrorState;
}
    177a:	08 95       	ret

0000177c <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
    177c:	42 30       	cpi	r20, 0x02	; 2
    177e:	08 f0       	brcs	.+2      	; 0x1782 <DIO_WritePin+0x6>
    1780:	60 c0       	rjmp	.+192    	; 0x1842 <DIO_WritePin+0xc6>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
    1782:	68 30       	cpi	r22, 0x08	; 8
    1784:	08 f0       	brcs	.+2      	; 0x1788 <DIO_WritePin+0xc>
    1786:	5f c0       	rjmp	.+190    	; 0x1846 <DIO_WritePin+0xca>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	e1 f0       	breq	.+56     	; 0x17c4 <DIO_WritePin+0x48>
    178c:	30 f0       	brcs	.+12     	; 0x179a <DIO_WritePin+0x1e>
    178e:	82 30       	cpi	r24, 0x02	; 2
    1790:	71 f1       	breq	.+92     	; 0x17ee <DIO_WritePin+0x72>
    1792:	83 30       	cpi	r24, 0x03	; 3
    1794:	09 f4       	brne	.+2      	; 0x1798 <DIO_WritePin+0x1c>
    1796:	40 c0       	rjmp	.+128    	; 0x1818 <DIO_WritePin+0x9c>
    1798:	58 c0       	rjmp	.+176    	; 0x184a <DIO_WritePin+0xce>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
    179a:	2b b3       	in	r18, 0x1b	; 27
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	06 2e       	mov	r0, r22
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <DIO_WritePin+0x2c>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <DIO_WritePin+0x28>
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_WritePin+0x38>
    17b0:	44 0f       	add	r20, r20
    17b2:	55 1f       	adc	r21, r21
    17b4:	6a 95       	dec	r22
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_WritePin+0x34>
    17b8:	80 95       	com	r24
    17ba:	82 23       	and	r24, r18
    17bc:	48 2b       	or	r20, r24
    17be:	4b bb       	out	0x1b, r20	; 27
				u8_ErrorState=ERROR_OK;
    17c0:	80 e0       	ldi	r24, 0x00	; 0
				break;
    17c2:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
    17c4:	28 b3       	in	r18, 0x18	; 24
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	06 2e       	mov	r0, r22
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <DIO_WritePin+0x56>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <DIO_WritePin+0x52>
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <DIO_WritePin+0x62>
    17da:	44 0f       	add	r20, r20
    17dc:	55 1f       	adc	r21, r21
    17de:	6a 95       	dec	r22
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <DIO_WritePin+0x5e>
    17e2:	80 95       	com	r24
    17e4:	82 23       	and	r24, r18
    17e6:	48 2b       	or	r20, r24
    17e8:	48 bb       	out	0x18, r20	; 24
				u8_ErrorState=ERROR_OK;
    17ea:	80 e0       	ldi	r24, 0x00	; 0
				break;
    17ec:	08 95       	ret
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
    17ee:	25 b3       	in	r18, 0x15	; 21
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	06 2e       	mov	r0, r22
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <DIO_WritePin+0x80>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <DIO_WritePin+0x7c>
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <DIO_WritePin+0x8c>
    1804:	44 0f       	add	r20, r20
    1806:	55 1f       	adc	r21, r21
    1808:	6a 95       	dec	r22
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <DIO_WritePin+0x88>
    180c:	80 95       	com	r24
    180e:	82 23       	and	r24, r18
    1810:	48 2b       	or	r20, r24
    1812:	45 bb       	out	0x15, r20	; 21
				u8_ErrorState=ERROR_OK;
    1814:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1816:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
    1818:	22 b3       	in	r18, 0x12	; 18
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	06 2e       	mov	r0, r22
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_WritePin+0xaa>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	0a 94       	dec	r0
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_WritePin+0xa6>
    182a:	50 e0       	ldi	r21, 0x00	; 0
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <DIO_WritePin+0xb6>
    182e:	44 0f       	add	r20, r20
    1830:	55 1f       	adc	r21, r21
    1832:	6a 95       	dec	r22
    1834:	e2 f7       	brpl	.-8      	; 0x182e <DIO_WritePin+0xb2>
    1836:	80 95       	com	r24
    1838:	82 23       	and	r24, r18
    183a:	48 2b       	or	r20, r24
    183c:	42 bb       	out	0x12, r20	; 18
				u8_ErrorState=ERROR_OK;
    183e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1840:	08 95       	ret
ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
	{
		u8_ErrorState=ERROR_NOK;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    184a:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
    184c:	08 95       	ret

0000184e <GetFreqPrescaleRatio>:
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
    184e:	82 30       	cpi	r24, 0x02	; 2
    1850:	08 f0       	brcs	.+2      	; 0x1854 <GetFreqPrescaleRatio+0x6>
    1852:	4e c0       	rjmp	.+156    	; 0x18f0 <GetFreqPrescaleRatio+0xa2>
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	fc 01       	movw	r30, r24
    1858:	ee 0f       	add	r30, r30
    185a:	ff 1f       	adc	r31, r31
    185c:	8e 0f       	add	r24, r30
    185e:	9f 1f       	adc	r25, r31
    1860:	fc 01       	movw	r30, r24
    1862:	ef 58       	subi	r30, 0x8F	; 143
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	83 30       	cpi	r24, 0x03	; 3
    186a:	09 f1       	breq	.+66     	; 0x18ae <GetFreqPrescaleRatio+0x60>
    186c:	28 f4       	brcc	.+10     	; 0x1878 <GetFreqPrescaleRatio+0x2a>
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	41 f0       	breq	.+16     	; 0x1882 <GetFreqPrescaleRatio+0x34>
    1872:	82 30       	cpi	r24, 0x02	; 2
    1874:	89 f0       	breq	.+34     	; 0x1898 <GetFreqPrescaleRatio+0x4a>
    1876:	a2 c0       	rjmp	.+324    	; 0x19bc <GetFreqPrescaleRatio+0x16e>
    1878:	84 30       	cpi	r24, 0x04	; 4
    187a:	21 f1       	breq	.+72     	; 0x18c4 <GetFreqPrescaleRatio+0x76>
    187c:	85 30       	cpi	r24, 0x05	; 5
    187e:	69 f1       	breq	.+90     	; 0x18da <GetFreqPrescaleRatio+0x8c>
    1880:	9d c0       	rjmp	.+314    	; 0x19bc <GetFreqPrescaleRatio+0x16e>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a0 e0       	ldi	r26, 0x00	; 0
    1888:	be e3       	ldi	r27, 0x3E	; 62
    188a:	fb 01       	movw	r30, r22
    188c:	80 83       	st	Z, r24
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	a2 83       	std	Z+2, r26	; 0x02
    1892:	b3 83       	std	Z+3, r27	; 0x03
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	08 95       	ret
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 e8       	ldi	r26, 0x80	; 128
    189e:	bf e3       	ldi	r27, 0x3F	; 63
    18a0:	fb 01       	movw	r30, r22
    18a2:	80 83       	st	Z, r24
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	a2 83       	std	Z+2, r26	; 0x02
    18a8:	b3 83       	std	Z+3, r27	; 0x03
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	08 95       	ret
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a0 e0       	ldi	r26, 0x00	; 0
    18b4:	b1 e4       	ldi	r27, 0x41	; 65
    18b6:	fb 01       	movw	r30, r22
    18b8:	80 83       	st	Z, r24
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	a2 83       	std	Z+2, r26	; 0x02
    18be:	b3 83       	std	Z+3, r27	; 0x03
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	08 95       	ret
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a0 e0       	ldi	r26, 0x00	; 0
    18ca:	b2 e4       	ldi	r27, 0x42	; 66
    18cc:	fb 01       	movw	r30, r22
    18ce:	80 83       	st	Z, r24
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	a2 83       	std	Z+2, r26	; 0x02
    18d4:	b3 83       	std	Z+3, r27	; 0x03
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	08 95       	ret
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e0       	ldi	r26, 0x00	; 0
    18e0:	b3 e4       	ldi	r27, 0x43	; 67
    18e2:	fb 01       	movw	r30, r22
    18e4:	80 83       	st	Z, r24
    18e6:	91 83       	std	Z+1, r25	; 0x01
    18e8:	a2 83       	std	Z+2, r26	; 0x02
    18ea:	b3 83       	std	Z+3, r27	; 0x03
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	08 95       	ret
    18f0:	82 30       	cpi	r24, 0x02	; 2
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <GetFreqPrescaleRatio+0xa8>
    18f4:	65 c0       	rjmp	.+202    	; 0x19c0 <GetFreqPrescaleRatio+0x172>
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	fc 01       	movw	r30, r24
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	8e 0f       	add	r24, r30
    1900:	9f 1f       	adc	r25, r31
    1902:	fc 01       	movw	r30, r24
    1904:	ef 58       	subi	r30, 0x8F	; 143
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	e2 81       	ldd	r30, Z+2	; 0x02
    190a:	8e 2f       	mov	r24, r30
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	fc 01       	movw	r30, r24
    1910:	31 97       	sbiw	r30, 0x01	; 1
    1912:	e7 30       	cpi	r30, 0x07	; 7
    1914:	f1 05       	cpc	r31, r1
    1916:	08 f0       	brcs	.+2      	; 0x191a <GetFreqPrescaleRatio+0xcc>
    1918:	55 c0       	rjmp	.+170    	; 0x19c4 <GetFreqPrescaleRatio+0x176>
    191a:	e6 5d       	subi	r30, 0xD6	; 214
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__tablejump2__>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a0 e0       	ldi	r26, 0x00	; 0
    1928:	be e3       	ldi	r27, 0x3E	; 62
    192a:	fb 01       	movw	r30, r22
    192c:	80 83       	st	Z, r24
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	a2 83       	std	Z+2, r26	; 0x02
    1932:	b3 83       	std	Z+3, r27	; 0x03
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	08 95       	ret
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a0 e8       	ldi	r26, 0x80	; 128
    193e:	bf e3       	ldi	r27, 0x3F	; 63
    1940:	fb 01       	movw	r30, r22
    1942:	80 83       	st	Z, r24
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	a2 83       	std	Z+2, r26	; 0x02
    1948:	b3 83       	std	Z+3, r27	; 0x03
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	08 95       	ret
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a0 e8       	ldi	r26, 0x80	; 128
    1954:	b0 e4       	ldi	r27, 0x40	; 64
    1956:	fb 01       	movw	r30, r22
    1958:	80 83       	st	Z, r24
    195a:	91 83       	std	Z+1, r25	; 0x01
    195c:	a2 83       	std	Z+2, r26	; 0x02
    195e:	b3 83       	std	Z+3, r27	; 0x03
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	08 95       	ret
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a0 e0       	ldi	r26, 0x00	; 0
    196a:	b1 e4       	ldi	r27, 0x41	; 65
    196c:	fb 01       	movw	r30, r22
    196e:	80 83       	st	Z, r24
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	a2 83       	std	Z+2, r26	; 0x02
    1974:	b3 83       	std	Z+3, r27	; 0x03
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	08 95       	ret
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a0 e8       	ldi	r26, 0x80	; 128
    1980:	b1 e4       	ldi	r27, 0x41	; 65
    1982:	fb 01       	movw	r30, r22
    1984:	80 83       	st	Z, r24
    1986:	91 83       	std	Z+1, r25	; 0x01
    1988:	a2 83       	std	Z+2, r26	; 0x02
    198a:	b3 83       	std	Z+3, r27	; 0x03
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	08 95       	ret
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a0 e0       	ldi	r26, 0x00	; 0
    1996:	b2 e4       	ldi	r27, 0x42	; 66
    1998:	fb 01       	movw	r30, r22
    199a:	80 83       	st	Z, r24
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	a2 83       	std	Z+2, r26	; 0x02
    19a0:	b3 83       	std	Z+3, r27	; 0x03
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	08 95       	ret
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a0 e0       	ldi	r26, 0x00	; 0
    19ac:	b3 e4       	ldi	r27, 0x43	; 67
    19ae:	fb 01       	movw	r30, r22
    19b0:	80 83       	st	Z, r24
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	a2 83       	std	Z+2, r26	; 0x02
    19b6:	b3 83       	std	Z+3, r27	; 0x03
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	08 95       	ret
    19bc:	8c ef       	ldi	r24, 0xFC	; 252
    19be:	08 95       	ret
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	08 95       	ret
    19c4:	8c ef       	ldi	r24, 0xFC	; 252
    19c6:	08 95       	ret

000019c8 <TIM_Init>:
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	b1 f0       	breq	.+44     	; 0x19f8 <TIM_Init+0x30>
    19cc:	18 f0       	brcs	.+6      	; 0x19d4 <TIM_Init+0xc>
    19ce:	82 30       	cpi	r24, 0x02	; 2
    19d0:	71 f1       	breq	.+92     	; 0x1a2e <TIM_Init+0x66>
    19d2:	44 c0       	rjmp	.+136    	; 0x1a5c <TIM_Init+0x94>
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	fc 01       	movw	r30, r24
    19d8:	ee 0f       	add	r30, r30
    19da:	ff 1f       	adc	r31, r31
    19dc:	8e 0f       	add	r24, r30
    19de:	9f 1f       	adc	r25, r31
    19e0:	fc 01       	movw	r30, r24
    19e2:	ef 58       	subi	r30, 0x8F	; 143
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	83 bf       	out	0x33, r24	; 51
    19ea:	89 b7       	in	r24, 0x39	; 57
    19ec:	8c 7f       	andi	r24, 0xFC	; 252
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	89 2b       	or	r24, r25
    19f2:	89 bf       	out	0x39, r24	; 57
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	08 95       	ret
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	fc 01       	movw	r30, r24
    19fc:	ee 0f       	add	r30, r30
    19fe:	ff 1f       	adc	r31, r31
    1a00:	8e 0f       	add	r24, r30
    1a02:	9f 1f       	adc	r25, r31
    1a04:	fc 01       	movw	r30, r24
    1a06:	ef 58       	subi	r30, 0x8F	; 143
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 81       	ld	r24, Z
    1a0c:	8e bd       	out	0x2e, r24	; 46
    1a0e:	89 b7       	in	r24, 0x39	; 57
    1a10:	28 2f       	mov	r18, r24
    1a12:	27 7e       	andi	r18, 0xE7	; 231
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	89 2f       	mov	r24, r25
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	82 2b       	or	r24, r18
    1a28:	89 bf       	out	0x39, r24	; 57
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	08 95       	ret
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	fc 01       	movw	r30, r24
    1a32:	ee 0f       	add	r30, r30
    1a34:	ff 1f       	adc	r31, r31
    1a36:	8e 0f       	add	r24, r30
    1a38:	9f 1f       	adc	r25, r31
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	ef 58       	subi	r30, 0x8F	; 143
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 81       	ld	r24, Z
    1a42:	85 bd       	out	0x25, r24	; 37
    1a44:	89 b7       	in	r24, 0x39	; 57
    1a46:	28 2f       	mov	r18, r24
    1a48:	2f 73       	andi	r18, 0x3F	; 63
    1a4a:	91 81       	ldd	r25, Z+1	; 0x01
    1a4c:	30 e4       	ldi	r19, 0x40	; 64
    1a4e:	93 9f       	mul	r25, r19
    1a50:	c0 01       	movw	r24, r0
    1a52:	11 24       	eor	r1, r1
    1a54:	82 2b       	or	r24, r18
    1a56:	89 bf       	out	0x39, r24	; 57
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	08 95       	ret
    1a5c:	8e ef       	ldi	r24, 0xFE	; 254
    1a5e:	08 95       	ret

00001a60 <TIM_Start>:
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	71 f0       	breq	.+28     	; 0x1a80 <TIM_Start+0x20>
    1a64:	18 f0       	brcs	.+6      	; 0x1a6c <TIM_Start+0xc>
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	31 f0       	breq	.+12     	; 0x1a76 <TIM_Start+0x16>
    1a6a:	1f c0       	rjmp	.+62     	; 0x1aaa <TIM_Start+0x4a>
    1a6c:	e2 e5       	ldi	r30, 0x52	; 82
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	a3 e5       	ldi	r26, 0x53	; 83
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	09 c0       	rjmp	.+18     	; 0x1a88 <TIM_Start+0x28>
    1a76:	e4 e4       	ldi	r30, 0x44	; 68
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	a5 e4       	ldi	r26, 0x45	; 69
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	04 c0       	rjmp	.+8      	; 0x1a88 <TIM_Start+0x28>
    1a80:	ec e4       	ldi	r30, 0x4C	; 76
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	ae e4       	ldi	r26, 0x4E	; 78
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	71 83       	std	Z+1, r23	; 0x01
    1a8a:	60 83       	st	Z, r22
    1a8c:	2c 91       	ld	r18, X
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	fc 01       	movw	r30, r24
    1a92:	ee 0f       	add	r30, r30
    1a94:	ff 1f       	adc	r31, r31
    1a96:	8e 0f       	add	r24, r30
    1a98:	9f 1f       	adc	r25, r31
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	ef 58       	subi	r30, 0x8F	; 143
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	82 81       	ldd	r24, Z+2	; 0x02
    1aa2:	82 2b       	or	r24, r18
    1aa4:	8c 93       	st	X, r24
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	08 95       	ret
    1aaa:	8e ef       	ldi	r24, 0xFE	; 254
    1aac:	08 95       	ret

00001aae <TIM_GetStatus>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
    1aae:	61 15       	cp	r22, r1
    1ab0:	71 05       	cpc	r23, r1
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <TIM_GetStatus+0x8>
    1ab4:	7a c0       	rjmp	.+244    	; 0x1baa <TIM_GetStatus+0xfc>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	41 f1       	breq	.+80     	; 0x1b0a <TIM_GetStatus+0x5c>
    1aba:	20 f0       	brcs	.+8      	; 0x1ac4 <TIM_GetStatus+0x16>
    1abc:	82 30       	cpi	r24, 0x02	; 2
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <TIM_GetStatus+0x14>
    1ac0:	52 c0       	rjmp	.+164    	; 0x1b66 <TIM_GetStatus+0xb8>
    1ac2:	75 c0       	rjmp	.+234    	; 0x1bae <TIM_GetStatus+0x100>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	ee 0f       	add	r30, r30
    1aca:	ff 1f       	adc	r31, r31
    1acc:	8e 0f       	add	r24, r30
    1ace:	9f 1f       	adc	r25, r31
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	ef 58       	subi	r30, 0x8F	; 143
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	80 81       	ld	r24, Z
    1ad8:	81 11       	cpse	r24, r1
    1ada:	09 c0       	rjmp	.+18     	; 0x1aee <TIM_GetStatus+0x40>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
    1adc:	08 b6       	in	r0, 0x38	; 56
    1ade:	00 fe       	sbrs	r0, 0
    1ae0:	68 c0       	rjmp	.+208    	; 0x1bb2 <TIM_GetStatus+0x104>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1ae2:	fb 01       	movw	r30, r22
    1ae4:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
    1ae6:	98 b7       	in	r25, 0x38	; 56
    1ae8:	91 60       	ori	r25, 0x01	; 1
    1aea:	98 bf       	out	0x38, r25	; 56
    1aec:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1aee:	88 30       	cpi	r24, 0x08	; 8
    1af0:	09 f0       	breq	.+2      	; 0x1af4 <TIM_GetStatus+0x46>
    1af2:	61 c0       	rjmp	.+194    	; 0x1bb6 <TIM_GetStatus+0x108>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
    1af4:	08 b6       	in	r0, 0x38	; 56
    1af6:	01 fe       	sbrs	r0, 1
    1af8:	60 c0       	rjmp	.+192    	; 0x1bba <TIM_GetStatus+0x10c>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	fb 01       	movw	r30, r22
    1afe:	80 83       	st	Z, r24
               TIFR |= TIMER_0_COMPARE_FLAG;
    1b00:	88 b7       	in	r24, 0x38	; 56
    1b02:	82 60       	ori	r24, 0x02	; 2
    1b04:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	ee 0f       	add	r30, r30
    1b10:	ff 1f       	adc	r31, r31
    1b12:	8e 0f       	add	r24, r30
    1b14:	9f 1f       	adc	r25, r31
    1b16:	fc 01       	movw	r30, r24
    1b18:	ef 58       	subi	r30, 0x8F	; 143
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 81       	ld	r24, Z
    1b1e:	81 11       	cpse	r24, r1
    1b20:	09 c0       	rjmp	.+18     	; 0x1b34 <TIM_GetStatus+0x86>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
    1b22:	08 b6       	in	r0, 0x38	; 56
    1b24:	02 fe       	sbrs	r0, 2
    1b26:	4b c0       	rjmp	.+150    	; 0x1bbe <TIM_GetStatus+0x110>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1b28:	fb 01       	movw	r30, r22
    1b2a:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
    1b2c:	98 b7       	in	r25, 0x38	; 56
    1b2e:	94 60       	ori	r25, 0x04	; 4
    1b30:	98 bf       	out	0x38, r25	; 56
    1b32:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1b34:	88 30       	cpi	r24, 0x08	; 8
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <TIM_GetStatus+0x8c>
    1b38:	44 c0       	rjmp	.+136    	; 0x1bc2 <TIM_GetStatus+0x114>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
    1b3a:	98 b7       	in	r25, 0x38	; 56
    1b3c:	89 2f       	mov	r24, r25
    1b3e:	80 71       	andi	r24, 0x10	; 16
    1b40:	94 ff       	sbrs	r25, 4
    1b42:	08 c0       	rjmp	.+16     	; 0x1b54 <TIM_GetStatus+0xa6>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	fb 01       	movw	r30, r22
    1b48:	80 83       	st	Z, r24
               TIFR |= TIMER_1A_COMPARE_FLAG;
    1b4a:	88 b7       	in	r24, 0x38	; 56
    1b4c:	80 61       	ori	r24, 0x10	; 16
    1b4e:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	08 95       	ret
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
    1b54:	93 ff       	sbrs	r25, 3
    1b56:	37 c0       	rjmp	.+110    	; 0x1bc6 <TIM_GetStatus+0x118>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1b58:	91 e0       	ldi	r25, 0x01	; 1
    1b5a:	fb 01       	movw	r30, r22
    1b5c:	90 83       	st	Z, r25
               TIFR |= TIMER_1B_COMPARE_FLAG;
    1b5e:	98 b7       	in	r25, 0x38	; 56
    1b60:	98 60       	ori	r25, 0x08	; 8
    1b62:	98 bf       	out	0x38, r25	; 56
    1b64:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	fc 01       	movw	r30, r24
    1b6a:	ee 0f       	add	r30, r30
    1b6c:	ff 1f       	adc	r31, r31
    1b6e:	8e 0f       	add	r24, r30
    1b70:	9f 1f       	adc	r25, r31
    1b72:	fc 01       	movw	r30, r24
    1b74:	ef 58       	subi	r30, 0x8F	; 143
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	80 81       	ld	r24, Z
    1b7a:	81 11       	cpse	r24, r1
    1b7c:	09 c0       	rjmp	.+18     	; 0x1b90 <TIM_GetStatus+0xe2>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
    1b7e:	08 b6       	in	r0, 0x38	; 56
    1b80:	06 fe       	sbrs	r0, 6
    1b82:	23 c0       	rjmp	.+70     	; 0x1bca <TIM_GetStatus+0x11c>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1b84:	fb 01       	movw	r30, r22
    1b86:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
    1b88:	98 b7       	in	r25, 0x38	; 56
    1b8a:	90 64       	ori	r25, 0x40	; 64
    1b8c:	98 bf       	out	0x38, r25	; 56
    1b8e:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1b90:	88 30       	cpi	r24, 0x08	; 8
    1b92:	e9 f4       	brne	.+58     	; 0x1bce <TIM_GetStatus+0x120>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
    1b94:	08 b6       	in	r0, 0x38	; 56
    1b96:	07 fe       	sbrs	r0, 7
    1b98:	1c c0       	rjmp	.+56     	; 0x1bd2 <TIM_GetStatus+0x124>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	fb 01       	movw	r30, r22
    1b9e:	80 83       	st	Z, r24
               TIFR |= TIMER_2_COMPARE_FLAG;
    1ba0:	88 b7       	in	r24, 0x38	; 56
    1ba2:	80 68       	ori	r24, 0x80	; 128
    1ba4:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	08 95       	ret
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
    1baa:	8f ef       	ldi	r24, 0xFF	; 255
    1bac:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    1bae:	8e ef       	ldi	r24, 0xFE	; 254
    1bb0:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1bb2:	8d ef       	ldi	r24, 0xFD	; 253
    1bb4:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1bba:	8d ef       	ldi	r24, 0xFD	; 253
    1bbc:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1bbe:	8d ef       	ldi	r24, 0xFD	; 253
    1bc0:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1bc6:	8d ef       	ldi	r24, 0xFD	; 253
    1bc8:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1bca:	8d ef       	ldi	r24, 0xFD	; 253
    1bcc:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1bd2:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
}
    1bd4:	08 95       	ret

00001bd6 <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1bd6:	8f 92       	push	r8
    1bd8:	9f 92       	push	r9
    1bda:	af 92       	push	r10
    1bdc:	bf 92       	push	r11
    1bde:	cf 92       	push	r12
    1be0:	df 92       	push	r13
    1be2:	ef 92       	push	r14
    1be4:	ff 92       	push	r15
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <TIM_DelayUs+0x18>
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <TIM_DelayUs+0x1a>
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	18 2f       	mov	r17, r24
    1bf6:	6a 01       	movw	r12, r20
    1bf8:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1bfa:	83 30       	cpi	r24, 0x03	; 3
    1bfc:	08 f0       	brcs	.+2      	; 0x1c00 <TIM_DelayUs+0x2a>
    1bfe:	54 c0       	rjmp	.+168    	; 0x1ca8 <TIM_DelayUs+0xd2>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    1c00:	21 15       	cp	r18, r1
    1c02:	31 05       	cpc	r19, r1
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <TIM_DelayUs+0x32>
    1c06:	52 c0       	rjmp	.+164    	; 0x1cac <TIM_DelayUs+0xd6>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    1c08:	30 93 cb 06 	sts	0x06CB, r19	; 0x8006cb <gptr_CallerFunc+0x1>
    1c0c:	20 93 ca 06 	sts	0x06CA, r18	; 0x8006ca <gptr_CallerFunc>
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    1c10:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <gEnu_State>
    1c14:	81 11       	cpse	r24, r1
    1c16:	4c c0       	rjmp	.+152    	; 0x1cb0 <TIM_DelayUs+0xda>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    1c18:	be 01       	movw	r22, r28
    1c1a:	6f 5f       	subi	r22, 0xFF	; 255
    1c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1e:	81 2f       	mov	r24, r17
    1c20:	0e 94 27 0c 	call	0x184e	; 0x184e <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    1c24:	8c 3f       	cpi	r24, 0xFC	; 252
    1c26:	f1 f1       	breq	.+124    	; 0x1ca4 <TIM_DelayUs+0xce>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    1c28:	89 80       	ldd	r8, Y+1	; 0x01
    1c2a:	9a 80       	ldd	r9, Y+2	; 0x02
    1c2c:	ab 80       	ldd	r10, Y+3	; 0x03
    1c2e:	bc 80       	ldd	r11, Y+4	; 0x04
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	a9 01       	movw	r20, r18
    1c36:	c5 01       	movw	r24, r10
    1c38:	b4 01       	movw	r22, r8
    1c3a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__cmpsf2>
    1c3e:	88 23       	and	r24, r24
    1c40:	61 f0       	breq	.+24     	; 0x1c5a <TIM_DelayUs+0x84>
      {
         TIM_Delay /= f32_FreqRatio;
    1c42:	c7 01       	movw	r24, r14
    1c44:	b6 01       	movw	r22, r12
    1c46:	0e 94 24 10 	call	0x2048	; 0x2048 <__floatunsisf>
    1c4a:	a5 01       	movw	r20, r10
    1c4c:	94 01       	movw	r18, r8
    1c4e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__divsf3>
    1c52:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__fixunssfsi>
    1c56:	6b 01       	movw	r12, r22
    1c58:	7c 01       	movw	r14, r24
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    1c5a:	bb 27       	eor	r27, r27
    1c5c:	af 2d       	mov	r26, r15
    1c5e:	9e 2d       	mov	r25, r14
    1c60:	8d 2d       	mov	r24, r13
    1c62:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <gu32_Overflows>
    1c66:	90 93 d0 06 	sts	0x06D0, r25	; 0x8006d0 <gu32_Overflows+0x1>
    1c6a:	a0 93 d1 06 	sts	0x06D1, r26	; 0x8006d1 <gu32_Overflows+0x2>
    1c6e:	b0 93 d2 06 	sts	0x06D2, r27	; 0x8006d2 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    1c72:	c0 92 cd 06 	sts	0x06CD, r12	; 0x8006cd <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    1c76:	89 2b       	or	r24, r25
    1c78:	8a 2b       	or	r24, r26
    1c7a:	8b 2b       	or	r24, r27
    1c7c:	49 f4       	brne	.+18     	; 0x1c90 <TIM_DelayUs+0xba>
      {
         gu8_OverflowsComplete = HIGH;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    1c84:	6c 2d       	mov	r22, r12
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	81 2f       	mov	r24, r17
    1c8a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <TIM_Start>
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <TIM_DelayUs+0xc4>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1c90:	6f ef       	ldi	r22, 0xFF	; 255
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	81 2f       	mov	r24, r17
    1c96:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <gEnu_State>
      return TIMER_E_PENDING;
    1ca0:	8d ef       	ldi	r24, 0xFD	; 253
    1ca2:	07 c0       	rjmp	.+14     	; 0x1cb2 <TIM_DelayUs+0xdc>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1ca4:	8c ef       	ldi	r24, 0xFC	; 252
    1ca6:	05 c0       	rjmp	.+10     	; 0x1cb2 <TIM_DelayUs+0xdc>
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    1ca8:	8e ef       	ldi	r24, 0xFE	; 254
    1caa:	03 c0       	rjmp	.+6      	; 0x1cb2 <TIM_DelayUs+0xdc>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <TIM_DelayUs+0xdc>
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
}
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	1f 91       	pop	r17
    1cc0:	ff 90       	pop	r15
    1cc2:	ef 90       	pop	r14
    1cc4:	df 90       	pop	r13
    1cc6:	cf 90       	pop	r12
    1cc8:	bf 90       	pop	r11
    1cca:	af 90       	pop	r10
    1ccc:	9f 90       	pop	r9
    1cce:	8f 90       	pop	r8
    1cd0:	08 95       	ret

00001cd2 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1cd2:	8f 92       	push	r8
    1cd4:	9f 92       	push	r9
    1cd6:	af 92       	push	r10
    1cd8:	bf 92       	push	r11
    1cda:	df 92       	push	r13
    1cdc:	ef 92       	push	r14
    1cde:	ff 92       	push	r15
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <TIM_DelayMs+0x18>
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <TIM_DelayMs+0x1a>
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	18 2f       	mov	r17, r24
    1cf2:	04 2f       	mov	r16, r20
    1cf4:	d5 2e       	mov	r13, r21
    1cf6:	e6 2e       	mov	r14, r22
    1cf8:	f7 2e       	mov	r15, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1cfa:	83 30       	cpi	r24, 0x03	; 3
    1cfc:	08 f0       	brcs	.+2      	; 0x1d00 <TIM_DelayMs+0x2e>
    1cfe:	65 c0       	rjmp	.+202    	; 0x1dca <TIM_DelayMs+0xf8>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    1d00:	21 15       	cp	r18, r1
    1d02:	31 05       	cpc	r19, r1
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <TIM_DelayMs+0x36>
    1d06:	63 c0       	rjmp	.+198    	; 0x1dce <TIM_DelayMs+0xfc>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    1d08:	30 93 cb 06 	sts	0x06CB, r19	; 0x8006cb <gptr_CallerFunc+0x1>
    1d0c:	20 93 ca 06 	sts	0x06CA, r18	; 0x8006ca <gptr_CallerFunc>
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    1d10:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <gEnu_State>
    1d14:	81 11       	cpse	r24, r1
    1d16:	5d c0       	rjmp	.+186    	; 0x1dd2 <TIM_DelayMs+0x100>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    1d18:	be 01       	movw	r22, r28
    1d1a:	6f 5f       	subi	r22, 0xFF	; 255
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	81 2f       	mov	r24, r17
    1d20:	0e 94 27 0c 	call	0x184e	; 0x184e <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    1d24:	8c 3f       	cpi	r24, 0xFC	; 252
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <TIM_DelayMs+0x58>
    1d28:	4e c0       	rjmp	.+156    	; 0x1dc6 <TIM_DelayMs+0xf4>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    1d2a:	89 80       	ldd	r8, Y+1	; 0x01
    1d2c:	9a 80       	ldd	r9, Y+2	; 0x02
    1d2e:	ab 80       	ldd	r10, Y+3	; 0x03
    1d30:	bc 80       	ldd	r11, Y+4	; 0x04
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	a9 01       	movw	r20, r18
    1d38:	c5 01       	movw	r24, r10
    1d3a:	b4 01       	movw	r22, r8
    1d3c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__cmpsf2>
    1d40:	88 23       	and	r24, r24
    1d42:	81 f0       	breq	.+32     	; 0x1d64 <TIM_DelayMs+0x92>
      {
         TIM_Delay /= f32_FreqRatio;
    1d44:	60 2f       	mov	r22, r16
    1d46:	7d 2d       	mov	r23, r13
    1d48:	8e 2d       	mov	r24, r14
    1d4a:	9f 2d       	mov	r25, r15
    1d4c:	0e 94 24 10 	call	0x2048	; 0x2048 <__floatunsisf>
    1d50:	a5 01       	movw	r20, r10
    1d52:	94 01       	movw	r18, r8
    1d54:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__divsf3>
    1d58:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__fixunssfsi>
    1d5c:	06 2f       	mov	r16, r22
    1d5e:	d7 2e       	mov	r13, r23
    1d60:	e8 2e       	mov	r14, r24
    1d62:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    1d64:	a8 ee       	ldi	r26, 0xE8	; 232
    1d66:	b3 e0       	ldi	r27, 0x03	; 3
    1d68:	20 2f       	mov	r18, r16
    1d6a:	3d 2d       	mov	r19, r13
    1d6c:	4e 2d       	mov	r20, r14
    1d6e:	5f 2d       	mov	r21, r15
    1d70:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__muluhisi3>
    1d74:	bb 27       	eor	r27, r27
    1d76:	a9 2f       	mov	r26, r25
    1d78:	98 2f       	mov	r25, r24
    1d7a:	87 2f       	mov	r24, r23
    1d7c:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <gu32_Overflows>
    1d80:	90 93 d0 06 	sts	0x06D0, r25	; 0x8006d0 <gu32_Overflows+0x1>
    1d84:	a0 93 d1 06 	sts	0x06D1, r26	; 0x8006d1 <gu32_Overflows+0x2>
    1d88:	b0 93 d2 06 	sts	0x06D2, r27	; 0x8006d2 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    1d8c:	28 ee       	ldi	r18, 0xE8	; 232
    1d8e:	02 9f       	mul	r16, r18
    1d90:	00 2d       	mov	r16, r0
    1d92:	11 24       	eor	r1, r1
    1d94:	00 93 cd 06 	sts	0x06CD, r16	; 0x8006cd <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    1d98:	89 2b       	or	r24, r25
    1d9a:	8a 2b       	or	r24, r26
    1d9c:	8b 2b       	or	r24, r27
    1d9e:	49 f4       	brne	.+18     	; 0x1db2 <TIM_DelayMs+0xe0>
      {
         gu8_OverflowsComplete = HIGH;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    1da6:	60 2f       	mov	r22, r16
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	81 2f       	mov	r24, r17
    1dac:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <TIM_Start>
    1db0:	05 c0       	rjmp	.+10     	; 0x1dbc <TIM_DelayMs+0xea>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1db2:	6f ef       	ldi	r22, 0xFF	; 255
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	81 2f       	mov	r24, r17
    1db8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <gEnu_State>
      return TIMER_E_PENDING;
    1dc2:	8d ef       	ldi	r24, 0xFD	; 253
    1dc4:	07 c0       	rjmp	.+14     	; 0x1dd4 <TIM_DelayMs+0x102>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1dc6:	8c ef       	ldi	r24, 0xFC	; 252
    1dc8:	05 c0       	rjmp	.+10     	; 0x1dd4 <TIM_DelayMs+0x102>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    1dca:	8e ef       	ldi	r24, 0xFE	; 254
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <TIM_DelayMs+0x102>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <TIM_DelayMs+0x102>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
}
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
    1de4:	ff 90       	pop	r15
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	bf 90       	pop	r11
    1dec:	af 90       	pop	r10
    1dee:	9f 90       	pop	r9
    1df0:	8f 90       	pop	r8
    1df2:	08 95       	ret

00001df4 <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	1f 92       	push	r1
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
   if(DelayReady == gEnu_State)
    1e00:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <gEnu_State>
    1e04:	99 23       	and	r25, r25
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <TIM_DelayStatus+0x16>
    1e08:	4a c0       	rjmp	.+148    	; 0x1e9e <TIM_DelayStatus+0xaa>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
    1e0a:	20 91 ca 06 	lds	r18, 0x06CA	; 0x8006ca <gptr_CallerFunc>
    1e0e:	30 91 cb 06 	lds	r19, 0x06CB	; 0x8006cb <gptr_CallerFunc+0x1>
    1e12:	26 17       	cp	r18, r22
    1e14:	37 07       	cpc	r19, r23
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <TIM_DelayStatus+0x26>
    1e18:	44 c0       	rjmp	.+136    	; 0x1ea2 <TIM_DelayStatus+0xae>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    1e1a:	91 30       	cpi	r25, 0x01	; 1
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <TIM_DelayStatus+0x2c>
    1e1e:	43 c0       	rjmp	.+134    	; 0x1ea6 <TIM_DelayStatus+0xb2>
    1e20:	18 2f       	mov	r17, r24
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    1e22:	be 01       	movw	r22, r28
    1e24:	6f 5f       	subi	r22, 0xFF	; 255
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255
    1e28:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	35 c0       	rjmp	.+106    	; 0x1e9a <TIM_DelayStatus+0xa6>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    1e30:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <gu8_OverflowsComplete>
    1e34:	81 30       	cpi	r24, 0x01	; 1
    1e36:	41 f4       	brne	.+16     	; 0x1e48 <TIM_DelayStatus+0x54>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    1e38:	10 92 cc 06 	sts	0x06CC, r1	; 0x8006cc <gEnu_State>
            gu8_OverflowsComplete = LOW;
    1e3c:	10 92 ce 06 	sts	0x06CE, r1	; 0x8006ce <gu8_OverflowsComplete>
            gu8_Remindar = 0;
    1e40:	10 92 cd 06 	sts	0x06CD, r1	; 0x8006cd <gu8_Remindar>
            /* return success message. */
            return ERROR_OK;
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	30 c0       	rjmp	.+96     	; 0x1ea8 <TIM_DelayStatus+0xb4>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    1e48:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <gu32_Overflows>
    1e4c:	90 91 d0 06 	lds	r25, 0x06D0	; 0x8006d0 <gu32_Overflows+0x1>
    1e50:	a0 91 d1 06 	lds	r26, 0x06D1	; 0x8006d1 <gu32_Overflows+0x2>
    1e54:	b0 91 d2 06 	lds	r27, 0x06D2	; 0x8006d2 <gu32_Overflows+0x3>
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	a1 09       	sbc	r26, r1
    1e5c:	b1 09       	sbc	r27, r1
    1e5e:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <gu32_Overflows>
    1e62:	90 93 d0 06 	sts	0x06D0, r25	; 0x8006d0 <gu32_Overflows+0x1>
    1e66:	a0 93 d1 06 	sts	0x06D1, r26	; 0x8006d1 <gu32_Overflows+0x2>
    1e6a:	b0 93 d2 06 	sts	0x06D2, r27	; 0x8006d2 <gu32_Overflows+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    1e6e:	89 2b       	or	r24, r25
    1e70:	8a 2b       	or	r24, r26
    1e72:	8b 2b       	or	r24, r27
    1e74:	59 f4       	brne	.+22     	; 0x1e8c <TIM_DelayStatus+0x98>
         {
            gu8_OverflowsComplete = HIGH;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <gu8_OverflowsComplete>
            TIM_Start(TIM_channel, gu8_Remindar);
    1e7c:	60 91 cd 06 	lds	r22, 0x06CD	; 0x8006cd <gu8_Remindar>
    1e80:	70 e0       	ldi	r23, 0x00	; 0
    1e82:	81 2f       	mov	r24, r17
    1e84:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
    1e88:	8d ef       	ldi	r24, 0xFD	; 253
    1e8a:	0e c0       	rjmp	.+28     	; 0x1ea8 <TIM_DelayStatus+0xb4>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    1e8c:	6f ef       	ldi	r22, 0xFF	; 255
    1e8e:	70 e0       	ldi	r23, 0x00	; 0
    1e90:	81 2f       	mov	r24, r17
    1e92:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    1e96:	8d ef       	ldi	r24, 0xFD	; 253
    1e98:	07 c0       	rjmp	.+14     	; 0x1ea8 <TIM_DelayStatus+0xb4>
   }
   else
   {
      return ERROR_NOK;
   }
   return 0;
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	05 c0       	rjmp	.+10     	; 0x1ea8 <TIM_DelayStatus+0xb4>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
    1e9e:	8b ef       	ldi	r24, 0xFB	; 251
    1ea0:	03 c0       	rjmp	.+6      	; 0x1ea8 <TIM_DelayStatus+0xb4>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	01 c0       	rjmp	.+2      	; 0x1ea8 <TIM_DelayStatus+0xb4>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
   }
   return 0;
    1ea8:	0f 90       	pop	r0
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	08 95       	ret

00001eb2 <myTask1>:
void myTask1 (void *p)
{
	while(1)
	{
		//LCD_SendData('A');
		LCD_SendCommand(0x1C);
    1eb2:	8c e1       	ldi	r24, 0x1C	; 28
    1eb4:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_SendCommand>
		vTaskDelay(2);
    1eb8:	82 e0       	ldi	r24, 0x02	; 2
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 ac 07 	call	0xf58	; 0xf58 <vTaskDelay>
    1ec0:	f8 cf       	rjmp	.-16     	; 0x1eb2 <myTask1>

00001ec2 <main>:
}

int main(void)
{
	
	while(LCD_Init()!= OperationSuccess);
    1ec2:	0e 94 33 0a 	call	0x1466	; 0x1466 <LCD_Init>
    1ec6:	81 11       	cpse	r24, r1
    1ec8:	fc cf       	rjmp	.-8      	; 0x1ec2 <main>
	xTaskCreate(myTask1,"Task1",200,NULL_PTR,1,&myTaskHandle);
    1eca:	0f 2e       	mov	r0, r31
    1ecc:	f3 ed       	ldi	r31, 0xD3	; 211
    1ece:	ef 2e       	mov	r14, r31
    1ed0:	f6 e0       	ldi	r31, 0x06	; 6
    1ed2:	ff 2e       	mov	r15, r31
    1ed4:	f0 2d       	mov	r31, r0
    1ed6:	01 e0       	ldi	r16, 0x01	; 1
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	48 ec       	ldi	r20, 0xC8	; 200
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	6a e7       	ldi	r22, 0x7A	; 122
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	89 e5       	ldi	r24, 0x59	; 89
    1ee6:	9f e0       	ldi	r25, 0x0F	; 15
    1ee8:	0e 94 37 05 	call	0xa6e	; 0xa6e <xTaskCreate>
	while(LCD_SendData('A')!=OperationSuccess);
    1eec:	81 e4       	ldi	r24, 0x41	; 65
    1eee:	0e 94 33 09 	call	0x1266	; 0x1266 <LCD_SendData>
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	fb cf       	rjmp	.-10     	; 0x1eec <main+0x2a>
	vTaskStartScheduler();
    1ef6:	0e 94 8b 05 	call	0xb16	; 0xb16 <vTaskStartScheduler>
    1efa:	ff cf       	rjmp	.-2      	; 0x1efa <main+0x38>

00001efc <__cmpsf2>:
    1efc:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__fp_cmp>
    1f00:	08 f4       	brcc	.+2      	; 0x1f04 <__cmpsf2+0x8>
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	08 95       	ret

00001f06 <__divsf3>:
    1f06:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__divsf3x>
    1f0a:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__fp_round>
    1f0e:	0e 94 95 10 	call	0x212a	; 0x212a <__fp_pscB>
    1f12:	58 f0       	brcs	.+22     	; 0x1f2a <__divsf3+0x24>
    1f14:	0e 94 8e 10 	call	0x211c	; 0x211c <__fp_pscA>
    1f18:	40 f0       	brcs	.+16     	; 0x1f2a <__divsf3+0x24>
    1f1a:	29 f4       	brne	.+10     	; 0x1f26 <__divsf3+0x20>
    1f1c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f1e:	29 f0       	breq	.+10     	; 0x1f2a <__divsf3+0x24>
    1f20:	0c 94 85 10 	jmp	0x210a	; 0x210a <__fp_inf>
    1f24:	51 11       	cpse	r21, r1
    1f26:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__fp_szero>
    1f2a:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__fp_nan>

00001f2e <__divsf3x>:
    1f2e:	0e 94 ad 10 	call	0x215a	; 0x215a <__fp_split3>
    1f32:	68 f3       	brcs	.-38     	; 0x1f0e <__divsf3+0x8>

00001f34 <__divsf3_pse>:
    1f34:	99 23       	and	r25, r25
    1f36:	b1 f3       	breq	.-20     	; 0x1f24 <__divsf3+0x1e>
    1f38:	55 23       	and	r21, r21
    1f3a:	91 f3       	breq	.-28     	; 0x1f20 <__divsf3+0x1a>
    1f3c:	95 1b       	sub	r25, r21
    1f3e:	55 0b       	sbc	r21, r21
    1f40:	bb 27       	eor	r27, r27
    1f42:	aa 27       	eor	r26, r26
    1f44:	62 17       	cp	r22, r18
    1f46:	73 07       	cpc	r23, r19
    1f48:	84 07       	cpc	r24, r20
    1f4a:	38 f0       	brcs	.+14     	; 0x1f5a <__divsf3_pse+0x26>
    1f4c:	9f 5f       	subi	r25, 0xFF	; 255
    1f4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f50:	22 0f       	add	r18, r18
    1f52:	33 1f       	adc	r19, r19
    1f54:	44 1f       	adc	r20, r20
    1f56:	aa 1f       	adc	r26, r26
    1f58:	a9 f3       	breq	.-22     	; 0x1f44 <__divsf3_pse+0x10>
    1f5a:	35 d0       	rcall	.+106    	; 0x1fc6 <__divsf3_pse+0x92>
    1f5c:	0e 2e       	mov	r0, r30
    1f5e:	3a f0       	brmi	.+14     	; 0x1f6e <__divsf3_pse+0x3a>
    1f60:	e0 e8       	ldi	r30, 0x80	; 128
    1f62:	32 d0       	rcall	.+100    	; 0x1fc8 <__divsf3_pse+0x94>
    1f64:	91 50       	subi	r25, 0x01	; 1
    1f66:	50 40       	sbci	r21, 0x00	; 0
    1f68:	e6 95       	lsr	r30
    1f6a:	00 1c       	adc	r0, r0
    1f6c:	ca f7       	brpl	.-14     	; 0x1f60 <__divsf3_pse+0x2c>
    1f6e:	2b d0       	rcall	.+86     	; 0x1fc6 <__divsf3_pse+0x92>
    1f70:	fe 2f       	mov	r31, r30
    1f72:	29 d0       	rcall	.+82     	; 0x1fc6 <__divsf3_pse+0x92>
    1f74:	66 0f       	add	r22, r22
    1f76:	77 1f       	adc	r23, r23
    1f78:	88 1f       	adc	r24, r24
    1f7a:	bb 1f       	adc	r27, r27
    1f7c:	26 17       	cp	r18, r22
    1f7e:	37 07       	cpc	r19, r23
    1f80:	48 07       	cpc	r20, r24
    1f82:	ab 07       	cpc	r26, r27
    1f84:	b0 e8       	ldi	r27, 0x80	; 128
    1f86:	09 f0       	breq	.+2      	; 0x1f8a <__divsf3_pse+0x56>
    1f88:	bb 0b       	sbc	r27, r27
    1f8a:	80 2d       	mov	r24, r0
    1f8c:	bf 01       	movw	r22, r30
    1f8e:	ff 27       	eor	r31, r31
    1f90:	93 58       	subi	r25, 0x83	; 131
    1f92:	5f 4f       	sbci	r21, 0xFF	; 255
    1f94:	3a f0       	brmi	.+14     	; 0x1fa4 <__divsf3_pse+0x70>
    1f96:	9e 3f       	cpi	r25, 0xFE	; 254
    1f98:	51 05       	cpc	r21, r1
    1f9a:	78 f0       	brcs	.+30     	; 0x1fba <__divsf3_pse+0x86>
    1f9c:	0c 94 85 10 	jmp	0x210a	; 0x210a <__fp_inf>
    1fa0:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__fp_szero>
    1fa4:	5f 3f       	cpi	r21, 0xFF	; 255
    1fa6:	e4 f3       	brlt	.-8      	; 0x1fa0 <__divsf3_pse+0x6c>
    1fa8:	98 3e       	cpi	r25, 0xE8	; 232
    1faa:	d4 f3       	brlt	.-12     	; 0x1fa0 <__divsf3_pse+0x6c>
    1fac:	86 95       	lsr	r24
    1fae:	77 95       	ror	r23
    1fb0:	67 95       	ror	r22
    1fb2:	b7 95       	ror	r27
    1fb4:	f7 95       	ror	r31
    1fb6:	9f 5f       	subi	r25, 0xFF	; 255
    1fb8:	c9 f7       	brne	.-14     	; 0x1fac <__divsf3_pse+0x78>
    1fba:	88 0f       	add	r24, r24
    1fbc:	91 1d       	adc	r25, r1
    1fbe:	96 95       	lsr	r25
    1fc0:	87 95       	ror	r24
    1fc2:	97 f9       	bld	r25, 7
    1fc4:	08 95       	ret
    1fc6:	e1 e0       	ldi	r30, 0x01	; 1
    1fc8:	66 0f       	add	r22, r22
    1fca:	77 1f       	adc	r23, r23
    1fcc:	88 1f       	adc	r24, r24
    1fce:	bb 1f       	adc	r27, r27
    1fd0:	62 17       	cp	r22, r18
    1fd2:	73 07       	cpc	r23, r19
    1fd4:	84 07       	cpc	r24, r20
    1fd6:	ba 07       	cpc	r27, r26
    1fd8:	20 f0       	brcs	.+8      	; 0x1fe2 <__divsf3_pse+0xae>
    1fda:	62 1b       	sub	r22, r18
    1fdc:	73 0b       	sbc	r23, r19
    1fde:	84 0b       	sbc	r24, r20
    1fe0:	ba 0b       	sbc	r27, r26
    1fe2:	ee 1f       	adc	r30, r30
    1fe4:	88 f7       	brcc	.-30     	; 0x1fc8 <__divsf3_pse+0x94>
    1fe6:	e0 95       	com	r30
    1fe8:	08 95       	ret

00001fea <__fixunssfsi>:
    1fea:	0e 94 b5 10 	call	0x216a	; 0x216a <__fp_splitA>
    1fee:	88 f0       	brcs	.+34     	; 0x2012 <__fixunssfsi+0x28>
    1ff0:	9f 57       	subi	r25, 0x7F	; 127
    1ff2:	98 f0       	brcs	.+38     	; 0x201a <__fixunssfsi+0x30>
    1ff4:	b9 2f       	mov	r27, r25
    1ff6:	99 27       	eor	r25, r25
    1ff8:	b7 51       	subi	r27, 0x17	; 23
    1ffa:	b0 f0       	brcs	.+44     	; 0x2028 <__fixunssfsi+0x3e>
    1ffc:	e1 f0       	breq	.+56     	; 0x2036 <__fixunssfsi+0x4c>
    1ffe:	66 0f       	add	r22, r22
    2000:	77 1f       	adc	r23, r23
    2002:	88 1f       	adc	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	1a f0       	brmi	.+6      	; 0x200e <__fixunssfsi+0x24>
    2008:	ba 95       	dec	r27
    200a:	c9 f7       	brne	.-14     	; 0x1ffe <__fixunssfsi+0x14>
    200c:	14 c0       	rjmp	.+40     	; 0x2036 <__fixunssfsi+0x4c>
    200e:	b1 30       	cpi	r27, 0x01	; 1
    2010:	91 f0       	breq	.+36     	; 0x2036 <__fixunssfsi+0x4c>
    2012:	0e 94 cf 10 	call	0x219e	; 0x219e <__fp_zero>
    2016:	b1 e0       	ldi	r27, 0x01	; 1
    2018:	08 95       	ret
    201a:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__fp_zero>
    201e:	67 2f       	mov	r22, r23
    2020:	78 2f       	mov	r23, r24
    2022:	88 27       	eor	r24, r24
    2024:	b8 5f       	subi	r27, 0xF8	; 248
    2026:	39 f0       	breq	.+14     	; 0x2036 <__fixunssfsi+0x4c>
    2028:	b9 3f       	cpi	r27, 0xF9	; 249
    202a:	cc f3       	brlt	.-14     	; 0x201e <__fixunssfsi+0x34>
    202c:	86 95       	lsr	r24
    202e:	77 95       	ror	r23
    2030:	67 95       	ror	r22
    2032:	b3 95       	inc	r27
    2034:	d9 f7       	brne	.-10     	; 0x202c <__fixunssfsi+0x42>
    2036:	3e f4       	brtc	.+14     	; 0x2046 <__fixunssfsi+0x5c>
    2038:	90 95       	com	r25
    203a:	80 95       	com	r24
    203c:	70 95       	com	r23
    203e:	61 95       	neg	r22
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	8f 4f       	sbci	r24, 0xFF	; 255
    2044:	9f 4f       	sbci	r25, 0xFF	; 255
    2046:	08 95       	ret

00002048 <__floatunsisf>:
    2048:	e8 94       	clt
    204a:	09 c0       	rjmp	.+18     	; 0x205e <__floatsisf+0x12>

0000204c <__floatsisf>:
    204c:	97 fb       	bst	r25, 7
    204e:	3e f4       	brtc	.+14     	; 0x205e <__floatsisf+0x12>
    2050:	90 95       	com	r25
    2052:	80 95       	com	r24
    2054:	70 95       	com	r23
    2056:	61 95       	neg	r22
    2058:	7f 4f       	sbci	r23, 0xFF	; 255
    205a:	8f 4f       	sbci	r24, 0xFF	; 255
    205c:	9f 4f       	sbci	r25, 0xFF	; 255
    205e:	99 23       	and	r25, r25
    2060:	a9 f0       	breq	.+42     	; 0x208c <__floatsisf+0x40>
    2062:	f9 2f       	mov	r31, r25
    2064:	96 e9       	ldi	r25, 0x96	; 150
    2066:	bb 27       	eor	r27, r27
    2068:	93 95       	inc	r25
    206a:	f6 95       	lsr	r31
    206c:	87 95       	ror	r24
    206e:	77 95       	ror	r23
    2070:	67 95       	ror	r22
    2072:	b7 95       	ror	r27
    2074:	f1 11       	cpse	r31, r1
    2076:	f8 cf       	rjmp	.-16     	; 0x2068 <__floatsisf+0x1c>
    2078:	fa f4       	brpl	.+62     	; 0x20b8 <__floatsisf+0x6c>
    207a:	bb 0f       	add	r27, r27
    207c:	11 f4       	brne	.+4      	; 0x2082 <__floatsisf+0x36>
    207e:	60 ff       	sbrs	r22, 0
    2080:	1b c0       	rjmp	.+54     	; 0x20b8 <__floatsisf+0x6c>
    2082:	6f 5f       	subi	r22, 0xFF	; 255
    2084:	7f 4f       	sbci	r23, 0xFF	; 255
    2086:	8f 4f       	sbci	r24, 0xFF	; 255
    2088:	9f 4f       	sbci	r25, 0xFF	; 255
    208a:	16 c0       	rjmp	.+44     	; 0x20b8 <__floatsisf+0x6c>
    208c:	88 23       	and	r24, r24
    208e:	11 f0       	breq	.+4      	; 0x2094 <__floatsisf+0x48>
    2090:	96 e9       	ldi	r25, 0x96	; 150
    2092:	11 c0       	rjmp	.+34     	; 0x20b6 <__floatsisf+0x6a>
    2094:	77 23       	and	r23, r23
    2096:	21 f0       	breq	.+8      	; 0x20a0 <__floatsisf+0x54>
    2098:	9e e8       	ldi	r25, 0x8E	; 142
    209a:	87 2f       	mov	r24, r23
    209c:	76 2f       	mov	r23, r22
    209e:	05 c0       	rjmp	.+10     	; 0x20aa <__floatsisf+0x5e>
    20a0:	66 23       	and	r22, r22
    20a2:	71 f0       	breq	.+28     	; 0x20c0 <__floatsisf+0x74>
    20a4:	96 e8       	ldi	r25, 0x86	; 134
    20a6:	86 2f       	mov	r24, r22
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	2a f0       	brmi	.+10     	; 0x20b8 <__floatsisf+0x6c>
    20ae:	9a 95       	dec	r25
    20b0:	66 0f       	add	r22, r22
    20b2:	77 1f       	adc	r23, r23
    20b4:	88 1f       	adc	r24, r24
    20b6:	da f7       	brpl	.-10     	; 0x20ae <__floatsisf+0x62>
    20b8:	88 0f       	add	r24, r24
    20ba:	96 95       	lsr	r25
    20bc:	87 95       	ror	r24
    20be:	97 f9       	bld	r25, 7
    20c0:	08 95       	ret

000020c2 <__fp_cmp>:
    20c2:	99 0f       	add	r25, r25
    20c4:	00 08       	sbc	r0, r0
    20c6:	55 0f       	add	r21, r21
    20c8:	aa 0b       	sbc	r26, r26
    20ca:	e0 e8       	ldi	r30, 0x80	; 128
    20cc:	fe ef       	ldi	r31, 0xFE	; 254
    20ce:	16 16       	cp	r1, r22
    20d0:	17 06       	cpc	r1, r23
    20d2:	e8 07       	cpc	r30, r24
    20d4:	f9 07       	cpc	r31, r25
    20d6:	c0 f0       	brcs	.+48     	; 0x2108 <__fp_cmp+0x46>
    20d8:	12 16       	cp	r1, r18
    20da:	13 06       	cpc	r1, r19
    20dc:	e4 07       	cpc	r30, r20
    20de:	f5 07       	cpc	r31, r21
    20e0:	98 f0       	brcs	.+38     	; 0x2108 <__fp_cmp+0x46>
    20e2:	62 1b       	sub	r22, r18
    20e4:	73 0b       	sbc	r23, r19
    20e6:	84 0b       	sbc	r24, r20
    20e8:	95 0b       	sbc	r25, r21
    20ea:	39 f4       	brne	.+14     	; 0x20fa <__fp_cmp+0x38>
    20ec:	0a 26       	eor	r0, r26
    20ee:	61 f0       	breq	.+24     	; 0x2108 <__fp_cmp+0x46>
    20f0:	23 2b       	or	r18, r19
    20f2:	24 2b       	or	r18, r20
    20f4:	25 2b       	or	r18, r21
    20f6:	21 f4       	brne	.+8      	; 0x2100 <__fp_cmp+0x3e>
    20f8:	08 95       	ret
    20fa:	0a 26       	eor	r0, r26
    20fc:	09 f4       	brne	.+2      	; 0x2100 <__fp_cmp+0x3e>
    20fe:	a1 40       	sbci	r26, 0x01	; 1
    2100:	a6 95       	lsr	r26
    2102:	8f ef       	ldi	r24, 0xFF	; 255
    2104:	81 1d       	adc	r24, r1
    2106:	81 1d       	adc	r24, r1
    2108:	08 95       	ret

0000210a <__fp_inf>:
    210a:	97 f9       	bld	r25, 7
    210c:	9f 67       	ori	r25, 0x7F	; 127
    210e:	80 e8       	ldi	r24, 0x80	; 128
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	08 95       	ret

00002116 <__fp_nan>:
    2116:	9f ef       	ldi	r25, 0xFF	; 255
    2118:	80 ec       	ldi	r24, 0xC0	; 192
    211a:	08 95       	ret

0000211c <__fp_pscA>:
    211c:	00 24       	eor	r0, r0
    211e:	0a 94       	dec	r0
    2120:	16 16       	cp	r1, r22
    2122:	17 06       	cpc	r1, r23
    2124:	18 06       	cpc	r1, r24
    2126:	09 06       	cpc	r0, r25
    2128:	08 95       	ret

0000212a <__fp_pscB>:
    212a:	00 24       	eor	r0, r0
    212c:	0a 94       	dec	r0
    212e:	12 16       	cp	r1, r18
    2130:	13 06       	cpc	r1, r19
    2132:	14 06       	cpc	r1, r20
    2134:	05 06       	cpc	r0, r21
    2136:	08 95       	ret

00002138 <__fp_round>:
    2138:	09 2e       	mov	r0, r25
    213a:	03 94       	inc	r0
    213c:	00 0c       	add	r0, r0
    213e:	11 f4       	brne	.+4      	; 0x2144 <__fp_round+0xc>
    2140:	88 23       	and	r24, r24
    2142:	52 f0       	brmi	.+20     	; 0x2158 <__fp_round+0x20>
    2144:	bb 0f       	add	r27, r27
    2146:	40 f4       	brcc	.+16     	; 0x2158 <__fp_round+0x20>
    2148:	bf 2b       	or	r27, r31
    214a:	11 f4       	brne	.+4      	; 0x2150 <__fp_round+0x18>
    214c:	60 ff       	sbrs	r22, 0
    214e:	04 c0       	rjmp	.+8      	; 0x2158 <__fp_round+0x20>
    2150:	6f 5f       	subi	r22, 0xFF	; 255
    2152:	7f 4f       	sbci	r23, 0xFF	; 255
    2154:	8f 4f       	sbci	r24, 0xFF	; 255
    2156:	9f 4f       	sbci	r25, 0xFF	; 255
    2158:	08 95       	ret

0000215a <__fp_split3>:
    215a:	57 fd       	sbrc	r21, 7
    215c:	90 58       	subi	r25, 0x80	; 128
    215e:	44 0f       	add	r20, r20
    2160:	55 1f       	adc	r21, r21
    2162:	59 f0       	breq	.+22     	; 0x217a <__fp_splitA+0x10>
    2164:	5f 3f       	cpi	r21, 0xFF	; 255
    2166:	71 f0       	breq	.+28     	; 0x2184 <__fp_splitA+0x1a>
    2168:	47 95       	ror	r20

0000216a <__fp_splitA>:
    216a:	88 0f       	add	r24, r24
    216c:	97 fb       	bst	r25, 7
    216e:	99 1f       	adc	r25, r25
    2170:	61 f0       	breq	.+24     	; 0x218a <__fp_splitA+0x20>
    2172:	9f 3f       	cpi	r25, 0xFF	; 255
    2174:	79 f0       	breq	.+30     	; 0x2194 <__fp_splitA+0x2a>
    2176:	87 95       	ror	r24
    2178:	08 95       	ret
    217a:	12 16       	cp	r1, r18
    217c:	13 06       	cpc	r1, r19
    217e:	14 06       	cpc	r1, r20
    2180:	55 1f       	adc	r21, r21
    2182:	f2 cf       	rjmp	.-28     	; 0x2168 <__fp_split3+0xe>
    2184:	46 95       	lsr	r20
    2186:	f1 df       	rcall	.-30     	; 0x216a <__fp_splitA>
    2188:	08 c0       	rjmp	.+16     	; 0x219a <__fp_splitA+0x30>
    218a:	16 16       	cp	r1, r22
    218c:	17 06       	cpc	r1, r23
    218e:	18 06       	cpc	r1, r24
    2190:	99 1f       	adc	r25, r25
    2192:	f1 cf       	rjmp	.-30     	; 0x2176 <__fp_splitA+0xc>
    2194:	86 95       	lsr	r24
    2196:	71 05       	cpc	r23, r1
    2198:	61 05       	cpc	r22, r1
    219a:	08 94       	sec
    219c:	08 95       	ret

0000219e <__fp_zero>:
    219e:	e8 94       	clt

000021a0 <__fp_szero>:
    21a0:	bb 27       	eor	r27, r27
    21a2:	66 27       	eor	r22, r22
    21a4:	77 27       	eor	r23, r23
    21a6:	cb 01       	movw	r24, r22
    21a8:	97 f9       	bld	r25, 7
    21aa:	08 95       	ret

000021ac <__tablejump2__>:
    21ac:	ee 0f       	add	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	05 90       	lpm	r0, Z+
    21b2:	f4 91       	lpm	r31, Z
    21b4:	e0 2d       	mov	r30, r0
    21b6:	09 94       	ijmp

000021b8 <__muluhisi3>:
    21b8:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__umulhisi3>
    21bc:	a5 9f       	mul	r26, r21
    21be:	90 0d       	add	r25, r0
    21c0:	b4 9f       	mul	r27, r20
    21c2:	90 0d       	add	r25, r0
    21c4:	a4 9f       	mul	r26, r20
    21c6:	80 0d       	add	r24, r0
    21c8:	91 1d       	adc	r25, r1
    21ca:	11 24       	eor	r1, r1
    21cc:	08 95       	ret

000021ce <__umulhisi3>:
    21ce:	a2 9f       	mul	r26, r18
    21d0:	b0 01       	movw	r22, r0
    21d2:	b3 9f       	mul	r27, r19
    21d4:	c0 01       	movw	r24, r0
    21d6:	a3 9f       	mul	r26, r19
    21d8:	70 0d       	add	r23, r0
    21da:	81 1d       	adc	r24, r1
    21dc:	11 24       	eor	r1, r1
    21de:	91 1d       	adc	r25, r1
    21e0:	b2 9f       	mul	r27, r18
    21e2:	70 0d       	add	r23, r0
    21e4:	81 1d       	adc	r24, r1
    21e6:	11 24       	eor	r1, r1
    21e8:	91 1d       	adc	r25, r1
    21ea:	08 95       	ret

000021ec <_exit>:
    21ec:	f8 94       	cli

000021ee <__stop_program>:
    21ee:	ff cf       	rjmp	.-2      	; 0x21ee <__stop_program>
