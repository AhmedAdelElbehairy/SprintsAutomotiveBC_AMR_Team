
MCU_To_MCU_Bluetooth_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000046a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800060  00800060  000004de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000215e  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c3  00000000  00000000  0000286a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001424  00000000  00000000  0000312d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  00004554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e71  00000000  00000000  00004b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fe4  00000000  00000000  00005979  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000795d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 32 02 	call	0x464	; 0x464 <main>
  8a:	0c 94 33 02 	jmp	0x466	; 0x466 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	0f 92       	push	r0
  9a:	1f 92       	push	r1
  9c:	11 24       	eor	r1, r1
  9e:	2f 92       	push	r2
  a0:	3f 92       	push	r3
  a2:	4f 92       	push	r4
  a4:	5f 92       	push	r5
  a6:	6f 92       	push	r6
  a8:	7f 92       	push	r7
  aa:	8f 92       	push	r8
  ac:	9f 92       	push	r9
  ae:	af 92       	push	r10
  b0:	bf 92       	push	r11
  b2:	cf 92       	push	r12
  b4:	df 92       	push	r13
  b6:	ef 92       	push	r14
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
  da:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <pxCurrentTCB>
  de:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <pxCurrentTCB+0x1>
  e2:	0d b6       	in	r0, 0x3d	; 61
  e4:	0d 92       	st	X+, r0
  e6:	0e b6       	in	r0, 0x3e	; 62
  e8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
  ea:	0e 94 c4 00 	call	0x188	; 0x188 <xTaskIncrementTick>
  ee:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
  f0:	0e 94 de 01 	call	0x3bc	; 0x3bc <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
  f4:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <pxCurrentTCB>
  f8:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <pxCurrentTCB+0x1>
  fc:	cd 91       	ld	r28, X+
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	dd 91       	ld	r29, X+
 102:	de bf       	out	0x3e, r29	; 62
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	bf 91       	pop	r27
 10e:	af 91       	pop	r26
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	7f 91       	pop	r23
 116:	6f 91       	pop	r22
 118:	5f 91       	pop	r21
 11a:	4f 91       	pop	r20
 11c:	3f 91       	pop	r19
 11e:	2f 91       	pop	r18
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	ff 90       	pop	r15
 126:	ef 90       	pop	r14
 128:	df 90       	pop	r13
 12a:	cf 90       	pop	r12
 12c:	bf 90       	pop	r11
 12e:	af 90       	pop	r10
 130:	9f 90       	pop	r9
 132:	8f 90       	pop	r8
 134:	7f 90       	pop	r7
 136:	6f 90       	pop	r6
 138:	5f 90       	pop	r5
 13a:	4f 90       	pop	r4
 13c:	3f 90       	pop	r3
 13e:	2f 90       	pop	r2
 140:	1f 90       	pop	r1
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0

	asm volatile ( "ret" );
 148:	08 95       	ret

0000014a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 14a:	0e 94 49 00 	call	0x92	; 0x92 <vPortYieldFromTick>
		asm volatile ( "reti" );
 14e:	18 95       	reti

00000150 <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
 150:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pxDelayedTaskList>
 154:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pxDelayedTaskList+0x1>
 158:	80 81       	ld	r24, Z
 15a:	81 11       	cpse	r24, r1
 15c:	07 c0       	rjmp	.+14     	; 0x16c <prvResetNextTaskUnblockTime+0x1c>
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	9f ef       	ldi	r25, 0xFF	; 255
 162:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <xNextTaskUnblockTime+0x1>
 166:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <xNextTaskUnblockTime>
 16a:	08 95       	ret
 16c:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pxDelayedTaskList>
 170:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pxDelayedTaskList+0x1>
 174:	05 80       	ldd	r0, Z+5	; 0x05
 176:	f6 81       	ldd	r31, Z+6	; 0x06
 178:	e0 2d       	mov	r30, r0
 17a:	80 81       	ld	r24, Z
 17c:	91 81       	ldd	r25, Z+1	; 0x01
 17e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <xNextTaskUnblockTime+0x1>
 182:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <xNextTaskUnblockTime>
 186:	08 95       	ret

00000188 <xTaskIncrementTick>:
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 194:	81 11       	cpse	r24, r1
 196:	01 c1       	rjmp	.+514    	; 0x39a <xTaskIncrementTick+0x212>
 198:	c0 91 68 00 	lds	r28, 0x0068	; 0x800068 <xTickCount>
 19c:	d0 91 69 00 	lds	r29, 0x0069	; 0x800069 <xTickCount+0x1>
 1a0:	8e 01       	movw	r16, r28
 1a2:	0f 5f       	subi	r16, 0xFF	; 255
 1a4:	1f 4f       	sbci	r17, 0xFF	; 255
 1a6:	10 93 69 00 	sts	0x0069, r17	; 0x800069 <xTickCount+0x1>
 1aa:	00 93 68 00 	sts	0x0068, r16	; 0x800068 <xTickCount>
 1ae:	01 15       	cp	r16, r1
 1b0:	11 05       	cpc	r17, r1
 1b2:	b9 f4       	brne	.+46     	; 0x1e2 <xTaskIncrementTick+0x5a>
 1b4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <pxDelayedTaskList>
 1b8:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <pxDelayedTaskList+0x1>
 1bc:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <pxOverflowDelayedTaskList>
 1c0:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <pxOverflowDelayedTaskList+0x1>
 1c4:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <pxDelayedTaskList+0x1>
 1c8:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <pxDelayedTaskList>
 1cc:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <pxOverflowDelayedTaskList+0x1>
 1d0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <pxOverflowDelayedTaskList>
 1d4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <xNumOfOverflows>
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <xNumOfOverflows>
 1de:	0e 94 a8 00 	call	0x150	; 0x150 <prvResetNextTaskUnblockTime>
 1e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <xNextTaskUnblockTime>
 1e6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <xNextTaskUnblockTime+0x1>
 1ea:	08 17       	cp	r16, r24
 1ec:	19 07       	cpc	r17, r25
 1ee:	20 f4       	brcc	.+8      	; 0x1f8 <xTaskIncrementTick+0x70>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	b8 c0       	rjmp	.+368    	; 0x364 <xTaskIncrementTick+0x1dc>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <xTaskIncrementTick+0x72>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pxDelayedTaskList>
 1fe:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pxDelayedTaskList+0x1>
 202:	90 81       	ld	r25, Z
 204:	91 11       	cpse	r25, r1
 206:	07 c0       	rjmp	.+14     	; 0x216 <xTaskIncrementTick+0x8e>
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	3f ef       	ldi	r19, 0xFF	; 255
 20c:	30 93 62 00 	sts	0x0062, r19	; 0x800062 <xNextTaskUnblockTime+0x1>
 210:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <xNextTaskUnblockTime>
 214:	a7 c0       	rjmp	.+334    	; 0x364 <xTaskIncrementTick+0x1dc>
 216:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pxDelayedTaskList>
 21a:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pxDelayedTaskList+0x1>
 21e:	05 80       	ldd	r0, Z+5	; 0x05
 220:	f6 81       	ldd	r31, Z+6	; 0x06
 222:	e0 2d       	mov	r30, r0
 224:	06 80       	ldd	r0, Z+6	; 0x06
 226:	f7 81       	ldd	r31, Z+7	; 0x07
 228:	e0 2d       	mov	r30, r0
 22a:	22 81       	ldd	r18, Z+2	; 0x02
 22c:	33 81       	ldd	r19, Z+3	; 0x03
 22e:	02 17       	cp	r16, r18
 230:	13 07       	cpc	r17, r19
 232:	28 f4       	brcc	.+10     	; 0x23e <xTaskIncrementTick+0xb6>
 234:	30 93 62 00 	sts	0x0062, r19	; 0x800062 <xNextTaskUnblockTime+0x1>
 238:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <xNextTaskUnblockTime>
 23c:	93 c0       	rjmp	.+294    	; 0x364 <xTaskIncrementTick+0x1dc>
 23e:	a2 85       	ldd	r26, Z+10	; 0x0a
 240:	b3 85       	ldd	r27, Z+11	; 0x0b
 242:	24 81       	ldd	r18, Z+4	; 0x04
 244:	35 81       	ldd	r19, Z+5	; 0x05
 246:	46 81       	ldd	r20, Z+6	; 0x06
 248:	57 81       	ldd	r21, Z+7	; 0x07
 24a:	e9 01       	movw	r28, r18
 24c:	5d 83       	std	Y+5, r21	; 0x05
 24e:	4c 83       	std	Y+4, r20	; 0x04
 250:	26 81       	ldd	r18, Z+6	; 0x06
 252:	37 81       	ldd	r19, Z+7	; 0x07
 254:	44 81       	ldd	r20, Z+4	; 0x04
 256:	55 81       	ldd	r21, Z+5	; 0x05
 258:	e9 01       	movw	r28, r18
 25a:	5b 83       	std	Y+3, r21	; 0x03
 25c:	4a 83       	std	Y+2, r20	; 0x02
 25e:	11 96       	adiw	r26, 0x01	; 1
 260:	2d 91       	ld	r18, X+
 262:	3c 91       	ld	r19, X
 264:	12 97       	sbiw	r26, 0x02	; 2
 266:	af 01       	movw	r20, r30
 268:	4e 5f       	subi	r20, 0xFE	; 254
 26a:	5f 4f       	sbci	r21, 0xFF	; 255
 26c:	24 17       	cp	r18, r20
 26e:	35 07       	cpc	r19, r21
 270:	31 f4       	brne	.+12     	; 0x27e <xTaskIncrementTick+0xf6>
 272:	26 81       	ldd	r18, Z+6	; 0x06
 274:	37 81       	ldd	r19, Z+7	; 0x07
 276:	12 96       	adiw	r26, 0x02	; 2
 278:	3c 93       	st	X, r19
 27a:	2e 93       	st	-X, r18
 27c:	11 97       	sbiw	r26, 0x01	; 1
 27e:	13 86       	std	Z+11, r1	; 0x0b
 280:	12 86       	std	Z+10, r1	; 0x0a
 282:	9c 91       	ld	r25, X
 284:	91 50       	subi	r25, 0x01	; 1
 286:	9c 93       	st	X, r25
 288:	a4 89       	ldd	r26, Z+20	; 0x14
 28a:	b5 89       	ldd	r27, Z+21	; 0x15
 28c:	10 97       	sbiw	r26, 0x00	; 0
 28e:	19 f1       	breq	.+70     	; 0x2d6 <xTaskIncrementTick+0x14e>
 290:	26 85       	ldd	r18, Z+14	; 0x0e
 292:	37 85       	ldd	r19, Z+15	; 0x0f
 294:	60 89       	ldd	r22, Z+16	; 0x10
 296:	71 89       	ldd	r23, Z+17	; 0x11
 298:	e9 01       	movw	r28, r18
 29a:	7d 83       	std	Y+5, r23	; 0x05
 29c:	6c 83       	std	Y+4, r22	; 0x04
 29e:	20 89       	ldd	r18, Z+16	; 0x10
 2a0:	31 89       	ldd	r19, Z+17	; 0x11
 2a2:	66 85       	ldd	r22, Z+14	; 0x0e
 2a4:	77 85       	ldd	r23, Z+15	; 0x0f
 2a6:	e9 01       	movw	r28, r18
 2a8:	7b 83       	std	Y+3, r23	; 0x03
 2aa:	6a 83       	std	Y+2, r22	; 0x02
 2ac:	11 96       	adiw	r26, 0x01	; 1
 2ae:	6d 91       	ld	r22, X+
 2b0:	7c 91       	ld	r23, X
 2b2:	12 97       	sbiw	r26, 0x02	; 2
 2b4:	9f 01       	movw	r18, r30
 2b6:	24 5f       	subi	r18, 0xF4	; 244
 2b8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ba:	62 17       	cp	r22, r18
 2bc:	73 07       	cpc	r23, r19
 2be:	31 f4       	brne	.+12     	; 0x2cc <xTaskIncrementTick+0x144>
 2c0:	20 89       	ldd	r18, Z+16	; 0x10
 2c2:	31 89       	ldd	r19, Z+17	; 0x11
 2c4:	12 96       	adiw	r26, 0x02	; 2
 2c6:	3c 93       	st	X, r19
 2c8:	2e 93       	st	-X, r18
 2ca:	11 97       	sbiw	r26, 0x01	; 1
 2cc:	15 8a       	std	Z+21, r1	; 0x15
 2ce:	14 8a       	std	Z+20, r1	; 0x14
 2d0:	9c 91       	ld	r25, X
 2d2:	91 50       	subi	r25, 0x01	; 1
 2d4:	9c 93       	st	X, r25
 2d6:	26 89       	ldd	r18, Z+22	; 0x16
 2d8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <uxTopReadyPriority>
 2dc:	92 17       	cp	r25, r18
 2de:	10 f4       	brcc	.+4      	; 0x2e4 <xTaskIncrementTick+0x15c>
 2e0:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <uxTopReadyPriority>
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	d9 01       	movw	r26, r18
 2e8:	aa 0f       	add	r26, r26
 2ea:	bb 1f       	adc	r27, r27
 2ec:	aa 0f       	add	r26, r26
 2ee:	bb 1f       	adc	r27, r27
 2f0:	aa 0f       	add	r26, r26
 2f2:	bb 1f       	adc	r27, r27
 2f4:	2a 0f       	add	r18, r26
 2f6:	3b 1f       	adc	r19, r27
 2f8:	d9 01       	movw	r26, r18
 2fa:	a2 59       	subi	r26, 0x92	; 146
 2fc:	bf 4f       	sbci	r27, 0xFF	; 255
 2fe:	11 96       	adiw	r26, 0x01	; 1
 300:	0d 90       	ld	r0, X+
 302:	bc 91       	ld	r27, X
 304:	a0 2d       	mov	r26, r0
 306:	b5 83       	std	Z+5, r27	; 0x05
 308:	a4 83       	std	Z+4, r26	; 0x04
 30a:	14 96       	adiw	r26, 0x04	; 4
 30c:	2d 91       	ld	r18, X+
 30e:	3c 91       	ld	r19, X
 310:	15 97       	sbiw	r26, 0x05	; 5
 312:	37 83       	std	Z+7, r19	; 0x07
 314:	26 83       	std	Z+6, r18	; 0x06
 316:	14 96       	adiw	r26, 0x04	; 4
 318:	2d 91       	ld	r18, X+
 31a:	3c 91       	ld	r19, X
 31c:	15 97       	sbiw	r26, 0x05	; 5
 31e:	e9 01       	movw	r28, r18
 320:	5b 83       	std	Y+3, r21	; 0x03
 322:	4a 83       	std	Y+2, r20	; 0x02
 324:	15 96       	adiw	r26, 0x05	; 5
 326:	5c 93       	st	X, r21
 328:	4e 93       	st	-X, r20
 32a:	14 97       	sbiw	r26, 0x04	; 4
 32c:	a6 89       	ldd	r26, Z+22	; 0x16
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	9d 01       	movw	r18, r26
 332:	22 0f       	add	r18, r18
 334:	33 1f       	adc	r19, r19
 336:	22 0f       	add	r18, r18
 338:	33 1f       	adc	r19, r19
 33a:	22 0f       	add	r18, r18
 33c:	33 1f       	adc	r19, r19
 33e:	a2 0f       	add	r26, r18
 340:	b3 1f       	adc	r27, r19
 342:	a2 59       	subi	r26, 0x92	; 146
 344:	bf 4f       	sbci	r27, 0xFF	; 255
 346:	b3 87       	std	Z+11, r27	; 0x0b
 348:	a2 87       	std	Z+10, r26	; 0x0a
 34a:	9c 91       	ld	r25, X
 34c:	9f 5f       	subi	r25, 0xFF	; 255
 34e:	9c 93       	st	X, r25
 350:	26 89       	ldd	r18, Z+22	; 0x16
 352:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <pxCurrentTCB>
 356:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <pxCurrentTCB+0x1>
 35a:	96 89       	ldd	r25, Z+22	; 0x16
 35c:	29 17       	cp	r18, r25
 35e:	08 f0       	brcs	.+2      	; 0x362 <xTaskIncrementTick+0x1da>
 360:	49 cf       	rjmp	.-366    	; 0x1f4 <xTaskIncrementTick+0x6c>
 362:	4b cf       	rjmp	.-362    	; 0x1fa <xTaskIncrementTick+0x72>
 364:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <pxCurrentTCB>
 368:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <pxCurrentTCB+0x1>
 36c:	26 89       	ldd	r18, Z+22	; 0x16
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	f9 01       	movw	r30, r18
 372:	ee 0f       	add	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	2e 0f       	add	r18, r30
 380:	3f 1f       	adc	r19, r31
 382:	f9 01       	movw	r30, r18
 384:	e2 59       	subi	r30, 0x92	; 146
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	90 81       	ld	r25, Z
 38a:	92 30       	cpi	r25, 0x02	; 2
 38c:	08 f0       	brcs	.+2      	; 0x390 <xTaskIncrementTick+0x208>
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <xYieldPending>
 394:	91 11       	cpse	r25, r1
 396:	0c c0       	rjmp	.+24     	; 0x3b0 <xTaskIncrementTick+0x228>
 398:	0c c0       	rjmp	.+24     	; 0x3b2 <xTaskIncrementTick+0x22a>
 39a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <xPendedTicks>
 39e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <xPendedTicks+0x1>
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <xPendedTicks+0x1>
 3a8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <xPendedTicks>
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <xTaskIncrementTick+0x22a>
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	08 95       	ret

000003bc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3c0:	88 23       	and	r24, r24
 3c2:	21 f0       	breq	.+8      	; 0x3cc <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <xYieldPending>
 3ca:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
 3cc:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 3d0:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <uxTopReadyPriority>
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <vTaskSwitchContext+0x1c>
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	82 2f       	mov	r24, r18
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	fc 01       	movw	r30, r24
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	e8 0f       	add	r30, r24
 3ec:	f9 1f       	adc	r31, r25
 3ee:	e2 59       	subi	r30, 0x92	; 146
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	30 81       	ld	r19, Z
 3f4:	33 23       	and	r19, r19
 3f6:	79 f3       	breq	.-34     	; 0x3d6 <vTaskSwitchContext+0x1a>
 3f8:	ac 01       	movw	r20, r24
 3fa:	44 0f       	add	r20, r20
 3fc:	55 1f       	adc	r21, r21
 3fe:	44 0f       	add	r20, r20
 400:	55 1f       	adc	r21, r21
 402:	44 0f       	add	r20, r20
 404:	55 1f       	adc	r21, r21
 406:	48 0f       	add	r20, r24
 408:	59 1f       	adc	r21, r25
 40a:	df 01       	movw	r26, r30
 40c:	01 80       	ldd	r0, Z+1	; 0x01
 40e:	f2 81       	ldd	r31, Z+2	; 0x02
 410:	e0 2d       	mov	r30, r0
 412:	02 80       	ldd	r0, Z+2	; 0x02
 414:	f3 81       	ldd	r31, Z+3	; 0x03
 416:	e0 2d       	mov	r30, r0
 418:	12 96       	adiw	r26, 0x02	; 2
 41a:	fc 93       	st	X, r31
 41c:	ee 93       	st	-X, r30
 41e:	11 97       	sbiw	r26, 0x01	; 1
 420:	4f 58       	subi	r20, 0x8F	; 143
 422:	5f 4f       	sbci	r21, 0xFF	; 255
 424:	e4 17       	cp	r30, r20
 426:	f5 07       	cpc	r31, r21
 428:	29 f4       	brne	.+10     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42a:	42 81       	ldd	r20, Z+2	; 0x02
 42c:	53 81       	ldd	r21, Z+3	; 0x03
 42e:	fd 01       	movw	r30, r26
 430:	52 83       	std	Z+2, r21	; 0x02
 432:	41 83       	std	Z+1, r20	; 0x01
 434:	fc 01       	movw	r30, r24
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	8e 0f       	add	r24, r30
 444:	9f 1f       	adc	r25, r31
 446:	fc 01       	movw	r30, r24
 448:	e2 59       	subi	r30, 0x92	; 146
 44a:	ff 4f       	sbci	r31, 0xFF	; 255
 44c:	01 80       	ldd	r0, Z+1	; 0x01
 44e:	f2 81       	ldd	r31, Z+2	; 0x02
 450:	e0 2d       	mov	r30, r0
 452:	86 81       	ldd	r24, Z+6	; 0x06
 454:	97 81       	ldd	r25, Z+7	; 0x07
 456:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <pxCurrentTCB+0x1>
 45a:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <pxCurrentTCB>
 45e:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <uxTopReadyPriority>
 462:	08 95       	ret

00000464 <main>:
#include "task.h"
#include "LCD_DISPLAY.h"
#include "STORAGE.h"

int main(void)
{
 464:	ff cf       	rjmp	.-2      	; 0x464 <main>

00000466 <_exit>:
 466:	f8 94       	cli

00000468 <__stop_program>:
 468:	ff cf       	rjmp	.-2      	; 0x468 <__stop_program>
