
MCU_To_MCU_Bluetooth_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000162a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000162a  000016be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  00800074  00800074  000016d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000393e  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4c  00000000  00000000  00005346  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023e8  00000000  00000000  00006192  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000820  00000000  00000000  0000857c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000138e  00000000  00000000  00008d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000031e4  00000000  00000000  0000a12a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000d30e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_7>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	b4 06       	cpc	r11, r20
      56:	bf 06       	cpc	r11, r31
      58:	ca 06       	cpc	r12, r26
      5a:	d5 06       	cpc	r13, r21
      5c:	e0 06       	cpc	r14, r16
      5e:	eb 06       	cpc	r14, r27
      60:	f6 06       	cpc	r15, r22

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	ea e2       	ldi	r30, 0x2A	; 42
      76:	f6 e1       	ldi	r31, 0x16	; 22
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a4 37       	cpi	r26, 0x74	; 116
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	a4 e7       	ldi	r26, 0x74	; 116
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a1 3b       	cpi	r26, 0xB1	; 177
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <main>
      98:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
      a0:	0f 92       	push	r0
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	0f 92       	push	r0
      a8:	1f 92       	push	r1
      aa:	11 24       	eor	r1, r1
      ac:	2f 92       	push	r2
      ae:	3f 92       	push	r3
      b0:	4f 92       	push	r4
      b2:	5f 92       	push	r5
      b4:	6f 92       	push	r6
      b6:	7f 92       	push	r7
      b8:	8f 92       	push	r8
      ba:	9f 92       	push	r9
      bc:	af 92       	push	r10
      be:	bf 92       	push	r11
      c0:	cf 92       	push	r12
      c2:	df 92       	push	r13
      c4:	ef 92       	push	r14
      c6:	ff 92       	push	r15
      c8:	0f 93       	push	r16
      ca:	1f 93       	push	r17
      cc:	2f 93       	push	r18
      ce:	3f 93       	push	r19
      d0:	4f 93       	push	r20
      d2:	5f 93       	push	r21
      d4:	6f 93       	push	r22
      d6:	7f 93       	push	r23
      d8:	8f 93       	push	r24
      da:	9f 93       	push	r25
      dc:	af 93       	push	r26
      de:	bf 93       	push	r27
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	ef 93       	push	r30
      e6:	ff 93       	push	r31
      e8:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <pxCurrentTCB>
      ec:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <pxCurrentTCB+0x1>
      f0:	0d b6       	in	r0, 0x3d	; 61
      f2:	0d 92       	st	X+, r0
      f4:	0e b6       	in	r0, 0x3e	; 62
      f6:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
      f8:	0e 94 cb 00 	call	0x196	; 0x196 <xTaskIncrementTick>
      fc:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
      fe:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     102:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <pxCurrentTCB>
     106:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <pxCurrentTCB+0x1>
     10a:	cd 91       	ld	r28, X+
     10c:	cd bf       	out	0x3d, r28	; 61
     10e:	dd 91       	ld	r29, X+
     110:	de bf       	out	0x3e, r29	; 62
     112:	ff 91       	pop	r31
     114:	ef 91       	pop	r30
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	bf 91       	pop	r27
     11c:	af 91       	pop	r26
     11e:	9f 91       	pop	r25
     120:	8f 91       	pop	r24
     122:	7f 91       	pop	r23
     124:	6f 91       	pop	r22
     126:	5f 91       	pop	r21
     128:	4f 91       	pop	r20
     12a:	3f 91       	pop	r19
     12c:	2f 91       	pop	r18
     12e:	1f 91       	pop	r17
     130:	0f 91       	pop	r16
     132:	ff 90       	pop	r15
     134:	ef 90       	pop	r14
     136:	df 90       	pop	r13
     138:	cf 90       	pop	r12
     13a:	bf 90       	pop	r11
     13c:	af 90       	pop	r10
     13e:	9f 90       	pop	r9
     140:	8f 90       	pop	r8
     142:	7f 90       	pop	r7
     144:	6f 90       	pop	r6
     146:	5f 90       	pop	r5
     148:	4f 90       	pop	r4
     14a:	3f 90       	pop	r3
     14c:	2f 90       	pop	r2
     14e:	1f 90       	pop	r1
     150:	0f 90       	pop	r0
     152:	0f be       	out	0x3f, r0	; 63
     154:	0f 90       	pop	r0

	asm volatile ( "ret" );
     156:	08 95       	ret

00000158 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     158:	0e 94 50 00 	call	0xa0	; 0xa0 <vPortYieldFromTick>
		asm volatile ( "reti" );
     15c:	18 95       	reti

0000015e <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     15e:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <pxDelayedTaskList>
     162:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <pxDelayedTaskList+0x1>
     166:	80 81       	ld	r24, Z
     168:	81 11       	cpse	r24, r1
     16a:	07 c0       	rjmp	.+14     	; 0x17a <prvResetNextTaskUnblockTime+0x1c>
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	9f ef       	ldi	r25, 0xFF	; 255
     170:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <xNextTaskUnblockTime+0x1>
     174:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <xNextTaskUnblockTime>
     178:	08 95       	ret
     17a:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <pxDelayedTaskList>
     17e:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <pxDelayedTaskList+0x1>
     182:	05 80       	ldd	r0, Z+5	; 0x05
     184:	f6 81       	ldd	r31, Z+6	; 0x06
     186:	e0 2d       	mov	r30, r0
     188:	80 81       	ld	r24, Z
     18a:	91 81       	ldd	r25, Z+1	; 0x01
     18c:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <xNextTaskUnblockTime+0x1>
     190:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <xNextTaskUnblockTime>
     194:	08 95       	ret

00000196 <xTaskIncrementTick>:
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     1a2:	81 11       	cpse	r24, r1
     1a4:	01 c1       	rjmp	.+514    	; 0x3a8 <xTaskIncrementTick+0x212>
     1a6:	c0 91 7c 00 	lds	r28, 0x007C	; 0x80007c <xTickCount>
     1aa:	d0 91 7d 00 	lds	r29, 0x007D	; 0x80007d <xTickCount+0x1>
     1ae:	8e 01       	movw	r16, r28
     1b0:	0f 5f       	subi	r16, 0xFF	; 255
     1b2:	1f 4f       	sbci	r17, 0xFF	; 255
     1b4:	10 93 7d 00 	sts	0x007D, r17	; 0x80007d <xTickCount+0x1>
     1b8:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <xTickCount>
     1bc:	01 15       	cp	r16, r1
     1be:	11 05       	cpc	r17, r1
     1c0:	b9 f4       	brne	.+46     	; 0x1f0 <xTaskIncrementTick+0x5a>
     1c2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <pxDelayedTaskList>
     1c6:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <pxDelayedTaskList+0x1>
     1ca:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <pxOverflowDelayedTaskList>
     1ce:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <pxOverflowDelayedTaskList+0x1>
     1d2:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <pxDelayedTaskList+0x1>
     1d6:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <pxDelayedTaskList>
     1da:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <pxOverflowDelayedTaskList+0x1>
     1de:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <pxOverflowDelayedTaskList>
     1e2:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <xNumOfOverflows>
     1e6:	8f 5f       	subi	r24, 0xFF	; 255
     1e8:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <xNumOfOverflows>
     1ec:	0e 94 af 00 	call	0x15e	; 0x15e <prvResetNextTaskUnblockTime>
     1f0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <xNextTaskUnblockTime>
     1f4:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <xNextTaskUnblockTime+0x1>
     1f8:	08 17       	cp	r16, r24
     1fa:	19 07       	cpc	r17, r25
     1fc:	20 f4       	brcc	.+8      	; 0x206 <xTaskIncrementTick+0x70>
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	b8 c0       	rjmp	.+368    	; 0x372 <xTaskIncrementTick+0x1dc>
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	01 c0       	rjmp	.+2      	; 0x208 <xTaskIncrementTick+0x72>
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <pxDelayedTaskList>
     20c:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <pxDelayedTaskList+0x1>
     210:	90 81       	ld	r25, Z
     212:	91 11       	cpse	r25, r1
     214:	07 c0       	rjmp	.+14     	; 0x224 <xTaskIncrementTick+0x8e>
     216:	2f ef       	ldi	r18, 0xFF	; 255
     218:	3f ef       	ldi	r19, 0xFF	; 255
     21a:	30 93 76 00 	sts	0x0076, r19	; 0x800076 <xNextTaskUnblockTime+0x1>
     21e:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <xNextTaskUnblockTime>
     222:	a7 c0       	rjmp	.+334    	; 0x372 <xTaskIncrementTick+0x1dc>
     224:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <pxDelayedTaskList>
     228:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <pxDelayedTaskList+0x1>
     22c:	05 80       	ldd	r0, Z+5	; 0x05
     22e:	f6 81       	ldd	r31, Z+6	; 0x06
     230:	e0 2d       	mov	r30, r0
     232:	06 80       	ldd	r0, Z+6	; 0x06
     234:	f7 81       	ldd	r31, Z+7	; 0x07
     236:	e0 2d       	mov	r30, r0
     238:	22 81       	ldd	r18, Z+2	; 0x02
     23a:	33 81       	ldd	r19, Z+3	; 0x03
     23c:	02 17       	cp	r16, r18
     23e:	13 07       	cpc	r17, r19
     240:	28 f4       	brcc	.+10     	; 0x24c <xTaskIncrementTick+0xb6>
     242:	30 93 76 00 	sts	0x0076, r19	; 0x800076 <xNextTaskUnblockTime+0x1>
     246:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <xNextTaskUnblockTime>
     24a:	93 c0       	rjmp	.+294    	; 0x372 <xTaskIncrementTick+0x1dc>
     24c:	a2 85       	ldd	r26, Z+10	; 0x0a
     24e:	b3 85       	ldd	r27, Z+11	; 0x0b
     250:	24 81       	ldd	r18, Z+4	; 0x04
     252:	35 81       	ldd	r19, Z+5	; 0x05
     254:	46 81       	ldd	r20, Z+6	; 0x06
     256:	57 81       	ldd	r21, Z+7	; 0x07
     258:	e9 01       	movw	r28, r18
     25a:	5d 83       	std	Y+5, r21	; 0x05
     25c:	4c 83       	std	Y+4, r20	; 0x04
     25e:	26 81       	ldd	r18, Z+6	; 0x06
     260:	37 81       	ldd	r19, Z+7	; 0x07
     262:	44 81       	ldd	r20, Z+4	; 0x04
     264:	55 81       	ldd	r21, Z+5	; 0x05
     266:	e9 01       	movw	r28, r18
     268:	5b 83       	std	Y+3, r21	; 0x03
     26a:	4a 83       	std	Y+2, r20	; 0x02
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	2d 91       	ld	r18, X+
     270:	3c 91       	ld	r19, X
     272:	12 97       	sbiw	r26, 0x02	; 2
     274:	af 01       	movw	r20, r30
     276:	4e 5f       	subi	r20, 0xFE	; 254
     278:	5f 4f       	sbci	r21, 0xFF	; 255
     27a:	24 17       	cp	r18, r20
     27c:	35 07       	cpc	r19, r21
     27e:	31 f4       	brne	.+12     	; 0x28c <xTaskIncrementTick+0xf6>
     280:	26 81       	ldd	r18, Z+6	; 0x06
     282:	37 81       	ldd	r19, Z+7	; 0x07
     284:	12 96       	adiw	r26, 0x02	; 2
     286:	3c 93       	st	X, r19
     288:	2e 93       	st	-X, r18
     28a:	11 97       	sbiw	r26, 0x01	; 1
     28c:	13 86       	std	Z+11, r1	; 0x0b
     28e:	12 86       	std	Z+10, r1	; 0x0a
     290:	9c 91       	ld	r25, X
     292:	91 50       	subi	r25, 0x01	; 1
     294:	9c 93       	st	X, r25
     296:	a4 89       	ldd	r26, Z+20	; 0x14
     298:	b5 89       	ldd	r27, Z+21	; 0x15
     29a:	10 97       	sbiw	r26, 0x00	; 0
     29c:	19 f1       	breq	.+70     	; 0x2e4 <xTaskIncrementTick+0x14e>
     29e:	26 85       	ldd	r18, Z+14	; 0x0e
     2a0:	37 85       	ldd	r19, Z+15	; 0x0f
     2a2:	60 89       	ldd	r22, Z+16	; 0x10
     2a4:	71 89       	ldd	r23, Z+17	; 0x11
     2a6:	e9 01       	movw	r28, r18
     2a8:	7d 83       	std	Y+5, r23	; 0x05
     2aa:	6c 83       	std	Y+4, r22	; 0x04
     2ac:	20 89       	ldd	r18, Z+16	; 0x10
     2ae:	31 89       	ldd	r19, Z+17	; 0x11
     2b0:	66 85       	ldd	r22, Z+14	; 0x0e
     2b2:	77 85       	ldd	r23, Z+15	; 0x0f
     2b4:	e9 01       	movw	r28, r18
     2b6:	7b 83       	std	Y+3, r23	; 0x03
     2b8:	6a 83       	std	Y+2, r22	; 0x02
     2ba:	11 96       	adiw	r26, 0x01	; 1
     2bc:	6d 91       	ld	r22, X+
     2be:	7c 91       	ld	r23, X
     2c0:	12 97       	sbiw	r26, 0x02	; 2
     2c2:	9f 01       	movw	r18, r30
     2c4:	24 5f       	subi	r18, 0xF4	; 244
     2c6:	3f 4f       	sbci	r19, 0xFF	; 255
     2c8:	62 17       	cp	r22, r18
     2ca:	73 07       	cpc	r23, r19
     2cc:	31 f4       	brne	.+12     	; 0x2da <xTaskIncrementTick+0x144>
     2ce:	20 89       	ldd	r18, Z+16	; 0x10
     2d0:	31 89       	ldd	r19, Z+17	; 0x11
     2d2:	12 96       	adiw	r26, 0x02	; 2
     2d4:	3c 93       	st	X, r19
     2d6:	2e 93       	st	-X, r18
     2d8:	11 97       	sbiw	r26, 0x01	; 1
     2da:	15 8a       	std	Z+21, r1	; 0x15
     2dc:	14 8a       	std	Z+20, r1	; 0x14
     2de:	9c 91       	ld	r25, X
     2e0:	91 50       	subi	r25, 0x01	; 1
     2e2:	9c 93       	st	X, r25
     2e4:	26 89       	ldd	r18, Z+22	; 0x16
     2e6:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <uxTopReadyPriority>
     2ea:	92 17       	cp	r25, r18
     2ec:	10 f4       	brcc	.+4      	; 0x2f2 <xTaskIncrementTick+0x15c>
     2ee:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <uxTopReadyPriority>
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	d9 01       	movw	r26, r18
     2f6:	aa 0f       	add	r26, r26
     2f8:	bb 1f       	adc	r27, r27
     2fa:	aa 0f       	add	r26, r26
     2fc:	bb 1f       	adc	r27, r27
     2fe:	aa 0f       	add	r26, r26
     300:	bb 1f       	adc	r27, r27
     302:	2a 0f       	add	r18, r26
     304:	3b 1f       	adc	r19, r27
     306:	d9 01       	movw	r26, r18
     308:	ae 57       	subi	r26, 0x7E	; 126
     30a:	bf 4f       	sbci	r27, 0xFF	; 255
     30c:	11 96       	adiw	r26, 0x01	; 1
     30e:	0d 90       	ld	r0, X+
     310:	bc 91       	ld	r27, X
     312:	a0 2d       	mov	r26, r0
     314:	b5 83       	std	Z+5, r27	; 0x05
     316:	a4 83       	std	Z+4, r26	; 0x04
     318:	14 96       	adiw	r26, 0x04	; 4
     31a:	2d 91       	ld	r18, X+
     31c:	3c 91       	ld	r19, X
     31e:	15 97       	sbiw	r26, 0x05	; 5
     320:	37 83       	std	Z+7, r19	; 0x07
     322:	26 83       	std	Z+6, r18	; 0x06
     324:	14 96       	adiw	r26, 0x04	; 4
     326:	2d 91       	ld	r18, X+
     328:	3c 91       	ld	r19, X
     32a:	15 97       	sbiw	r26, 0x05	; 5
     32c:	e9 01       	movw	r28, r18
     32e:	5b 83       	std	Y+3, r21	; 0x03
     330:	4a 83       	std	Y+2, r20	; 0x02
     332:	15 96       	adiw	r26, 0x05	; 5
     334:	5c 93       	st	X, r21
     336:	4e 93       	st	-X, r20
     338:	14 97       	sbiw	r26, 0x04	; 4
     33a:	a6 89       	ldd	r26, Z+22	; 0x16
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	9d 01       	movw	r18, r26
     340:	22 0f       	add	r18, r18
     342:	33 1f       	adc	r19, r19
     344:	22 0f       	add	r18, r18
     346:	33 1f       	adc	r19, r19
     348:	22 0f       	add	r18, r18
     34a:	33 1f       	adc	r19, r19
     34c:	a2 0f       	add	r26, r18
     34e:	b3 1f       	adc	r27, r19
     350:	ae 57       	subi	r26, 0x7E	; 126
     352:	bf 4f       	sbci	r27, 0xFF	; 255
     354:	b3 87       	std	Z+11, r27	; 0x0b
     356:	a2 87       	std	Z+10, r26	; 0x0a
     358:	9c 91       	ld	r25, X
     35a:	9f 5f       	subi	r25, 0xFF	; 255
     35c:	9c 93       	st	X, r25
     35e:	26 89       	ldd	r18, Z+22	; 0x16
     360:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <pxCurrentTCB>
     364:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <pxCurrentTCB+0x1>
     368:	96 89       	ldd	r25, Z+22	; 0x16
     36a:	29 17       	cp	r18, r25
     36c:	08 f0       	brcs	.+2      	; 0x370 <xTaskIncrementTick+0x1da>
     36e:	49 cf       	rjmp	.-366    	; 0x202 <xTaskIncrementTick+0x6c>
     370:	4b cf       	rjmp	.-362    	; 0x208 <xTaskIncrementTick+0x72>
     372:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <pxCurrentTCB>
     376:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <pxCurrentTCB+0x1>
     37a:	26 89       	ldd	r18, Z+22	; 0x16
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	f9 01       	movw	r30, r18
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	ee 0f       	add	r30, r30
     386:	ff 1f       	adc	r31, r31
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	2e 0f       	add	r18, r30
     38e:	3f 1f       	adc	r19, r31
     390:	f9 01       	movw	r30, r18
     392:	ee 57       	subi	r30, 0x7E	; 126
     394:	ff 4f       	sbci	r31, 0xFF	; 255
     396:	90 81       	ld	r25, Z
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	08 f0       	brcs	.+2      	; 0x39e <xTaskIncrementTick+0x208>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <xYieldPending>
     3a2:	91 11       	cpse	r25, r1
     3a4:	0c c0       	rjmp	.+24     	; 0x3be <xTaskIncrementTick+0x228>
     3a6:	0c c0       	rjmp	.+24     	; 0x3c0 <xTaskIncrementTick+0x22a>
     3a8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <xPendedTicks>
     3ac:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <xPendedTicks+0x1>
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <xPendedTicks+0x1>
     3b6:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <xPendedTicks>
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <xTaskIncrementTick+0x22a>
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     3ca:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     3ce:	88 23       	and	r24, r24
     3d0:	21 f0       	breq	.+8      	; 0x3da <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <xYieldPending>
     3d8:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     3da:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     3de:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <uxTopReadyPriority>
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <vTaskSwitchContext+0x1c>
     3e4:	21 50       	subi	r18, 0x01	; 1
     3e6:	82 2f       	mov	r24, r18
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	fc 01       	movw	r30, r24
     3ec:	ee 0f       	add	r30, r30
     3ee:	ff 1f       	adc	r31, r31
     3f0:	ee 0f       	add	r30, r30
     3f2:	ff 1f       	adc	r31, r31
     3f4:	ee 0f       	add	r30, r30
     3f6:	ff 1f       	adc	r31, r31
     3f8:	e8 0f       	add	r30, r24
     3fa:	f9 1f       	adc	r31, r25
     3fc:	ee 57       	subi	r30, 0x7E	; 126
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	30 81       	ld	r19, Z
     402:	33 23       	and	r19, r19
     404:	79 f3       	breq	.-34     	; 0x3e4 <vTaskSwitchContext+0x1a>
     406:	ac 01       	movw	r20, r24
     408:	44 0f       	add	r20, r20
     40a:	55 1f       	adc	r21, r21
     40c:	44 0f       	add	r20, r20
     40e:	55 1f       	adc	r21, r21
     410:	44 0f       	add	r20, r20
     412:	55 1f       	adc	r21, r21
     414:	48 0f       	add	r20, r24
     416:	59 1f       	adc	r21, r25
     418:	df 01       	movw	r26, r30
     41a:	01 80       	ldd	r0, Z+1	; 0x01
     41c:	f2 81       	ldd	r31, Z+2	; 0x02
     41e:	e0 2d       	mov	r30, r0
     420:	02 80       	ldd	r0, Z+2	; 0x02
     422:	f3 81       	ldd	r31, Z+3	; 0x03
     424:	e0 2d       	mov	r30, r0
     426:	12 96       	adiw	r26, 0x02	; 2
     428:	fc 93       	st	X, r31
     42a:	ee 93       	st	-X, r30
     42c:	11 97       	sbiw	r26, 0x01	; 1
     42e:	4b 57       	subi	r20, 0x7B	; 123
     430:	5f 4f       	sbci	r21, 0xFF	; 255
     432:	e4 17       	cp	r30, r20
     434:	f5 07       	cpc	r31, r21
     436:	29 f4       	brne	.+10     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     438:	42 81       	ldd	r20, Z+2	; 0x02
     43a:	53 81       	ldd	r21, Z+3	; 0x03
     43c:	fd 01       	movw	r30, r26
     43e:	52 83       	std	Z+2, r21	; 0x02
     440:	41 83       	std	Z+1, r20	; 0x01
     442:	fc 01       	movw	r30, r24
     444:	ee 0f       	add	r30, r30
     446:	ff 1f       	adc	r31, r31
     448:	ee 0f       	add	r30, r30
     44a:	ff 1f       	adc	r31, r31
     44c:	ee 0f       	add	r30, r30
     44e:	ff 1f       	adc	r31, r31
     450:	8e 0f       	add	r24, r30
     452:	9f 1f       	adc	r25, r31
     454:	fc 01       	movw	r30, r24
     456:	ee 57       	subi	r30, 0x7E	; 126
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	01 80       	ldd	r0, Z+1	; 0x01
     45c:	f2 81       	ldd	r31, Z+2	; 0x02
     45e:	e0 2d       	mov	r30, r0
     460:	86 81       	ldd	r24, Z+6	; 0x06
     462:	97 81       	ldd	r25, Z+7	; 0x07
     464:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <pxCurrentTCB+0x1>
     468:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <pxCurrentTCB>
     46c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <uxTopReadyPriority>
     470:	08 95       	ret

00000472 <LCD_SendCommand>:

/*Externed global variables*/
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	c8 2f       	mov	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	switch(State)
     47c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <State.1711>
     480:	83 30       	cpi	r24, 0x03	; 3
     482:	09 f4       	brne	.+2      	; 0x486 <LCD_SendCommand+0x14>
     484:	cc c0       	rjmp	.+408    	; 0x61e <LCD_SendCommand+0x1ac>
     486:	38 f4       	brcc	.+14     	; 0x496 <LCD_SendCommand+0x24>
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	09 f4       	brne	.+2      	; 0x48e <LCD_SendCommand+0x1c>
     48c:	5f c0       	rjmp	.+190    	; 0x54c <LCD_SendCommand+0xda>
     48e:	82 30       	cpi	r24, 0x02	; 2
     490:	09 f4       	brne	.+2      	; 0x494 <LCD_SendCommand+0x22>
     492:	80 c0       	rjmp	.+256    	; 0x594 <LCD_SendCommand+0x122>
     494:	ff c0       	rjmp	.+510    	; 0x694 <LCD_SendCommand+0x222>
     496:	84 30       	cpi	r24, 0x04	; 4
     498:	09 f4       	brne	.+2      	; 0x49c <LCD_SendCommand+0x2a>
     49a:	e4 c0       	rjmp	.+456    	; 0x664 <LCD_SendCommand+0x1f2>
     49c:	8f 3f       	cpi	r24, 0xFF	; 255
     49e:	09 f0       	breq	.+2      	; 0x4a2 <LCD_SendCommand+0x30>
     4a0:	f9 c0       	rjmp	.+498    	; 0x694 <LCD_SendCommand+0x222>
	{
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     4a2:	03 e6       	ldi	r16, 0x63	; 99
     4a4:	10 e0       	ldi	r17, 0x00	; 0
     4a6:	f8 01       	movw	r30, r16
     4a8:	d0 81       	ld	r29, Z
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	61 81       	ldd	r22, Z+1	; 0x01
     4ae:	8d 2f       	mov	r24, r29
     4b0:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     4b4:	40 e0       	ldi	r20, 0x00	; 0
     4b6:	f8 01       	movw	r30, r16
     4b8:	62 81       	ldd	r22, Z+2	; 0x02
     4ba:	8d 2f       	mov	r24, r29
     4bc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(CMD, BIT_4));
     4c0:	4c 2f       	mov	r20, r28
     4c2:	40 71       	andi	r20, 0x10	; 16
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	55 95       	asr	r21
     4c8:	47 95       	ror	r20
     4ca:	55 95       	asr	r21
     4cc:	47 95       	ror	r20
     4ce:	55 95       	asr	r21
     4d0:	47 95       	ror	r20
     4d2:	55 95       	asr	r21
     4d4:	47 95       	ror	r20
     4d6:	f8 01       	movw	r30, r16
     4d8:	67 81       	ldd	r22, Z+7	; 0x07
     4da:	8d 2f       	mov	r24, r29
     4dc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(CMD, BIT_5));
     4e0:	4c 2f       	mov	r20, r28
     4e2:	40 72       	andi	r20, 0x20	; 32
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	55 95       	asr	r21
     4e8:	47 95       	ror	r20
     4ea:	55 95       	asr	r21
     4ec:	47 95       	ror	r20
     4ee:	55 95       	asr	r21
     4f0:	47 95       	ror	r20
     4f2:	55 95       	asr	r21
     4f4:	47 95       	ror	r20
     4f6:	55 95       	asr	r21
     4f8:	47 95       	ror	r20
     4fa:	f8 01       	movw	r30, r16
     4fc:	66 81       	ldd	r22, Z+6	; 0x06
     4fe:	8d 2f       	mov	r24, r29
     500:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(CMD, BIT_6));
     504:	4c 2f       	mov	r20, r28
     506:	40 74       	andi	r20, 0x40	; 64
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	04 2e       	mov	r0, r20
     50c:	45 2f       	mov	r20, r21
     50e:	00 0c       	add	r0, r0
     510:	44 1f       	adc	r20, r20
     512:	55 0b       	sbc	r21, r21
     514:	00 0c       	add	r0, r0
     516:	44 1f       	adc	r20, r20
     518:	55 1f       	adc	r21, r21
     51a:	f8 01       	movw	r30, r16
     51c:	65 81       	ldd	r22, Z+5	; 0x05
     51e:	8d 2f       	mov	r24, r29
     520:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(CMD, BIT_7));
     524:	4c 2f       	mov	r20, r28
     526:	44 1f       	adc	r20, r20
     528:	44 27       	eor	r20, r20
     52a:	44 1f       	adc	r20, r20
     52c:	f8 01       	movw	r30, r16
     52e:	64 81       	ldd	r22, Z+4	; 0x04
     530:	8d 2f       	mov	r24, r29
     532:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     536:	41 e0       	ldi	r20, 0x01	; 1
     538:	f8 01       	movw	r30, r16
     53a:	63 81       	ldd	r22, Z+3	; 0x03
     53c:	8d 2f       	mov	r24, r29
     53e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1711>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     548:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(CMD, BIT_7));
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     54a:	ab c0       	rjmp	.+342    	; 0x6a2 <LCD_SendCommand+0x230>
	case Sending_First_Nibble:
		/*start timer delay in background*/
		if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     54c:	69 e3       	ldi	r22, 0x39	; 57
     54e:	72 e0       	ldi	r23, 0x02	; 2
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	0e 94 1d 09 	call	0x123a	; 0x123a <TIM_DelayStatus>
     556:	8b 3f       	cpi	r24, 0xFB	; 251
     558:	09 f0       	breq	.+2      	; 0x55c <LCD_SendCommand+0xea>
     55a:	9e c0       	rjmp	.+316    	; 0x698 <LCD_SendCommand+0x226>
		{
   		TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendCommand);
     55c:	29 e3       	ldi	r18, 0x39	; 57
     55e:	32 e0       	ldi	r19, 0x02	; 2
     560:	41 e0       	ldi	r20, 0x01	; 1
     562:	50 e0       	ldi	r21, 0x00	; 0
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	0e 94 0e 08 	call	0x101c	; 0x101c <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     56e:	69 e3       	ldi	r22, 0x39	; 57
     570:	72 e0       	ldi	r23, 0x02	; 2
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	0e 94 1d 09 	call	0x123a	; 0x123a <TIM_DelayStatus>
     578:	81 11       	cpse	r24, r1
     57a:	f9 cf       	rjmp	.-14     	; 0x56e <LCD_SendCommand+0xfc>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     57c:	e3 e6       	ldi	r30, 0x63	; 99
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	63 81       	ldd	r22, Z+3	; 0x03
     584:	80 81       	ld	r24, Z
     586:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1711>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     590:	8f ef       	ldi	r24, 0xFF	; 255
     592:	87 c0       	rjmp	.+270    	; 0x6a2 <LCD_SendCommand+0x230>
         State = First_Nibble_Sent;
		}
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs,PIN_LOW);
     594:	03 e6       	ldi	r16, 0x63	; 99
     596:	10 e0       	ldi	r17, 0x00	; 0
     598:	f8 01       	movw	r30, r16
     59a:	d0 81       	ld	r29, Z
     59c:	40 e0       	ldi	r20, 0x00	; 0
     59e:	61 81       	ldd	r22, Z+1	; 0x01
     5a0:	8d 2f       	mov	r24, r29
     5a2:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw,PIN_LOW);
     5a6:	40 e0       	ldi	r20, 0x00	; 0
     5a8:	f8 01       	movw	r30, r16
     5aa:	62 81       	ldd	r22, Z+2	; 0x02
     5ac:	8d 2f       	mov	r24, r29
     5ae:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		/*copying lower nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(CMD,BIT_0));
     5b2:	4c 2f       	mov	r20, r28
     5b4:	41 70       	andi	r20, 0x01	; 1
     5b6:	f8 01       	movw	r30, r16
     5b8:	67 81       	ldd	r22, Z+7	; 0x07
     5ba:	8d 2f       	mov	r24, r29
     5bc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(CMD,BIT_1));
     5c0:	4c 2f       	mov	r20, r28
     5c2:	42 70       	andi	r20, 0x02	; 2
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	55 95       	asr	r21
     5c8:	47 95       	ror	r20
     5ca:	f8 01       	movw	r30, r16
     5cc:	66 81       	ldd	r22, Z+6	; 0x06
     5ce:	8d 2f       	mov	r24, r29
     5d0:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(CMD,BIT_2));
     5d4:	4c 2f       	mov	r20, r28
     5d6:	44 70       	andi	r20, 0x04	; 4
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	55 95       	asr	r21
     5dc:	47 95       	ror	r20
     5de:	55 95       	asr	r21
     5e0:	47 95       	ror	r20
     5e2:	f8 01       	movw	r30, r16
     5e4:	65 81       	ldd	r22, Z+5	; 0x05
     5e6:	8d 2f       	mov	r24, r29
     5e8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_3));
     5ec:	c8 70       	andi	r28, 0x08	; 8
     5ee:	4c 2f       	mov	r20, r28
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	55 95       	asr	r21
     5f4:	47 95       	ror	r20
     5f6:	55 95       	asr	r21
     5f8:	47 95       	ror	r20
     5fa:	55 95       	asr	r21
     5fc:	47 95       	ror	r20
     5fe:	f8 01       	movw	r30, r16
     600:	64 81       	ldd	r22, Z+4	; 0x04
     602:	8d 2f       	mov	r24, r29
     604:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
     608:	41 e0       	ldi	r20, 0x01	; 1
     60a:	f8 01       	movw	r30, r16
     60c:	63 81       	ldd	r22, Z+3	; 0x03
     60e:	8d 2f       	mov	r24, r29
     610:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1711>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_3));
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     61c:	42 c0       	rjmp	.+132    	; 0x6a2 <LCD_SendCommand+0x230>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     61e:	69 e3       	ldi	r22, 0x39	; 57
     620:	72 e0       	ldi	r23, 0x02	; 2
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	0e 94 1d 09 	call	0x123a	; 0x123a <TIM_DelayStatus>
     628:	8b 3f       	cpi	r24, 0xFB	; 251
     62a:	c1 f5       	brne	.+112    	; 0x69c <LCD_SendCommand+0x22a>
      {
         TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendCommand);
     62c:	29 e3       	ldi	r18, 0x39	; 57
     62e:	32 e0       	ldi	r19, 0x02	; 2
     630:	41 e0       	ldi	r20, 0x01	; 1
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	0e 94 0e 08 	call	0x101c	; 0x101c <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     63e:	69 e3       	ldi	r22, 0x39	; 57
     640:	72 e0       	ldi	r23, 0x02	; 2
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	0e 94 1d 09 	call	0x123a	; 0x123a <TIM_DelayStatus>
     648:	81 11       	cpse	r24, r1
     64a:	f9 cf       	rjmp	.-14     	; 0x63e <LCD_SendCommand+0x1cc>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_LOW);
     64c:	e3 e6       	ldi	r30, 0x63	; 99
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	63 81       	ldd	r22, Z+3	; 0x03
     654:	80 81       	ld	r24, Z
     656:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
         /*reset the function's state*/
         State = Second_Nibble_Sent;
     65a:	84 e0       	ldi	r24, 0x04	; 4
     65c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1711>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     660:	8f ef       	ldi	r24, 0xFF	; 255
     662:	1f c0       	rjmp	.+62     	; 0x6a2 <LCD_SendCommand+0x230>
         State = Second_Nibble_Sent;
      }
		break;
	case Second_Nibble_Sent:
		/*start timer delay in background*/
      TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
     664:	69 e3       	ldi	r22, 0x39	; 57
     666:	72 e0       	ldi	r23, 0x02	; 2
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	0e 94 1d 09 	call	0x123a	; 0x123a <TIM_DelayStatus>
     66e:	c8 2f       	mov	r28, r24
      if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     670:	8b 3f       	cpi	r24, 0xFB	; 251
     672:	49 f4       	brne	.+18     	; 0x686 <LCD_SendCommand+0x214>
      {
         TIM_DelayMs(TIMER_2,2, (void (*)(void))LCD_SendCommand);
     674:	29 e3       	ldi	r18, 0x39	; 57
     676:	32 e0       	ldi	r19, 0x02	; 2
     678:	42 e0       	ldi	r20, 0x02	; 2
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	0e 94 8c 08 	call	0x1118	; 0x1118 <TIM_DelayMs>
      }         
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     686:	c1 11       	cpse	r28, r1
     688:	0b c0       	rjmp	.+22     	; 0x6a0 <LCD_SendCommand+0x22e>
		{
			/*reset the function's state*/
			State = OperationStarted;
     68a:	8f ef       	ldi	r24, 0xFF	; 255
     68c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1711>
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	07 c0       	rjmp	.+14     	; 0x6a2 <LCD_SendCommand+0x230>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	05 c0       	rjmp	.+10     	; 0x6a2 <LCD_SendCommand+0x230>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <LCD_SendCommand+0x230>
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <LCD_SendCommand+0x230>
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
	default:
		ErrRetVal = OperationFail;
	}
	/*return from function*/
return ErrRetVal;
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	08 95       	ret

000006ac <LCD_SendData>:
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	c8 2f       	mov	r28, r24
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	switch (State) {
     6b6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <State.1738>
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <LCD_SendData+0x14>
     6be:	84 c0       	rjmp	.+264    	; 0x7c8 <LCD_SendData+0x11c>
     6c0:	20 f4       	brcc	.+8      	; 0x6ca <LCD_SendData+0x1e>
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <LCD_SendData+0x1c>
     6c6:	5c c0       	rjmp	.+184    	; 0x780 <LCD_SendData+0xd4>
     6c8:	e7 c0       	rjmp	.+462    	; 0x898 <__stack+0x39>
     6ca:	83 30       	cpi	r24, 0x03	; 3
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <LCD_SendData+0x24>
     6ce:	c1 c0       	rjmp	.+386    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     6d0:	8f 3f       	cpi	r24, 0xFF	; 255
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <LCD_SendData+0x2a>
     6d4:	e1 c0       	rjmp	.+450    	; 0x898 <__stack+0x39>
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     6d6:	03 e6       	ldi	r16, 0x63	; 99
     6d8:	10 e0       	ldi	r17, 0x00	; 0
     6da:	f8 01       	movw	r30, r16
     6dc:	d0 81       	ld	r29, Z
     6de:	41 e0       	ldi	r20, 0x01	; 1
     6e0:	61 81       	ldd	r22, Z+1	; 0x01
     6e2:	8d 2f       	mov	r24, r29
     6e4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	f8 01       	movw	r30, r16
     6ec:	62 81       	ldd	r22, Z+2	; 0x02
     6ee:	8d 2f       	mov	r24, r29
     6f0:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_7));
     6f4:	4c 2f       	mov	r20, r28
     6f6:	44 1f       	adc	r20, r20
     6f8:	44 27       	eor	r20, r20
     6fa:	44 1f       	adc	r20, r20
     6fc:	f8 01       	movw	r30, r16
     6fe:	64 81       	ldd	r22, Z+4	; 0x04
     700:	8d 2f       	mov	r24, r29
     702:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_6));
     706:	4c 2f       	mov	r20, r28
     708:	40 74       	andi	r20, 0x40	; 64
     70a:	50 e0       	ldi	r21, 0x00	; 0
     70c:	04 2e       	mov	r0, r20
     70e:	45 2f       	mov	r20, r21
     710:	00 0c       	add	r0, r0
     712:	44 1f       	adc	r20, r20
     714:	55 0b       	sbc	r21, r21
     716:	00 0c       	add	r0, r0
     718:	44 1f       	adc	r20, r20
     71a:	55 1f       	adc	r21, r21
     71c:	f8 01       	movw	r30, r16
     71e:	65 81       	ldd	r22, Z+5	; 0x05
     720:	8d 2f       	mov	r24, r29
     722:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_5));
     726:	4c 2f       	mov	r20, r28
     728:	40 72       	andi	r20, 0x20	; 32
     72a:	50 e0       	ldi	r21, 0x00	; 0
     72c:	55 95       	asr	r21
     72e:	47 95       	ror	r20
     730:	55 95       	asr	r21
     732:	47 95       	ror	r20
     734:	55 95       	asr	r21
     736:	47 95       	ror	r20
     738:	55 95       	asr	r21
     73a:	47 95       	ror	r20
     73c:	55 95       	asr	r21
     73e:	47 95       	ror	r20
     740:	f8 01       	movw	r30, r16
     742:	66 81       	ldd	r22, Z+6	; 0x06
     744:	8d 2f       	mov	r24, r29
     746:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_4));
     74a:	c0 71       	andi	r28, 0x10	; 16
     74c:	4c 2f       	mov	r20, r28
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	55 95       	asr	r21
     752:	47 95       	ror	r20
     754:	55 95       	asr	r21
     756:	47 95       	ror	r20
     758:	55 95       	asr	r21
     75a:	47 95       	ror	r20
     75c:	55 95       	asr	r21
     75e:	47 95       	ror	r20
     760:	f8 01       	movw	r30, r16
     762:	67 81       	ldd	r22, Z+7	; 0x07
     764:	8d 2f       	mov	r24, r29
     766:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	f8 01       	movw	r30, r16
     76e:	63 81       	ldd	r22, Z+3	; 0x03
     770:	8d 2f       	mov	r24, r29
     772:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1738>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     77c:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     77e:	91 c0       	rjmp	.+290    	; 0x8a2 <__stack+0x43>
	case Sending_First_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     780:	69 e3       	ldi	r22, 0x39	; 57
     782:	72 e0       	ldi	r23, 0x02	; 2
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	0e 94 1d 09 	call	0x123a	; 0x123a <TIM_DelayStatus>
     78a:	8b 3f       	cpi	r24, 0xFB	; 251
     78c:	09 f0       	breq	.+2      	; 0x790 <LCD_SendData+0xe4>
     78e:	86 c0       	rjmp	.+268    	; 0x89c <__stack+0x3d>
      {
         TIM_DelayUs(TIMER_2, 1,(void (*)(void)) LCD_SendCommand);
     790:	29 e3       	ldi	r18, 0x39	; 57
     792:	32 e0       	ldi	r19, 0x02	; 2
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	0e 94 0e 08 	call	0x101c	; 0x101c <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     7a2:	69 e3       	ldi	r22, 0x39	; 57
     7a4:	72 e0       	ldi	r23, 0x02	; 2
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	0e 94 1d 09 	call	0x123a	; 0x123a <TIM_DelayStatus>
     7ac:	81 11       	cpse	r24, r1
     7ae:	f9 cf       	rjmp	.-14     	; 0x7a2 <LCD_SendData+0xf6>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     7b0:	e3 e6       	ldi	r30, 0x63	; 99
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	63 81       	ldd	r22, Z+3	; 0x03
     7b8:	80 81       	ld	r24, Z
     7ba:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1738>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     7c4:	8f ef       	ldi	r24, 0xFF	; 255
     7c6:	6d c0       	rjmp	.+218    	; 0x8a2 <__stack+0x43>
         State = First_Nibble_Sent;
      }
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     7c8:	03 e6       	ldi	r16, 0x63	; 99
     7ca:	10 e0       	ldi	r17, 0x00	; 0
     7cc:	f8 01       	movw	r30, r16
     7ce:	d0 81       	ld	r29, Z
     7d0:	41 e0       	ldi	r20, 0x01	; 1
     7d2:	61 81       	ldd	r22, Z+1	; 0x01
     7d4:	8d 2f       	mov	r24, r29
     7d6:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	f8 01       	movw	r30, r16
     7de:	62 81       	ldd	r22, Z+2	; 0x02
     7e0:	8d 2f       	mov	r24, r29
     7e2:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		/*copying lower nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_3));
     7e6:	4c 2f       	mov	r20, r28
     7e8:	48 70       	andi	r20, 0x08	; 8
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	55 95       	asr	r21
     7ee:	47 95       	ror	r20
     7f0:	55 95       	asr	r21
     7f2:	47 95       	ror	r20
     7f4:	55 95       	asr	r21
     7f6:	47 95       	ror	r20
     7f8:	f8 01       	movw	r30, r16
     7fa:	64 81       	ldd	r22, Z+4	; 0x04
     7fc:	8d 2f       	mov	r24, r29
     7fe:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_2));
     802:	4c 2f       	mov	r20, r28
     804:	44 70       	andi	r20, 0x04	; 4
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	55 95       	asr	r21
     80a:	47 95       	ror	r20
     80c:	55 95       	asr	r21
     80e:	47 95       	ror	r20
     810:	f8 01       	movw	r30, r16
     812:	65 81       	ldd	r22, Z+5	; 0x05
     814:	8d 2f       	mov	r24, r29
     816:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_1));
     81a:	4c 2f       	mov	r20, r28
     81c:	42 70       	andi	r20, 0x02	; 2
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	55 95       	asr	r21
     822:	47 95       	ror	r20
     824:	f8 01       	movw	r30, r16
     826:	66 81       	ldd	r22, Z+6	; 0x06
     828:	8d 2f       	mov	r24, r29
     82a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_0));
     82e:	4c 2f       	mov	r20, r28
     830:	41 70       	andi	r20, 0x01	; 1
     832:	f8 01       	movw	r30, r16
     834:	67 81       	ldd	r22, Z+7	; 0x07
     836:	8d 2f       	mov	r24, r29
     838:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	f8 01       	movw	r30, r16
     840:	63 81       	ldd	r22, Z+3	; 0x03
     842:	8d 2f       	mov	r24, r29
     844:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1738>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     84e:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     850:	28 c0       	rjmp	.+80     	; 0x8a2 <__stack+0x43>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     852:	69 e3       	ldi	r22, 0x39	; 57
     854:	72 e0       	ldi	r23, 0x02	; 2
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	0e 94 1d 09 	call	0x123a	; 0x123a <TIM_DelayStatus>
     85c:	8b 3f       	cpi	r24, 0xFB	; 251
     85e:	01 f5       	brne	.+64     	; 0x8a0 <__stack+0x41>
      {
         TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendCommand);
     860:	29 e3       	ldi	r18, 0x39	; 57
     862:	32 e0       	ldi	r19, 0x02	; 2
     864:	41 e0       	ldi	r20, 0x01	; 1
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	0e 94 0e 08 	call	0x101c	; 0x101c <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     872:	69 e3       	ldi	r22, 0x39	; 57
     874:	72 e0       	ldi	r23, 0x02	; 2
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	0e 94 1d 09 	call	0x123a	; 0x123a <TIM_DelayStatus>
     87c:	81 11       	cpse	r24, r1
     87e:	f9 cf       	rjmp	.-14     	; 0x872 <__stack+0x13>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     880:	e3 e6       	ldi	r30, 0x63	; 99
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	63 81       	ldd	r22, Z+3	; 0x03
     888:	80 81       	ld	r24, Z
     88a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
         /*reset the function's state*/
         State = OperationStarted;
     88e:	8f ef       	ldi	r24, 0xFF	; 255
     890:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1738>
         /*process finished successfully*/
         ErrRetVal = OperationSuccess;
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	05 c0       	rjmp	.+10     	; 0x8a2 <__stack+0x43>
      }
		break;
	default:
		ErrRetVal = OperationFail;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <__stack+0x43>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     89c:	8f ef       	ldi	r24, 0xFF	; 255
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
		ErrRetVal = OperationFail;
	}
	/*return from function*/
	return ErrRetVal;

}
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	08 95       	ret

000008ac <LCD_Init>:
ERROR_STATE_t LCD_Init()
{
     8ac:	bf 92       	push	r11
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	uint8_t LCD_SendCommandRetVal = OperationStarted;
	switch (State) {
     8be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     8c2:	8b 30       	cpi	r24, 0x0B	; 11
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <LCD_Init+0x1c>
     8c6:	c3 c0       	rjmp	.+390    	; 0xa4e <LCD_Init+0x1a2>
     8c8:	90 f4       	brcc	.+36     	; 0x8ee <LCD_Init+0x42>
     8ca:	88 30       	cpi	r24, 0x08	; 8
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <LCD_Init+0x24>
     8ce:	a1 c0       	rjmp	.+322    	; 0xa12 <LCD_Init+0x166>
     8d0:	38 f4       	brcc	.+14     	; 0x8e0 <LCD_Init+0x34>
     8d2:	85 30       	cpi	r24, 0x05	; 5
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <LCD_Init+0x2c>
     8d6:	7b c0       	rjmp	.+246    	; 0x9ce <LCD_Init+0x122>
     8d8:	86 30       	cpi	r24, 0x06	; 6
     8da:	09 f4       	brne	.+2      	; 0x8de <LCD_Init+0x32>
     8dc:	90 c0       	rjmp	.+288    	; 0x9fe <LCD_Init+0x152>
     8de:	e9 c0       	rjmp	.+466    	; 0xab2 <LCD_Init+0x206>
     8e0:	89 30       	cpi	r24, 0x09	; 9
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <LCD_Init+0x3a>
     8e4:	a0 c0       	rjmp	.+320    	; 0xa26 <LCD_Init+0x17a>
     8e6:	8a 30       	cpi	r24, 0x0A	; 10
     8e8:	09 f4       	brne	.+2      	; 0x8ec <LCD_Init+0x40>
     8ea:	a7 c0       	rjmp	.+334    	; 0xa3a <LCD_Init+0x18e>
     8ec:	e2 c0       	rjmp	.+452    	; 0xab2 <LCD_Init+0x206>
     8ee:	8e 30       	cpi	r24, 0x0E	; 14
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <LCD_Init+0x48>
     8f2:	cb c0       	rjmp	.+406    	; 0xa8a <LCD_Init+0x1de>
     8f4:	38 f4       	brcc	.+14     	; 0x904 <LCD_Init+0x58>
     8f6:	8c 30       	cpi	r24, 0x0C	; 12
     8f8:	09 f4       	brne	.+2      	; 0x8fc <LCD_Init+0x50>
     8fa:	b3 c0       	rjmp	.+358    	; 0xa62 <LCD_Init+0x1b6>
     8fc:	8d 30       	cpi	r24, 0x0D	; 13
     8fe:	09 f4       	brne	.+2      	; 0x902 <LCD_Init+0x56>
     900:	ba c0       	rjmp	.+372    	; 0xa76 <LCD_Init+0x1ca>
     902:	d7 c0       	rjmp	.+430    	; 0xab2 <LCD_Init+0x206>
     904:	8f 30       	cpi	r24, 0x0F	; 15
     906:	09 f4       	brne	.+2      	; 0x90a <LCD_Init+0x5e>
     908:	ca c0       	rjmp	.+404    	; 0xa9e <LCD_Init+0x1f2>
     90a:	8f 3f       	cpi	r24, 0xFF	; 255
     90c:	09 f0       	breq	.+2      	; 0x910 <LCD_Init+0x64>
     90e:	d1 c0       	rjmp	.+418    	; 0xab2 <LCD_Init+0x206>
	case OperationStarted:
		/*Dio and Timer Initialize for the*/
		TIM_Init(TIMER_2);
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	0e 94 07 07 	call	0xe0e	; 0xe0e <TIM_Init>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     916:	03 e6       	ldi	r16, 0x63	; 99
     918:	10 e0       	ldi	r17, 0x00	; 0
     91a:	f8 01       	movw	r30, r16
     91c:	b4 80       	ldd	r11, Z+4	; 0x04
     91e:	c0 81       	ld	r28, Z
     920:	41 e0       	ldi	r20, 0x01	; 1
     922:	6b 2d       	mov	r22, r11
     924:	8c 2f       	mov	r24, r28
     926:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     92a:	f8 01       	movw	r30, r16
     92c:	c5 80       	ldd	r12, Z+5	; 0x05
     92e:	41 e0       	ldi	r20, 0x01	; 1
     930:	6c 2d       	mov	r22, r12
     932:	8c 2f       	mov	r24, r28
     934:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     938:	f8 01       	movw	r30, r16
     93a:	d6 80       	ldd	r13, Z+6	; 0x06
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	6d 2d       	mov	r22, r13
     940:	8c 2f       	mov	r24, r28
     942:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     946:	f8 01       	movw	r30, r16
     948:	e7 80       	ldd	r14, Z+7	; 0x07
     94a:	41 e0       	ldi	r20, 0x01	; 1
     94c:	6e 2d       	mov	r22, r14
     94e:	8c 2f       	mov	r24, r28
     950:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     954:	f8 01       	movw	r30, r16
     956:	f1 80       	ldd	r15, Z+1	; 0x01
     958:	41 e0       	ldi	r20, 0x01	; 1
     95a:	6f 2d       	mov	r22, r15
     95c:	8c 2f       	mov	r24, r28
     95e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     962:	f8 01       	movw	r30, r16
     964:	d2 81       	ldd	r29, Z+2	; 0x02
     966:	41 e0       	ldi	r20, 0x01	; 1
     968:	6d 2f       	mov	r22, r29
     96a:	8c 2f       	mov	r24, r28
     96c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     970:	f8 01       	movw	r30, r16
     972:	13 81       	ldd	r17, Z+3	; 0x03
     974:	41 e0       	ldi	r20, 0x01	; 1
     976:	61 2f       	mov	r22, r17
     978:	8c 2f       	mov	r24, r28
     97a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	6b 2d       	mov	r22, r11
     982:	8c 2f       	mov	r24, r28
     984:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	6c 2d       	mov	r22, r12
     98c:	8c 2f       	mov	r24, r28
     98e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	6d 2d       	mov	r22, r13
     996:	8c 2f       	mov	r24, r28
     998:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	6e 2d       	mov	r22, r14
     9a0:	8c 2f       	mov	r24, r28
     9a2:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	6f 2d       	mov	r22, r15
     9aa:	8c 2f       	mov	r24, r28
     9ac:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	6d 2f       	mov	r22, r29
     9b4:	8c 2f       	mov	r24, r28
     9b6:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	61 2f       	mov	r22, r17
     9be:	8c 2f       	mov	r24, r28
     9c0:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <DIO_WritePin>
		/*set status of the function*/
		State = LCD_Pin_Initializing;
     9c4:	85 e0       	ldi	r24, 0x05	; 5
     9c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
		/*set status of the function*/
		State = LCD_Pin_Initializing;
		break;
     9cc:	87 c0       	rjmp	.+270    	; 0xadc <LCD_Init+0x230>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
     9ce:	69 e3       	ldi	r22, 0x39	; 57
     9d0:	72 e0       	ldi	r23, 0x02	; 2
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	0e 94 1d 09 	call	0x123a	; 0x123a <TIM_DelayStatus>
     9d8:	c8 2f       	mov	r28, r24
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     9da:	8b 3f       	cpi	r24, 0xFB	; 251
     9dc:	49 f4       	brne	.+18     	; 0x9f0 <LCD_Init+0x144>
		{
   		TIM_DelayMs(TIMER_2,15, (void (*)(void))LCD_SendCommand);
     9de:	29 e3       	ldi	r18, 0x39	; 57
     9e0:	32 e0       	ldi	r19, 0x02	; 2
     9e2:	4f e0       	ldi	r20, 0x0F	; 15
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	82 e0       	ldi	r24, 0x02	; 2
     9ec:	0e 94 8c 08 	call	0x1118	; 0x1118 <TIM_DelayMs>
		}
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     9f0:	c1 11       	cpse	r28, r1
     9f2:	61 c0       	rjmp	.+194    	; 0xab6 <LCD_Init+0x20a>
		{
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
     9f4:	86 e0       	ldi	r24, 0x06	; 6
     9f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	6f c0       	rjmp	.+222    	; 0xadc <LCD_Init+0x230>
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
	case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a04:	81 11       	cpse	r24, r1
     a06:	59 c0       	rjmp	.+178    	; 0xaba <LCD_Init+0x20e>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     a08:	88 e0       	ldi	r24, 0x08	; 8
     a0a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	65 c0       	rjmp	.+202    	; 0xadc <LCD_Init+0x230>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a18:	81 11       	cpse	r24, r1
     a1a:	51 c0       	rjmp	.+162    	; 0xabe <LCD_Init+0x212>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     a1c:	89 e0       	ldi	r24, 0x09	; 9
     a1e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	5b c0       	rjmp	.+182    	; 0xadc <LCD_Init+0x230>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a2c:	81 11       	cpse	r24, r1
     a2e:	49 c0       	rjmp	.+146    	; 0xac2 <LCD_Init+0x216>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     a30:	8a e0       	ldi	r24, 0x0A	; 10
     a32:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a36:	8f ef       	ldi	r24, 0xFF	; 255
     a38:	51 c0       	rjmp	.+162    	; 0xadc <LCD_Init+0x230>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a40:	81 11       	cpse	r24, r1
     a42:	41 c0       	rjmp	.+130    	; 0xac6 <LCD_Init+0x21a>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     a44:	8b e0       	ldi	r24, 0x0B	; 11
     a46:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a4a:	8f ef       	ldi	r24, 0xFF	; 255
     a4c:	47 c0       	rjmp	.+142    	; 0xadc <LCD_Init+0x230>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_6);
     a4e:	88 e2       	ldi	r24, 0x28	; 40
     a50:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a54:	81 11       	cpse	r24, r1
     a56:	39 c0       	rjmp	.+114    	; 0xaca <LCD_Init+0x21e>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     a58:	8c e0       	ldi	r24, 0x0C	; 12
     a5a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	3d c0       	rjmp	.+122    	; 0xadc <LCD_Init+0x230>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
     a62:	8c e0       	ldi	r24, 0x0C	; 12
     a64:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a68:	81 11       	cpse	r24, r1
     a6a:	31 c0       	rjmp	.+98     	; 0xace <LCD_Init+0x222>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     a6c:	8d e0       	ldi	r24, 0x0D	; 13
     a6e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	33 c0       	rjmp	.+102    	; 0xadc <LCD_Init+0x230>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_SHIFTINCREMENTENTRYMODE);//LCD_INCREMENTENTRYMODE
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a7c:	81 11       	cpse	r24, r1
     a7e:	29 c0       	rjmp	.+82     	; 0xad2 <LCD_Init+0x226>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     a80:	8e e0       	ldi	r24, 0x0E	; 14
     a82:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	29 c0       	rjmp	.+82     	; 0xadc <LCD_Init+0x230>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     a90:	81 11       	cpse	r24, r1
     a92:	21 c0       	rjmp	.+66     	; 0xad6 <LCD_Init+0x22a>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     a94:	8f e0       	ldi	r24, 0x0F	; 15
     a96:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	1f c0       	rjmp	.+62     	; 0xadc <LCD_Init+0x230>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     a9e:	80 e8       	ldi	r24, 0x80	; 128
     aa0:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     aa4:	81 11       	cpse	r24, r1
     aa6:	19 c0       	rjmp	.+50     	; 0xada <LCD_Init+0x22e>
		{
			State = OperationStarted;
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			ErrRetVal = OperationSuccess;
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	15 c0       	rjmp	.+42     	; 0xadc <LCD_Init+0x230>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	13 c0       	rjmp	.+38     	; 0xadc <LCD_Init+0x230>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	11 c0       	rjmp	.+34     	; 0xadc <LCD_Init+0x230>
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	0f c0       	rjmp	.+30     	; 0xadc <LCD_Init+0x230>
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	0d c0       	rjmp	.+26     	; 0xadc <LCD_Init+0x230>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	0b c0       	rjmp	.+22     	; 0xadc <LCD_Init+0x230>
     ac6:	8f ef       	ldi	r24, 0xFF	; 255
     ac8:	09 c0       	rjmp	.+18     	; 0xadc <LCD_Init+0x230>
     aca:	8f ef       	ldi	r24, 0xFF	; 255
     acc:	07 c0       	rjmp	.+14     	; 0xadc <LCD_Init+0x230>
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <LCD_Init+0x230>
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	03 c0       	rjmp	.+6      	; 0xadc <LCD_Init+0x230>
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <LCD_Init+0x230>
     ada:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	default:
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	bf 90       	pop	r11
     aee:	08 95       	ret

00000af0 <DIO_SetPinDirection>:
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
     af0:	42 30       	cpi	r20, 0x02	; 2
     af2:	08 f0       	brcs	.+2      	; 0xaf6 <DIO_SetPinDirection+0x6>
     af4:	60 c0       	rjmp	.+192    	; 0xbb6 <DIO_SetPinDirection+0xc6>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
     af6:	68 30       	cpi	r22, 0x08	; 8
     af8:	08 f0       	brcs	.+2      	; 0xafc <DIO_SetPinDirection+0xc>
     afa:	5f c0       	rjmp	.+190    	; 0xbba <DIO_SetPinDirection+0xca>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     afc:	81 30       	cpi	r24, 0x01	; 1
     afe:	e1 f0       	breq	.+56     	; 0xb38 <DIO_SetPinDirection+0x48>
     b00:	30 f0       	brcs	.+12     	; 0xb0e <DIO_SetPinDirection+0x1e>
     b02:	82 30       	cpi	r24, 0x02	; 2
     b04:	71 f1       	breq	.+92     	; 0xb62 <DIO_SetPinDirection+0x72>
     b06:	83 30       	cpi	r24, 0x03	; 3
     b08:	09 f4       	brne	.+2      	; 0xb0c <DIO_SetPinDirection+0x1c>
     b0a:	40 c0       	rjmp	.+128    	; 0xb8c <DIO_SetPinDirection+0x9c>
     b0c:	58 c0       	rjmp	.+176    	; 0xbbe <DIO_SetPinDirection+0xce>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
     b0e:	2a b3       	in	r18, 0x1a	; 26
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	06 2e       	mov	r0, r22
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <DIO_SetPinDirection+0x2c>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	0a 94       	dec	r0
     b1e:	e2 f7       	brpl	.-8      	; 0xb18 <DIO_SetPinDirection+0x28>
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <DIO_SetPinDirection+0x38>
     b24:	44 0f       	add	r20, r20
     b26:	55 1f       	adc	r21, r21
     b28:	6a 95       	dec	r22
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <DIO_SetPinDirection+0x34>
     b2c:	80 95       	com	r24
     b2e:	82 23       	and	r24, r18
     b30:	48 2b       	or	r20, r24
     b32:	4a bb       	out	0x1a, r20	; 26
				u8_ErrorState=ERROR_OK;
     b34:	80 e0       	ldi	r24, 0x00	; 0
				break;
     b36:	08 95       	ret
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
     b38:	27 b3       	in	r18, 0x17	; 23
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	06 2e       	mov	r0, r22
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <DIO_SetPinDirection+0x56>
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	0a 94       	dec	r0
     b48:	e2 f7       	brpl	.-8      	; 0xb42 <DIO_SetPinDirection+0x52>
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <DIO_SetPinDirection+0x62>
     b4e:	44 0f       	add	r20, r20
     b50:	55 1f       	adc	r21, r21
     b52:	6a 95       	dec	r22
     b54:	e2 f7       	brpl	.-8      	; 0xb4e <DIO_SetPinDirection+0x5e>
     b56:	80 95       	com	r24
     b58:	82 23       	and	r24, r18
     b5a:	48 2b       	or	r20, r24
     b5c:	47 bb       	out	0x17, r20	; 23
				u8_ErrorState=ERROR_OK;
     b5e:	80 e0       	ldi	r24, 0x00	; 0
				break;
     b60:	08 95       	ret
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
     b62:	24 b3       	in	r18, 0x14	; 20
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	06 2e       	mov	r0, r22
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <DIO_SetPinDirection+0x80>
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	0a 94       	dec	r0
     b72:	e2 f7       	brpl	.-8      	; 0xb6c <DIO_SetPinDirection+0x7c>
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <DIO_SetPinDirection+0x8c>
     b78:	44 0f       	add	r20, r20
     b7a:	55 1f       	adc	r21, r21
     b7c:	6a 95       	dec	r22
     b7e:	e2 f7       	brpl	.-8      	; 0xb78 <DIO_SetPinDirection+0x88>
     b80:	80 95       	com	r24
     b82:	82 23       	and	r24, r18
     b84:	48 2b       	or	r20, r24
     b86:	44 bb       	out	0x14, r20	; 20
				u8_ErrorState=ERROR_OK;
     b88:	80 e0       	ldi	r24, 0x00	; 0
				break;
     b8a:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
     b8c:	21 b3       	in	r18, 0x11	; 17
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	06 2e       	mov	r0, r22
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <DIO_SetPinDirection+0xaa>
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	0a 94       	dec	r0
     b9c:	e2 f7       	brpl	.-8      	; 0xb96 <DIO_SetPinDirection+0xa6>
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <DIO_SetPinDirection+0xb6>
     ba2:	44 0f       	add	r20, r20
     ba4:	55 1f       	adc	r21, r21
     ba6:	6a 95       	dec	r22
     ba8:	e2 f7       	brpl	.-8      	; 0xba2 <DIO_SetPinDirection+0xb2>
     baa:	80 95       	com	r24
     bac:	82 23       	and	r24, r18
     bae:	48 2b       	or	r20, r24
     bb0:	41 bb       	out	0x11, r20	; 17
				u8_ErrorState=ERROR_OK;
     bb2:	80 e0       	ldi	r24, 0x00	; 0
				break;
     bb4:	08 95       	ret
ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
	{
		u8_ErrorState=ERROR_NOK;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}		
	}
	return u8_ErrorState;
}
     bc0:	08 95       	ret

00000bc2 <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
     bc2:	42 30       	cpi	r20, 0x02	; 2
     bc4:	08 f0       	brcs	.+2      	; 0xbc8 <DIO_WritePin+0x6>
     bc6:	60 c0       	rjmp	.+192    	; 0xc88 <DIO_WritePin+0xc6>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
     bc8:	68 30       	cpi	r22, 0x08	; 8
     bca:	08 f0       	brcs	.+2      	; 0xbce <DIO_WritePin+0xc>
     bcc:	5f c0       	rjmp	.+190    	; 0xc8c <DIO_WritePin+0xca>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	e1 f0       	breq	.+56     	; 0xc0a <DIO_WritePin+0x48>
     bd2:	30 f0       	brcs	.+12     	; 0xbe0 <DIO_WritePin+0x1e>
     bd4:	82 30       	cpi	r24, 0x02	; 2
     bd6:	71 f1       	breq	.+92     	; 0xc34 <DIO_WritePin+0x72>
     bd8:	83 30       	cpi	r24, 0x03	; 3
     bda:	09 f4       	brne	.+2      	; 0xbde <DIO_WritePin+0x1c>
     bdc:	40 c0       	rjmp	.+128    	; 0xc5e <DIO_WritePin+0x9c>
     bde:	58 c0       	rjmp	.+176    	; 0xc90 <DIO_WritePin+0xce>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
     be0:	2b b3       	in	r18, 0x1b	; 27
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	06 2e       	mov	r0, r22
     be8:	02 c0       	rjmp	.+4      	; 0xbee <DIO_WritePin+0x2c>
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	0a 94       	dec	r0
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <DIO_WritePin+0x28>
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_WritePin+0x38>
     bf6:	44 0f       	add	r20, r20
     bf8:	55 1f       	adc	r21, r21
     bfa:	6a 95       	dec	r22
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_WritePin+0x34>
     bfe:	80 95       	com	r24
     c00:	82 23       	and	r24, r18
     c02:	48 2b       	or	r20, r24
     c04:	4b bb       	out	0x1b, r20	; 27
				u8_ErrorState=ERROR_OK;
     c06:	80 e0       	ldi	r24, 0x00	; 0
				break;
     c08:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
     c0a:	28 b3       	in	r18, 0x18	; 24
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	06 2e       	mov	r0, r22
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <DIO_WritePin+0x56>
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	0a 94       	dec	r0
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <DIO_WritePin+0x52>
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <DIO_WritePin+0x62>
     c20:	44 0f       	add	r20, r20
     c22:	55 1f       	adc	r21, r21
     c24:	6a 95       	dec	r22
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <DIO_WritePin+0x5e>
     c28:	80 95       	com	r24
     c2a:	82 23       	and	r24, r18
     c2c:	48 2b       	or	r20, r24
     c2e:	48 bb       	out	0x18, r20	; 24
				u8_ErrorState=ERROR_OK;
     c30:	80 e0       	ldi	r24, 0x00	; 0
				break;
     c32:	08 95       	ret
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
     c34:	25 b3       	in	r18, 0x15	; 21
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	06 2e       	mov	r0, r22
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <DIO_WritePin+0x80>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <DIO_WritePin+0x7c>
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <DIO_WritePin+0x8c>
     c4a:	44 0f       	add	r20, r20
     c4c:	55 1f       	adc	r21, r21
     c4e:	6a 95       	dec	r22
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <DIO_WritePin+0x88>
     c52:	80 95       	com	r24
     c54:	82 23       	and	r24, r18
     c56:	48 2b       	or	r20, r24
     c58:	45 bb       	out	0x15, r20	; 21
				u8_ErrorState=ERROR_OK;
     c5a:	80 e0       	ldi	r24, 0x00	; 0
				break;
     c5c:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
     c5e:	22 b3       	in	r18, 0x12	; 18
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	06 2e       	mov	r0, r22
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <DIO_WritePin+0xaa>
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	0a 94       	dec	r0
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <DIO_WritePin+0xa6>
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <DIO_WritePin+0xb6>
     c74:	44 0f       	add	r20, r20
     c76:	55 1f       	adc	r21, r21
     c78:	6a 95       	dec	r22
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <DIO_WritePin+0xb2>
     c7c:	80 95       	com	r24
     c7e:	82 23       	and	r24, r18
     c80:	48 2b       	or	r20, r24
     c82:	42 bb       	out	0x12, r20	; 18
				u8_ErrorState=ERROR_OK;
     c84:	80 e0       	ldi	r24, 0x00	; 0
				break;
     c86:	08 95       	ret
ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
	{
		u8_ErrorState=ERROR_NOK;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
     c90:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
     c92:	08 95       	ret

00000c94 <GetFreqPrescaleRatio>:
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	08 f0       	brcs	.+2      	; 0xc9a <GetFreqPrescaleRatio+0x6>
     c98:	4e c0       	rjmp	.+156    	; 0xd36 <GetFreqPrescaleRatio+0xa2>
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	fc 01       	movw	r30, r24
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	8e 0f       	add	r24, r30
     ca4:	9f 1f       	adc	r25, r31
     ca6:	fc 01       	movw	r30, r24
     ca8:	e5 59       	subi	r30, 0x95	; 149
     caa:	ff 4f       	sbci	r31, 0xFF	; 255
     cac:	82 81       	ldd	r24, Z+2	; 0x02
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	09 f1       	breq	.+66     	; 0xcf4 <GetFreqPrescaleRatio+0x60>
     cb2:	28 f4       	brcc	.+10     	; 0xcbe <GetFreqPrescaleRatio+0x2a>
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	41 f0       	breq	.+16     	; 0xcc8 <GetFreqPrescaleRatio+0x34>
     cb8:	82 30       	cpi	r24, 0x02	; 2
     cba:	89 f0       	breq	.+34     	; 0xcde <GetFreqPrescaleRatio+0x4a>
     cbc:	a2 c0       	rjmp	.+324    	; 0xe02 <GetFreqPrescaleRatio+0x16e>
     cbe:	84 30       	cpi	r24, 0x04	; 4
     cc0:	21 f1       	breq	.+72     	; 0xd0a <GetFreqPrescaleRatio+0x76>
     cc2:	85 30       	cpi	r24, 0x05	; 5
     cc4:	69 f1       	breq	.+90     	; 0xd20 <GetFreqPrescaleRatio+0x8c>
     cc6:	9d c0       	rjmp	.+314    	; 0xe02 <GetFreqPrescaleRatio+0x16e>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	be e3       	ldi	r27, 0x3E	; 62
     cd0:	fb 01       	movw	r30, r22
     cd2:	80 83       	st	Z, r24
     cd4:	91 83       	std	Z+1, r25	; 0x01
     cd6:	a2 83       	std	Z+2, r26	; 0x02
     cd8:	b3 83       	std	Z+3, r27	; 0x03
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	08 95       	ret
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	a0 e8       	ldi	r26, 0x80	; 128
     ce4:	bf e3       	ldi	r27, 0x3F	; 63
     ce6:	fb 01       	movw	r30, r22
     ce8:	80 83       	st	Z, r24
     cea:	91 83       	std	Z+1, r25	; 0x01
     cec:	a2 83       	std	Z+2, r26	; 0x02
     cee:	b3 83       	std	Z+3, r27	; 0x03
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	08 95       	ret
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a0 e0       	ldi	r26, 0x00	; 0
     cfa:	b1 e4       	ldi	r27, 0x41	; 65
     cfc:	fb 01       	movw	r30, r22
     cfe:	80 83       	st	Z, r24
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	a2 83       	std	Z+2, r26	; 0x02
     d04:	b3 83       	std	Z+3, r27	; 0x03
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	08 95       	ret
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	a0 e0       	ldi	r26, 0x00	; 0
     d10:	b2 e4       	ldi	r27, 0x42	; 66
     d12:	fb 01       	movw	r30, r22
     d14:	80 83       	st	Z, r24
     d16:	91 83       	std	Z+1, r25	; 0x01
     d18:	a2 83       	std	Z+2, r26	; 0x02
     d1a:	b3 83       	std	Z+3, r27	; 0x03
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	08 95       	ret
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b3 e4       	ldi	r27, 0x43	; 67
     d28:	fb 01       	movw	r30, r22
     d2a:	80 83       	st	Z, r24
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	a2 83       	std	Z+2, r26	; 0x02
     d30:	b3 83       	std	Z+3, r27	; 0x03
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	08 95       	ret
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	09 f0       	breq	.+2      	; 0xd3c <GetFreqPrescaleRatio+0xa8>
     d3a:	65 c0       	rjmp	.+202    	; 0xe06 <GetFreqPrescaleRatio+0x172>
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	fc 01       	movw	r30, r24
     d40:	ee 0f       	add	r30, r30
     d42:	ff 1f       	adc	r31, r31
     d44:	8e 0f       	add	r24, r30
     d46:	9f 1f       	adc	r25, r31
     d48:	fc 01       	movw	r30, r24
     d4a:	e5 59       	subi	r30, 0x95	; 149
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	e2 81       	ldd	r30, Z+2	; 0x02
     d50:	8e 2f       	mov	r24, r30
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	fc 01       	movw	r30, r24
     d56:	31 97       	sbiw	r30, 0x01	; 1
     d58:	e7 30       	cpi	r30, 0x07	; 7
     d5a:	f1 05       	cpc	r31, r1
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <GetFreqPrescaleRatio+0xcc>
     d5e:	55 c0       	rjmp	.+170    	; 0xe0a <GetFreqPrescaleRatio+0x176>
     d60:	e6 5d       	subi	r30, 0xD6	; 214
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__tablejump2__>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	a0 e0       	ldi	r26, 0x00	; 0
     d6e:	be e3       	ldi	r27, 0x3E	; 62
     d70:	fb 01       	movw	r30, r22
     d72:	80 83       	st	Z, r24
     d74:	91 83       	std	Z+1, r25	; 0x01
     d76:	a2 83       	std	Z+2, r26	; 0x02
     d78:	b3 83       	std	Z+3, r27	; 0x03
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	08 95       	ret
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	a0 e8       	ldi	r26, 0x80	; 128
     d84:	bf e3       	ldi	r27, 0x3F	; 63
     d86:	fb 01       	movw	r30, r22
     d88:	80 83       	st	Z, r24
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	a2 83       	std	Z+2, r26	; 0x02
     d8e:	b3 83       	std	Z+3, r27	; 0x03
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	08 95       	ret
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	a0 e8       	ldi	r26, 0x80	; 128
     d9a:	b0 e4       	ldi	r27, 0x40	; 64
     d9c:	fb 01       	movw	r30, r22
     d9e:	80 83       	st	Z, r24
     da0:	91 83       	std	Z+1, r25	; 0x01
     da2:	a2 83       	std	Z+2, r26	; 0x02
     da4:	b3 83       	std	Z+3, r27	; 0x03
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	08 95       	ret
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e0       	ldi	r26, 0x00	; 0
     db0:	b1 e4       	ldi	r27, 0x41	; 65
     db2:	fb 01       	movw	r30, r22
     db4:	80 83       	st	Z, r24
     db6:	91 83       	std	Z+1, r25	; 0x01
     db8:	a2 83       	std	Z+2, r26	; 0x02
     dba:	b3 83       	std	Z+3, r27	; 0x03
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	08 95       	ret
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	a0 e8       	ldi	r26, 0x80	; 128
     dc6:	b1 e4       	ldi	r27, 0x41	; 65
     dc8:	fb 01       	movw	r30, r22
     dca:	80 83       	st	Z, r24
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	a2 83       	std	Z+2, r26	; 0x02
     dd0:	b3 83       	std	Z+3, r27	; 0x03
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	08 95       	ret
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	a0 e0       	ldi	r26, 0x00	; 0
     ddc:	b2 e4       	ldi	r27, 0x42	; 66
     dde:	fb 01       	movw	r30, r22
     de0:	80 83       	st	Z, r24
     de2:	91 83       	std	Z+1, r25	; 0x01
     de4:	a2 83       	std	Z+2, r26	; 0x02
     de6:	b3 83       	std	Z+3, r27	; 0x03
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	08 95       	ret
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a0 e0       	ldi	r26, 0x00	; 0
     df2:	b3 e4       	ldi	r27, 0x43	; 67
     df4:	fb 01       	movw	r30, r22
     df6:	80 83       	st	Z, r24
     df8:	91 83       	std	Z+1, r25	; 0x01
     dfa:	a2 83       	std	Z+2, r26	; 0x02
     dfc:	b3 83       	std	Z+3, r27	; 0x03
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	08 95       	ret
     e02:	8c ef       	ldi	r24, 0xFC	; 252
     e04:	08 95       	ret
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	08 95       	ret
     e0a:	8c ef       	ldi	r24, 0xFC	; 252
     e0c:	08 95       	ret

00000e0e <TIM_Init>:
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	b1 f0       	breq	.+44     	; 0xe3e <TIM_Init+0x30>
     e12:	18 f0       	brcs	.+6      	; 0xe1a <TIM_Init+0xc>
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	71 f1       	breq	.+92     	; 0xe74 <TIM_Init+0x66>
     e18:	44 c0       	rjmp	.+136    	; 0xea2 <TIM_Init+0x94>
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	fc 01       	movw	r30, r24
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	8e 0f       	add	r24, r30
     e24:	9f 1f       	adc	r25, r31
     e26:	fc 01       	movw	r30, r24
     e28:	e5 59       	subi	r30, 0x95	; 149
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	80 81       	ld	r24, Z
     e2e:	83 bf       	out	0x33, r24	; 51
     e30:	89 b7       	in	r24, 0x39	; 57
     e32:	8c 7f       	andi	r24, 0xFC	; 252
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	89 2b       	or	r24, r25
     e38:	89 bf       	out	0x39, r24	; 57
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	08 95       	ret
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	fc 01       	movw	r30, r24
     e42:	ee 0f       	add	r30, r30
     e44:	ff 1f       	adc	r31, r31
     e46:	8e 0f       	add	r24, r30
     e48:	9f 1f       	adc	r25, r31
     e4a:	fc 01       	movw	r30, r24
     e4c:	e5 59       	subi	r30, 0x95	; 149
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	80 81       	ld	r24, Z
     e52:	8e bd       	out	0x2e, r24	; 46
     e54:	89 b7       	in	r24, 0x39	; 57
     e56:	28 2f       	mov	r18, r24
     e58:	27 7e       	andi	r18, 0xE7	; 231
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	89 2f       	mov	r24, r25
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	82 2b       	or	r24, r18
     e6e:	89 bf       	out	0x39, r24	; 57
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	08 95       	ret
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	fc 01       	movw	r30, r24
     e78:	ee 0f       	add	r30, r30
     e7a:	ff 1f       	adc	r31, r31
     e7c:	8e 0f       	add	r24, r30
     e7e:	9f 1f       	adc	r25, r31
     e80:	fc 01       	movw	r30, r24
     e82:	e5 59       	subi	r30, 0x95	; 149
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	80 81       	ld	r24, Z
     e88:	85 bd       	out	0x25, r24	; 37
     e8a:	89 b7       	in	r24, 0x39	; 57
     e8c:	28 2f       	mov	r18, r24
     e8e:	2f 73       	andi	r18, 0x3F	; 63
     e90:	91 81       	ldd	r25, Z+1	; 0x01
     e92:	30 e4       	ldi	r19, 0x40	; 64
     e94:	93 9f       	mul	r25, r19
     e96:	c0 01       	movw	r24, r0
     e98:	11 24       	eor	r1, r1
     e9a:	82 2b       	or	r24, r18
     e9c:	89 bf       	out	0x39, r24	; 57
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	08 95       	ret
     ea2:	8e ef       	ldi	r24, 0xFE	; 254
     ea4:	08 95       	ret

00000ea6 <TIM_Start>:
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	71 f0       	breq	.+28     	; 0xec6 <TIM_Start+0x20>
     eaa:	18 f0       	brcs	.+6      	; 0xeb2 <TIM_Start+0xc>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	31 f0       	breq	.+12     	; 0xebc <TIM_Start+0x16>
     eb0:	1f c0       	rjmp	.+62     	; 0xef0 <TIM_Start+0x4a>
     eb2:	e2 e5       	ldi	r30, 0x52	; 82
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	a3 e5       	ldi	r26, 0x53	; 83
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	09 c0       	rjmp	.+18     	; 0xece <TIM_Start+0x28>
     ebc:	e4 e4       	ldi	r30, 0x44	; 68
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	a5 e4       	ldi	r26, 0x45	; 69
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	04 c0       	rjmp	.+8      	; 0xece <TIM_Start+0x28>
     ec6:	ec e4       	ldi	r30, 0x4C	; 76
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	ae e4       	ldi	r26, 0x4E	; 78
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	71 83       	std	Z+1, r23	; 0x01
     ed0:	60 83       	st	Z, r22
     ed2:	2c 91       	ld	r18, X
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	fc 01       	movw	r30, r24
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	8e 0f       	add	r24, r30
     ede:	9f 1f       	adc	r25, r31
     ee0:	fc 01       	movw	r30, r24
     ee2:	e5 59       	subi	r30, 0x95	; 149
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	82 2b       	or	r24, r18
     eea:	8c 93       	st	X, r24
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	08 95       	ret
     ef0:	8e ef       	ldi	r24, 0xFE	; 254
     ef2:	08 95       	ret

00000ef4 <TIM_GetStatus>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
     ef4:	61 15       	cp	r22, r1
     ef6:	71 05       	cpc	r23, r1
     ef8:	09 f4       	brne	.+2      	; 0xefc <TIM_GetStatus+0x8>
     efa:	7a c0       	rjmp	.+244    	; 0xff0 <TIM_GetStatus+0xfc>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	41 f1       	breq	.+80     	; 0xf50 <TIM_GetStatus+0x5c>
     f00:	20 f0       	brcs	.+8      	; 0xf0a <TIM_GetStatus+0x16>
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	09 f4       	brne	.+2      	; 0xf08 <TIM_GetStatus+0x14>
     f06:	52 c0       	rjmp	.+164    	; 0xfac <TIM_GetStatus+0xb8>
     f08:	75 c0       	rjmp	.+234    	; 0xff4 <TIM_GetStatus+0x100>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	fc 01       	movw	r30, r24
     f0e:	ee 0f       	add	r30, r30
     f10:	ff 1f       	adc	r31, r31
     f12:	8e 0f       	add	r24, r30
     f14:	9f 1f       	adc	r25, r31
     f16:	fc 01       	movw	r30, r24
     f18:	e5 59       	subi	r30, 0x95	; 149
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	80 81       	ld	r24, Z
     f1e:	81 11       	cpse	r24, r1
     f20:	09 c0       	rjmp	.+18     	; 0xf34 <TIM_GetStatus+0x40>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
     f22:	08 b6       	in	r0, 0x38	; 56
     f24:	00 fe       	sbrs	r0, 0
     f26:	68 c0       	rjmp	.+208    	; 0xff8 <TIM_GetStatus+0x104>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
     f28:	fb 01       	movw	r30, r22
     f2a:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
     f2c:	98 b7       	in	r25, 0x38	; 56
     f2e:	91 60       	ori	r25, 0x01	; 1
     f30:	98 bf       	out	0x38, r25	; 56
     f32:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
     f34:	88 30       	cpi	r24, 0x08	; 8
     f36:	09 f0       	breq	.+2      	; 0xf3a <TIM_GetStatus+0x46>
     f38:	61 c0       	rjmp	.+194    	; 0xffc <TIM_GetStatus+0x108>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
     f3a:	08 b6       	in	r0, 0x38	; 56
     f3c:	01 fe       	sbrs	r0, 1
     f3e:	60 c0       	rjmp	.+192    	; 0x1000 <TIM_GetStatus+0x10c>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	fb 01       	movw	r30, r22
     f44:	80 83       	st	Z, r24
               TIFR |= TIMER_0_COMPARE_FLAG;
     f46:	88 b7       	in	r24, 0x38	; 56
     f48:	82 60       	ori	r24, 0x02	; 2
     f4a:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	fc 01       	movw	r30, r24
     f54:	ee 0f       	add	r30, r30
     f56:	ff 1f       	adc	r31, r31
     f58:	8e 0f       	add	r24, r30
     f5a:	9f 1f       	adc	r25, r31
     f5c:	fc 01       	movw	r30, r24
     f5e:	e5 59       	subi	r30, 0x95	; 149
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	80 81       	ld	r24, Z
     f64:	81 11       	cpse	r24, r1
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <TIM_GetStatus+0x86>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
     f68:	08 b6       	in	r0, 0x38	; 56
     f6a:	02 fe       	sbrs	r0, 2
     f6c:	4b c0       	rjmp	.+150    	; 0x1004 <TIM_GetStatus+0x110>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
     f6e:	fb 01       	movw	r30, r22
     f70:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
     f72:	98 b7       	in	r25, 0x38	; 56
     f74:	94 60       	ori	r25, 0x04	; 4
     f76:	98 bf       	out	0x38, r25	; 56
     f78:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
     f7a:	88 30       	cpi	r24, 0x08	; 8
     f7c:	09 f0       	breq	.+2      	; 0xf80 <TIM_GetStatus+0x8c>
     f7e:	44 c0       	rjmp	.+136    	; 0x1008 <TIM_GetStatus+0x114>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
     f80:	98 b7       	in	r25, 0x38	; 56
     f82:	89 2f       	mov	r24, r25
     f84:	80 71       	andi	r24, 0x10	; 16
     f86:	94 ff       	sbrs	r25, 4
     f88:	08 c0       	rjmp	.+16     	; 0xf9a <TIM_GetStatus+0xa6>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	fb 01       	movw	r30, r22
     f8e:	80 83       	st	Z, r24
               TIFR |= TIMER_1A_COMPARE_FLAG;
     f90:	88 b7       	in	r24, 0x38	; 56
     f92:	80 61       	ori	r24, 0x10	; 16
     f94:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	08 95       	ret
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
     f9a:	93 ff       	sbrs	r25, 3
     f9c:	37 c0       	rjmp	.+110    	; 0x100c <TIM_GetStatus+0x118>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	fb 01       	movw	r30, r22
     fa2:	90 83       	st	Z, r25
               TIFR |= TIMER_1B_COMPARE_FLAG;
     fa4:	98 b7       	in	r25, 0x38	; 56
     fa6:	98 60       	ori	r25, 0x08	; 8
     fa8:	98 bf       	out	0x38, r25	; 56
     faa:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	fc 01       	movw	r30, r24
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	8e 0f       	add	r24, r30
     fb6:	9f 1f       	adc	r25, r31
     fb8:	fc 01       	movw	r30, r24
     fba:	e5 59       	subi	r30, 0x95	; 149
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	80 81       	ld	r24, Z
     fc0:	81 11       	cpse	r24, r1
     fc2:	09 c0       	rjmp	.+18     	; 0xfd6 <TIM_GetStatus+0xe2>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
     fc4:	08 b6       	in	r0, 0x38	; 56
     fc6:	06 fe       	sbrs	r0, 6
     fc8:	23 c0       	rjmp	.+70     	; 0x1010 <TIM_GetStatus+0x11c>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
     fca:	fb 01       	movw	r30, r22
     fcc:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
     fce:	98 b7       	in	r25, 0x38	; 56
     fd0:	90 64       	ori	r25, 0x40	; 64
     fd2:	98 bf       	out	0x38, r25	; 56
     fd4:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
     fd6:	88 30       	cpi	r24, 0x08	; 8
     fd8:	e9 f4       	brne	.+58     	; 0x1014 <TIM_GetStatus+0x120>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
     fda:	08 b6       	in	r0, 0x38	; 56
     fdc:	07 fe       	sbrs	r0, 7
     fde:	1c c0       	rjmp	.+56     	; 0x1018 <TIM_GetStatus+0x124>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	fb 01       	movw	r30, r22
     fe4:	80 83       	st	Z, r24
               TIFR |= TIMER_2_COMPARE_FLAG;
     fe6:	88 b7       	in	r24, 0x38	; 56
     fe8:	80 68       	ori	r24, 0x80	; 128
     fea:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	08 95       	ret
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
     ff4:	8e ef       	ldi	r24, 0xFE	; 254
     ff6:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
     ff8:	8d ef       	ldi	r24, 0xFD	; 253
     ffa:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1000:	8d ef       	ldi	r24, 0xFD	; 253
    1002:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1004:	8d ef       	ldi	r24, 0xFD	; 253
    1006:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    100c:	8d ef       	ldi	r24, 0xFD	; 253
    100e:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1010:	8d ef       	ldi	r24, 0xFD	; 253
    1012:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1018:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
}
    101a:	08 95       	ret

0000101c <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    101c:	8f 92       	push	r8
    101e:	9f 92       	push	r9
    1020:	af 92       	push	r10
    1022:	bf 92       	push	r11
    1024:	cf 92       	push	r12
    1026:	df 92       	push	r13
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	00 d0       	rcall	.+0      	; 0x1034 <TIM_DelayUs+0x18>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <TIM_DelayUs+0x1a>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	18 2f       	mov	r17, r24
    103c:	6a 01       	movw	r12, r20
    103e:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1040:	83 30       	cpi	r24, 0x03	; 3
    1042:	08 f0       	brcs	.+2      	; 0x1046 <TIM_DelayUs+0x2a>
    1044:	54 c0       	rjmp	.+168    	; 0x10ee <TIM_DelayUs+0xd2>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    1046:	21 15       	cp	r18, r1
    1048:	31 05       	cpc	r19, r1
    104a:	09 f4       	brne	.+2      	; 0x104e <TIM_DelayUs+0x32>
    104c:	52 c0       	rjmp	.+164    	; 0x10f2 <TIM_DelayUs+0xd6>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    104e:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <gptr_CallerFunc+0x1>
    1052:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <gptr_CallerFunc>
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    1056:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <gEnu_State>
    105a:	81 11       	cpse	r24, r1
    105c:	4c c0       	rjmp	.+152    	; 0x10f6 <TIM_DelayUs+0xda>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    105e:	be 01       	movw	r22, r28
    1060:	6f 5f       	subi	r22, 0xFF	; 255
    1062:	7f 4f       	sbci	r23, 0xFF	; 255
    1064:	81 2f       	mov	r24, r17
    1066:	0e 94 4a 06 	call	0xc94	; 0xc94 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    106a:	8c 3f       	cpi	r24, 0xFC	; 252
    106c:	f1 f1       	breq	.+124    	; 0x10ea <TIM_DelayUs+0xce>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    106e:	89 80       	ldd	r8, Y+1	; 0x01
    1070:	9a 80       	ldd	r9, Y+2	; 0x02
    1072:	ab 80       	ldd	r10, Y+3	; 0x03
    1074:	bc 80       	ldd	r11, Y+4	; 0x04
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	a9 01       	movw	r20, r18
    107c:	c5 01       	movw	r24, r10
    107e:	b4 01       	movw	r22, r8
    1080:	0e 94 9b 09 	call	0x1336	; 0x1336 <__cmpsf2>
    1084:	88 23       	and	r24, r24
    1086:	61 f0       	breq	.+24     	; 0x10a0 <TIM_DelayUs+0x84>
      {
         TIM_Delay /= f32_FreqRatio;
    1088:	c7 01       	movw	r24, r14
    108a:	b6 01       	movw	r22, r12
    108c:	0e 94 41 0a 	call	0x1482	; 0x1482 <__floatunsisf>
    1090:	a5 01       	movw	r20, r10
    1092:	94 01       	movw	r18, r8
    1094:	0e 94 a0 09 	call	0x1340	; 0x1340 <__divsf3>
    1098:	0e 94 12 0a 	call	0x1424	; 0x1424 <__fixunssfsi>
    109c:	6b 01       	movw	r12, r22
    109e:	7c 01       	movw	r14, r24
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    10a0:	bb 27       	eor	r27, r27
    10a2:	af 2d       	mov	r26, r15
    10a4:	9e 2d       	mov	r25, r14
    10a6:	8d 2d       	mov	r24, r13
    10a8:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <gu32_Overflows>
    10ac:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <gu32_Overflows+0x1>
    10b0:	a0 93 af 00 	sts	0x00AF, r26	; 0x8000af <gu32_Overflows+0x2>
    10b4:	b0 93 b0 00 	sts	0x00B0, r27	; 0x8000b0 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    10b8:	c0 92 ab 00 	sts	0x00AB, r12	; 0x8000ab <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    10bc:	89 2b       	or	r24, r25
    10be:	8a 2b       	or	r24, r26
    10c0:	8b 2b       	or	r24, r27
    10c2:	49 f4       	brne	.+18     	; 0x10d6 <TIM_DelayUs+0xba>
      {
         gu8_OverflowsComplete = HIGH;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    10ca:	6c 2d       	mov	r22, r12
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	81 2f       	mov	r24, r17
    10d0:	0e 94 53 07 	call	0xea6	; 0xea6 <TIM_Start>
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <TIM_DelayUs+0xc4>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    10d6:	6f ef       	ldi	r22, 0xFF	; 255
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	81 2f       	mov	r24, r17
    10dc:	0e 94 53 07 	call	0xea6	; 0xea6 <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <gEnu_State>
      return TIMER_E_PENDING;
    10e6:	8d ef       	ldi	r24, 0xFD	; 253
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <TIM_DelayUs+0xdc>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    10ea:	8c ef       	ldi	r24, 0xFC	; 252
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <TIM_DelayUs+0xdc>
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    10ee:	8e ef       	ldi	r24, 0xFE	; 254
    10f0:	03 c0       	rjmp	.+6      	; 0x10f8 <TIM_DelayUs+0xdc>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <TIM_DelayUs+0xdc>
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
    10f6:	81 e0       	ldi	r24, 0x01	; 1
}
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	ff 90       	pop	r15
    1108:	ef 90       	pop	r14
    110a:	df 90       	pop	r13
    110c:	cf 90       	pop	r12
    110e:	bf 90       	pop	r11
    1110:	af 90       	pop	r10
    1112:	9f 90       	pop	r9
    1114:	8f 90       	pop	r8
    1116:	08 95       	ret

00001118 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1118:	8f 92       	push	r8
    111a:	9f 92       	push	r9
    111c:	af 92       	push	r10
    111e:	bf 92       	push	r11
    1120:	df 92       	push	r13
    1122:	ef 92       	push	r14
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	00 d0       	rcall	.+0      	; 0x1130 <TIM_DelayMs+0x18>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <TIM_DelayMs+0x1a>
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	18 2f       	mov	r17, r24
    1138:	04 2f       	mov	r16, r20
    113a:	d5 2e       	mov	r13, r21
    113c:	e6 2e       	mov	r14, r22
    113e:	f7 2e       	mov	r15, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1140:	83 30       	cpi	r24, 0x03	; 3
    1142:	08 f0       	brcs	.+2      	; 0x1146 <TIM_DelayMs+0x2e>
    1144:	65 c0       	rjmp	.+202    	; 0x1210 <TIM_DelayMs+0xf8>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    1146:	21 15       	cp	r18, r1
    1148:	31 05       	cpc	r19, r1
    114a:	09 f4       	brne	.+2      	; 0x114e <TIM_DelayMs+0x36>
    114c:	63 c0       	rjmp	.+198    	; 0x1214 <TIM_DelayMs+0xfc>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    114e:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <gptr_CallerFunc+0x1>
    1152:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <gptr_CallerFunc>
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    1156:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <gEnu_State>
    115a:	81 11       	cpse	r24, r1
    115c:	5d c0       	rjmp	.+186    	; 0x1218 <TIM_DelayMs+0x100>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    115e:	be 01       	movw	r22, r28
    1160:	6f 5f       	subi	r22, 0xFF	; 255
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	81 2f       	mov	r24, r17
    1166:	0e 94 4a 06 	call	0xc94	; 0xc94 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    116a:	8c 3f       	cpi	r24, 0xFC	; 252
    116c:	09 f4       	brne	.+2      	; 0x1170 <TIM_DelayMs+0x58>
    116e:	4e c0       	rjmp	.+156    	; 0x120c <TIM_DelayMs+0xf4>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    1170:	89 80       	ldd	r8, Y+1	; 0x01
    1172:	9a 80       	ldd	r9, Y+2	; 0x02
    1174:	ab 80       	ldd	r10, Y+3	; 0x03
    1176:	bc 80       	ldd	r11, Y+4	; 0x04
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	a9 01       	movw	r20, r18
    117e:	c5 01       	movw	r24, r10
    1180:	b4 01       	movw	r22, r8
    1182:	0e 94 9b 09 	call	0x1336	; 0x1336 <__cmpsf2>
    1186:	88 23       	and	r24, r24
    1188:	81 f0       	breq	.+32     	; 0x11aa <TIM_DelayMs+0x92>
      {
         TIM_Delay /= f32_FreqRatio;
    118a:	60 2f       	mov	r22, r16
    118c:	7d 2d       	mov	r23, r13
    118e:	8e 2d       	mov	r24, r14
    1190:	9f 2d       	mov	r25, r15
    1192:	0e 94 41 0a 	call	0x1482	; 0x1482 <__floatunsisf>
    1196:	a5 01       	movw	r20, r10
    1198:	94 01       	movw	r18, r8
    119a:	0e 94 a0 09 	call	0x1340	; 0x1340 <__divsf3>
    119e:	0e 94 12 0a 	call	0x1424	; 0x1424 <__fixunssfsi>
    11a2:	06 2f       	mov	r16, r22
    11a4:	d7 2e       	mov	r13, r23
    11a6:	e8 2e       	mov	r14, r24
    11a8:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    11aa:	a8 ee       	ldi	r26, 0xE8	; 232
    11ac:	b3 e0       	ldi	r27, 0x03	; 3
    11ae:	20 2f       	mov	r18, r16
    11b0:	3d 2d       	mov	r19, r13
    11b2:	4e 2d       	mov	r20, r14
    11b4:	5f 2d       	mov	r21, r15
    11b6:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__muluhisi3>
    11ba:	bb 27       	eor	r27, r27
    11bc:	a9 2f       	mov	r26, r25
    11be:	98 2f       	mov	r25, r24
    11c0:	87 2f       	mov	r24, r23
    11c2:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <gu32_Overflows>
    11c6:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <gu32_Overflows+0x1>
    11ca:	a0 93 af 00 	sts	0x00AF, r26	; 0x8000af <gu32_Overflows+0x2>
    11ce:	b0 93 b0 00 	sts	0x00B0, r27	; 0x8000b0 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    11d2:	28 ee       	ldi	r18, 0xE8	; 232
    11d4:	02 9f       	mul	r16, r18
    11d6:	00 2d       	mov	r16, r0
    11d8:	11 24       	eor	r1, r1
    11da:	00 93 ab 00 	sts	0x00AB, r16	; 0x8000ab <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    11de:	89 2b       	or	r24, r25
    11e0:	8a 2b       	or	r24, r26
    11e2:	8b 2b       	or	r24, r27
    11e4:	49 f4       	brne	.+18     	; 0x11f8 <TIM_DelayMs+0xe0>
      {
         gu8_OverflowsComplete = HIGH;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    11ec:	60 2f       	mov	r22, r16
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	81 2f       	mov	r24, r17
    11f2:	0e 94 53 07 	call	0xea6	; 0xea6 <TIM_Start>
    11f6:	05 c0       	rjmp	.+10     	; 0x1202 <TIM_DelayMs+0xea>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    11f8:	6f ef       	ldi	r22, 0xFF	; 255
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	81 2f       	mov	r24, r17
    11fe:	0e 94 53 07 	call	0xea6	; 0xea6 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <gEnu_State>
      return TIMER_E_PENDING;
    1208:	8d ef       	ldi	r24, 0xFD	; 253
    120a:	07 c0       	rjmp	.+14     	; 0x121a <TIM_DelayMs+0x102>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    120c:	8c ef       	ldi	r24, 0xFC	; 252
    120e:	05 c0       	rjmp	.+10     	; 0x121a <TIM_DelayMs+0x102>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    1210:	8e ef       	ldi	r24, 0xFE	; 254
    1212:	03 c0       	rjmp	.+6      	; 0x121a <TIM_DelayMs+0x102>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	01 c0       	rjmp	.+2      	; 0x121a <TIM_DelayMs+0x102>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
    1218:	81 e0       	ldi	r24, 0x01	; 1
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	ff 90       	pop	r15
    122c:	ef 90       	pop	r14
    122e:	df 90       	pop	r13
    1230:	bf 90       	pop	r11
    1232:	af 90       	pop	r10
    1234:	9f 90       	pop	r9
    1236:	8f 90       	pop	r8
    1238:	08 95       	ret

0000123a <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	1f 92       	push	r1
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
   if(DelayReady == gEnu_State)
    1246:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <gEnu_State>
    124a:	99 23       	and	r25, r25
    124c:	09 f4       	brne	.+2      	; 0x1250 <TIM_DelayStatus+0x16>
    124e:	4a c0       	rjmp	.+148    	; 0x12e4 <TIM_DelayStatus+0xaa>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
    1250:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <gptr_CallerFunc>
    1254:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <gptr_CallerFunc+0x1>
    1258:	26 17       	cp	r18, r22
    125a:	37 07       	cpc	r19, r23
    125c:	09 f0       	breq	.+2      	; 0x1260 <TIM_DelayStatus+0x26>
    125e:	44 c0       	rjmp	.+136    	; 0x12e8 <TIM_DelayStatus+0xae>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    1260:	91 30       	cpi	r25, 0x01	; 1
    1262:	09 f0       	breq	.+2      	; 0x1266 <TIM_DelayStatus+0x2c>
    1264:	43 c0       	rjmp	.+134    	; 0x12ec <TIM_DelayStatus+0xb2>
    1266:	18 2f       	mov	r17, r24
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    1268:	be 01       	movw	r22, r28
    126a:	6f 5f       	subi	r22, 0xFF	; 255
    126c:	7f 4f       	sbci	r23, 0xFF	; 255
    126e:	0e 94 7a 07 	call	0xef4	; 0xef4 <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    1272:	81 11       	cpse	r24, r1
    1274:	35 c0       	rjmp	.+106    	; 0x12e0 <TIM_DelayStatus+0xa6>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    1276:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <gu8_OverflowsComplete>
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	41 f4       	brne	.+16     	; 0x128e <TIM_DelayStatus+0x54>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    127e:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <gEnu_State>
            gu8_OverflowsComplete = LOW;
    1282:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <gu8_OverflowsComplete>
            gu8_Remindar = 0;
    1286:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <gu8_Remindar>
            /* return success message. */
            return ERROR_OK;
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	30 c0       	rjmp	.+96     	; 0x12ee <TIM_DelayStatus+0xb4>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    128e:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <gu32_Overflows>
    1292:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <gu32_Overflows+0x1>
    1296:	a0 91 af 00 	lds	r26, 0x00AF	; 0x8000af <gu32_Overflows+0x2>
    129a:	b0 91 b0 00 	lds	r27, 0x00B0	; 0x8000b0 <gu32_Overflows+0x3>
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	a1 09       	sbc	r26, r1
    12a2:	b1 09       	sbc	r27, r1
    12a4:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <gu32_Overflows>
    12a8:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <gu32_Overflows+0x1>
    12ac:	a0 93 af 00 	sts	0x00AF, r26	; 0x8000af <gu32_Overflows+0x2>
    12b0:	b0 93 b0 00 	sts	0x00B0, r27	; 0x8000b0 <gu32_Overflows+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    12b4:	89 2b       	or	r24, r25
    12b6:	8a 2b       	or	r24, r26
    12b8:	8b 2b       	or	r24, r27
    12ba:	59 f4       	brne	.+22     	; 0x12d2 <TIM_DelayStatus+0x98>
         {
            gu8_OverflowsComplete = HIGH;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <gu8_OverflowsComplete>
            TIM_Start(TIM_channel, gu8_Remindar);
    12c2:	60 91 ab 00 	lds	r22, 0x00AB	; 0x8000ab <gu8_Remindar>
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	81 2f       	mov	r24, r17
    12ca:	0e 94 53 07 	call	0xea6	; 0xea6 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
    12ce:	8d ef       	ldi	r24, 0xFD	; 253
    12d0:	0e c0       	rjmp	.+28     	; 0x12ee <TIM_DelayStatus+0xb4>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    12d2:	6f ef       	ldi	r22, 0xFF	; 255
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	81 2f       	mov	r24, r17
    12d8:	0e 94 53 07 	call	0xea6	; 0xea6 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    12dc:	8d ef       	ldi	r24, 0xFD	; 253
    12de:	07 c0       	rjmp	.+14     	; 0x12ee <TIM_DelayStatus+0xb4>
   }
   else
   {
      return ERROR_NOK;
   }
   return 0;
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <TIM_DelayStatus+0xb4>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
    12e4:	8b ef       	ldi	r24, 0xFB	; 251
    12e6:	03 c0       	rjmp	.+6      	; 0x12ee <TIM_DelayStatus+0xb4>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <TIM_DelayStatus+0xb4>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
   }
   return 0;
    12ee:	0f 90       	pop	r0
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	08 95       	ret

000012f8 <main>:
 * Author : vetmo
 */ 
#include "LCD.h"

int main(void)
{
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <main+0x6>
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
	while(LCD_Init()!= OperationSuccess);
    1302:	0e 94 56 04 	call	0x8ac	; 0x8ac <LCD_Init>
    1306:	81 11       	cpse	r24, r1
    1308:	fc cf       	rjmp	.-8      	; 0x1302 <main+0xa>
	while(LCD_SendData('A')!=OperationSuccess);
    130a:	81 e4       	ldi	r24, 0x41	; 65
    130c:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_SendData>
    1310:	81 11       	cpse	r24, r1
    1312:	fb cf       	rjmp	.-10     	; 0x130a <main+0x12>
    while (1) 
    {
		LCD_SendCommand(0x1C);
    1314:	8c e1       	ldi	r24, 0x1C	; 28
    1316:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		for(volatile int i = 0; i<5000;i++);
    131a:	1a 82       	std	Y+2, r1	; 0x02
    131c:	19 82       	std	Y+1, r1	; 0x01
    131e:	05 c0       	rjmp	.+10     	; 0x132a <main+0x32>
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	01 96       	adiw	r24, 0x01	; 1
    1326:	9a 83       	std	Y+2, r25	; 0x02
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	9a 81       	ldd	r25, Y+2	; 0x02
    132e:	88 38       	cpi	r24, 0x88	; 136
    1330:	93 41       	sbci	r25, 0x13	; 19
    1332:	b4 f3       	brlt	.-20     	; 0x1320 <main+0x28>
    1334:	ef cf       	rjmp	.-34     	; 0x1314 <main+0x1c>

00001336 <__cmpsf2>:
    1336:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__fp_cmp>
    133a:	08 f4       	brcc	.+2      	; 0x133e <__cmpsf2+0x8>
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	08 95       	ret

00001340 <__divsf3>:
    1340:	0e 94 b4 09 	call	0x1368	; 0x1368 <__divsf3x>
    1344:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__fp_round>
    1348:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__fp_pscB>
    134c:	58 f0       	brcs	.+22     	; 0x1364 <__divsf3+0x24>
    134e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fp_pscA>
    1352:	40 f0       	brcs	.+16     	; 0x1364 <__divsf3+0x24>
    1354:	29 f4       	brne	.+10     	; 0x1360 <__divsf3+0x20>
    1356:	5f 3f       	cpi	r21, 0xFF	; 255
    1358:	29 f0       	breq	.+10     	; 0x1364 <__divsf3+0x24>
    135a:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__fp_inf>
    135e:	51 11       	cpse	r21, r1
    1360:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__fp_szero>
    1364:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__fp_nan>

00001368 <__divsf3x>:
    1368:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__fp_split3>
    136c:	68 f3       	brcs	.-38     	; 0x1348 <__divsf3+0x8>

0000136e <__divsf3_pse>:
    136e:	99 23       	and	r25, r25
    1370:	b1 f3       	breq	.-20     	; 0x135e <__divsf3+0x1e>
    1372:	55 23       	and	r21, r21
    1374:	91 f3       	breq	.-28     	; 0x135a <__divsf3+0x1a>
    1376:	95 1b       	sub	r25, r21
    1378:	55 0b       	sbc	r21, r21
    137a:	bb 27       	eor	r27, r27
    137c:	aa 27       	eor	r26, r26
    137e:	62 17       	cp	r22, r18
    1380:	73 07       	cpc	r23, r19
    1382:	84 07       	cpc	r24, r20
    1384:	38 f0       	brcs	.+14     	; 0x1394 <__divsf3_pse+0x26>
    1386:	9f 5f       	subi	r25, 0xFF	; 255
    1388:	5f 4f       	sbci	r21, 0xFF	; 255
    138a:	22 0f       	add	r18, r18
    138c:	33 1f       	adc	r19, r19
    138e:	44 1f       	adc	r20, r20
    1390:	aa 1f       	adc	r26, r26
    1392:	a9 f3       	breq	.-22     	; 0x137e <__divsf3_pse+0x10>
    1394:	35 d0       	rcall	.+106    	; 0x1400 <__divsf3_pse+0x92>
    1396:	0e 2e       	mov	r0, r30
    1398:	3a f0       	brmi	.+14     	; 0x13a8 <__divsf3_pse+0x3a>
    139a:	e0 e8       	ldi	r30, 0x80	; 128
    139c:	32 d0       	rcall	.+100    	; 0x1402 <__divsf3_pse+0x94>
    139e:	91 50       	subi	r25, 0x01	; 1
    13a0:	50 40       	sbci	r21, 0x00	; 0
    13a2:	e6 95       	lsr	r30
    13a4:	00 1c       	adc	r0, r0
    13a6:	ca f7       	brpl	.-14     	; 0x139a <__divsf3_pse+0x2c>
    13a8:	2b d0       	rcall	.+86     	; 0x1400 <__divsf3_pse+0x92>
    13aa:	fe 2f       	mov	r31, r30
    13ac:	29 d0       	rcall	.+82     	; 0x1400 <__divsf3_pse+0x92>
    13ae:	66 0f       	add	r22, r22
    13b0:	77 1f       	adc	r23, r23
    13b2:	88 1f       	adc	r24, r24
    13b4:	bb 1f       	adc	r27, r27
    13b6:	26 17       	cp	r18, r22
    13b8:	37 07       	cpc	r19, r23
    13ba:	48 07       	cpc	r20, r24
    13bc:	ab 07       	cpc	r26, r27
    13be:	b0 e8       	ldi	r27, 0x80	; 128
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <__divsf3_pse+0x56>
    13c2:	bb 0b       	sbc	r27, r27
    13c4:	80 2d       	mov	r24, r0
    13c6:	bf 01       	movw	r22, r30
    13c8:	ff 27       	eor	r31, r31
    13ca:	93 58       	subi	r25, 0x83	; 131
    13cc:	5f 4f       	sbci	r21, 0xFF	; 255
    13ce:	3a f0       	brmi	.+14     	; 0x13de <__divsf3_pse+0x70>
    13d0:	9e 3f       	cpi	r25, 0xFE	; 254
    13d2:	51 05       	cpc	r21, r1
    13d4:	78 f0       	brcs	.+30     	; 0x13f4 <__divsf3_pse+0x86>
    13d6:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__fp_inf>
    13da:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__fp_szero>
    13de:	5f 3f       	cpi	r21, 0xFF	; 255
    13e0:	e4 f3       	brlt	.-8      	; 0x13da <__divsf3_pse+0x6c>
    13e2:	98 3e       	cpi	r25, 0xE8	; 232
    13e4:	d4 f3       	brlt	.-12     	; 0x13da <__divsf3_pse+0x6c>
    13e6:	86 95       	lsr	r24
    13e8:	77 95       	ror	r23
    13ea:	67 95       	ror	r22
    13ec:	b7 95       	ror	r27
    13ee:	f7 95       	ror	r31
    13f0:	9f 5f       	subi	r25, 0xFF	; 255
    13f2:	c9 f7       	brne	.-14     	; 0x13e6 <__divsf3_pse+0x78>
    13f4:	88 0f       	add	r24, r24
    13f6:	91 1d       	adc	r25, r1
    13f8:	96 95       	lsr	r25
    13fa:	87 95       	ror	r24
    13fc:	97 f9       	bld	r25, 7
    13fe:	08 95       	ret
    1400:	e1 e0       	ldi	r30, 0x01	; 1
    1402:	66 0f       	add	r22, r22
    1404:	77 1f       	adc	r23, r23
    1406:	88 1f       	adc	r24, r24
    1408:	bb 1f       	adc	r27, r27
    140a:	62 17       	cp	r22, r18
    140c:	73 07       	cpc	r23, r19
    140e:	84 07       	cpc	r24, r20
    1410:	ba 07       	cpc	r27, r26
    1412:	20 f0       	brcs	.+8      	; 0x141c <__divsf3_pse+0xae>
    1414:	62 1b       	sub	r22, r18
    1416:	73 0b       	sbc	r23, r19
    1418:	84 0b       	sbc	r24, r20
    141a:	ba 0b       	sbc	r27, r26
    141c:	ee 1f       	adc	r30, r30
    141e:	88 f7       	brcc	.-30     	; 0x1402 <__divsf3_pse+0x94>
    1420:	e0 95       	com	r30
    1422:	08 95       	ret

00001424 <__fixunssfsi>:
    1424:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__fp_splitA>
    1428:	88 f0       	brcs	.+34     	; 0x144c <__fixunssfsi+0x28>
    142a:	9f 57       	subi	r25, 0x7F	; 127
    142c:	98 f0       	brcs	.+38     	; 0x1454 <__fixunssfsi+0x30>
    142e:	b9 2f       	mov	r27, r25
    1430:	99 27       	eor	r25, r25
    1432:	b7 51       	subi	r27, 0x17	; 23
    1434:	b0 f0       	brcs	.+44     	; 0x1462 <__fixunssfsi+0x3e>
    1436:	e1 f0       	breq	.+56     	; 0x1470 <__fixunssfsi+0x4c>
    1438:	66 0f       	add	r22, r22
    143a:	77 1f       	adc	r23, r23
    143c:	88 1f       	adc	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	1a f0       	brmi	.+6      	; 0x1448 <__fixunssfsi+0x24>
    1442:	ba 95       	dec	r27
    1444:	c9 f7       	brne	.-14     	; 0x1438 <__fixunssfsi+0x14>
    1446:	14 c0       	rjmp	.+40     	; 0x1470 <__fixunssfsi+0x4c>
    1448:	b1 30       	cpi	r27, 0x01	; 1
    144a:	91 f0       	breq	.+36     	; 0x1470 <__fixunssfsi+0x4c>
    144c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__fp_zero>
    1450:	b1 e0       	ldi	r27, 0x01	; 1
    1452:	08 95       	ret
    1454:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__fp_zero>
    1458:	67 2f       	mov	r22, r23
    145a:	78 2f       	mov	r23, r24
    145c:	88 27       	eor	r24, r24
    145e:	b8 5f       	subi	r27, 0xF8	; 248
    1460:	39 f0       	breq	.+14     	; 0x1470 <__fixunssfsi+0x4c>
    1462:	b9 3f       	cpi	r27, 0xF9	; 249
    1464:	cc f3       	brlt	.-14     	; 0x1458 <__fixunssfsi+0x34>
    1466:	86 95       	lsr	r24
    1468:	77 95       	ror	r23
    146a:	67 95       	ror	r22
    146c:	b3 95       	inc	r27
    146e:	d9 f7       	brne	.-10     	; 0x1466 <__fixunssfsi+0x42>
    1470:	3e f4       	brtc	.+14     	; 0x1480 <__fixunssfsi+0x5c>
    1472:	90 95       	com	r25
    1474:	80 95       	com	r24
    1476:	70 95       	com	r23
    1478:	61 95       	neg	r22
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	8f 4f       	sbci	r24, 0xFF	; 255
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	08 95       	ret

00001482 <__floatunsisf>:
    1482:	e8 94       	clt
    1484:	09 c0       	rjmp	.+18     	; 0x1498 <__floatsisf+0x12>

00001486 <__floatsisf>:
    1486:	97 fb       	bst	r25, 7
    1488:	3e f4       	brtc	.+14     	; 0x1498 <__floatsisf+0x12>
    148a:	90 95       	com	r25
    148c:	80 95       	com	r24
    148e:	70 95       	com	r23
    1490:	61 95       	neg	r22
    1492:	7f 4f       	sbci	r23, 0xFF	; 255
    1494:	8f 4f       	sbci	r24, 0xFF	; 255
    1496:	9f 4f       	sbci	r25, 0xFF	; 255
    1498:	99 23       	and	r25, r25
    149a:	a9 f0       	breq	.+42     	; 0x14c6 <__floatsisf+0x40>
    149c:	f9 2f       	mov	r31, r25
    149e:	96 e9       	ldi	r25, 0x96	; 150
    14a0:	bb 27       	eor	r27, r27
    14a2:	93 95       	inc	r25
    14a4:	f6 95       	lsr	r31
    14a6:	87 95       	ror	r24
    14a8:	77 95       	ror	r23
    14aa:	67 95       	ror	r22
    14ac:	b7 95       	ror	r27
    14ae:	f1 11       	cpse	r31, r1
    14b0:	f8 cf       	rjmp	.-16     	; 0x14a2 <__floatsisf+0x1c>
    14b2:	fa f4       	brpl	.+62     	; 0x14f2 <__floatsisf+0x6c>
    14b4:	bb 0f       	add	r27, r27
    14b6:	11 f4       	brne	.+4      	; 0x14bc <__floatsisf+0x36>
    14b8:	60 ff       	sbrs	r22, 0
    14ba:	1b c0       	rjmp	.+54     	; 0x14f2 <__floatsisf+0x6c>
    14bc:	6f 5f       	subi	r22, 0xFF	; 255
    14be:	7f 4f       	sbci	r23, 0xFF	; 255
    14c0:	8f 4f       	sbci	r24, 0xFF	; 255
    14c2:	9f 4f       	sbci	r25, 0xFF	; 255
    14c4:	16 c0       	rjmp	.+44     	; 0x14f2 <__floatsisf+0x6c>
    14c6:	88 23       	and	r24, r24
    14c8:	11 f0       	breq	.+4      	; 0x14ce <__floatsisf+0x48>
    14ca:	96 e9       	ldi	r25, 0x96	; 150
    14cc:	11 c0       	rjmp	.+34     	; 0x14f0 <__floatsisf+0x6a>
    14ce:	77 23       	and	r23, r23
    14d0:	21 f0       	breq	.+8      	; 0x14da <__floatsisf+0x54>
    14d2:	9e e8       	ldi	r25, 0x8E	; 142
    14d4:	87 2f       	mov	r24, r23
    14d6:	76 2f       	mov	r23, r22
    14d8:	05 c0       	rjmp	.+10     	; 0x14e4 <__floatsisf+0x5e>
    14da:	66 23       	and	r22, r22
    14dc:	71 f0       	breq	.+28     	; 0x14fa <__floatsisf+0x74>
    14de:	96 e8       	ldi	r25, 0x86	; 134
    14e0:	86 2f       	mov	r24, r22
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	2a f0       	brmi	.+10     	; 0x14f2 <__floatsisf+0x6c>
    14e8:	9a 95       	dec	r25
    14ea:	66 0f       	add	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	88 1f       	adc	r24, r24
    14f0:	da f7       	brpl	.-10     	; 0x14e8 <__floatsisf+0x62>
    14f2:	88 0f       	add	r24, r24
    14f4:	96 95       	lsr	r25
    14f6:	87 95       	ror	r24
    14f8:	97 f9       	bld	r25, 7
    14fa:	08 95       	ret

000014fc <__fp_cmp>:
    14fc:	99 0f       	add	r25, r25
    14fe:	00 08       	sbc	r0, r0
    1500:	55 0f       	add	r21, r21
    1502:	aa 0b       	sbc	r26, r26
    1504:	e0 e8       	ldi	r30, 0x80	; 128
    1506:	fe ef       	ldi	r31, 0xFE	; 254
    1508:	16 16       	cp	r1, r22
    150a:	17 06       	cpc	r1, r23
    150c:	e8 07       	cpc	r30, r24
    150e:	f9 07       	cpc	r31, r25
    1510:	c0 f0       	brcs	.+48     	; 0x1542 <__fp_cmp+0x46>
    1512:	12 16       	cp	r1, r18
    1514:	13 06       	cpc	r1, r19
    1516:	e4 07       	cpc	r30, r20
    1518:	f5 07       	cpc	r31, r21
    151a:	98 f0       	brcs	.+38     	; 0x1542 <__fp_cmp+0x46>
    151c:	62 1b       	sub	r22, r18
    151e:	73 0b       	sbc	r23, r19
    1520:	84 0b       	sbc	r24, r20
    1522:	95 0b       	sbc	r25, r21
    1524:	39 f4       	brne	.+14     	; 0x1534 <__fp_cmp+0x38>
    1526:	0a 26       	eor	r0, r26
    1528:	61 f0       	breq	.+24     	; 0x1542 <__fp_cmp+0x46>
    152a:	23 2b       	or	r18, r19
    152c:	24 2b       	or	r18, r20
    152e:	25 2b       	or	r18, r21
    1530:	21 f4       	brne	.+8      	; 0x153a <__fp_cmp+0x3e>
    1532:	08 95       	ret
    1534:	0a 26       	eor	r0, r26
    1536:	09 f4       	brne	.+2      	; 0x153a <__fp_cmp+0x3e>
    1538:	a1 40       	sbci	r26, 0x01	; 1
    153a:	a6 95       	lsr	r26
    153c:	8f ef       	ldi	r24, 0xFF	; 255
    153e:	81 1d       	adc	r24, r1
    1540:	81 1d       	adc	r24, r1
    1542:	08 95       	ret

00001544 <__fp_inf>:
    1544:	97 f9       	bld	r25, 7
    1546:	9f 67       	ori	r25, 0x7F	; 127
    1548:	80 e8       	ldi	r24, 0x80	; 128
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	08 95       	ret

00001550 <__fp_nan>:
    1550:	9f ef       	ldi	r25, 0xFF	; 255
    1552:	80 ec       	ldi	r24, 0xC0	; 192
    1554:	08 95       	ret

00001556 <__fp_pscA>:
    1556:	00 24       	eor	r0, r0
    1558:	0a 94       	dec	r0
    155a:	16 16       	cp	r1, r22
    155c:	17 06       	cpc	r1, r23
    155e:	18 06       	cpc	r1, r24
    1560:	09 06       	cpc	r0, r25
    1562:	08 95       	ret

00001564 <__fp_pscB>:
    1564:	00 24       	eor	r0, r0
    1566:	0a 94       	dec	r0
    1568:	12 16       	cp	r1, r18
    156a:	13 06       	cpc	r1, r19
    156c:	14 06       	cpc	r1, r20
    156e:	05 06       	cpc	r0, r21
    1570:	08 95       	ret

00001572 <__fp_round>:
    1572:	09 2e       	mov	r0, r25
    1574:	03 94       	inc	r0
    1576:	00 0c       	add	r0, r0
    1578:	11 f4       	brne	.+4      	; 0x157e <__fp_round+0xc>
    157a:	88 23       	and	r24, r24
    157c:	52 f0       	brmi	.+20     	; 0x1592 <__fp_round+0x20>
    157e:	bb 0f       	add	r27, r27
    1580:	40 f4       	brcc	.+16     	; 0x1592 <__fp_round+0x20>
    1582:	bf 2b       	or	r27, r31
    1584:	11 f4       	brne	.+4      	; 0x158a <__fp_round+0x18>
    1586:	60 ff       	sbrs	r22, 0
    1588:	04 c0       	rjmp	.+8      	; 0x1592 <__fp_round+0x20>
    158a:	6f 5f       	subi	r22, 0xFF	; 255
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	8f 4f       	sbci	r24, 0xFF	; 255
    1590:	9f 4f       	sbci	r25, 0xFF	; 255
    1592:	08 95       	ret

00001594 <__fp_split3>:
    1594:	57 fd       	sbrc	r21, 7
    1596:	90 58       	subi	r25, 0x80	; 128
    1598:	44 0f       	add	r20, r20
    159a:	55 1f       	adc	r21, r21
    159c:	59 f0       	breq	.+22     	; 0x15b4 <__fp_splitA+0x10>
    159e:	5f 3f       	cpi	r21, 0xFF	; 255
    15a0:	71 f0       	breq	.+28     	; 0x15be <__fp_splitA+0x1a>
    15a2:	47 95       	ror	r20

000015a4 <__fp_splitA>:
    15a4:	88 0f       	add	r24, r24
    15a6:	97 fb       	bst	r25, 7
    15a8:	99 1f       	adc	r25, r25
    15aa:	61 f0       	breq	.+24     	; 0x15c4 <__fp_splitA+0x20>
    15ac:	9f 3f       	cpi	r25, 0xFF	; 255
    15ae:	79 f0       	breq	.+30     	; 0x15ce <__fp_splitA+0x2a>
    15b0:	87 95       	ror	r24
    15b2:	08 95       	ret
    15b4:	12 16       	cp	r1, r18
    15b6:	13 06       	cpc	r1, r19
    15b8:	14 06       	cpc	r1, r20
    15ba:	55 1f       	adc	r21, r21
    15bc:	f2 cf       	rjmp	.-28     	; 0x15a2 <__fp_split3+0xe>
    15be:	46 95       	lsr	r20
    15c0:	f1 df       	rcall	.-30     	; 0x15a4 <__fp_splitA>
    15c2:	08 c0       	rjmp	.+16     	; 0x15d4 <__fp_splitA+0x30>
    15c4:	16 16       	cp	r1, r22
    15c6:	17 06       	cpc	r1, r23
    15c8:	18 06       	cpc	r1, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	f1 cf       	rjmp	.-30     	; 0x15b0 <__fp_splitA+0xc>
    15ce:	86 95       	lsr	r24
    15d0:	71 05       	cpc	r23, r1
    15d2:	61 05       	cpc	r22, r1
    15d4:	08 94       	sec
    15d6:	08 95       	ret

000015d8 <__fp_zero>:
    15d8:	e8 94       	clt

000015da <__fp_szero>:
    15da:	bb 27       	eor	r27, r27
    15dc:	66 27       	eor	r22, r22
    15de:	77 27       	eor	r23, r23
    15e0:	cb 01       	movw	r24, r22
    15e2:	97 f9       	bld	r25, 7
    15e4:	08 95       	ret

000015e6 <__tablejump2__>:
    15e6:	ee 0f       	add	r30, r30
    15e8:	ff 1f       	adc	r31, r31
    15ea:	05 90       	lpm	r0, Z+
    15ec:	f4 91       	lpm	r31, Z
    15ee:	e0 2d       	mov	r30, r0
    15f0:	09 94       	ijmp

000015f2 <__muluhisi3>:
    15f2:	0e 94 04 0b 	call	0x1608	; 0x1608 <__umulhisi3>
    15f6:	a5 9f       	mul	r26, r21
    15f8:	90 0d       	add	r25, r0
    15fa:	b4 9f       	mul	r27, r20
    15fc:	90 0d       	add	r25, r0
    15fe:	a4 9f       	mul	r26, r20
    1600:	80 0d       	add	r24, r0
    1602:	91 1d       	adc	r25, r1
    1604:	11 24       	eor	r1, r1
    1606:	08 95       	ret

00001608 <__umulhisi3>:
    1608:	a2 9f       	mul	r26, r18
    160a:	b0 01       	movw	r22, r0
    160c:	b3 9f       	mul	r27, r19
    160e:	c0 01       	movw	r24, r0
    1610:	a3 9f       	mul	r26, r19
    1612:	70 0d       	add	r23, r0
    1614:	81 1d       	adc	r24, r1
    1616:	11 24       	eor	r1, r1
    1618:	91 1d       	adc	r25, r1
    161a:	b2 9f       	mul	r27, r18
    161c:	70 0d       	add	r23, r0
    161e:	81 1d       	adc	r24, r1
    1620:	11 24       	eor	r1, r1
    1622:	91 1d       	adc	r25, r1
    1624:	08 95       	ret

00001626 <_exit>:
    1626:	f8 94       	cli

00001628 <__stop_program>:
    1628:	ff cf       	rjmp	.-2      	; 0x1628 <__stop_program>
