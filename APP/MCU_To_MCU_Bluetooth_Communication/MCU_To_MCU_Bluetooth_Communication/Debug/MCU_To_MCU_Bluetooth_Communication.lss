
MCU_To_MCU_Bluetooth_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  000007b0  00000844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800160  00800160  00000944  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002747  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000acb  00000000  00000000  00003327  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b04  00000000  00000000  00003df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000738  00000000  00000000  000058f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001044  00000000  00000000  00006030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002954  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  000099c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cf 03 	call	0x79e	; 0x79e <main>
  8a:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	0f 92       	push	r0
  9a:	1f 92       	push	r1
  9c:	11 24       	eor	r1, r1
  9e:	2f 92       	push	r2
  a0:	3f 92       	push	r3
  a2:	4f 92       	push	r4
  a4:	5f 92       	push	r5
  a6:	6f 92       	push	r6
  a8:	7f 92       	push	r7
  aa:	8f 92       	push	r8
  ac:	9f 92       	push	r9
  ae:	af 92       	push	r10
  b0:	bf 92       	push	r11
  b2:	cf 92       	push	r12
  b4:	df 92       	push	r13
  b6:	ef 92       	push	r14
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
  da:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <pxCurrentTCB>
  de:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <pxCurrentTCB+0x1>
  e2:	0d b6       	in	r0, 0x3d	; 61
  e4:	0d 92       	st	X+, r0
  e6:	0e b6       	in	r0, 0x3e	; 62
  e8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
  ea:	0e 94 c4 00 	call	0x188	; 0x188 <xTaskIncrementTick>
  ee:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
  f0:	0e 94 de 01 	call	0x3bc	; 0x3bc <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
  f4:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <pxCurrentTCB>
  f8:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <pxCurrentTCB+0x1>
  fc:	cd 91       	ld	r28, X+
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	dd 91       	ld	r29, X+
 102:	de bf       	out	0x3e, r29	; 62
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	bf 91       	pop	r27
 10e:	af 91       	pop	r26
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	7f 91       	pop	r23
 116:	6f 91       	pop	r22
 118:	5f 91       	pop	r21
 11a:	4f 91       	pop	r20
 11c:	3f 91       	pop	r19
 11e:	2f 91       	pop	r18
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	ff 90       	pop	r15
 126:	ef 90       	pop	r14
 128:	df 90       	pop	r13
 12a:	cf 90       	pop	r12
 12c:	bf 90       	pop	r11
 12e:	af 90       	pop	r10
 130:	9f 90       	pop	r9
 132:	8f 90       	pop	r8
 134:	7f 90       	pop	r7
 136:	6f 90       	pop	r6
 138:	5f 90       	pop	r5
 13a:	4f 90       	pop	r4
 13c:	3f 90       	pop	r3
 13e:	2f 90       	pop	r2
 140:	1f 90       	pop	r1
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0

	asm volatile ( "ret" );
 148:	08 95       	ret

0000014a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 14a:	0e 94 49 00 	call	0x92	; 0x92 <vPortYieldFromTick>
		asm volatile ( "reti" );
 14e:	18 95       	reti

00000150 <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
 150:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <pxDelayedTaskList>
 154:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
 158:	80 81       	ld	r24, Z
 15a:	81 11       	cpse	r24, r1
 15c:	07 c0       	rjmp	.+14     	; 0x16c <prvResetNextTaskUnblockTime+0x1c>
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	9f ef       	ldi	r25, 0xFF	; 255
 162:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <xNextTaskUnblockTime+0x1>
 166:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <xNextTaskUnblockTime>
 16a:	08 95       	ret
 16c:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <pxDelayedTaskList>
 170:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
 174:	05 80       	ldd	r0, Z+5	; 0x05
 176:	f6 81       	ldd	r31, Z+6	; 0x06
 178:	e0 2d       	mov	r30, r0
 17a:	80 81       	ld	r24, Z
 17c:	91 81       	ldd	r25, Z+1	; 0x01
 17e:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <xNextTaskUnblockTime+0x1>
 182:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <xNextTaskUnblockTime>
 186:	08 95       	ret

00000188 <xTaskIncrementTick>:
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
 194:	81 11       	cpse	r24, r1
 196:	01 c1       	rjmp	.+514    	; 0x39a <xTaskIncrementTick+0x212>
 198:	c0 91 68 01 	lds	r28, 0x0168	; 0x800168 <xTickCount>
 19c:	d0 91 69 01 	lds	r29, 0x0169	; 0x800169 <xTickCount+0x1>
 1a0:	8e 01       	movw	r16, r28
 1a2:	0f 5f       	subi	r16, 0xFF	; 255
 1a4:	1f 4f       	sbci	r17, 0xFF	; 255
 1a6:	10 93 69 01 	sts	0x0169, r17	; 0x800169 <xTickCount+0x1>
 1aa:	00 93 68 01 	sts	0x0168, r16	; 0x800168 <xTickCount>
 1ae:	01 15       	cp	r16, r1
 1b0:	11 05       	cpc	r17, r1
 1b2:	b9 f4       	brne	.+46     	; 0x1e2 <xTaskIncrementTick+0x5a>
 1b4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <pxDelayedTaskList>
 1b8:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
 1bc:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <pxOverflowDelayedTaskList>
 1c0:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <pxOverflowDelayedTaskList+0x1>
 1c4:	30 93 6d 01 	sts	0x016D, r19	; 0x80016d <pxDelayedTaskList+0x1>
 1c8:	20 93 6c 01 	sts	0x016C, r18	; 0x80016c <pxDelayedTaskList>
 1cc:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <pxOverflowDelayedTaskList+0x1>
 1d0:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <pxOverflowDelayedTaskList>
 1d4:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <xNumOfOverflows>
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <xNumOfOverflows>
 1de:	0e 94 a8 00 	call	0x150	; 0x150 <prvResetNextTaskUnblockTime>
 1e2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <xNextTaskUnblockTime>
 1e6:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <xNextTaskUnblockTime+0x1>
 1ea:	08 17       	cp	r16, r24
 1ec:	19 07       	cpc	r17, r25
 1ee:	20 f4       	brcc	.+8      	; 0x1f8 <xTaskIncrementTick+0x70>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	b8 c0       	rjmp	.+368    	; 0x364 <xTaskIncrementTick+0x1dc>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <xTaskIncrementTick+0x72>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <pxDelayedTaskList>
 1fe:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
 202:	90 81       	ld	r25, Z
 204:	91 11       	cpse	r25, r1
 206:	07 c0       	rjmp	.+14     	; 0x216 <xTaskIncrementTick+0x8e>
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	3f ef       	ldi	r19, 0xFF	; 255
 20c:	30 93 62 01 	sts	0x0162, r19	; 0x800162 <xNextTaskUnblockTime+0x1>
 210:	20 93 61 01 	sts	0x0161, r18	; 0x800161 <xNextTaskUnblockTime>
 214:	a7 c0       	rjmp	.+334    	; 0x364 <xTaskIncrementTick+0x1dc>
 216:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <pxDelayedTaskList>
 21a:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
 21e:	05 80       	ldd	r0, Z+5	; 0x05
 220:	f6 81       	ldd	r31, Z+6	; 0x06
 222:	e0 2d       	mov	r30, r0
 224:	06 80       	ldd	r0, Z+6	; 0x06
 226:	f7 81       	ldd	r31, Z+7	; 0x07
 228:	e0 2d       	mov	r30, r0
 22a:	22 81       	ldd	r18, Z+2	; 0x02
 22c:	33 81       	ldd	r19, Z+3	; 0x03
 22e:	02 17       	cp	r16, r18
 230:	13 07       	cpc	r17, r19
 232:	28 f4       	brcc	.+10     	; 0x23e <xTaskIncrementTick+0xb6>
 234:	30 93 62 01 	sts	0x0162, r19	; 0x800162 <xNextTaskUnblockTime+0x1>
 238:	20 93 61 01 	sts	0x0161, r18	; 0x800161 <xNextTaskUnblockTime>
 23c:	93 c0       	rjmp	.+294    	; 0x364 <xTaskIncrementTick+0x1dc>
 23e:	a2 85       	ldd	r26, Z+10	; 0x0a
 240:	b3 85       	ldd	r27, Z+11	; 0x0b
 242:	24 81       	ldd	r18, Z+4	; 0x04
 244:	35 81       	ldd	r19, Z+5	; 0x05
 246:	46 81       	ldd	r20, Z+6	; 0x06
 248:	57 81       	ldd	r21, Z+7	; 0x07
 24a:	e9 01       	movw	r28, r18
 24c:	5d 83       	std	Y+5, r21	; 0x05
 24e:	4c 83       	std	Y+4, r20	; 0x04
 250:	26 81       	ldd	r18, Z+6	; 0x06
 252:	37 81       	ldd	r19, Z+7	; 0x07
 254:	44 81       	ldd	r20, Z+4	; 0x04
 256:	55 81       	ldd	r21, Z+5	; 0x05
 258:	e9 01       	movw	r28, r18
 25a:	5b 83       	std	Y+3, r21	; 0x03
 25c:	4a 83       	std	Y+2, r20	; 0x02
 25e:	11 96       	adiw	r26, 0x01	; 1
 260:	2d 91       	ld	r18, X+
 262:	3c 91       	ld	r19, X
 264:	12 97       	sbiw	r26, 0x02	; 2
 266:	af 01       	movw	r20, r30
 268:	4e 5f       	subi	r20, 0xFE	; 254
 26a:	5f 4f       	sbci	r21, 0xFF	; 255
 26c:	24 17       	cp	r18, r20
 26e:	35 07       	cpc	r19, r21
 270:	31 f4       	brne	.+12     	; 0x27e <xTaskIncrementTick+0xf6>
 272:	26 81       	ldd	r18, Z+6	; 0x06
 274:	37 81       	ldd	r19, Z+7	; 0x07
 276:	12 96       	adiw	r26, 0x02	; 2
 278:	3c 93       	st	X, r19
 27a:	2e 93       	st	-X, r18
 27c:	11 97       	sbiw	r26, 0x01	; 1
 27e:	13 86       	std	Z+11, r1	; 0x0b
 280:	12 86       	std	Z+10, r1	; 0x0a
 282:	9c 91       	ld	r25, X
 284:	91 50       	subi	r25, 0x01	; 1
 286:	9c 93       	st	X, r25
 288:	a4 89       	ldd	r26, Z+20	; 0x14
 28a:	b5 89       	ldd	r27, Z+21	; 0x15
 28c:	10 97       	sbiw	r26, 0x00	; 0
 28e:	19 f1       	breq	.+70     	; 0x2d6 <xTaskIncrementTick+0x14e>
 290:	26 85       	ldd	r18, Z+14	; 0x0e
 292:	37 85       	ldd	r19, Z+15	; 0x0f
 294:	60 89       	ldd	r22, Z+16	; 0x10
 296:	71 89       	ldd	r23, Z+17	; 0x11
 298:	e9 01       	movw	r28, r18
 29a:	7d 83       	std	Y+5, r23	; 0x05
 29c:	6c 83       	std	Y+4, r22	; 0x04
 29e:	20 89       	ldd	r18, Z+16	; 0x10
 2a0:	31 89       	ldd	r19, Z+17	; 0x11
 2a2:	66 85       	ldd	r22, Z+14	; 0x0e
 2a4:	77 85       	ldd	r23, Z+15	; 0x0f
 2a6:	e9 01       	movw	r28, r18
 2a8:	7b 83       	std	Y+3, r23	; 0x03
 2aa:	6a 83       	std	Y+2, r22	; 0x02
 2ac:	11 96       	adiw	r26, 0x01	; 1
 2ae:	6d 91       	ld	r22, X+
 2b0:	7c 91       	ld	r23, X
 2b2:	12 97       	sbiw	r26, 0x02	; 2
 2b4:	9f 01       	movw	r18, r30
 2b6:	24 5f       	subi	r18, 0xF4	; 244
 2b8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ba:	62 17       	cp	r22, r18
 2bc:	73 07       	cpc	r23, r19
 2be:	31 f4       	brne	.+12     	; 0x2cc <xTaskIncrementTick+0x144>
 2c0:	20 89       	ldd	r18, Z+16	; 0x10
 2c2:	31 89       	ldd	r19, Z+17	; 0x11
 2c4:	12 96       	adiw	r26, 0x02	; 2
 2c6:	3c 93       	st	X, r19
 2c8:	2e 93       	st	-X, r18
 2ca:	11 97       	sbiw	r26, 0x01	; 1
 2cc:	15 8a       	std	Z+21, r1	; 0x15
 2ce:	14 8a       	std	Z+20, r1	; 0x14
 2d0:	9c 91       	ld	r25, X
 2d2:	91 50       	subi	r25, 0x01	; 1
 2d4:	9c 93       	st	X, r25
 2d6:	26 89       	ldd	r18, Z+22	; 0x16
 2d8:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <uxTopReadyPriority>
 2dc:	92 17       	cp	r25, r18
 2de:	10 f4       	brcc	.+4      	; 0x2e4 <xTaskIncrementTick+0x15c>
 2e0:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <uxTopReadyPriority>
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	d9 01       	movw	r26, r18
 2e8:	aa 0f       	add	r26, r26
 2ea:	bb 1f       	adc	r27, r27
 2ec:	aa 0f       	add	r26, r26
 2ee:	bb 1f       	adc	r27, r27
 2f0:	aa 0f       	add	r26, r26
 2f2:	bb 1f       	adc	r27, r27
 2f4:	2a 0f       	add	r18, r26
 2f6:	3b 1f       	adc	r19, r27
 2f8:	d9 01       	movw	r26, r18
 2fa:	a2 59       	subi	r26, 0x92	; 146
 2fc:	be 4f       	sbci	r27, 0xFE	; 254
 2fe:	11 96       	adiw	r26, 0x01	; 1
 300:	0d 90       	ld	r0, X+
 302:	bc 91       	ld	r27, X
 304:	a0 2d       	mov	r26, r0
 306:	b5 83       	std	Z+5, r27	; 0x05
 308:	a4 83       	std	Z+4, r26	; 0x04
 30a:	14 96       	adiw	r26, 0x04	; 4
 30c:	2d 91       	ld	r18, X+
 30e:	3c 91       	ld	r19, X
 310:	15 97       	sbiw	r26, 0x05	; 5
 312:	37 83       	std	Z+7, r19	; 0x07
 314:	26 83       	std	Z+6, r18	; 0x06
 316:	14 96       	adiw	r26, 0x04	; 4
 318:	2d 91       	ld	r18, X+
 31a:	3c 91       	ld	r19, X
 31c:	15 97       	sbiw	r26, 0x05	; 5
 31e:	e9 01       	movw	r28, r18
 320:	5b 83       	std	Y+3, r21	; 0x03
 322:	4a 83       	std	Y+2, r20	; 0x02
 324:	15 96       	adiw	r26, 0x05	; 5
 326:	5c 93       	st	X, r21
 328:	4e 93       	st	-X, r20
 32a:	14 97       	sbiw	r26, 0x04	; 4
 32c:	a6 89       	ldd	r26, Z+22	; 0x16
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	9d 01       	movw	r18, r26
 332:	22 0f       	add	r18, r18
 334:	33 1f       	adc	r19, r19
 336:	22 0f       	add	r18, r18
 338:	33 1f       	adc	r19, r19
 33a:	22 0f       	add	r18, r18
 33c:	33 1f       	adc	r19, r19
 33e:	a2 0f       	add	r26, r18
 340:	b3 1f       	adc	r27, r19
 342:	a2 59       	subi	r26, 0x92	; 146
 344:	be 4f       	sbci	r27, 0xFE	; 254
 346:	b3 87       	std	Z+11, r27	; 0x0b
 348:	a2 87       	std	Z+10, r26	; 0x0a
 34a:	9c 91       	ld	r25, X
 34c:	9f 5f       	subi	r25, 0xFF	; 255
 34e:	9c 93       	st	X, r25
 350:	26 89       	ldd	r18, Z+22	; 0x16
 352:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <pxCurrentTCB>
 356:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <pxCurrentTCB+0x1>
 35a:	96 89       	ldd	r25, Z+22	; 0x16
 35c:	29 17       	cp	r18, r25
 35e:	08 f0       	brcs	.+2      	; 0x362 <xTaskIncrementTick+0x1da>
 360:	49 cf       	rjmp	.-366    	; 0x1f4 <xTaskIncrementTick+0x6c>
 362:	4b cf       	rjmp	.-362    	; 0x1fa <xTaskIncrementTick+0x72>
 364:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <pxCurrentTCB>
 368:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <pxCurrentTCB+0x1>
 36c:	26 89       	ldd	r18, Z+22	; 0x16
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	f9 01       	movw	r30, r18
 372:	ee 0f       	add	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	2e 0f       	add	r18, r30
 380:	3f 1f       	adc	r19, r31
 382:	f9 01       	movw	r30, r18
 384:	e2 59       	subi	r30, 0x92	; 146
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	90 81       	ld	r25, Z
 38a:	92 30       	cpi	r25, 0x02	; 2
 38c:	08 f0       	brcs	.+2      	; 0x390 <xTaskIncrementTick+0x208>
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <xYieldPending>
 394:	91 11       	cpse	r25, r1
 396:	0c c0       	rjmp	.+24     	; 0x3b0 <xTaskIncrementTick+0x228>
 398:	0c c0       	rjmp	.+24     	; 0x3b2 <xTaskIncrementTick+0x22a>
 39a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <xPendedTicks>
 39e:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <xPendedTicks+0x1>
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <xPendedTicks+0x1>
 3a8:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <xPendedTicks>
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <xTaskIncrementTick+0x22a>
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	08 95       	ret

000003bc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3bc:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
 3c0:	88 23       	and	r24, r24
 3c2:	21 f0       	breq	.+8      	; 0x3cc <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <xYieldPending>
 3ca:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
 3cc:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 3d0:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <uxTopReadyPriority>
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <vTaskSwitchContext+0x1c>
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	82 2f       	mov	r24, r18
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	fc 01       	movw	r30, r24
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	e8 0f       	add	r30, r24
 3ec:	f9 1f       	adc	r31, r25
 3ee:	e2 59       	subi	r30, 0x92	; 146
 3f0:	fe 4f       	sbci	r31, 0xFE	; 254
 3f2:	30 81       	ld	r19, Z
 3f4:	33 23       	and	r19, r19
 3f6:	79 f3       	breq	.-34     	; 0x3d6 <vTaskSwitchContext+0x1a>
 3f8:	ac 01       	movw	r20, r24
 3fa:	44 0f       	add	r20, r20
 3fc:	55 1f       	adc	r21, r21
 3fe:	44 0f       	add	r20, r20
 400:	55 1f       	adc	r21, r21
 402:	44 0f       	add	r20, r20
 404:	55 1f       	adc	r21, r21
 406:	48 0f       	add	r20, r24
 408:	59 1f       	adc	r21, r25
 40a:	df 01       	movw	r26, r30
 40c:	01 80       	ldd	r0, Z+1	; 0x01
 40e:	f2 81       	ldd	r31, Z+2	; 0x02
 410:	e0 2d       	mov	r30, r0
 412:	02 80       	ldd	r0, Z+2	; 0x02
 414:	f3 81       	ldd	r31, Z+3	; 0x03
 416:	e0 2d       	mov	r30, r0
 418:	12 96       	adiw	r26, 0x02	; 2
 41a:	fc 93       	st	X, r31
 41c:	ee 93       	st	-X, r30
 41e:	11 97       	sbiw	r26, 0x01	; 1
 420:	4f 58       	subi	r20, 0x8F	; 143
 422:	5e 4f       	sbci	r21, 0xFE	; 254
 424:	e4 17       	cp	r30, r20
 426:	f5 07       	cpc	r31, r21
 428:	29 f4       	brne	.+10     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42a:	42 81       	ldd	r20, Z+2	; 0x02
 42c:	53 81       	ldd	r21, Z+3	; 0x03
 42e:	fd 01       	movw	r30, r26
 430:	52 83       	std	Z+2, r21	; 0x02
 432:	41 83       	std	Z+1, r20	; 0x01
 434:	fc 01       	movw	r30, r24
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	8e 0f       	add	r24, r30
 444:	9f 1f       	adc	r25, r31
 446:	fc 01       	movw	r30, r24
 448:	e2 59       	subi	r30, 0x92	; 146
 44a:	fe 4f       	sbci	r31, 0xFE	; 254
 44c:	01 80       	ldd	r0, Z+1	; 0x01
 44e:	f2 81       	ldd	r31, Z+2	; 0x02
 450:	e0 2d       	mov	r30, r0
 452:	86 81       	ldd	r24, Z+6	; 0x06
 454:	97 81       	ldd	r25, Z+7	; 0x07
 456:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <pxCurrentTCB+0x1>
 45a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <pxCurrentTCB>
 45e:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <uxTopReadyPriority>
 462:	08 95       	ret

00000464 <STR_Length>:
	STRING[StrLength] = (uint8_t)(Window_16_Element>>8);
	STRING[StrLength+1] = (uint8_t)(Window_16_Element&0x000000FF);
	STRING[StrLength+2] = NULL_TERMINATOR;
	/*return zero*/
	return OperationSuccess;
}
 464:	fc 01       	movw	r30, r24
 466:	db 01       	movw	r26, r22
 468:	11 96       	adiw	r26, 0x01	; 1
 46a:	1c 92       	st	X, r1
 46c:	1e 92       	st	-X, r1
 46e:	09 c0       	rjmp	.+18     	; 0x482 <STR_Length+0x1e>
 470:	2d 91       	ld	r18, X+
 472:	3c 91       	ld	r19, X
 474:	11 97       	sbiw	r26, 0x01	; 1
 476:	2f 5f       	subi	r18, 0xFF	; 255
 478:	3f 4f       	sbci	r19, 0xFF	; 255
 47a:	11 96       	adiw	r26, 0x01	; 1
 47c:	3c 93       	st	X, r19
 47e:	2e 93       	st	-X, r18
 480:	31 96       	adiw	r30, 0x01	; 1
 482:	80 81       	ld	r24, Z
 484:	81 11       	cpse	r24, r1
 486:	f4 cf       	rjmp	.-24     	; 0x470 <STR_Length+0xc>
 488:	08 95       	ret

0000048a <CRC_16_Chk>:

uint8_t CRC_16_Chk (uint8_t* STRING)
{
 48a:	cf 92       	push	r12
 48c:	df 92       	push	r13
 48e:	ef 92       	push	r14
 490:	ff 92       	push	r15
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	c5 50       	subi	r28, 0x05	; 5
 49c:	d1 40       	sbci	r29, 0x01	; 1
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	f8 94       	cli
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	cd bf       	out	0x3d, r28	; 61
 4a8:	7c 01       	movw	r14, r24
	/*change array of character to array of bits*/
	/*initialize the array of bits*/
	uint8_t BitArr[255] = {0};
 4aa:	fe 01       	movw	r30, r28
 4ac:	31 96       	adiw	r30, 0x01	; 1
 4ae:	8f ef       	ldi	r24, 0xFF	; 255
 4b0:	df 01       	movw	r26, r30
 4b2:	1d 92       	st	X+, r1
 4b4:	8a 95       	dec	r24
 4b6:	e9 f7       	brne	.-6      	; 0x4b2 <CRC_16_Chk+0x28>
	/*Error Return value*/
	uint8_t ErrRetVal = ERROR_OK;
	/*the value of the used polynomial for CRC_16*/
	const uint32_t polynomial = 0b00000000000000011000000000000101;
	/*variable that holds the value to be XORED and SHIFTED*/
	uint32_t volatile Window_16_Element =0;
 4b8:	c0 50       	subi	r28, 0x00	; 0
 4ba:	df 4f       	sbci	r29, 0xFF	; 255
 4bc:	18 82       	st	Y, r1
 4be:	19 82       	std	Y+1, r1	; 0x01
 4c0:	1a 82       	std	Y+2, r1	; 0x02
 4c2:	1b 82       	std	Y+3, r1	; 0x03
 4c4:	c0 50       	subi	r28, 0x00	; 0
 4c6:	d1 40       	sbci	r29, 0x01	; 1
	/*initialize the variable that holds the number of characters to which CRC is calculated*/
	/*number of characters in the inserted string*/
	uint16_t StrLength =0;
 4c8:	cc 5f       	subi	r28, 0xFC	; 252
 4ca:	de 4f       	sbci	r29, 0xFE	; 254
 4cc:	19 82       	std	Y+1, r1	; 0x01
 4ce:	18 82       	st	Y, r1
 4d0:	c4 50       	subi	r28, 0x04	; 4
 4d2:	d1 40       	sbci	r29, 0x01	; 1
	/*initialize the variable that holds the number of bits in the inserted string*/
	uint8_t BitArr_Size = 0;
	/*using STR_Length() function to calculate Number of characters in the inserted String*/
	STR_Length(STRING, &StrLength);
 4d4:	be 01       	movw	r22, r28
 4d6:	6c 5f       	subi	r22, 0xFC	; 252
 4d8:	7e 4f       	sbci	r23, 0xFE	; 254
 4da:	c7 01       	movw	r24, r14
 4dc:	0e 94 32 02 	call	0x464	; 0x464 <STR_Length>
	uint8_t iterator_of_BitArr = 0;
	/*initializing the iterator for the array of the inserted Characters in the string*/
	uint8_t iterator_of_characters = 0;
	/*assigning the bits of the character in the passed string to the array of bits*/
	/*bits are arranged in the array the form of an extra long number"Index 0:MSB,..,..,..,. . .,Index N:LSB"*/
	for(iterator_of_characters = 0; iterator_of_characters < StrLength; iterator_of_characters++)
 4e0:	40 e0       	ldi	r20, 0x00	; 0
	/*initialize the variable that holds the number of bits in the inserted string*/
	uint8_t BitArr_Size = 0;
	/*using STR_Length() function to calculate Number of characters in the inserted String*/
	STR_Length(STRING, &StrLength);
	/*initializing the iterator for the array of bits of the inserted Character string*/
	uint8_t iterator_of_BitArr = 0;
 4e2:	90 e0       	ldi	r25, 0x00	; 0
	/*initializing the iterator for the array of the inserted Characters in the string*/
	uint8_t iterator_of_characters = 0;
	/*assigning the bits of the character in the passed string to the array of bits*/
	/*bits are arranged in the array the form of an extra long number"Index 0:MSB,..,..,..,. . .,Index N:LSB"*/
	for(iterator_of_characters = 0; iterator_of_characters < StrLength; iterator_of_characters++)
 4e4:	89 c0       	rjmp	.+274    	; 0x5f8 <CRC_16_Chk+0x16e>
	{
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_7);
 4e6:	f7 01       	movw	r30, r14
 4e8:	e2 0f       	add	r30, r18
 4ea:	f3 1f       	adc	r31, r19
 4ec:	80 81       	ld	r24, Z
 4ee:	28 2f       	mov	r18, r24
 4f0:	22 1f       	adc	r18, r18
 4f2:	22 27       	eor	r18, r18
 4f4:	22 1f       	adc	r18, r18
 4f6:	e1 e0       	ldi	r30, 0x01	; 1
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	ec 0f       	add	r30, r28
 4fc:	fd 1f       	adc	r31, r29
 4fe:	e9 0f       	add	r30, r25
 500:	f1 1d       	adc	r31, r1
 502:	20 83       	st	Z, r18
		iterator_of_BitArr++;
 504:	51 e0       	ldi	r21, 0x01	; 1
 506:	59 0f       	add	r21, r25
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_6);
 508:	28 2f       	mov	r18, r24
 50a:	20 74       	andi	r18, 0x40	; 64
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	02 2e       	mov	r0, r18
 510:	23 2f       	mov	r18, r19
 512:	00 0c       	add	r0, r0
 514:	22 1f       	adc	r18, r18
 516:	33 0b       	sbc	r19, r19
 518:	00 0c       	add	r0, r0
 51a:	22 1f       	adc	r18, r18
 51c:	33 1f       	adc	r19, r19
 51e:	e1 e0       	ldi	r30, 0x01	; 1
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	ec 0f       	add	r30, r28
 524:	fd 1f       	adc	r31, r29
 526:	e5 0f       	add	r30, r21
 528:	f1 1d       	adc	r31, r1
 52a:	20 83       	st	Z, r18
		iterator_of_BitArr++;
 52c:	52 e0       	ldi	r21, 0x02	; 2
 52e:	59 0f       	add	r21, r25
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_5);
 530:	28 2f       	mov	r18, r24
 532:	20 72       	andi	r18, 0x20	; 32
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	35 95       	asr	r19
 538:	27 95       	ror	r18
 53a:	35 95       	asr	r19
 53c:	27 95       	ror	r18
 53e:	35 95       	asr	r19
 540:	27 95       	ror	r18
 542:	35 95       	asr	r19
 544:	27 95       	ror	r18
 546:	35 95       	asr	r19
 548:	27 95       	ror	r18
 54a:	e1 e0       	ldi	r30, 0x01	; 1
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	ec 0f       	add	r30, r28
 550:	fd 1f       	adc	r31, r29
 552:	e5 0f       	add	r30, r21
 554:	f1 1d       	adc	r31, r1
 556:	20 83       	st	Z, r18
		iterator_of_BitArr++;
 558:	53 e0       	ldi	r21, 0x03	; 3
 55a:	59 0f       	add	r21, r25
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_4);
 55c:	28 2f       	mov	r18, r24
 55e:	20 71       	andi	r18, 0x10	; 16
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	35 95       	asr	r19
 564:	27 95       	ror	r18
 566:	35 95       	asr	r19
 568:	27 95       	ror	r18
 56a:	35 95       	asr	r19
 56c:	27 95       	ror	r18
 56e:	35 95       	asr	r19
 570:	27 95       	ror	r18
 572:	e1 e0       	ldi	r30, 0x01	; 1
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	ec 0f       	add	r30, r28
 578:	fd 1f       	adc	r31, r29
 57a:	e5 0f       	add	r30, r21
 57c:	f1 1d       	adc	r31, r1
 57e:	20 83       	st	Z, r18
		iterator_of_BitArr++;
 580:	54 e0       	ldi	r21, 0x04	; 4
 582:	59 0f       	add	r21, r25
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_3);
 584:	28 2f       	mov	r18, r24
 586:	28 70       	andi	r18, 0x08	; 8
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	35 95       	asr	r19
 58c:	27 95       	ror	r18
 58e:	35 95       	asr	r19
 590:	27 95       	ror	r18
 592:	35 95       	asr	r19
 594:	27 95       	ror	r18
 596:	e1 e0       	ldi	r30, 0x01	; 1
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	ec 0f       	add	r30, r28
 59c:	fd 1f       	adc	r31, r29
 59e:	e5 0f       	add	r30, r21
 5a0:	f1 1d       	adc	r31, r1
 5a2:	20 83       	st	Z, r18
		iterator_of_BitArr++;
 5a4:	55 e0       	ldi	r21, 0x05	; 5
 5a6:	59 0f       	add	r21, r25
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_2);
 5a8:	28 2f       	mov	r18, r24
 5aa:	24 70       	andi	r18, 0x04	; 4
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	35 95       	asr	r19
 5b0:	27 95       	ror	r18
 5b2:	35 95       	asr	r19
 5b4:	27 95       	ror	r18
 5b6:	e1 e0       	ldi	r30, 0x01	; 1
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	ec 0f       	add	r30, r28
 5bc:	fd 1f       	adc	r31, r29
 5be:	e5 0f       	add	r30, r21
 5c0:	f1 1d       	adc	r31, r1
 5c2:	20 83       	st	Z, r18
		iterator_of_BitArr++;
 5c4:	56 e0       	ldi	r21, 0x06	; 6
 5c6:	59 0f       	add	r21, r25
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_1);
 5c8:	28 2f       	mov	r18, r24
 5ca:	22 70       	andi	r18, 0x02	; 2
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	35 95       	asr	r19
 5d0:	27 95       	ror	r18
 5d2:	e1 e0       	ldi	r30, 0x01	; 1
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	ec 0f       	add	r30, r28
 5d8:	fd 1f       	adc	r31, r29
 5da:	e5 0f       	add	r30, r21
 5dc:	f1 1d       	adc	r31, r1
 5de:	20 83       	st	Z, r18
		iterator_of_BitArr++;
 5e0:	27 e0       	ldi	r18, 0x07	; 7
 5e2:	29 0f       	add	r18, r25
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_0);
 5e4:	e1 e0       	ldi	r30, 0x01	; 1
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	ec 0f       	add	r30, r28
 5ea:	fd 1f       	adc	r31, r29
 5ec:	e2 0f       	add	r30, r18
 5ee:	f1 1d       	adc	r31, r1
 5f0:	81 70       	andi	r24, 0x01	; 1
 5f2:	80 83       	st	Z, r24
		iterator_of_BitArr++;
 5f4:	98 5f       	subi	r25, 0xF8	; 248
	uint8_t iterator_of_BitArr = 0;
	/*initializing the iterator for the array of the inserted Characters in the string*/
	uint8_t iterator_of_characters = 0;
	/*assigning the bits of the character in the passed string to the array of bits*/
	/*bits are arranged in the array the form of an extra long number"Index 0:MSB,..,..,..,. . .,Index N:LSB"*/
	for(iterator_of_characters = 0; iterator_of_characters < StrLength; iterator_of_characters++)
 5f6:	4f 5f       	subi	r20, 0xFF	; 255
 5f8:	24 2f       	mov	r18, r20
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	cc 5f       	subi	r28, 0xFC	; 252
 5fe:	de 4f       	sbci	r29, 0xFE	; 254
 600:	68 81       	ld	r22, Y
 602:	79 81       	ldd	r23, Y+1	; 0x01
 604:	c4 50       	subi	r28, 0x04	; 4
 606:	d1 40       	sbci	r29, 0x01	; 1
 608:	26 17       	cp	r18, r22
 60a:	37 07       	cpc	r19, r23
 60c:	08 f4       	brcc	.+2      	; 0x610 <CRC_16_Chk+0x186>
 60e:	6b cf       	rjmp	.-298    	; 0x4e6 <CRC_16_Chk+0x5c>
		iterator_of_BitArr++;
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_0);
		iterator_of_BitArr++;
	}
	/*calculating the size of the array of bits taking into consideration the size of the 16 bits of CRC_16*/
	BitArr_Size = iterator_of_BitArr + 15;
 610:	91 5f       	subi	r25, 0xF1	; 241
	/*reset the iterator of the Bits Array to zero to iterate through the array*/
	iterator_of_BitArr = 0;
 612:	a0 e0       	ldi	r26, 0x00	; 0
	/*Moving to the first occurance of high bit to start our CRC calculation*/
	while(BitArr[iterator_of_BitArr]!=1)
 614:	01 c0       	rjmp	.+2      	; 0x618 <CRC_16_Chk+0x18e>
	{
		/*increment the iterator to the first occurance of High bit*/
		iterator_of_BitArr++;
 616:	af 5f       	subi	r26, 0xFF	; 255
	/*calculating the size of the array of bits taking into consideration the size of the 16 bits of CRC_16*/
	BitArr_Size = iterator_of_BitArr + 15;
	/*reset the iterator of the Bits Array to zero to iterate through the array*/
	iterator_of_BitArr = 0;
	/*Moving to the first occurance of high bit to start our CRC calculation*/
	while(BitArr[iterator_of_BitArr]!=1)
 618:	2a 2f       	mov	r18, r26
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	e1 e0       	ldi	r30, 0x01	; 1
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	ec 0f       	add	r30, r28
 622:	fd 1f       	adc	r31, r29
 624:	e2 0f       	add	r30, r18
 626:	f3 1f       	adc	r31, r19
 628:	80 81       	ld	r24, Z
 62a:	81 30       	cpi	r24, 0x01	; 1
 62c:	a1 f7       	brne	.-24     	; 0x616 <CRC_16_Chk+0x18c>
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	2f c0       	rjmp	.+94     	; 0x690 <CRC_16_Chk+0x206>
		/*increment the iterator to the first occurance of High bit*/
		iterator_of_BitArr++;
	}
	for (uint8_t i = 0; i<=16; i++)
	{
		Window_16_Element |= ((uint32_t)BitArr[iterator_of_BitArr+i]<<(16-i));
 632:	e8 2e       	mov	r14, r24
 634:	f1 2c       	mov	r15, r1
 636:	f9 01       	movw	r30, r18
 638:	ee 0d       	add	r30, r14
 63a:	ff 1d       	adc	r31, r15
 63c:	41 e0       	ldi	r20, 0x01	; 1
 63e:	50 e0       	ldi	r21, 0x00	; 0
 640:	4c 0f       	add	r20, r28
 642:	5d 1f       	adc	r21, r29
 644:	e4 0f       	add	r30, r20
 646:	f5 1f       	adc	r31, r21
 648:	40 81       	ld	r20, Z
 64a:	50 e0       	ldi	r21, 0x00	; 0
 64c:	60 e0       	ldi	r22, 0x00	; 0
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	e0 e1       	ldi	r30, 0x10	; 16
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	ee 19       	sub	r30, r14
 656:	ff 09       	sbc	r31, r15
 658:	04 c0       	rjmp	.+8      	; 0x662 <CRC_16_Chk+0x1d8>
 65a:	44 0f       	add	r20, r20
 65c:	55 1f       	adc	r21, r21
 65e:	66 1f       	adc	r22, r22
 660:	77 1f       	adc	r23, r23
 662:	ea 95       	dec	r30
 664:	d2 f7       	brpl	.-12     	; 0x65a <CRC_16_Chk+0x1d0>
 666:	c0 50       	subi	r28, 0x00	; 0
 668:	df 4f       	sbci	r29, 0xFF	; 255
 66a:	c8 80       	ld	r12, Y
 66c:	d9 80       	ldd	r13, Y+1	; 0x01
 66e:	ea 80       	ldd	r14, Y+2	; 0x02
 670:	fb 80       	ldd	r15, Y+3	; 0x03
 672:	c0 50       	subi	r28, 0x00	; 0
 674:	d1 40       	sbci	r29, 0x01	; 1
 676:	4c 29       	or	r20, r12
 678:	5d 29       	or	r21, r13
 67a:	6e 29       	or	r22, r14
 67c:	7f 29       	or	r23, r15
 67e:	c0 50       	subi	r28, 0x00	; 0
 680:	df 4f       	sbci	r29, 0xFF	; 255
 682:	48 83       	st	Y, r20
 684:	59 83       	std	Y+1, r21	; 0x01
 686:	6a 83       	std	Y+2, r22	; 0x02
 688:	7b 83       	std	Y+3, r23	; 0x03
 68a:	c0 50       	subi	r28, 0x00	; 0
 68c:	d1 40       	sbci	r29, 0x01	; 1
	while(BitArr[iterator_of_BitArr]!=1)
	{
		/*increment the iterator to the first occurance of High bit*/
		iterator_of_BitArr++;
	}
	for (uint8_t i = 0; i<=16; i++)
 68e:	8f 5f       	subi	r24, 0xFF	; 255
 690:	81 31       	cpi	r24, 0x11	; 17
 692:	78 f2       	brcs	.-98     	; 0x632 <CRC_16_Chk+0x1a8>
 694:	5f c0       	rjmp	.+190    	; 0x754 <CRC_16_Chk+0x2ca>
	}
	/*Start the modulo Operation continues until the polynomial doesn't fit into the reminder*/
	while(iterator_of_BitArr < BitArr_Size-16)
	{
		/*Xoring operation between the Window and the polynomial*/
		Window_16_Element ^= polynomial;
 696:	c0 50       	subi	r28, 0x00	; 0
 698:	df 4f       	sbci	r29, 0xFF	; 255
 69a:	48 81       	ld	r20, Y
 69c:	59 81       	ldd	r21, Y+1	; 0x01
 69e:	6a 81       	ldd	r22, Y+2	; 0x02
 6a0:	7b 81       	ldd	r23, Y+3	; 0x03
 6a2:	c0 50       	subi	r28, 0x00	; 0
 6a4:	d1 40       	sbci	r29, 0x01	; 1
 6a6:	85 e0       	ldi	r24, 0x05	; 5
 6a8:	48 27       	eor	r20, r24
 6aa:	50 58       	subi	r21, 0x80	; 128
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	68 27       	eor	r22, r24
 6b0:	c0 50       	subi	r28, 0x00	; 0
 6b2:	df 4f       	sbci	r29, 0xFF	; 255
 6b4:	48 83       	st	Y, r20
 6b6:	59 83       	std	Y+1, r21	; 0x01
 6b8:	6a 83       	std	Y+2, r22	; 0x02
 6ba:	7b 83       	std	Y+3, r23	; 0x03
 6bc:	c0 50       	subi	r28, 0x00	; 0
 6be:	d1 40       	sbci	r29, 0x01	; 1
		if(!Window_16_Element)
 6c0:	c0 50       	subi	r28, 0x00	; 0
 6c2:	df 4f       	sbci	r29, 0xFF	; 255
 6c4:	48 81       	ld	r20, Y
 6c6:	59 81       	ldd	r21, Y+1	; 0x01
 6c8:	6a 81       	ldd	r22, Y+2	; 0x02
 6ca:	7b 81       	ldd	r23, Y+3	; 0x03
 6cc:	c0 50       	subi	r28, 0x00	; 0
 6ce:	d1 40       	sbci	r29, 0x01	; 1
 6d0:	45 2b       	or	r20, r21
 6d2:	46 2b       	or	r20, r22
 6d4:	47 2b       	or	r20, r23
 6d6:	09 f4       	brne	.+2      	; 0x6da <CRC_16_Chk+0x250>
 6d8:	47 c0       	rjmp	.+142    	; 0x768 <CRC_16_Chk+0x2de>
			break;
		if((iterator_of_BitArr < BitArr_Size-16))
 6da:	e2 17       	cp	r30, r18
 6dc:	f3 07       	cpc	r31, r19
 6de:	d4 f5       	brge	.+116    	; 0x754 <CRC_16_Chk+0x2ca>
		{
			do
			{
				Window_16_Element <<= 1;
 6e0:	c0 50       	subi	r28, 0x00	; 0
 6e2:	df 4f       	sbci	r29, 0xFF	; 255
 6e4:	48 81       	ld	r20, Y
 6e6:	59 81       	ldd	r21, Y+1	; 0x01
 6e8:	6a 81       	ldd	r22, Y+2	; 0x02
 6ea:	7b 81       	ldd	r23, Y+3	; 0x03
 6ec:	c0 50       	subi	r28, 0x00	; 0
 6ee:	d1 40       	sbci	r29, 0x01	; 1
 6f0:	44 0f       	add	r20, r20
 6f2:	55 1f       	adc	r21, r21
 6f4:	66 1f       	adc	r22, r22
 6f6:	77 1f       	adc	r23, r23
 6f8:	c0 50       	subi	r28, 0x00	; 0
 6fa:	df 4f       	sbci	r29, 0xFF	; 255
 6fc:	48 83       	st	Y, r20
 6fe:	59 83       	std	Y+1, r21	; 0x01
 700:	6a 83       	std	Y+2, r22	; 0x02
 702:	7b 83       	std	Y+3, r23	; 0x03
 704:	c0 50       	subi	r28, 0x00	; 0
 706:	d1 40       	sbci	r29, 0x01	; 1
				iterator_of_BitArr++;
 708:	af 5f       	subi	r26, 0xFF	; 255
				/*Adding new element from the array of bits to the window*/
				Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
 70a:	ea 2f       	mov	r30, r26
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	70 96       	adiw	r30, 0x10	; 16
 710:	21 e0       	ldi	r18, 0x01	; 1
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	2c 0f       	add	r18, r28
 716:	3d 1f       	adc	r19, r29
 718:	e2 0f       	add	r30, r18
 71a:	f3 1f       	adc	r31, r19
 71c:	80 81       	ld	r24, Z
 71e:	c0 50       	subi	r28, 0x00	; 0
 720:	df 4f       	sbci	r29, 0xFF	; 255
 722:	48 81       	ld	r20, Y
 724:	59 81       	ldd	r21, Y+1	; 0x01
 726:	6a 81       	ldd	r22, Y+2	; 0x02
 728:	7b 81       	ldd	r23, Y+3	; 0x03
 72a:	c0 50       	subi	r28, 0x00	; 0
 72c:	d1 40       	sbci	r29, 0x01	; 1
 72e:	48 2b       	or	r20, r24
 730:	c0 50       	subi	r28, 0x00	; 0
 732:	df 4f       	sbci	r29, 0xFF	; 255
 734:	48 83       	st	Y, r20
 736:	59 83       	std	Y+1, r21	; 0x01
 738:	6a 83       	std	Y+2, r22	; 0x02
 73a:	7b 83       	std	Y+3, r23	; 0x03
 73c:	c0 50       	subi	r28, 0x00	; 0
 73e:	d1 40       	sbci	r29, 0x01	; 1
			} while ((Get_Bit(Window_16_Element,16) == 0));
 740:	c0 50       	subi	r28, 0x00	; 0
 742:	df 4f       	sbci	r29, 0xFF	; 255
 744:	48 81       	ld	r20, Y
 746:	59 81       	ldd	r21, Y+1	; 0x01
 748:	6a 81       	ldd	r22, Y+2	; 0x02
 74a:	7b 81       	ldd	r23, Y+3	; 0x03
 74c:	c0 50       	subi	r28, 0x00	; 0
 74e:	d1 40       	sbci	r29, 0x01	; 1
 750:	60 ff       	sbrs	r22, 0
 752:	c6 cf       	rjmp	.-116    	; 0x6e0 <CRC_16_Chk+0x256>
	for (uint8_t i = 0; i<=16; i++)
	{
		Window_16_Element |= ((uint32_t)BitArr[iterator_of_BitArr+i]<<(16-i));
	}
	/*Start the modulo Operation continues until the polynomial doesn't fit into the reminder*/
	while(iterator_of_BitArr < BitArr_Size-16)
 754:	ea 2f       	mov	r30, r26
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	29 2f       	mov	r18, r25
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	20 51       	subi	r18, 0x10	; 16
 75e:	31 09       	sbc	r19, r1
 760:	e2 17       	cp	r30, r18
 762:	f3 07       	cpc	r31, r19
 764:	0c f4       	brge	.+2      	; 0x768 <CRC_16_Chk+0x2de>
 766:	97 cf       	rjmp	.-210    	; 0x696 <CRC_16_Chk+0x20c>
				/*Adding new element from the array of bits to the window*/
				Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
			} while ((Get_Bit(Window_16_Element,16) == 0));
		}
	}
	if((uint16_t)Window_16_Element != 0)
 768:	c0 50       	subi	r28, 0x00	; 0
 76a:	df 4f       	sbci	r29, 0xFF	; 255
 76c:	88 81       	ld	r24, Y
 76e:	99 81       	ldd	r25, Y+1	; 0x01
 770:	aa 81       	ldd	r26, Y+2	; 0x02
 772:	bb 81       	ldd	r27, Y+3	; 0x03
 774:	c0 50       	subi	r28, 0x00	; 0
 776:	d1 40       	sbci	r29, 0x01	; 1
 778:	89 2b       	or	r24, r25
 77a:	11 f0       	breq	.+4      	; 0x780 <CRC_16_Chk+0x2f6>
		ErrRetVal = ERROR_NOK;
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	01 c0       	rjmp	.+2      	; 0x782 <CRC_16_Chk+0x2f8>
	else
		ErrRetVal = ERROR_OK;
 780:	80 e0       	ldi	r24, 0x00	; 0
	return ErrRetVal;
}
 782:	cb 5f       	subi	r28, 0xFB	; 251
 784:	de 4f       	sbci	r29, 0xFE	; 254
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	f8 94       	cli
 78a:	de bf       	out	0x3e, r29	; 62
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	cd bf       	out	0x3d, r28	; 61
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	ff 90       	pop	r15
 796:	ef 90       	pop	r14
 798:	df 90       	pop	r13
 79a:	cf 90       	pop	r12
 79c:	08 95       	ret

0000079e <main>:
	//uint8_t l = (passworLength+(16-wordLength));
	
	/*DISPLAY_SetNumber_of_Asterisk(6);//<======setsNumberofasteriks*/
	/*DISPLAY_SetState(Waiting);//<====setsthestate of the system*/
	//CRC_16_Calc(Name);
	retValofChk = CRC_16_Chk(Name);
 79e:	81 e6       	ldi	r24, 0x61	; 97
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	0e 94 45 02 	call	0x48a	; 0x48a <CRC_16_Chk>
 7a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 7aa:	ff cf       	rjmp	.-2      	; 0x7aa <main+0xc>

000007ac <_exit>:
 7ac:	f8 94       	cli

000007ae <__stop_program>:
 7ae:	ff cf       	rjmp	.-2      	; 0x7ae <__stop_program>
