
MCU_To_MCU_Bluetooth_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00800060  00001ae4  00001b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  008000dc  008000dc  00001bf4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00001c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ca0  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000116a  00000000  00000000  00006ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030ea  00000000  00000000  00007e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b08  00000000  00000000  0000aef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016fe  00000000  00000000  0000b9fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fd1  00000000  00000000  0000d0fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  000110cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_7>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	d4 06       	cpc	r13, r20
      56:	df 06       	cpc	r13, r31
      58:	ea 06       	cpc	r14, r26
      5a:	f5 06       	cpc	r15, r21
      5c:	00 07       	cpc	r16, r16
      5e:	0b 07       	cpc	r16, r27
      60:	16 07       	cpc	r17, r22
      62:	0f 0a       	sbc	r0, r31
      64:	2b 0a       	sbc	r2, r27
      66:	47 0a       	sbc	r4, r23
      68:	7f 0a       	sbc	r7, r31
      6a:	ad 0a       	sbc	r10, r29
      6c:	e4 0a       	sbc	r14, r20
      6e:	3e 0b       	sbc	r19, r30
      70:	5a 0b       	sbc	r21, r26

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	10 e0       	ldi	r17, 0x00	; 0
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e4 ee       	ldi	r30, 0xE4	; 228
      86:	fa e1       	ldi	r31, 0x1A	; 26
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	ac 3d       	cpi	r26, 0xDC	; 220
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	21 e0       	ldi	r18, 0x01	; 1
      96:	ac ed       	ldi	r26, 0xDC	; 220
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	af 31       	cpi	r26, 0x1F	; 31
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 aa 0b 	call	0x1754	; 0x1754 <main>
      a8:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
      b0:	0f 92       	push	r0
      b2:	0f b6       	in	r0, 0x3f	; 63
      b4:	f8 94       	cli
      b6:	0f 92       	push	r0
      b8:	1f 92       	push	r1
      ba:	11 24       	eor	r1, r1
      bc:	2f 92       	push	r2
      be:	3f 92       	push	r3
      c0:	4f 92       	push	r4
      c2:	5f 92       	push	r5
      c4:	6f 92       	push	r6
      c6:	7f 92       	push	r7
      c8:	8f 92       	push	r8
      ca:	9f 92       	push	r9
      cc:	af 92       	push	r10
      ce:	bf 92       	push	r11
      d0:	cf 92       	push	r12
      d2:	df 92       	push	r13
      d4:	ef 92       	push	r14
      d6:	ff 92       	push	r15
      d8:	0f 93       	push	r16
      da:	1f 93       	push	r17
      dc:	2f 93       	push	r18
      de:	3f 93       	push	r19
      e0:	4f 93       	push	r20
      e2:	5f 93       	push	r21
      e4:	6f 93       	push	r22
      e6:	7f 93       	push	r23
      e8:	8f 93       	push	r24
      ea:	9f 93       	push	r25
      ec:	af 93       	push	r26
      ee:	bf 93       	push	r27
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	ef 93       	push	r30
      f6:	ff 93       	push	r31
      f8:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <pxCurrentTCB>
      fc:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <pxCurrentTCB+0x1>
     100:	0d b6       	in	r0, 0x3d	; 61
     102:	0d 92       	st	X+, r0
     104:	0e b6       	in	r0, 0x3e	; 62
     106:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     108:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <xTaskIncrementTick>
     10c:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     10e:	0e 94 ed 01 	call	0x3da	; 0x3da <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     112:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <pxCurrentTCB>
     116:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <pxCurrentTCB+0x1>
     11a:	cd 91       	ld	r28, X+
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	dd 91       	ld	r29, X+
     120:	de bf       	out	0x3e, r29	; 62
     122:	ff 91       	pop	r31
     124:	ef 91       	pop	r30
     126:	df 91       	pop	r29
     128:	cf 91       	pop	r28
     12a:	bf 91       	pop	r27
     12c:	af 91       	pop	r26
     12e:	9f 91       	pop	r25
     130:	8f 91       	pop	r24
     132:	7f 91       	pop	r23
     134:	6f 91       	pop	r22
     136:	5f 91       	pop	r21
     138:	4f 91       	pop	r20
     13a:	3f 91       	pop	r19
     13c:	2f 91       	pop	r18
     13e:	1f 91       	pop	r17
     140:	0f 91       	pop	r16
     142:	ff 90       	pop	r15
     144:	ef 90       	pop	r14
     146:	df 90       	pop	r13
     148:	cf 90       	pop	r12
     14a:	bf 90       	pop	r11
     14c:	af 90       	pop	r10
     14e:	9f 90       	pop	r9
     150:	8f 90       	pop	r8
     152:	7f 90       	pop	r7
     154:	6f 90       	pop	r6
     156:	5f 90       	pop	r5
     158:	4f 90       	pop	r4
     15a:	3f 90       	pop	r3
     15c:	2f 90       	pop	r2
     15e:	1f 90       	pop	r1
     160:	0f 90       	pop	r0
     162:	0f be       	out	0x3f, r0	; 63
     164:	0f 90       	pop	r0

	asm volatile ( "ret" );
     166:	08 95       	ret

00000168 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     168:	0e 94 58 00 	call	0xb0	; 0xb0 <vPortYieldFromTick>
		asm volatile ( "reti" );
     16c:	18 95       	reti

0000016e <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     16e:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <pxDelayedTaskList>
     172:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <pxDelayedTaskList+0x1>
     176:	80 81       	ld	r24, Z
     178:	81 11       	cpse	r24, r1
     17a:	07 c0       	rjmp	.+14     	; 0x18a <prvResetNextTaskUnblockTime+0x1c>
     17c:	8f ef       	ldi	r24, 0xFF	; 255
     17e:	9f ef       	ldi	r25, 0xFF	; 255
     180:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <xNextTaskUnblockTime+0x1>
     184:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <xNextTaskUnblockTime>
     188:	08 95       	ret
     18a:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <pxDelayedTaskList>
     18e:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <pxDelayedTaskList+0x1>
     192:	05 80       	ldd	r0, Z+5	; 0x05
     194:	f6 81       	ldd	r31, Z+6	; 0x06
     196:	e0 2d       	mov	r30, r0
     198:	80 81       	ld	r24, Z
     19a:	91 81       	ldd	r25, Z+1	; 0x01
     19c:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <xNextTaskUnblockTime+0x1>
     1a0:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <xNextTaskUnblockTime>
     1a4:	08 95       	ret

000001a6 <xTaskIncrementTick>:
     1a6:	0f 93       	push	r16
     1a8:	1f 93       	push	r17
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__data_end>
     1b2:	81 11       	cpse	r24, r1
     1b4:	01 c1       	rjmp	.+514    	; 0x3b8 <xTaskIncrementTick+0x212>
     1b6:	c0 91 e4 00 	lds	r28, 0x00E4	; 0x8000e4 <xTickCount>
     1ba:	d0 91 e5 00 	lds	r29, 0x00E5	; 0x8000e5 <xTickCount+0x1>
     1be:	8e 01       	movw	r16, r28
     1c0:	0f 5f       	subi	r16, 0xFF	; 255
     1c2:	1f 4f       	sbci	r17, 0xFF	; 255
     1c4:	10 93 e5 00 	sts	0x00E5, r17	; 0x8000e5 <xTickCount+0x1>
     1c8:	00 93 e4 00 	sts	0x00E4, r16	; 0x8000e4 <xTickCount>
     1cc:	01 15       	cp	r16, r1
     1ce:	11 05       	cpc	r17, r1
     1d0:	b9 f4       	brne	.+46     	; 0x200 <xTaskIncrementTick+0x5a>
     1d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <pxDelayedTaskList>
     1d6:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <pxDelayedTaskList+0x1>
     1da:	20 91 e6 00 	lds	r18, 0x00E6	; 0x8000e6 <pxOverflowDelayedTaskList>
     1de:	30 91 e7 00 	lds	r19, 0x00E7	; 0x8000e7 <pxOverflowDelayedTaskList+0x1>
     1e2:	30 93 e9 00 	sts	0x00E9, r19	; 0x8000e9 <pxDelayedTaskList+0x1>
     1e6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <pxDelayedTaskList>
     1ea:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <pxOverflowDelayedTaskList+0x1>
     1ee:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <pxOverflowDelayedTaskList>
     1f2:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <xNumOfOverflows>
     1f6:	8f 5f       	subi	r24, 0xFF	; 255
     1f8:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <xNumOfOverflows>
     1fc:	0e 94 b7 00 	call	0x16e	; 0x16e <prvResetNextTaskUnblockTime>
     200:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <xNextTaskUnblockTime>
     204:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <xNextTaskUnblockTime+0x1>
     208:	08 17       	cp	r16, r24
     20a:	19 07       	cpc	r17, r25
     20c:	20 f4       	brcc	.+8      	; 0x216 <xTaskIncrementTick+0x70>
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	b8 c0       	rjmp	.+368    	; 0x382 <xTaskIncrementTick+0x1dc>
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	01 c0       	rjmp	.+2      	; 0x218 <xTaskIncrementTick+0x72>
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <pxDelayedTaskList>
     21c:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <pxDelayedTaskList+0x1>
     220:	90 81       	ld	r25, Z
     222:	91 11       	cpse	r25, r1
     224:	07 c0       	rjmp	.+14     	; 0x234 <xTaskIncrementTick+0x8e>
     226:	2f ef       	ldi	r18, 0xFF	; 255
     228:	3f ef       	ldi	r19, 0xFF	; 255
     22a:	30 93 de 00 	sts	0x00DE, r19	; 0x8000de <xNextTaskUnblockTime+0x1>
     22e:	20 93 dd 00 	sts	0x00DD, r18	; 0x8000dd <xNextTaskUnblockTime>
     232:	a7 c0       	rjmp	.+334    	; 0x382 <xTaskIncrementTick+0x1dc>
     234:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <pxDelayedTaskList>
     238:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <pxDelayedTaskList+0x1>
     23c:	05 80       	ldd	r0, Z+5	; 0x05
     23e:	f6 81       	ldd	r31, Z+6	; 0x06
     240:	e0 2d       	mov	r30, r0
     242:	06 80       	ldd	r0, Z+6	; 0x06
     244:	f7 81       	ldd	r31, Z+7	; 0x07
     246:	e0 2d       	mov	r30, r0
     248:	22 81       	ldd	r18, Z+2	; 0x02
     24a:	33 81       	ldd	r19, Z+3	; 0x03
     24c:	02 17       	cp	r16, r18
     24e:	13 07       	cpc	r17, r19
     250:	28 f4       	brcc	.+10     	; 0x25c <xTaskIncrementTick+0xb6>
     252:	30 93 de 00 	sts	0x00DE, r19	; 0x8000de <xNextTaskUnblockTime+0x1>
     256:	20 93 dd 00 	sts	0x00DD, r18	; 0x8000dd <xNextTaskUnblockTime>
     25a:	93 c0       	rjmp	.+294    	; 0x382 <xTaskIncrementTick+0x1dc>
     25c:	a2 85       	ldd	r26, Z+10	; 0x0a
     25e:	b3 85       	ldd	r27, Z+11	; 0x0b
     260:	24 81       	ldd	r18, Z+4	; 0x04
     262:	35 81       	ldd	r19, Z+5	; 0x05
     264:	46 81       	ldd	r20, Z+6	; 0x06
     266:	57 81       	ldd	r21, Z+7	; 0x07
     268:	e9 01       	movw	r28, r18
     26a:	5d 83       	std	Y+5, r21	; 0x05
     26c:	4c 83       	std	Y+4, r20	; 0x04
     26e:	26 81       	ldd	r18, Z+6	; 0x06
     270:	37 81       	ldd	r19, Z+7	; 0x07
     272:	44 81       	ldd	r20, Z+4	; 0x04
     274:	55 81       	ldd	r21, Z+5	; 0x05
     276:	e9 01       	movw	r28, r18
     278:	5b 83       	std	Y+3, r21	; 0x03
     27a:	4a 83       	std	Y+2, r20	; 0x02
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	2d 91       	ld	r18, X+
     280:	3c 91       	ld	r19, X
     282:	12 97       	sbiw	r26, 0x02	; 2
     284:	af 01       	movw	r20, r30
     286:	4e 5f       	subi	r20, 0xFE	; 254
     288:	5f 4f       	sbci	r21, 0xFF	; 255
     28a:	24 17       	cp	r18, r20
     28c:	35 07       	cpc	r19, r21
     28e:	31 f4       	brne	.+12     	; 0x29c <xTaskIncrementTick+0xf6>
     290:	26 81       	ldd	r18, Z+6	; 0x06
     292:	37 81       	ldd	r19, Z+7	; 0x07
     294:	12 96       	adiw	r26, 0x02	; 2
     296:	3c 93       	st	X, r19
     298:	2e 93       	st	-X, r18
     29a:	11 97       	sbiw	r26, 0x01	; 1
     29c:	13 86       	std	Z+11, r1	; 0x0b
     29e:	12 86       	std	Z+10, r1	; 0x0a
     2a0:	9c 91       	ld	r25, X
     2a2:	91 50       	subi	r25, 0x01	; 1
     2a4:	9c 93       	st	X, r25
     2a6:	a4 89       	ldd	r26, Z+20	; 0x14
     2a8:	b5 89       	ldd	r27, Z+21	; 0x15
     2aa:	10 97       	sbiw	r26, 0x00	; 0
     2ac:	19 f1       	breq	.+70     	; 0x2f4 <xTaskIncrementTick+0x14e>
     2ae:	26 85       	ldd	r18, Z+14	; 0x0e
     2b0:	37 85       	ldd	r19, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	e9 01       	movw	r28, r18
     2b8:	7d 83       	std	Y+5, r23	; 0x05
     2ba:	6c 83       	std	Y+4, r22	; 0x04
     2bc:	20 89       	ldd	r18, Z+16	; 0x10
     2be:	31 89       	ldd	r19, Z+17	; 0x11
     2c0:	66 85       	ldd	r22, Z+14	; 0x0e
     2c2:	77 85       	ldd	r23, Z+15	; 0x0f
     2c4:	e9 01       	movw	r28, r18
     2c6:	7b 83       	std	Y+3, r23	; 0x03
     2c8:	6a 83       	std	Y+2, r22	; 0x02
     2ca:	11 96       	adiw	r26, 0x01	; 1
     2cc:	6d 91       	ld	r22, X+
     2ce:	7c 91       	ld	r23, X
     2d0:	12 97       	sbiw	r26, 0x02	; 2
     2d2:	9f 01       	movw	r18, r30
     2d4:	24 5f       	subi	r18, 0xF4	; 244
     2d6:	3f 4f       	sbci	r19, 0xFF	; 255
     2d8:	62 17       	cp	r22, r18
     2da:	73 07       	cpc	r23, r19
     2dc:	31 f4       	brne	.+12     	; 0x2ea <xTaskIncrementTick+0x144>
     2de:	20 89       	ldd	r18, Z+16	; 0x10
     2e0:	31 89       	ldd	r19, Z+17	; 0x11
     2e2:	12 96       	adiw	r26, 0x02	; 2
     2e4:	3c 93       	st	X, r19
     2e6:	2e 93       	st	-X, r18
     2e8:	11 97       	sbiw	r26, 0x01	; 1
     2ea:	15 8a       	std	Z+21, r1	; 0x15
     2ec:	14 8a       	std	Z+20, r1	; 0x14
     2ee:	9c 91       	ld	r25, X
     2f0:	91 50       	subi	r25, 0x01	; 1
     2f2:	9c 93       	st	X, r25
     2f4:	26 89       	ldd	r18, Z+22	; 0x16
     2f6:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <uxTopReadyPriority>
     2fa:	92 17       	cp	r25, r18
     2fc:	10 f4       	brcc	.+4      	; 0x302 <xTaskIncrementTick+0x15c>
     2fe:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <uxTopReadyPriority>
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	d9 01       	movw	r26, r18
     306:	aa 0f       	add	r26, r26
     308:	bb 1f       	adc	r27, r27
     30a:	aa 0f       	add	r26, r26
     30c:	bb 1f       	adc	r27, r27
     30e:	aa 0f       	add	r26, r26
     310:	bb 1f       	adc	r27, r27
     312:	2a 0f       	add	r18, r26
     314:	3b 1f       	adc	r19, r27
     316:	d9 01       	movw	r26, r18
     318:	a6 51       	subi	r26, 0x16	; 22
     31a:	bf 4f       	sbci	r27, 0xFF	; 255
     31c:	11 96       	adiw	r26, 0x01	; 1
     31e:	0d 90       	ld	r0, X+
     320:	bc 91       	ld	r27, X
     322:	a0 2d       	mov	r26, r0
     324:	b5 83       	std	Z+5, r27	; 0x05
     326:	a4 83       	std	Z+4, r26	; 0x04
     328:	14 96       	adiw	r26, 0x04	; 4
     32a:	2d 91       	ld	r18, X+
     32c:	3c 91       	ld	r19, X
     32e:	15 97       	sbiw	r26, 0x05	; 5
     330:	37 83       	std	Z+7, r19	; 0x07
     332:	26 83       	std	Z+6, r18	; 0x06
     334:	14 96       	adiw	r26, 0x04	; 4
     336:	2d 91       	ld	r18, X+
     338:	3c 91       	ld	r19, X
     33a:	15 97       	sbiw	r26, 0x05	; 5
     33c:	e9 01       	movw	r28, r18
     33e:	5b 83       	std	Y+3, r21	; 0x03
     340:	4a 83       	std	Y+2, r20	; 0x02
     342:	15 96       	adiw	r26, 0x05	; 5
     344:	5c 93       	st	X, r21
     346:	4e 93       	st	-X, r20
     348:	14 97       	sbiw	r26, 0x04	; 4
     34a:	a6 89       	ldd	r26, Z+22	; 0x16
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	9d 01       	movw	r18, r26
     350:	22 0f       	add	r18, r18
     352:	33 1f       	adc	r19, r19
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	22 0f       	add	r18, r18
     35a:	33 1f       	adc	r19, r19
     35c:	a2 0f       	add	r26, r18
     35e:	b3 1f       	adc	r27, r19
     360:	a6 51       	subi	r26, 0x16	; 22
     362:	bf 4f       	sbci	r27, 0xFF	; 255
     364:	b3 87       	std	Z+11, r27	; 0x0b
     366:	a2 87       	std	Z+10, r26	; 0x0a
     368:	9c 91       	ld	r25, X
     36a:	9f 5f       	subi	r25, 0xFF	; 255
     36c:	9c 93       	st	X, r25
     36e:	26 89       	ldd	r18, Z+22	; 0x16
     370:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <pxCurrentTCB>
     374:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <pxCurrentTCB+0x1>
     378:	96 89       	ldd	r25, Z+22	; 0x16
     37a:	29 17       	cp	r18, r25
     37c:	08 f0       	brcs	.+2      	; 0x380 <xTaskIncrementTick+0x1da>
     37e:	49 cf       	rjmp	.-366    	; 0x212 <xTaskIncrementTick+0x6c>
     380:	4b cf       	rjmp	.-362    	; 0x218 <xTaskIncrementTick+0x72>
     382:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <pxCurrentTCB>
     386:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <pxCurrentTCB+0x1>
     38a:	26 89       	ldd	r18, Z+22	; 0x16
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	f9 01       	movw	r30, r18
     390:	ee 0f       	add	r30, r30
     392:	ff 1f       	adc	r31, r31
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	2e 0f       	add	r18, r30
     39e:	3f 1f       	adc	r19, r31
     3a0:	f9 01       	movw	r30, r18
     3a2:	e6 51       	subi	r30, 0x16	; 22
     3a4:	ff 4f       	sbci	r31, 0xFF	; 255
     3a6:	90 81       	ld	r25, Z
     3a8:	92 30       	cpi	r25, 0x02	; 2
     3aa:	08 f0       	brcs	.+2      	; 0x3ae <xTaskIncrementTick+0x208>
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <xYieldPending>
     3b2:	91 11       	cpse	r25, r1
     3b4:	0c c0       	rjmp	.+24     	; 0x3ce <xTaskIncrementTick+0x228>
     3b6:	0c c0       	rjmp	.+24     	; 0x3d0 <xTaskIncrementTick+0x22a>
     3b8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <xPendedTicks>
     3bc:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <xPendedTicks+0x1>
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <xPendedTicks+0x1>
     3c6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <xPendedTicks>
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <xTaskIncrementTick+0x22a>
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	08 95       	ret

000003da <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     3da:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__data_end>
     3de:	88 23       	and	r24, r24
     3e0:	21 f0       	breq	.+8      	; 0x3ea <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <xYieldPending>
     3e8:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     3ea:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     3ee:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <uxTopReadyPriority>
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <vTaskSwitchContext+0x1c>
     3f4:	21 50       	subi	r18, 0x01	; 1
     3f6:	82 2f       	mov	r24, r18
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	fc 01       	movw	r30, r24
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	ee 0f       	add	r30, r30
     402:	ff 1f       	adc	r31, r31
     404:	ee 0f       	add	r30, r30
     406:	ff 1f       	adc	r31, r31
     408:	e8 0f       	add	r30, r24
     40a:	f9 1f       	adc	r31, r25
     40c:	e6 51       	subi	r30, 0x16	; 22
     40e:	ff 4f       	sbci	r31, 0xFF	; 255
     410:	30 81       	ld	r19, Z
     412:	33 23       	and	r19, r19
     414:	79 f3       	breq	.-34     	; 0x3f4 <vTaskSwitchContext+0x1a>
     416:	ac 01       	movw	r20, r24
     418:	44 0f       	add	r20, r20
     41a:	55 1f       	adc	r21, r21
     41c:	44 0f       	add	r20, r20
     41e:	55 1f       	adc	r21, r21
     420:	44 0f       	add	r20, r20
     422:	55 1f       	adc	r21, r21
     424:	48 0f       	add	r20, r24
     426:	59 1f       	adc	r21, r25
     428:	df 01       	movw	r26, r30
     42a:	01 80       	ldd	r0, Z+1	; 0x01
     42c:	f2 81       	ldd	r31, Z+2	; 0x02
     42e:	e0 2d       	mov	r30, r0
     430:	02 80       	ldd	r0, Z+2	; 0x02
     432:	f3 81       	ldd	r31, Z+3	; 0x03
     434:	e0 2d       	mov	r30, r0
     436:	12 96       	adiw	r26, 0x02	; 2
     438:	fc 93       	st	X, r31
     43a:	ee 93       	st	-X, r30
     43c:	11 97       	sbiw	r26, 0x01	; 1
     43e:	43 51       	subi	r20, 0x13	; 19
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	e4 17       	cp	r30, r20
     444:	f5 07       	cpc	r31, r21
     446:	29 f4       	brne	.+10     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     448:	42 81       	ldd	r20, Z+2	; 0x02
     44a:	53 81       	ldd	r21, Z+3	; 0x03
     44c:	fd 01       	movw	r30, r26
     44e:	52 83       	std	Z+2, r21	; 0x02
     450:	41 83       	std	Z+1, r20	; 0x01
     452:	fc 01       	movw	r30, r24
     454:	ee 0f       	add	r30, r30
     456:	ff 1f       	adc	r31, r31
     458:	ee 0f       	add	r30, r30
     45a:	ff 1f       	adc	r31, r31
     45c:	ee 0f       	add	r30, r30
     45e:	ff 1f       	adc	r31, r31
     460:	8e 0f       	add	r24, r30
     462:	9f 1f       	adc	r25, r31
     464:	fc 01       	movw	r30, r24
     466:	e6 51       	subi	r30, 0x16	; 22
     468:	ff 4f       	sbci	r31, 0xFF	; 255
     46a:	01 80       	ldd	r0, Z+1	; 0x01
     46c:	f2 81       	ldd	r31, Z+2	; 0x02
     46e:	e0 2d       	mov	r30, r0
     470:	86 81       	ldd	r24, Z+6	; 0x06
     472:	97 81       	ldd	r25, Z+7	; 0x07
     474:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <pxCurrentTCB+0x1>
     478:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pxCurrentTCB>
     47c:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <uxTopReadyPriority>
     480:	08 95       	ret

00000482 <LCD_SendCommand>:
				DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
				*Data = Character;
			}
	}
	return ErrRetVal;
}
     482:	df 92       	push	r13
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	c8 2f       	mov	r28, r24
     492:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <State.1734>
     496:	85 31       	cpi	r24, 0x15	; 21
     498:	09 f4       	brne	.+2      	; 0x49c <LCD_SendCommand+0x1a>
     49a:	b0 c0       	rjmp	.+352    	; 0x5fc <LCD_SendCommand+0x17a>
     49c:	8f 3f       	cpi	r24, 0xFF	; 255
     49e:	21 f0       	breq	.+8      	; 0x4a8 <LCD_SendCommand+0x26>
     4a0:	84 31       	cpi	r24, 0x14	; 20
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <LCD_SendCommand+0x24>
     4a4:	c3 c0       	rjmp	.+390    	; 0x62c <LCD_SendCommand+0x1aa>
     4a6:	87 c0       	rjmp	.+270    	; 0x5b6 <LCD_SendCommand+0x134>
     4a8:	0f 2e       	mov	r0, r31
     4aa:	f3 e7       	ldi	r31, 0x73	; 115
     4ac:	ef 2e       	mov	r14, r31
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	ff 2e       	mov	r15, r31
     4b2:	f0 2d       	mov	r31, r0
     4b4:	f7 01       	movw	r30, r14
     4b6:	d0 80       	ld	r13, Z
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	61 81       	ldd	r22, Z+1	; 0x01
     4bc:	8d 2d       	mov	r24, r13
     4be:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	f7 01       	movw	r30, r14
     4c6:	62 81       	ldd	r22, Z+2	; 0x02
     4c8:	8d 2d       	mov	r24, r13
     4ca:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
     4ce:	06 e6       	ldi	r16, 0x66	; 102
     4d0:	10 e0       	ldi	r17, 0x00	; 0
     4d2:	f8 01       	movw	r30, r16
     4d4:	d1 81       	ldd	r29, Z+1	; 0x01
     4d6:	4c 2f       	mov	r20, r28
     4d8:	41 70       	andi	r20, 0x01	; 1
     4da:	64 85       	ldd	r22, Z+12	; 0x0c
     4dc:	8d 2f       	mov	r24, r29
     4de:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
     4e2:	4c 2f       	mov	r20, r28
     4e4:	42 70       	andi	r20, 0x02	; 2
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	55 95       	asr	r21
     4ea:	47 95       	ror	r20
     4ec:	f8 01       	movw	r30, r16
     4ee:	63 85       	ldd	r22, Z+11	; 0x0b
     4f0:	8d 2f       	mov	r24, r29
     4f2:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
     4f6:	4c 2f       	mov	r20, r28
     4f8:	44 70       	andi	r20, 0x04	; 4
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	55 95       	asr	r21
     4fe:	47 95       	ror	r20
     500:	55 95       	asr	r21
     502:	47 95       	ror	r20
     504:	f8 01       	movw	r30, r16
     506:	62 85       	ldd	r22, Z+10	; 0x0a
     508:	8d 2f       	mov	r24, r29
     50a:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
     50e:	4c 2f       	mov	r20, r28
     510:	48 70       	andi	r20, 0x08	; 8
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	55 95       	asr	r21
     516:	47 95       	ror	r20
     518:	55 95       	asr	r21
     51a:	47 95       	ror	r20
     51c:	55 95       	asr	r21
     51e:	47 95       	ror	r20
     520:	f8 01       	movw	r30, r16
     522:	61 85       	ldd	r22, Z+9	; 0x09
     524:	8d 2f       	mov	r24, r29
     526:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
     52a:	4c 2f       	mov	r20, r28
     52c:	40 71       	andi	r20, 0x10	; 16
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	55 95       	asr	r21
     532:	47 95       	ror	r20
     534:	55 95       	asr	r21
     536:	47 95       	ror	r20
     538:	55 95       	asr	r21
     53a:	47 95       	ror	r20
     53c:	55 95       	asr	r21
     53e:	47 95       	ror	r20
     540:	f8 01       	movw	r30, r16
     542:	60 85       	ldd	r22, Z+8	; 0x08
     544:	8d 2f       	mov	r24, r29
     546:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
     54a:	4c 2f       	mov	r20, r28
     54c:	40 72       	andi	r20, 0x20	; 32
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	55 95       	asr	r21
     552:	47 95       	ror	r20
     554:	55 95       	asr	r21
     556:	47 95       	ror	r20
     558:	55 95       	asr	r21
     55a:	47 95       	ror	r20
     55c:	55 95       	asr	r21
     55e:	47 95       	ror	r20
     560:	55 95       	asr	r21
     562:	47 95       	ror	r20
     564:	f8 01       	movw	r30, r16
     566:	67 81       	ldd	r22, Z+7	; 0x07
     568:	8d 2f       	mov	r24, r29
     56a:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
     56e:	4c 2f       	mov	r20, r28
     570:	40 74       	andi	r20, 0x40	; 64
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	04 2e       	mov	r0, r20
     576:	45 2f       	mov	r20, r21
     578:	00 0c       	add	r0, r0
     57a:	44 1f       	adc	r20, r20
     57c:	55 0b       	sbc	r21, r21
     57e:	00 0c       	add	r0, r0
     580:	44 1f       	adc	r20, r20
     582:	55 1f       	adc	r21, r21
     584:	f8 01       	movw	r30, r16
     586:	66 81       	ldd	r22, Z+6	; 0x06
     588:	8d 2f       	mov	r24, r29
     58a:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
     58e:	4c 2f       	mov	r20, r28
     590:	44 1f       	adc	r20, r20
     592:	44 27       	eor	r20, r20
     594:	44 1f       	adc	r20, r20
     596:	f8 01       	movw	r30, r16
     598:	65 81       	ldd	r22, Z+5	; 0x05
     59a:	8d 2f       	mov	r24, r29
     59c:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
     5a0:	41 e0       	ldi	r20, 0x01	; 1
     5a2:	f7 01       	movw	r30, r14
     5a4:	63 81       	ldd	r22, Z+3	; 0x03
     5a6:	8d 2d       	mov	r24, r13
     5a8:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
     5ac:	84 e1       	ldi	r24, 0x14	; 20
     5ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1734>
     5b2:	8f ef       	ldi	r24, 0xFF	; 255
     5b4:	40 c0       	rjmp	.+128    	; 0x636 <LCD_SendCommand+0x1b4>
     5b6:	61 e4       	ldi	r22, 0x41	; 65
     5b8:	72 e0       	ldi	r23, 0x02	; 2
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	0e 94 3d 09 	call	0x127a	; 0x127a <TIM_DelayStatus>
     5c0:	8b 3f       	cpi	r24, 0xFB	; 251
     5c2:	b1 f5       	brne	.+108    	; 0x630 <LCD_SendCommand+0x1ae>
     5c4:	21 e4       	ldi	r18, 0x41	; 65
     5c6:	32 e0       	ldi	r19, 0x02	; 2
     5c8:	41 e0       	ldi	r20, 0x01	; 1
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	0e 94 2e 08 	call	0x105c	; 0x105c <TIM_DelayUs>
     5d6:	61 e4       	ldi	r22, 0x41	; 65
     5d8:	72 e0       	ldi	r23, 0x02	; 2
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	0e 94 3d 09 	call	0x127a	; 0x127a <TIM_DelayStatus>
     5e0:	81 11       	cpse	r24, r1
     5e2:	f9 cf       	rjmp	.-14     	; 0x5d6 <LCD_SendCommand+0x154>
     5e4:	e3 e7       	ldi	r30, 0x73	; 115
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	63 81       	ldd	r22, Z+3	; 0x03
     5ec:	80 81       	ld	r24, Z
     5ee:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
     5f2:	85 e1       	ldi	r24, 0x15	; 21
     5f4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1734>
     5f8:	8f ef       	ldi	r24, 0xFF	; 255
     5fa:	1d c0       	rjmp	.+58     	; 0x636 <LCD_SendCommand+0x1b4>
     5fc:	61 e4       	ldi	r22, 0x41	; 65
     5fe:	72 e0       	ldi	r23, 0x02	; 2
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	0e 94 3d 09 	call	0x127a	; 0x127a <TIM_DelayStatus>
     606:	c8 2f       	mov	r28, r24
     608:	8b 3f       	cpi	r24, 0xFB	; 251
     60a:	49 f4       	brne	.+18     	; 0x61e <LCD_SendCommand+0x19c>
     60c:	21 e4       	ldi	r18, 0x41	; 65
     60e:	32 e0       	ldi	r19, 0x02	; 2
     610:	42 e0       	ldi	r20, 0x02	; 2
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	0e 94 ac 08 	call	0x1158	; 0x1158 <TIM_DelayMs>
     61e:	c1 11       	cpse	r28, r1
     620:	09 c0       	rjmp	.+18     	; 0x634 <LCD_SendCommand+0x1b2>
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1734>
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	05 c0       	rjmp	.+10     	; 0x636 <LCD_SendCommand+0x1b4>
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	03 c0       	rjmp	.+6      	; 0x636 <LCD_SendCommand+0x1b4>
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	01 c0       	rjmp	.+2      	; 0x636 <LCD_SendCommand+0x1b4>
     634:	8f ef       	ldi	r24, 0xFF	; 255
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	df 90       	pop	r13
     644:	08 95       	ret

00000646 <LCD_SendData>:
}



ERROR_STATE_t LCD_SendData(uint8_t Character)
{
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	c8 2f       	mov	r28, r24
	}
	/************************************************************************/
	/*                     8_Bit Mode send data Function                    */
	/************************************************************************/
	#else
	switch (State)
     650:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <State.1753>
     654:	84 31       	cpi	r24, 0x14	; 20
     656:	09 f4       	brne	.+2      	; 0x65a <LCD_SendData+0x14>
     658:	85 c0       	rjmp	.+266    	; 0x764 <LCD_SendData+0x11e>
     65a:	8f 3f       	cpi	r24, 0xFF	; 255
     65c:	09 f0       	breq	.+2      	; 0x660 <LCD_SendData+0x1a>
     65e:	a5 c0       	rjmp	.+330    	; 0x7aa <LCD_SendData+0x164>
	{
		case OperationStarted:
			/*sending control signals with configurations of selection of control reg. and write process*/
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     660:	06 e6       	ldi	r16, 0x66	; 102
     662:	10 e0       	ldi	r17, 0x00	; 0
     664:	f8 01       	movw	r30, r16
     666:	d0 81       	ld	r29, Z
     668:	41 e0       	ldi	r20, 0x01	; 1
     66a:	62 81       	ldd	r22, Z+2	; 0x02
     66c:	8d 2f       	mov	r24, r29
     66e:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	f8 01       	movw	r30, r16
     676:	63 81       	ldd	r22, Z+3	; 0x03
     678:	8d 2f       	mov	r24, r29
     67a:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
			/*Setting the lcd pins*/
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0,READ_BIT(Character,BIT_0));
     67e:	f8 01       	movw	r30, r16
     680:	d1 81       	ldd	r29, Z+1	; 0x01
     682:	4c 2f       	mov	r20, r28
     684:	41 70       	andi	r20, 0x01	; 1
     686:	64 85       	ldd	r22, Z+12	; 0x0c
     688:	8d 2f       	mov	r24, r29
     68a:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1,READ_BIT(Character,BIT_1));
     68e:	4c 2f       	mov	r20, r28
     690:	42 70       	andi	r20, 0x02	; 2
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	55 95       	asr	r21
     696:	47 95       	ror	r20
     698:	f8 01       	movw	r30, r16
     69a:	63 85       	ldd	r22, Z+11	; 0x0b
     69c:	8d 2f       	mov	r24, r29
     69e:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2,READ_BIT(Character,BIT_2));
     6a2:	4c 2f       	mov	r20, r28
     6a4:	44 70       	andi	r20, 0x04	; 4
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	55 95       	asr	r21
     6aa:	47 95       	ror	r20
     6ac:	55 95       	asr	r21
     6ae:	47 95       	ror	r20
     6b0:	f8 01       	movw	r30, r16
     6b2:	62 85       	ldd	r22, Z+10	; 0x0a
     6b4:	8d 2f       	mov	r24, r29
     6b6:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3,READ_BIT(Character,BIT_3));
     6ba:	4c 2f       	mov	r20, r28
     6bc:	48 70       	andi	r20, 0x08	; 8
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	55 95       	asr	r21
     6c2:	47 95       	ror	r20
     6c4:	55 95       	asr	r21
     6c6:	47 95       	ror	r20
     6c8:	55 95       	asr	r21
     6ca:	47 95       	ror	r20
     6cc:	f8 01       	movw	r30, r16
     6ce:	61 85       	ldd	r22, Z+9	; 0x09
     6d0:	8d 2f       	mov	r24, r29
     6d2:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(Character,BIT_4));
     6d6:	4c 2f       	mov	r20, r28
     6d8:	40 71       	andi	r20, 0x10	; 16
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	55 95       	asr	r21
     6de:	47 95       	ror	r20
     6e0:	55 95       	asr	r21
     6e2:	47 95       	ror	r20
     6e4:	55 95       	asr	r21
     6e6:	47 95       	ror	r20
     6e8:	55 95       	asr	r21
     6ea:	47 95       	ror	r20
     6ec:	f8 01       	movw	r30, r16
     6ee:	60 85       	ldd	r22, Z+8	; 0x08
     6f0:	8d 2f       	mov	r24, r29
     6f2:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(Character,BIT_5));
     6f6:	4c 2f       	mov	r20, r28
     6f8:	40 72       	andi	r20, 0x20	; 32
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	55 95       	asr	r21
     6fe:	47 95       	ror	r20
     700:	55 95       	asr	r21
     702:	47 95       	ror	r20
     704:	55 95       	asr	r21
     706:	47 95       	ror	r20
     708:	55 95       	asr	r21
     70a:	47 95       	ror	r20
     70c:	55 95       	asr	r21
     70e:	47 95       	ror	r20
     710:	f8 01       	movw	r30, r16
     712:	67 81       	ldd	r22, Z+7	; 0x07
     714:	8d 2f       	mov	r24, r29
     716:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(Character,BIT_6));
     71a:	4c 2f       	mov	r20, r28
     71c:	40 74       	andi	r20, 0x40	; 64
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	04 2e       	mov	r0, r20
     722:	45 2f       	mov	r20, r21
     724:	00 0c       	add	r0, r0
     726:	44 1f       	adc	r20, r20
     728:	55 0b       	sbc	r21, r21
     72a:	00 0c       	add	r0, r0
     72c:	44 1f       	adc	r20, r20
     72e:	55 1f       	adc	r21, r21
     730:	f8 01       	movw	r30, r16
     732:	66 81       	ldd	r22, Z+6	; 0x06
     734:	8d 2f       	mov	r24, r29
     736:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(Character,BIT_7));
     73a:	4c 2f       	mov	r20, r28
     73c:	44 1f       	adc	r20, r20
     73e:	44 27       	eor	r20, r20
     740:	44 1f       	adc	r20, r20
     742:	f8 01       	movw	r30, r16
     744:	65 81       	ldd	r22, Z+5	; 0x05
     746:	8d 2f       	mov	r24, r29
     748:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
			/*writing data to the register by pulling the enable pin high for 1 Us*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     74c:	e3 e7       	ldi	r30, 0x73	; 115
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	41 e0       	ldi	r20, 0x01	; 1
     752:	63 81       	ldd	r22, Z+3	; 0x03
     754:	80 81       	ld	r24, Z
     756:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
			State = CMD_Sending;
     75a:	84 e1       	ldi	r24, 0x14	; 20
     75c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1753>


ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     760:	8f ef       	ldi	r24, 0xFF	; 255
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(Character,BIT_6));
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(Character,BIT_7));
			/*writing data to the register by pulling the enable pin high for 1 Us*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
			State = CMD_Sending;
			break;
     762:	26 c0       	rjmp	.+76     	; 0x7b0 <LCD_SendData+0x16a>
		case CMD_Sending:
			/*start timer delay in background*/
			if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     764:	61 e4       	ldi	r22, 0x41	; 65
     766:	72 e0       	ldi	r23, 0x02	; 2
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	0e 94 3d 09 	call	0x127a	; 0x127a <TIM_DelayStatus>
     76e:	8b 3f       	cpi	r24, 0xFB	; 251
     770:	f1 f4       	brne	.+60     	; 0x7ae <LCD_SendData+0x168>
			{
				TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendCommand);
     772:	21 e4       	ldi	r18, 0x41	; 65
     774:	32 e0       	ldi	r19, 0x02	; 2
     776:	41 e0       	ldi	r20, 0x01	; 1
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	0e 94 2e 08 	call	0x105c	; 0x105c <TIM_DelayUs>
				while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     784:	61 e4       	ldi	r22, 0x41	; 65
     786:	72 e0       	ldi	r23, 0x02	; 2
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	0e 94 3d 09 	call	0x127a	; 0x127a <TIM_DelayStatus>
     78e:	81 11       	cpse	r24, r1
     790:	f9 cf       	rjmp	.-14     	; 0x784 <LCD_SendData+0x13e>
				/*if timer delay function finished correctly pull enable pin low*/
				DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     792:	e3 e7       	ldi	r30, 0x73	; 115
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	63 81       	ldd	r22, Z+3	; 0x03
     79a:	80 81       	ld	r24, Z
     79c:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
				/*reset the function's state*/
				State = OperationStarted;
     7a0:	8f ef       	ldi	r24, 0xFF	; 255
     7a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1753>
				/*process finished successfully*/
				ErrRetVal = OperationSuccess;
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <LCD_SendData+0x16a>
			}
			break;
		default:
		ErrRetVal = OperationFail;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <LCD_SendData+0x16a>


ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	}
	#endif
	/*return from function*/
	return ErrRetVal;
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	08 95       	ret

000007ba <LCD_Init>:




ERROR_STATE_t LCD_Init()
{
     7ba:	8f 92       	push	r8
     7bc:	9f 92       	push	r9
     7be:	af 92       	push	r10
     7c0:	bf 92       	push	r11
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
	/************************************************************************/
	/*                 8_Bit Mode initialization Function                   */
	/************************************************************************/
	#else
	/*Starting the initialization sequence*/
	switch(State)
     7d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7d6:	8b 30       	cpi	r24, 0x0B	; 11
     7d8:	09 f4       	brne	.+2      	; 0x7dc <LCD_Init+0x22>
     7da:	d5 c0       	rjmp	.+426    	; 0x986 <__stack+0x127>
     7dc:	90 f4       	brcc	.+36     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7de:	88 30       	cpi	r24, 0x08	; 8
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <LCD_Init+0x2a>
     7e2:	b3 c0       	rjmp	.+358    	; 0x94a <__stack+0xeb>
     7e4:	38 f4       	brcc	.+14     	; 0x7f4 <LCD_Init+0x3a>
     7e6:	85 30       	cpi	r24, 0x05	; 5
     7e8:	09 f4       	brne	.+2      	; 0x7ec <LCD_Init+0x32>
     7ea:	8d c0       	rjmp	.+282    	; 0x906 <__stack+0xa7>
     7ec:	86 30       	cpi	r24, 0x06	; 6
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <LCD_Init+0x38>
     7f0:	a2 c0       	rjmp	.+324    	; 0x936 <__stack+0xd7>
     7f2:	fb c0       	rjmp	.+502    	; 0x9ea <__stack+0x18b>
     7f4:	89 30       	cpi	r24, 0x09	; 9
     7f6:	09 f4       	brne	.+2      	; 0x7fa <LCD_Init+0x40>
     7f8:	b2 c0       	rjmp	.+356    	; 0x95e <__stack+0xff>
     7fa:	8a 30       	cpi	r24, 0x0A	; 10
     7fc:	09 f4       	brne	.+2      	; 0x800 <__DATA_REGION_LENGTH__>
     7fe:	b9 c0       	rjmp	.+370    	; 0x972 <__stack+0x113>
     800:	f4 c0       	rjmp	.+488    	; 0x9ea <__stack+0x18b>
     802:	8e 30       	cpi	r24, 0x0E	; 14
     804:	09 f4       	brne	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     806:	dd c0       	rjmp	.+442    	; 0x9c2 <__stack+0x163>
     808:	38 f4       	brcc	.+14     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     80a:	8c 30       	cpi	r24, 0x0C	; 12
     80c:	09 f4       	brne	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80e:	c5 c0       	rjmp	.+394    	; 0x99a <__stack+0x13b>
     810:	8d 30       	cpi	r24, 0x0D	; 13
     812:	09 f4       	brne	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     814:	cc c0       	rjmp	.+408    	; 0x9ae <__stack+0x14f>
     816:	e9 c0       	rjmp	.+466    	; 0x9ea <__stack+0x18b>
     818:	8f 30       	cpi	r24, 0x0F	; 15
     81a:	09 f4       	brne	.+2      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     81c:	dc c0       	rjmp	.+440    	; 0x9d6 <__stack+0x177>
     81e:	8f 3f       	cpi	r24, 0xFF	; 255
     820:	09 f0       	breq	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     822:	e3 c0       	rjmp	.+454    	; 0x9ea <__stack+0x18b>
	{
		case OperationStarted:
		/*Initialize timer2*/
		TIM_Init(TIMER_2);
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	0e 94 27 07 	call	0xe4e	; 0xe4e <TIM_Init>
		/*Initializing the LCD Data Pins*/
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     82a:	c6 e6       	ldi	r28, 0x66	; 102
     82c:	d0 e0       	ldi	r29, 0x00	; 0
     82e:	8d 80       	ldd	r8, Y+5	; 0x05
     830:	09 81       	ldd	r16, Y+1	; 0x01
     832:	41 e0       	ldi	r20, 0x01	; 1
     834:	68 2d       	mov	r22, r8
     836:	80 2f       	mov	r24, r16
     838:	0e 94 98 05 	call	0xb30	; 0xb30 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     83c:	9e 80       	ldd	r9, Y+6	; 0x06
     83e:	41 e0       	ldi	r20, 0x01	; 1
     840:	69 2d       	mov	r22, r9
     842:	80 2f       	mov	r24, r16
     844:	0e 94 98 05 	call	0xb30	; 0xb30 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     848:	af 80       	ldd	r10, Y+7	; 0x07
     84a:	41 e0       	ldi	r20, 0x01	; 1
     84c:	6a 2d       	mov	r22, r10
     84e:	80 2f       	mov	r24, r16
     850:	0e 94 98 05 	call	0xb30	; 0xb30 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     854:	b8 84       	ldd	r11, Y+8	; 0x08
     856:	41 e0       	ldi	r20, 0x01	; 1
     858:	6b 2d       	mov	r22, r11
     85a:	80 2f       	mov	r24, r16
     85c:	0e 94 98 05 	call	0xb30	; 0xb30 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3, PIN_OUTPUT);
     860:	c9 84       	ldd	r12, Y+9	; 0x09
     862:	41 e0       	ldi	r20, 0x01	; 1
     864:	6c 2d       	mov	r22, r12
     866:	80 2f       	mov	r24, r16
     868:	0e 94 98 05 	call	0xb30	; 0xb30 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2, PIN_OUTPUT);
     86c:	da 84       	ldd	r13, Y+10	; 0x0a
     86e:	41 e0       	ldi	r20, 0x01	; 1
     870:	6d 2d       	mov	r22, r13
     872:	80 2f       	mov	r24, r16
     874:	0e 94 98 05 	call	0xb30	; 0xb30 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1, PIN_OUTPUT);
     878:	eb 84       	ldd	r14, Y+11	; 0x0b
     87a:	41 e0       	ldi	r20, 0x01	; 1
     87c:	6e 2d       	mov	r22, r14
     87e:	80 2f       	mov	r24, r16
     880:	0e 94 98 05 	call	0xb30	; 0xb30 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0, PIN_OUTPUT);
     884:	fc 84       	ldd	r15, Y+12	; 0x0c
     886:	41 e0       	ldi	r20, 0x01	; 1
     888:	6f 2d       	mov	r22, r15
     88a:	80 2f       	mov	r24, r16
     88c:	0e 94 98 05 	call	0xb30	; 0xb30 <DIO_SetPinDirection>
		/*Initializing the LCD CTRL Pins*/
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     890:	18 81       	ld	r17, Y
     892:	41 e0       	ldi	r20, 0x01	; 1
     894:	6a 81       	ldd	r22, Y+2	; 0x02
     896:	81 2f       	mov	r24, r17
     898:	0e 94 98 05 	call	0xb30	; 0xb30 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     89c:	41 e0       	ldi	r20, 0x01	; 1
     89e:	6b 81       	ldd	r22, Y+3	; 0x03
     8a0:	81 2f       	mov	r24, r17
     8a2:	0e 94 98 05 	call	0xb30	; 0xb30 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     8a6:	41 e0       	ldi	r20, 0x01	; 1
     8a8:	6c 81       	ldd	r22, Y+4	; 0x04
     8aa:	81 2f       	mov	r24, r17
     8ac:	0e 94 98 05 	call	0xb30	; 0xb30 <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	68 2d       	mov	r22, r8
     8b4:	80 2f       	mov	r24, r16
     8b6:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	69 2d       	mov	r22, r9
     8be:	80 2f       	mov	r24, r16
     8c0:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	6a 2d       	mov	r22, r10
     8c8:	80 2f       	mov	r24, r16
     8ca:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	6b 2d       	mov	r22, r11
     8d2:	80 2f       	mov	r24, r16
     8d4:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3, PIN_LOW);
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	6c 2d       	mov	r22, r12
     8dc:	80 2f       	mov	r24, r16
     8de:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2, PIN_LOW);
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	6d 2d       	mov	r22, r13
     8e6:	80 2f       	mov	r24, r16
     8e8:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1, PIN_LOW);
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	6e 2d       	mov	r22, r14
     8f0:	80 2f       	mov	r24, r16
     8f2:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0, PIN_LOW);
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	6f 2d       	mov	r22, r15
     8fa:	80 2f       	mov	r24, r16
     8fc:	0e 94 01 06 	call	0xc02	; 0xc02 <DIO_WritePin>
		State = LCD_Pin_Initializing;
     900:	85 e0       	ldi	r24, 0x05	; 5
     902:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
     906:	61 e4       	ldi	r22, 0x41	; 65
     908:	72 e0       	ldi	r23, 0x02	; 2
     90a:	82 e0       	ldi	r24, 0x02	; 2
     90c:	0e 94 3d 09 	call	0x127a	; 0x127a <TIM_DelayStatus>
     910:	c8 2f       	mov	r28, r24
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     912:	8b 3f       	cpi	r24, 0xFB	; 251
     914:	49 f4       	brne	.+18     	; 0x928 <__stack+0xc9>
		{
			TIM_DelayMs(TIMER_2,15, (void (*)(void))LCD_SendCommand);
     916:	21 e4       	ldi	r18, 0x41	; 65
     918:	32 e0       	ldi	r19, 0x02	; 2
     91a:	4f e0       	ldi	r20, 0x0F	; 15
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	82 e0       	ldi	r24, 0x02	; 2
     924:	0e 94 ac 08 	call	0x1158	; 0x1158 <TIM_DelayMs>
		}
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     928:	c1 11       	cpse	r28, r1
     92a:	61 c0       	rjmp	.+194    	; 0x9ee <__stack+0x18f>
		{
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
     92c:	86 e0       	ldi	r24, 0x06	; 6
     92e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     932:	8f ef       	ldi	r24, 0xFF	; 255
     934:	6f c0       	rjmp	.+222    	; 0xa14 <__stack+0x1b5>
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
		case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     936:	80 e3       	ldi	r24, 0x30	; 48
     938:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     93c:	81 11       	cpse	r24, r1
     93e:	59 c0       	rjmp	.+178    	; 0x9f2 <__stack+0x193>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     940:	88 e0       	ldi	r24, 0x08	; 8
     942:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     946:	8f ef       	ldi	r24, 0xFF	; 255
     948:	65 c0       	rjmp	.+202    	; 0xa14 <__stack+0x1b5>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     94a:	80 e3       	ldi	r24, 0x30	; 48
     94c:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     950:	81 11       	cpse	r24, r1
     952:	51 c0       	rjmp	.+162    	; 0x9f6 <__stack+0x197>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     954:	89 e0       	ldi	r24, 0x09	; 9
     956:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     95a:	8f ef       	ldi	r24, 0xFF	; 255
     95c:	5b c0       	rjmp	.+182    	; 0xa14 <__stack+0x1b5>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     95e:	80 e3       	ldi	r24, 0x30	; 48
     960:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     964:	81 11       	cpse	r24, r1
     966:	49 c0       	rjmp	.+146    	; 0x9fa <__stack+0x19b>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     968:	8a e0       	ldi	r24, 0x0A	; 10
     96a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	51 c0       	rjmp	.+162    	; 0xa14 <__stack+0x1b5>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_3);
     972:	88 e3       	ldi	r24, 0x38	; 56
     974:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     978:	81 11       	cpse	r24, r1
     97a:	41 c0       	rjmp	.+130    	; 0x9fe <__stack+0x19f>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     97c:	8b e0       	ldi	r24, 0x0B	; 11
     97e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	47 c0       	rjmp	.+142    	; 0xa14 <__stack+0x1b5>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
     986:	8c e0       	ldi	r24, 0x0C	; 12
     988:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     98c:	81 11       	cpse	r24, r1
     98e:	39 c0       	rjmp	.+114    	; 0xa02 <__stack+0x1a3>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     990:	8c e0       	ldi	r24, 0x0C	; 12
     992:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	3d c0       	rjmp	.+122    	; 0xa14 <__stack+0x1b5>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     9a0:	81 11       	cpse	r24, r1
     9a2:	31 c0       	rjmp	.+98     	; 0xa06 <__stack+0x1a7>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     9a4:	8d e0       	ldi	r24, 0x0D	; 13
     9a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9aa:	8f ef       	ldi	r24, 0xFF	; 255
     9ac:	33 c0       	rjmp	.+102    	; 0xa14 <__stack+0x1b5>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);
     9ae:	86 e0       	ldi	r24, 0x06	; 6
     9b0:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     9b4:	81 11       	cpse	r24, r1
     9b6:	29 c0       	rjmp	.+82     	; 0xa0a <__stack+0x1ab>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     9b8:	8e e0       	ldi	r24, 0x0E	; 14
     9ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9be:	8f ef       	ldi	r24, 0xFF	; 255
     9c0:	29 c0       	rjmp	.+82     	; 0xa14 <__stack+0x1b5>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     9c2:	80 e8       	ldi	r24, 0x80	; 128
     9c4:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     9c8:	81 11       	cpse	r24, r1
     9ca:	21 c0       	rjmp	.+66     	; 0xa0e <__stack+0x1af>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     9cc:	8f e0       	ldi	r24, 0x0F	; 15
     9ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9d2:	8f ef       	ldi	r24, 0xFF	; 255
     9d4:	1f c0       	rjmp	.+62     	; 0xa14 <__stack+0x1b5>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     9dc:	81 11       	cpse	r24, r1
     9de:	19 c0       	rjmp	.+50     	; 0xa12 <__stack+0x1b3>
		{
			State = OperationStarted;
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			ErrRetVal = OperationSuccess;
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	15 c0       	rjmp	.+42     	; 0xa14 <__stack+0x1b5>
		}
		break;
		default:
		ErrRetVal = OperationFail;
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	13 c0       	rjmp	.+38     	; 0xa14 <__stack+0x1b5>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	11 c0       	rjmp	.+34     	; 0xa14 <__stack+0x1b5>
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	0f c0       	rjmp	.+30     	; 0xa14 <__stack+0x1b5>
     9f6:	8f ef       	ldi	r24, 0xFF	; 255
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__stack+0x1b5>
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	0b c0       	rjmp	.+22     	; 0xa14 <__stack+0x1b5>
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	09 c0       	rjmp	.+18     	; 0xa14 <__stack+0x1b5>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	07 c0       	rjmp	.+14     	; 0xa14 <__stack+0x1b5>
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	05 c0       	rjmp	.+10     	; 0xa14 <__stack+0x1b5>
     a0a:	8f ef       	ldi	r24, 0xFF	; 255
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <__stack+0x1b5>
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <__stack+0x1b5>
     a12:	8f ef       	ldi	r24, 0xFF	; 255
		ErrRetVal = OperationFail;
		break;
	}
	#endif
	return ErrRetVal;
}
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	bf 90       	pop	r11
     a26:	af 90       	pop	r10
     a28:	9f 90       	pop	r9
     a2a:	8f 90       	pop	r8
     a2c:	08 95       	ret

00000a2e <LCD_SendString>:
ERROR_STATE_t LCD_SendString(const uint8_t* String)
{
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
     a2e:	00 97       	sbiw	r24, 0x00	; 0
     a30:	b9 f0       	breq	.+46     	; 0xa60 <LCD_SendString+0x32>
		if (String[Number] != NULL_TERMINATOR ) {
     a32:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <Number.1790>
     a36:	fc 01       	movw	r30, r24
     a38:	e2 0f       	add	r30, r18
     a3a:	f1 1d       	adc	r31, r1
     a3c:	80 81       	ld	r24, Z
     a3e:	88 23       	and	r24, r24
     a40:	59 f0       	breq	.+22     	; 0xa58 <LCD_SendString+0x2a>
			ErrRetVal = OperationRunning;
			LCD_SendDataRetVal = LCD_SendData(String[Number]);
     a42:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
			if(LCD_SendDataRetVal == OperationSuccess)
     a46:	81 11       	cpse	r24, r1
     a48:	0d c0       	rjmp	.+26     	; 0xa64 <LCD_SendString+0x36>
			{
				Number++;
     a4a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Number.1790>
     a4e:	8f 5f       	subi	r24, 0xFF	; 255
     a50:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Number.1790>
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	08 95       	ret
				Number++;
			}
		}
		else
		{
			Number = 0;
     a58:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Number.1790>
			ErrRetVal = OperationSuccess;
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	08 95       	ret
		}
	} else {
		ErrRetVal = OperationFail;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	08 95       	ret
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     a64:	82 e0       	ldi	r24, 0x02	; 2
		}
	} else {
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     a66:	08 95       	ret

00000a68 <LCD_SendNumber>:




ERROR_STATE_t LCD_SendNumber(uint32_t Number)
{
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	2a 97       	sbiw	r28, 0x0a	; 10
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
	/*urgent a blocking function*/
	uint8_t ErrRetVal = OperationStarted;
	uint8_t FunRetVal = OperationStarted;
	uint8_t String[10];
	STR_Number2String((uint32_t)Number,String);
     a7c:	ae 01       	movw	r20, r28
     a7e:	4f 5f       	subi	r20, 0xFF	; 255
     a80:	5f 4f       	sbci	r21, 0xFF	; 255
     a82:	0e 94 6e 05 	call	0xadc	; 0xadc <STR_Number2String>

ERROR_STATE_t LCD_SendNumber(uint32_t Number)
{
	/*urgent a blocking function*/
	uint8_t ErrRetVal = OperationStarted;
	uint8_t FunRetVal = OperationStarted;
     a86:	8f ef       	ldi	r24, 0xFF	; 255


ERROR_STATE_t LCD_SendNumber(uint32_t Number)
{
	/*urgent a blocking function*/
	uint8_t ErrRetVal = OperationStarted;
     a88:	9f ef       	ldi	r25, 0xFF	; 255
	uint8_t FunRetVal = OperationStarted;
	uint8_t String[10];
	STR_Number2String((uint32_t)Number,String);
	while(FunRetVal != OperationSuccess)
     a8a:	09 c0       	rjmp	.+18     	; 0xa9e <LCD_SendNumber+0x36>
   {
      FunRetVal = LCD_SendString((uint8_t*)String);
     a8c:	ce 01       	movw	r24, r28
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
      if(FunRetVal == OperationSuccess)
     a94:	81 11       	cpse	r24, r1
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <LCD_SendNumber+0x34>
      {
         ErrRetVal = OperationSuccess;
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <LCD_SendNumber+0x36>
      }
      else
      {
         ErrRetVal = OperationFail;
     a9c:	91 e0       	ldi	r25, 0x01	; 1
	/*urgent a blocking function*/
	uint8_t ErrRetVal = OperationStarted;
	uint8_t FunRetVal = OperationStarted;
	uint8_t String[10];
	STR_Number2String((uint32_t)Number,String);
	while(FunRetVal != OperationSuccess)
     a9e:	81 11       	cpse	r24, r1
     aa0:	f5 cf       	rjmp	.-22     	; 0xa8c <LCD_SendNumber+0x24>
      {
         ErrRetVal = OperationFail;
      }
   }
	return ErrRetVal;
}
     aa2:	89 2f       	mov	r24, r25
     aa4:	2a 96       	adiw	r28, 0x0a	; 10
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	cd bf       	out	0x3d, r28	; 61
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <STR_StringReverse>:
	}
	STR_StringReverse(SringCpy);
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
{
     ab6:	dc 01       	movw	r26, r24
	uint8_t* A = String;
	uint8_t* B = String;
     ab8:	fc 01       	movw	r30, r24
	uint8_t Temp = 0;
	while(*B != '\0')
     aba:	01 c0       	rjmp	.+2      	; 0xabe <STR_StringReverse+0x8>
	{
		B++;
     abc:	31 96       	adiw	r30, 0x01	; 1
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
     abe:	80 81       	ld	r24, Z
     ac0:	81 11       	cpse	r24, r1
     ac2:	fc cf       	rjmp	.-8      	; 0xabc <STR_StringReverse+0x6>
	{
		B++;
	}
	B--;
     ac4:	31 97       	sbiw	r30, 0x01	; 1
	while(A<B)
     ac6:	05 c0       	rjmp	.+10     	; 0xad2 <STR_StringReverse+0x1c>
	{
		//swap
		Temp=*A;
     ac8:	8c 91       	ld	r24, X
		*A=*B;
     aca:	90 81       	ld	r25, Z
     acc:	9d 93       	st	X+, r25
		*B=Temp;
     ace:	80 83       	st	Z, r24
		A++;B--;
     ad0:	31 97       	sbiw	r30, 0x01	; 1
	while(*B != '\0')
	{
		B++;
	}
	B--;
	while(A<B)
     ad2:	ae 17       	cp	r26, r30
     ad4:	bf 07       	cpc	r27, r31
     ad6:	c0 f3       	brcs	.-16     	; 0xac8 <STR_StringReverse+0x12>
		*A=*B;
		*B=Temp;
		A++;B--;
	}
	return 0;
}
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	08 95       	ret

00000adc <STR_Number2String>:
		Multiplier*=10;
	}while(String!=StartOfString);
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	8a 01       	movw	r16, r20
	uint8_t* SringCpy = String;
	if(Number==0)
     ae6:	61 15       	cp	r22, r1
     ae8:	71 05       	cpc	r23, r1
     aea:	81 05       	cpc	r24, r1
     aec:	91 05       	cpc	r25, r1
     aee:	21 f4       	brne	.+8      	; 0xaf8 <STR_Number2String+0x1c>
	{
		*String='0';
     af0:	80 e3       	ldi	r24, 0x30	; 48
     af2:	fa 01       	movw	r30, r20
     af4:	80 83       	st	Z, r24
     af6:	13 c0       	rjmp	.+38     	; 0xb1e <STR_Number2String+0x42>
     af8:	ea 01       	movw	r28, r20
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
     afa:	2a e0       	ldi	r18, 0x0A	; 10
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__udivmodsi4>
     b06:	60 5d       	subi	r22, 0xD0	; 208
     b08:	69 93       	st	Y+, r22
			String++;
			Number/=10;
     b0a:	62 2f       	mov	r22, r18
     b0c:	73 2f       	mov	r23, r19
     b0e:	84 2f       	mov	r24, r20
     b10:	95 2f       	mov	r25, r21
		}while(Number);
     b12:	61 15       	cp	r22, r1
     b14:	71 05       	cpc	r23, r1
     b16:	81 05       	cpc	r24, r1
     b18:	91 05       	cpc	r25, r1
     b1a:	79 f7       	brne	.-34     	; 0xafa <STR_Number2String+0x1e>
		*String = NULL_TERMINATOR;
     b1c:	18 82       	st	Y, r1
	}
	STR_StringReverse(SringCpy);
     b1e:	c8 01       	movw	r24, r16
     b20:	0e 94 5b 05 	call	0xab6	; 0xab6 <STR_StringReverse>
	return 0;
}
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	08 95       	ret

00000b30 <DIO_SetPinDirection>:
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
     b30:	42 30       	cpi	r20, 0x02	; 2
     b32:	08 f0       	brcs	.+2      	; 0xb36 <DIO_SetPinDirection+0x6>
     b34:	60 c0       	rjmp	.+192    	; 0xbf6 <DIO_SetPinDirection+0xc6>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
     b36:	68 30       	cpi	r22, 0x08	; 8
     b38:	08 f0       	brcs	.+2      	; 0xb3c <DIO_SetPinDirection+0xc>
     b3a:	5f c0       	rjmp	.+190    	; 0xbfa <DIO_SetPinDirection+0xca>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	e1 f0       	breq	.+56     	; 0xb78 <DIO_SetPinDirection+0x48>
     b40:	30 f0       	brcs	.+12     	; 0xb4e <DIO_SetPinDirection+0x1e>
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	71 f1       	breq	.+92     	; 0xba2 <DIO_SetPinDirection+0x72>
     b46:	83 30       	cpi	r24, 0x03	; 3
     b48:	09 f4       	brne	.+2      	; 0xb4c <DIO_SetPinDirection+0x1c>
     b4a:	40 c0       	rjmp	.+128    	; 0xbcc <DIO_SetPinDirection+0x9c>
     b4c:	58 c0       	rjmp	.+176    	; 0xbfe <DIO_SetPinDirection+0xce>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
     b4e:	2a b3       	in	r18, 0x1a	; 26
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	06 2e       	mov	r0, r22
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <DIO_SetPinDirection+0x2c>
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	0a 94       	dec	r0
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <DIO_SetPinDirection+0x28>
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <DIO_SetPinDirection+0x38>
     b64:	44 0f       	add	r20, r20
     b66:	55 1f       	adc	r21, r21
     b68:	6a 95       	dec	r22
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <DIO_SetPinDirection+0x34>
     b6c:	80 95       	com	r24
     b6e:	82 23       	and	r24, r18
     b70:	48 2b       	or	r20, r24
     b72:	4a bb       	out	0x1a, r20	; 26
				u8_ErrorState=ERROR_OK;
     b74:	80 e0       	ldi	r24, 0x00	; 0
				break;
     b76:	08 95       	ret
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
     b78:	27 b3       	in	r18, 0x17	; 23
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	06 2e       	mov	r0, r22
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <DIO_SetPinDirection+0x56>
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	0a 94       	dec	r0
     b88:	e2 f7       	brpl	.-8      	; 0xb82 <DIO_SetPinDirection+0x52>
     b8a:	50 e0       	ldi	r21, 0x00	; 0
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <DIO_SetPinDirection+0x62>
     b8e:	44 0f       	add	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	6a 95       	dec	r22
     b94:	e2 f7       	brpl	.-8      	; 0xb8e <DIO_SetPinDirection+0x5e>
     b96:	80 95       	com	r24
     b98:	82 23       	and	r24, r18
     b9a:	48 2b       	or	r20, r24
     b9c:	47 bb       	out	0x17, r20	; 23
				u8_ErrorState=ERROR_OK;
     b9e:	80 e0       	ldi	r24, 0x00	; 0
				break;
     ba0:	08 95       	ret
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
     ba2:	24 b3       	in	r18, 0x14	; 20
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	06 2e       	mov	r0, r22
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <DIO_SetPinDirection+0x80>
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	0a 94       	dec	r0
     bb2:	e2 f7       	brpl	.-8      	; 0xbac <DIO_SetPinDirection+0x7c>
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <DIO_SetPinDirection+0x8c>
     bb8:	44 0f       	add	r20, r20
     bba:	55 1f       	adc	r21, r21
     bbc:	6a 95       	dec	r22
     bbe:	e2 f7       	brpl	.-8      	; 0xbb8 <DIO_SetPinDirection+0x88>
     bc0:	80 95       	com	r24
     bc2:	82 23       	and	r24, r18
     bc4:	48 2b       	or	r20, r24
     bc6:	44 bb       	out	0x14, r20	; 20
				u8_ErrorState=ERROR_OK;
     bc8:	80 e0       	ldi	r24, 0x00	; 0
				break;
     bca:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
     bcc:	21 b3       	in	r18, 0x11	; 17
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	06 2e       	mov	r0, r22
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <DIO_SetPinDirection+0xaa>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	0a 94       	dec	r0
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <DIO_SetPinDirection+0xa6>
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <DIO_SetPinDirection+0xb6>
     be2:	44 0f       	add	r20, r20
     be4:	55 1f       	adc	r21, r21
     be6:	6a 95       	dec	r22
     be8:	e2 f7       	brpl	.-8      	; 0xbe2 <DIO_SetPinDirection+0xb2>
     bea:	80 95       	com	r24
     bec:	82 23       	and	r24, r18
     bee:	48 2b       	or	r20, r24
     bf0:	41 bb       	out	0x11, r20	; 17
				u8_ErrorState=ERROR_OK;
     bf2:	80 e0       	ldi	r24, 0x00	; 0
				break;
     bf4:	08 95       	ret
ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
	{
		u8_ErrorState=ERROR_NOK;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}		
	}
	return u8_ErrorState;
}
     c00:	08 95       	ret

00000c02 <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
     c02:	42 30       	cpi	r20, 0x02	; 2
     c04:	08 f0       	brcs	.+2      	; 0xc08 <DIO_WritePin+0x6>
     c06:	60 c0       	rjmp	.+192    	; 0xcc8 <DIO_WritePin+0xc6>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
     c08:	68 30       	cpi	r22, 0x08	; 8
     c0a:	08 f0       	brcs	.+2      	; 0xc0e <DIO_WritePin+0xc>
     c0c:	5f c0       	rjmp	.+190    	; 0xccc <DIO_WritePin+0xca>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	e1 f0       	breq	.+56     	; 0xc4a <DIO_WritePin+0x48>
     c12:	30 f0       	brcs	.+12     	; 0xc20 <DIO_WritePin+0x1e>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	71 f1       	breq	.+92     	; 0xc74 <DIO_WritePin+0x72>
     c18:	83 30       	cpi	r24, 0x03	; 3
     c1a:	09 f4       	brne	.+2      	; 0xc1e <DIO_WritePin+0x1c>
     c1c:	40 c0       	rjmp	.+128    	; 0xc9e <DIO_WritePin+0x9c>
     c1e:	58 c0       	rjmp	.+176    	; 0xcd0 <DIO_WritePin+0xce>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
     c20:	2b b3       	in	r18, 0x1b	; 27
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	06 2e       	mov	r0, r22
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <DIO_WritePin+0x2c>
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	0a 94       	dec	r0
     c30:	e2 f7       	brpl	.-8      	; 0xc2a <DIO_WritePin+0x28>
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <DIO_WritePin+0x38>
     c36:	44 0f       	add	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	6a 95       	dec	r22
     c3c:	e2 f7       	brpl	.-8      	; 0xc36 <DIO_WritePin+0x34>
     c3e:	80 95       	com	r24
     c40:	82 23       	and	r24, r18
     c42:	48 2b       	or	r20, r24
     c44:	4b bb       	out	0x1b, r20	; 27
				u8_ErrorState=ERROR_OK;
     c46:	80 e0       	ldi	r24, 0x00	; 0
				break;
     c48:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
     c4a:	28 b3       	in	r18, 0x18	; 24
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	06 2e       	mov	r0, r22
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <DIO_WritePin+0x56>
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	0a 94       	dec	r0
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <DIO_WritePin+0x52>
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <DIO_WritePin+0x62>
     c60:	44 0f       	add	r20, r20
     c62:	55 1f       	adc	r21, r21
     c64:	6a 95       	dec	r22
     c66:	e2 f7       	brpl	.-8      	; 0xc60 <DIO_WritePin+0x5e>
     c68:	80 95       	com	r24
     c6a:	82 23       	and	r24, r18
     c6c:	48 2b       	or	r20, r24
     c6e:	48 bb       	out	0x18, r20	; 24
				u8_ErrorState=ERROR_OK;
     c70:	80 e0       	ldi	r24, 0x00	; 0
				break;
     c72:	08 95       	ret
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
     c74:	25 b3       	in	r18, 0x15	; 21
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	06 2e       	mov	r0, r22
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <DIO_WritePin+0x80>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <DIO_WritePin+0x7c>
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <DIO_WritePin+0x8c>
     c8a:	44 0f       	add	r20, r20
     c8c:	55 1f       	adc	r21, r21
     c8e:	6a 95       	dec	r22
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <DIO_WritePin+0x88>
     c92:	80 95       	com	r24
     c94:	82 23       	and	r24, r18
     c96:	48 2b       	or	r20, r24
     c98:	45 bb       	out	0x15, r20	; 21
				u8_ErrorState=ERROR_OK;
     c9a:	80 e0       	ldi	r24, 0x00	; 0
				break;
     c9c:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
     c9e:	22 b3       	in	r18, 0x12	; 18
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	06 2e       	mov	r0, r22
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_WritePin+0xaa>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_WritePin+0xa6>
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <DIO_WritePin+0xb6>
     cb4:	44 0f       	add	r20, r20
     cb6:	55 1f       	adc	r21, r21
     cb8:	6a 95       	dec	r22
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <DIO_WritePin+0xb2>
     cbc:	80 95       	com	r24
     cbe:	82 23       	and	r24, r18
     cc0:	48 2b       	or	r20, r24
     cc2:	42 bb       	out	0x12, r20	; 18
				u8_ErrorState=ERROR_OK;
     cc4:	80 e0       	ldi	r24, 0x00	; 0
				break;
     cc6:	08 95       	ret
ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
	{
		u8_ErrorState=ERROR_NOK;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
     cd2:	08 95       	ret

00000cd4 <GetFreqPrescaleRatio>:
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	08 f0       	brcs	.+2      	; 0xcda <GetFreqPrescaleRatio+0x6>
     cd8:	4e c0       	rjmp	.+156    	; 0xd76 <GetFreqPrescaleRatio+0xa2>
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	fc 01       	movw	r30, r24
     cde:	ee 0f       	add	r30, r30
     ce0:	ff 1f       	adc	r31, r31
     ce2:	8e 0f       	add	r24, r30
     ce4:	9f 1f       	adc	r25, r31
     ce6:	fc 01       	movw	r30, r24
     ce8:	e5 58       	subi	r30, 0x85	; 133
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	83 30       	cpi	r24, 0x03	; 3
     cf0:	09 f1       	breq	.+66     	; 0xd34 <GetFreqPrescaleRatio+0x60>
     cf2:	28 f4       	brcc	.+10     	; 0xcfe <GetFreqPrescaleRatio+0x2a>
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	41 f0       	breq	.+16     	; 0xd08 <GetFreqPrescaleRatio+0x34>
     cf8:	82 30       	cpi	r24, 0x02	; 2
     cfa:	89 f0       	breq	.+34     	; 0xd1e <GetFreqPrescaleRatio+0x4a>
     cfc:	a2 c0       	rjmp	.+324    	; 0xe42 <GetFreqPrescaleRatio+0x16e>
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	21 f1       	breq	.+72     	; 0xd4a <GetFreqPrescaleRatio+0x76>
     d02:	85 30       	cpi	r24, 0x05	; 5
     d04:	69 f1       	breq	.+90     	; 0xd60 <GetFreqPrescaleRatio+0x8c>
     d06:	9d c0       	rjmp	.+314    	; 0xe42 <GetFreqPrescaleRatio+0x16e>
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	a0 e8       	ldi	r26, 0x80	; 128
     d0e:	bd e3       	ldi	r27, 0x3D	; 61
     d10:	fb 01       	movw	r30, r22
     d12:	80 83       	st	Z, r24
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	a2 83       	std	Z+2, r26	; 0x02
     d18:	b3 83       	std	Z+3, r27	; 0x03
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	08 95       	ret
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	a0 e0       	ldi	r26, 0x00	; 0
     d24:	bf e3       	ldi	r27, 0x3F	; 63
     d26:	fb 01       	movw	r30, r22
     d28:	80 83       	st	Z, r24
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	a2 83       	std	Z+2, r26	; 0x02
     d2e:	b3 83       	std	Z+3, r27	; 0x03
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	08 95       	ret
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	a0 e8       	ldi	r26, 0x80	; 128
     d3a:	b0 e4       	ldi	r27, 0x40	; 64
     d3c:	fb 01       	movw	r30, r22
     d3e:	80 83       	st	Z, r24
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	a2 83       	std	Z+2, r26	; 0x02
     d44:	b3 83       	std	Z+3, r27	; 0x03
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	08 95       	ret
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a0 e8       	ldi	r26, 0x80	; 128
     d50:	b1 e4       	ldi	r27, 0x41	; 65
     d52:	fb 01       	movw	r30, r22
     d54:	80 83       	st	Z, r24
     d56:	91 83       	std	Z+1, r25	; 0x01
     d58:	a2 83       	std	Z+2, r26	; 0x02
     d5a:	b3 83       	std	Z+3, r27	; 0x03
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	08 95       	ret
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	a0 e8       	ldi	r26, 0x80	; 128
     d66:	b2 e4       	ldi	r27, 0x42	; 66
     d68:	fb 01       	movw	r30, r22
     d6a:	80 83       	st	Z, r24
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	a2 83       	std	Z+2, r26	; 0x02
     d70:	b3 83       	std	Z+3, r27	; 0x03
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	08 95       	ret
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	09 f0       	breq	.+2      	; 0xd7c <GetFreqPrescaleRatio+0xa8>
     d7a:	65 c0       	rjmp	.+202    	; 0xe46 <GetFreqPrescaleRatio+0x172>
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	fc 01       	movw	r30, r24
     d80:	ee 0f       	add	r30, r30
     d82:	ff 1f       	adc	r31, r31
     d84:	8e 0f       	add	r24, r30
     d86:	9f 1f       	adc	r25, r31
     d88:	fc 01       	movw	r30, r24
     d8a:	e5 58       	subi	r30, 0x85	; 133
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	e2 81       	ldd	r30, Z+2	; 0x02
     d90:	8e 2f       	mov	r24, r30
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	fc 01       	movw	r30, r24
     d96:	31 97       	sbiw	r30, 0x01	; 1
     d98:	e7 30       	cpi	r30, 0x07	; 7
     d9a:	f1 05       	cpc	r31, r1
     d9c:	08 f0       	brcs	.+2      	; 0xda0 <GetFreqPrescaleRatio+0xcc>
     d9e:	55 c0       	rjmp	.+170    	; 0xe4a <GetFreqPrescaleRatio+0x176>
     da0:	e6 5d       	subi	r30, 0xD6	; 214
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__tablejump2__>
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	a0 e8       	ldi	r26, 0x80	; 128
     dae:	bd e3       	ldi	r27, 0x3D	; 61
     db0:	fb 01       	movw	r30, r22
     db2:	80 83       	st	Z, r24
     db4:	91 83       	std	Z+1, r25	; 0x01
     db6:	a2 83       	std	Z+2, r26	; 0x02
     db8:	b3 83       	std	Z+3, r27	; 0x03
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	08 95       	ret
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	a0 e0       	ldi	r26, 0x00	; 0
     dc4:	bf e3       	ldi	r27, 0x3F	; 63
     dc6:	fb 01       	movw	r30, r22
     dc8:	80 83       	st	Z, r24
     dca:	91 83       	std	Z+1, r25	; 0x01
     dcc:	a2 83       	std	Z+2, r26	; 0x02
     dce:	b3 83       	std	Z+3, r27	; 0x03
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	08 95       	ret
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	a0 e0       	ldi	r26, 0x00	; 0
     dda:	b0 e4       	ldi	r27, 0x40	; 64
     ddc:	fb 01       	movw	r30, r22
     dde:	80 83       	st	Z, r24
     de0:	91 83       	std	Z+1, r25	; 0x01
     de2:	a2 83       	std	Z+2, r26	; 0x02
     de4:	b3 83       	std	Z+3, r27	; 0x03
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	08 95       	ret
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	a0 e8       	ldi	r26, 0x80	; 128
     df0:	b0 e4       	ldi	r27, 0x40	; 64
     df2:	fb 01       	movw	r30, r22
     df4:	80 83       	st	Z, r24
     df6:	91 83       	std	Z+1, r25	; 0x01
     df8:	a2 83       	std	Z+2, r26	; 0x02
     dfa:	b3 83       	std	Z+3, r27	; 0x03
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	08 95       	ret
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 e0       	ldi	r26, 0x00	; 0
     e06:	b1 e4       	ldi	r27, 0x41	; 65
     e08:	fb 01       	movw	r30, r22
     e0a:	80 83       	st	Z, r24
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	a2 83       	std	Z+2, r26	; 0x02
     e10:	b3 83       	std	Z+3, r27	; 0x03
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	08 95       	ret
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	a0 e8       	ldi	r26, 0x80	; 128
     e1c:	b1 e4       	ldi	r27, 0x41	; 65
     e1e:	fb 01       	movw	r30, r22
     e20:	80 83       	st	Z, r24
     e22:	91 83       	std	Z+1, r25	; 0x01
     e24:	a2 83       	std	Z+2, r26	; 0x02
     e26:	b3 83       	std	Z+3, r27	; 0x03
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	08 95       	ret
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	a0 e8       	ldi	r26, 0x80	; 128
     e32:	b2 e4       	ldi	r27, 0x42	; 66
     e34:	fb 01       	movw	r30, r22
     e36:	80 83       	st	Z, r24
     e38:	91 83       	std	Z+1, r25	; 0x01
     e3a:	a2 83       	std	Z+2, r26	; 0x02
     e3c:	b3 83       	std	Z+3, r27	; 0x03
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	08 95       	ret
     e42:	8c ef       	ldi	r24, 0xFC	; 252
     e44:	08 95       	ret
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	08 95       	ret
     e4a:	8c ef       	ldi	r24, 0xFC	; 252
     e4c:	08 95       	ret

00000e4e <TIM_Init>:
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	b1 f0       	breq	.+44     	; 0xe7e <TIM_Init+0x30>
     e52:	18 f0       	brcs	.+6      	; 0xe5a <TIM_Init+0xc>
     e54:	82 30       	cpi	r24, 0x02	; 2
     e56:	71 f1       	breq	.+92     	; 0xeb4 <TIM_Init+0x66>
     e58:	44 c0       	rjmp	.+136    	; 0xee2 <TIM_Init+0x94>
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	fc 01       	movw	r30, r24
     e5e:	ee 0f       	add	r30, r30
     e60:	ff 1f       	adc	r31, r31
     e62:	8e 0f       	add	r24, r30
     e64:	9f 1f       	adc	r25, r31
     e66:	fc 01       	movw	r30, r24
     e68:	e5 58       	subi	r30, 0x85	; 133
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	80 81       	ld	r24, Z
     e6e:	83 bf       	out	0x33, r24	; 51
     e70:	89 b7       	in	r24, 0x39	; 57
     e72:	8c 7f       	andi	r24, 0xFC	; 252
     e74:	91 81       	ldd	r25, Z+1	; 0x01
     e76:	89 2b       	or	r24, r25
     e78:	89 bf       	out	0x39, r24	; 57
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	08 95       	ret
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	fc 01       	movw	r30, r24
     e82:	ee 0f       	add	r30, r30
     e84:	ff 1f       	adc	r31, r31
     e86:	8e 0f       	add	r24, r30
     e88:	9f 1f       	adc	r25, r31
     e8a:	fc 01       	movw	r30, r24
     e8c:	e5 58       	subi	r30, 0x85	; 133
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	80 81       	ld	r24, Z
     e92:	8e bd       	out	0x2e, r24	; 46
     e94:	89 b7       	in	r24, 0x39	; 57
     e96:	28 2f       	mov	r18, r24
     e98:	27 7e       	andi	r18, 0xE7	; 231
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	89 2f       	mov	r24, r25
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	82 2b       	or	r24, r18
     eae:	89 bf       	out	0x39, r24	; 57
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	08 95       	ret
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	fc 01       	movw	r30, r24
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	8e 0f       	add	r24, r30
     ebe:	9f 1f       	adc	r25, r31
     ec0:	fc 01       	movw	r30, r24
     ec2:	e5 58       	subi	r30, 0x85	; 133
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	80 81       	ld	r24, Z
     ec8:	85 bd       	out	0x25, r24	; 37
     eca:	89 b7       	in	r24, 0x39	; 57
     ecc:	28 2f       	mov	r18, r24
     ece:	2f 73       	andi	r18, 0x3F	; 63
     ed0:	91 81       	ldd	r25, Z+1	; 0x01
     ed2:	30 e4       	ldi	r19, 0x40	; 64
     ed4:	93 9f       	mul	r25, r19
     ed6:	c0 01       	movw	r24, r0
     ed8:	11 24       	eor	r1, r1
     eda:	82 2b       	or	r24, r18
     edc:	89 bf       	out	0x39, r24	; 57
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	08 95       	ret
     ee2:	8e ef       	ldi	r24, 0xFE	; 254
     ee4:	08 95       	ret

00000ee6 <TIM_Start>:
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	71 f0       	breq	.+28     	; 0xf06 <TIM_Start+0x20>
     eea:	18 f0       	brcs	.+6      	; 0xef2 <TIM_Start+0xc>
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	31 f0       	breq	.+12     	; 0xefc <TIM_Start+0x16>
     ef0:	1f c0       	rjmp	.+62     	; 0xf30 <TIM_Start+0x4a>
     ef2:	e2 e5       	ldi	r30, 0x52	; 82
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	a3 e5       	ldi	r26, 0x53	; 83
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	09 c0       	rjmp	.+18     	; 0xf0e <TIM_Start+0x28>
     efc:	e4 e4       	ldi	r30, 0x44	; 68
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	a5 e4       	ldi	r26, 0x45	; 69
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	04 c0       	rjmp	.+8      	; 0xf0e <TIM_Start+0x28>
     f06:	ec e4       	ldi	r30, 0x4C	; 76
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	ae e4       	ldi	r26, 0x4E	; 78
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	71 83       	std	Z+1, r23	; 0x01
     f10:	60 83       	st	Z, r22
     f12:	2c 91       	ld	r18, X
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	fc 01       	movw	r30, r24
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	8e 0f       	add	r24, r30
     f1e:	9f 1f       	adc	r25, r31
     f20:	fc 01       	movw	r30, r24
     f22:	e5 58       	subi	r30, 0x85	; 133
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	82 81       	ldd	r24, Z+2	; 0x02
     f28:	82 2b       	or	r24, r18
     f2a:	8c 93       	st	X, r24
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	08 95       	ret
     f30:	8e ef       	ldi	r24, 0xFE	; 254
     f32:	08 95       	ret

00000f34 <TIM_GetStatus>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
     f34:	61 15       	cp	r22, r1
     f36:	71 05       	cpc	r23, r1
     f38:	09 f4       	brne	.+2      	; 0xf3c <TIM_GetStatus+0x8>
     f3a:	7a c0       	rjmp	.+244    	; 0x1030 <TIM_GetStatus+0xfc>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	41 f1       	breq	.+80     	; 0xf90 <TIM_GetStatus+0x5c>
     f40:	20 f0       	brcs	.+8      	; 0xf4a <TIM_GetStatus+0x16>
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	09 f4       	brne	.+2      	; 0xf48 <TIM_GetStatus+0x14>
     f46:	52 c0       	rjmp	.+164    	; 0xfec <TIM_GetStatus+0xb8>
     f48:	75 c0       	rjmp	.+234    	; 0x1034 <TIM_GetStatus+0x100>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	fc 01       	movw	r30, r24
     f4e:	ee 0f       	add	r30, r30
     f50:	ff 1f       	adc	r31, r31
     f52:	8e 0f       	add	r24, r30
     f54:	9f 1f       	adc	r25, r31
     f56:	fc 01       	movw	r30, r24
     f58:	e5 58       	subi	r30, 0x85	; 133
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	80 81       	ld	r24, Z
     f5e:	81 11       	cpse	r24, r1
     f60:	09 c0       	rjmp	.+18     	; 0xf74 <TIM_GetStatus+0x40>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
     f62:	08 b6       	in	r0, 0x38	; 56
     f64:	00 fe       	sbrs	r0, 0
     f66:	68 c0       	rjmp	.+208    	; 0x1038 <TIM_GetStatus+0x104>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
     f68:	fb 01       	movw	r30, r22
     f6a:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
     f6c:	98 b7       	in	r25, 0x38	; 56
     f6e:	91 60       	ori	r25, 0x01	; 1
     f70:	98 bf       	out	0x38, r25	; 56
     f72:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
     f74:	88 30       	cpi	r24, 0x08	; 8
     f76:	09 f0       	breq	.+2      	; 0xf7a <TIM_GetStatus+0x46>
     f78:	61 c0       	rjmp	.+194    	; 0x103c <TIM_GetStatus+0x108>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
     f7a:	08 b6       	in	r0, 0x38	; 56
     f7c:	01 fe       	sbrs	r0, 1
     f7e:	60 c0       	rjmp	.+192    	; 0x1040 <TIM_GetStatus+0x10c>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	fb 01       	movw	r30, r22
     f84:	80 83       	st	Z, r24
               TIFR |= TIMER_0_COMPARE_FLAG;
     f86:	88 b7       	in	r24, 0x38	; 56
     f88:	82 60       	ori	r24, 0x02	; 2
     f8a:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	fc 01       	movw	r30, r24
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	8e 0f       	add	r24, r30
     f9a:	9f 1f       	adc	r25, r31
     f9c:	fc 01       	movw	r30, r24
     f9e:	e5 58       	subi	r30, 0x85	; 133
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	80 81       	ld	r24, Z
     fa4:	81 11       	cpse	r24, r1
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <TIM_GetStatus+0x86>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
     fa8:	08 b6       	in	r0, 0x38	; 56
     faa:	02 fe       	sbrs	r0, 2
     fac:	4b c0       	rjmp	.+150    	; 0x1044 <TIM_GetStatus+0x110>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
     fae:	fb 01       	movw	r30, r22
     fb0:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
     fb2:	98 b7       	in	r25, 0x38	; 56
     fb4:	94 60       	ori	r25, 0x04	; 4
     fb6:	98 bf       	out	0x38, r25	; 56
     fb8:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
     fba:	88 30       	cpi	r24, 0x08	; 8
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <TIM_GetStatus+0x8c>
     fbe:	44 c0       	rjmp	.+136    	; 0x1048 <TIM_GetStatus+0x114>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
     fc0:	98 b7       	in	r25, 0x38	; 56
     fc2:	89 2f       	mov	r24, r25
     fc4:	80 71       	andi	r24, 0x10	; 16
     fc6:	94 ff       	sbrs	r25, 4
     fc8:	08 c0       	rjmp	.+16     	; 0xfda <TIM_GetStatus+0xa6>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	fb 01       	movw	r30, r22
     fce:	80 83       	st	Z, r24
               TIFR |= TIMER_1A_COMPARE_FLAG;
     fd0:	88 b7       	in	r24, 0x38	; 56
     fd2:	80 61       	ori	r24, 0x10	; 16
     fd4:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	08 95       	ret
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
     fda:	93 ff       	sbrs	r25, 3
     fdc:	37 c0       	rjmp	.+110    	; 0x104c <TIM_GetStatus+0x118>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	fb 01       	movw	r30, r22
     fe2:	90 83       	st	Z, r25
               TIFR |= TIMER_1B_COMPARE_FLAG;
     fe4:	98 b7       	in	r25, 0x38	; 56
     fe6:	98 60       	ori	r25, 0x08	; 8
     fe8:	98 bf       	out	0x38, r25	; 56
     fea:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	fc 01       	movw	r30, r24
     ff0:	ee 0f       	add	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	8e 0f       	add	r24, r30
     ff6:	9f 1f       	adc	r25, r31
     ff8:	fc 01       	movw	r30, r24
     ffa:	e5 58       	subi	r30, 0x85	; 133
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	80 81       	ld	r24, Z
    1000:	81 11       	cpse	r24, r1
    1002:	09 c0       	rjmp	.+18     	; 0x1016 <TIM_GetStatus+0xe2>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
    1004:	08 b6       	in	r0, 0x38	; 56
    1006:	06 fe       	sbrs	r0, 6
    1008:	23 c0       	rjmp	.+70     	; 0x1050 <TIM_GetStatus+0x11c>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    100a:	fb 01       	movw	r30, r22
    100c:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
    100e:	98 b7       	in	r25, 0x38	; 56
    1010:	90 64       	ori	r25, 0x40	; 64
    1012:	98 bf       	out	0x38, r25	; 56
    1014:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1016:	88 30       	cpi	r24, 0x08	; 8
    1018:	e9 f4       	brne	.+58     	; 0x1054 <TIM_GetStatus+0x120>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
    101a:	08 b6       	in	r0, 0x38	; 56
    101c:	07 fe       	sbrs	r0, 7
    101e:	1c c0       	rjmp	.+56     	; 0x1058 <TIM_GetStatus+0x124>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	fb 01       	movw	r30, r22
    1024:	80 83       	st	Z, r24
               TIFR |= TIMER_2_COMPARE_FLAG;
    1026:	88 b7       	in	r24, 0x38	; 56
    1028:	80 68       	ori	r24, 0x80	; 128
    102a:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	08 95       	ret
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    1034:	8e ef       	ldi	r24, 0xFE	; 254
    1036:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1038:	8d ef       	ldi	r24, 0xFD	; 253
    103a:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1040:	8d ef       	ldi	r24, 0xFD	; 253
    1042:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1044:	8d ef       	ldi	r24, 0xFD	; 253
    1046:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    104c:	8d ef       	ldi	r24, 0xFD	; 253
    104e:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1050:	8d ef       	ldi	r24, 0xFD	; 253
    1052:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1058:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
}
    105a:	08 95       	ret

0000105c <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    105c:	8f 92       	push	r8
    105e:	9f 92       	push	r9
    1060:	af 92       	push	r10
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	00 d0       	rcall	.+0      	; 0x1074 <TIM_DelayUs+0x18>
    1074:	00 d0       	rcall	.+0      	; 0x1076 <TIM_DelayUs+0x1a>
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	18 2f       	mov	r17, r24
    107c:	6a 01       	movw	r12, r20
    107e:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	08 f0       	brcs	.+2      	; 0x1086 <TIM_DelayUs+0x2a>
    1084:	54 c0       	rjmp	.+168    	; 0x112e <TIM_DelayUs+0xd2>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    1086:	21 15       	cp	r18, r1
    1088:	31 05       	cpc	r19, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <TIM_DelayUs+0x32>
    108c:	52 c0       	rjmp	.+164    	; 0x1132 <TIM_DelayUs+0xd6>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    108e:	30 93 12 01 	sts	0x0112, r19	; 0x800112 <gptr_CallerFunc+0x1>
    1092:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <gptr_CallerFunc>
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    1096:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <gEnu_State>
    109a:	81 11       	cpse	r24, r1
    109c:	4c c0       	rjmp	.+152    	; 0x1136 <TIM_DelayUs+0xda>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    109e:	be 01       	movw	r22, r28
    10a0:	6f 5f       	subi	r22, 0xFF	; 255
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	81 2f       	mov	r24, r17
    10a6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    10aa:	8c 3f       	cpi	r24, 0xFC	; 252
    10ac:	f1 f1       	breq	.+124    	; 0x112a <TIM_DelayUs+0xce>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    10ae:	89 80       	ldd	r8, Y+1	; 0x01
    10b0:	9a 80       	ldd	r9, Y+2	; 0x02
    10b2:	ab 80       	ldd	r10, Y+3	; 0x03
    10b4:	bc 80       	ldd	r11, Y+4	; 0x04
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	a9 01       	movw	r20, r18
    10bc:	c5 01       	movw	r24, r10
    10be:	b4 01       	movw	r22, r8
    10c0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__cmpsf2>
    10c4:	88 23       	and	r24, r24
    10c6:	61 f0       	breq	.+24     	; 0x10e0 <TIM_DelayUs+0x84>
      {
         TIM_Delay /= f32_FreqRatio;
    10c8:	c7 01       	movw	r24, r14
    10ca:	b6 01       	movw	r22, r12
    10cc:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatunsisf>
    10d0:	a5 01       	movw	r20, r10
    10d2:	94 01       	movw	r18, r8
    10d4:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__divsf3>
    10d8:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fixunssfsi>
    10dc:	6b 01       	movw	r12, r22
    10de:	7c 01       	movw	r14, r24
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    10e0:	bb 27       	eor	r27, r27
    10e2:	af 2d       	mov	r26, r15
    10e4:	9e 2d       	mov	r25, r14
    10e6:	8d 2d       	mov	r24, r13
    10e8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <gu32_Overflows>
    10ec:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <gu32_Overflows+0x1>
    10f0:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <gu32_Overflows+0x2>
    10f4:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    10f8:	c0 92 14 01 	sts	0x0114, r12	; 0x800114 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    10fc:	89 2b       	or	r24, r25
    10fe:	8a 2b       	or	r24, r26
    1100:	8b 2b       	or	r24, r27
    1102:	49 f4       	brne	.+18     	; 0x1116 <TIM_DelayUs+0xba>
      {
         gu8_OverflowsComplete = HIGH;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    110a:	6c 2d       	mov	r22, r12
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	81 2f       	mov	r24, r17
    1110:	0e 94 73 07 	call	0xee6	; 0xee6 <TIM_Start>
    1114:	05 c0       	rjmp	.+10     	; 0x1120 <TIM_DelayUs+0xc4>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1116:	6f ef       	ldi	r22, 0xFF	; 255
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	81 2f       	mov	r24, r17
    111c:	0e 94 73 07 	call	0xee6	; 0xee6 <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <gEnu_State>
      return TIMER_E_PENDING;
    1126:	8d ef       	ldi	r24, 0xFD	; 253
    1128:	07 c0       	rjmp	.+14     	; 0x1138 <TIM_DelayUs+0xdc>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    112a:	8c ef       	ldi	r24, 0xFC	; 252
    112c:	05 c0       	rjmp	.+10     	; 0x1138 <TIM_DelayUs+0xdc>
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    112e:	8e ef       	ldi	r24, 0xFE	; 254
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <TIM_DelayUs+0xdc>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	01 c0       	rjmp	.+2      	; 0x1138 <TIM_DelayUs+0xdc>
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
    1136:	81 e0       	ldi	r24, 0x01	; 1
}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	1f 91       	pop	r17
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	df 90       	pop	r13
    114c:	cf 90       	pop	r12
    114e:	bf 90       	pop	r11
    1150:	af 90       	pop	r10
    1152:	9f 90       	pop	r9
    1154:	8f 90       	pop	r8
    1156:	08 95       	ret

00001158 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1158:	8f 92       	push	r8
    115a:	9f 92       	push	r9
    115c:	af 92       	push	r10
    115e:	bf 92       	push	r11
    1160:	df 92       	push	r13
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	00 d0       	rcall	.+0      	; 0x1170 <TIM_DelayMs+0x18>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <TIM_DelayMs+0x1a>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	18 2f       	mov	r17, r24
    1178:	04 2f       	mov	r16, r20
    117a:	d5 2e       	mov	r13, r21
    117c:	e6 2e       	mov	r14, r22
    117e:	f7 2e       	mov	r15, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1180:	83 30       	cpi	r24, 0x03	; 3
    1182:	08 f0       	brcs	.+2      	; 0x1186 <TIM_DelayMs+0x2e>
    1184:	65 c0       	rjmp	.+202    	; 0x1250 <TIM_DelayMs+0xf8>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    1186:	21 15       	cp	r18, r1
    1188:	31 05       	cpc	r19, r1
    118a:	09 f4       	brne	.+2      	; 0x118e <TIM_DelayMs+0x36>
    118c:	63 c0       	rjmp	.+198    	; 0x1254 <TIM_DelayMs+0xfc>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    118e:	30 93 12 01 	sts	0x0112, r19	; 0x800112 <gptr_CallerFunc+0x1>
    1192:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <gptr_CallerFunc>
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    1196:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <gEnu_State>
    119a:	81 11       	cpse	r24, r1
    119c:	5d c0       	rjmp	.+186    	; 0x1258 <TIM_DelayMs+0x100>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    119e:	be 01       	movw	r22, r28
    11a0:	6f 5f       	subi	r22, 0xFF	; 255
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	81 2f       	mov	r24, r17
    11a6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    11aa:	8c 3f       	cpi	r24, 0xFC	; 252
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <TIM_DelayMs+0x58>
    11ae:	4e c0       	rjmp	.+156    	; 0x124c <TIM_DelayMs+0xf4>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    11b0:	89 80       	ldd	r8, Y+1	; 0x01
    11b2:	9a 80       	ldd	r9, Y+2	; 0x02
    11b4:	ab 80       	ldd	r10, Y+3	; 0x03
    11b6:	bc 80       	ldd	r11, Y+4	; 0x04
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	a9 01       	movw	r20, r18
    11be:	c5 01       	movw	r24, r10
    11c0:	b4 01       	movw	r22, r8
    11c2:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__cmpsf2>
    11c6:	88 23       	and	r24, r24
    11c8:	81 f0       	breq	.+32     	; 0x11ea <TIM_DelayMs+0x92>
      {
         TIM_Delay /= f32_FreqRatio;
    11ca:	60 2f       	mov	r22, r16
    11cc:	7d 2d       	mov	r23, r13
    11ce:	8e 2d       	mov	r24, r14
    11d0:	9f 2d       	mov	r25, r15
    11d2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__floatunsisf>
    11d6:	a5 01       	movw	r20, r10
    11d8:	94 01       	movw	r18, r8
    11da:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__divsf3>
    11de:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fixunssfsi>
    11e2:	06 2f       	mov	r16, r22
    11e4:	d7 2e       	mov	r13, r23
    11e6:	e8 2e       	mov	r14, r24
    11e8:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    11ea:	a8 ee       	ldi	r26, 0xE8	; 232
    11ec:	b3 e0       	ldi	r27, 0x03	; 3
    11ee:	20 2f       	mov	r18, r16
    11f0:	3d 2d       	mov	r19, r13
    11f2:	4e 2d       	mov	r20, r14
    11f4:	5f 2d       	mov	r21, r15
    11f6:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__muluhisi3>
    11fa:	bb 27       	eor	r27, r27
    11fc:	a9 2f       	mov	r26, r25
    11fe:	98 2f       	mov	r25, r24
    1200:	87 2f       	mov	r24, r23
    1202:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <gu32_Overflows>
    1206:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <gu32_Overflows+0x1>
    120a:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <gu32_Overflows+0x2>
    120e:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    1212:	28 ee       	ldi	r18, 0xE8	; 232
    1214:	02 9f       	mul	r16, r18
    1216:	00 2d       	mov	r16, r0
    1218:	11 24       	eor	r1, r1
    121a:	00 93 14 01 	sts	0x0114, r16	; 0x800114 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    121e:	89 2b       	or	r24, r25
    1220:	8a 2b       	or	r24, r26
    1222:	8b 2b       	or	r24, r27
    1224:	49 f4       	brne	.+18     	; 0x1238 <TIM_DelayMs+0xe0>
      {
         gu8_OverflowsComplete = HIGH;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    122c:	60 2f       	mov	r22, r16
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	81 2f       	mov	r24, r17
    1232:	0e 94 73 07 	call	0xee6	; 0xee6 <TIM_Start>
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <TIM_DelayMs+0xea>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1238:	6f ef       	ldi	r22, 0xFF	; 255
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	81 2f       	mov	r24, r17
    123e:	0e 94 73 07 	call	0xee6	; 0xee6 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <gEnu_State>
      return TIMER_E_PENDING;
    1248:	8d ef       	ldi	r24, 0xFD	; 253
    124a:	07 c0       	rjmp	.+14     	; 0x125a <TIM_DelayMs+0x102>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    124c:	8c ef       	ldi	r24, 0xFC	; 252
    124e:	05 c0       	rjmp	.+10     	; 0x125a <TIM_DelayMs+0x102>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    1250:	8e ef       	ldi	r24, 0xFE	; 254
    1252:	03 c0       	rjmp	.+6      	; 0x125a <TIM_DelayMs+0x102>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	01 c0       	rjmp	.+2      	; 0x125a <TIM_DelayMs+0x102>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
    1258:	81 e0       	ldi	r24, 0x01	; 1
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	bf 90       	pop	r11
    1272:	af 90       	pop	r10
    1274:	9f 90       	pop	r9
    1276:	8f 90       	pop	r8
    1278:	08 95       	ret

0000127a <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	1f 92       	push	r1
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
   if(DelayReady == gEnu_State)
    1286:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <gEnu_State>
    128a:	99 23       	and	r25, r25
    128c:	09 f4       	brne	.+2      	; 0x1290 <TIM_DelayStatus+0x16>
    128e:	4c c0       	rjmp	.+152    	; 0x1328 <TIM_DelayStatus+0xae>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
    1290:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <gptr_CallerFunc>
    1294:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <gptr_CallerFunc+0x1>
    1298:	26 17       	cp	r18, r22
    129a:	37 07       	cpc	r19, r23
    129c:	09 f0       	breq	.+2      	; 0x12a0 <TIM_DelayStatus+0x26>
    129e:	46 c0       	rjmp	.+140    	; 0x132c <TIM_DelayStatus+0xb2>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    12a0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <gEnu_State>
    12a4:	91 30       	cpi	r25, 0x01	; 1
    12a6:	09 f0       	breq	.+2      	; 0x12aa <TIM_DelayStatus+0x30>
    12a8:	43 c0       	rjmp	.+134    	; 0x1330 <TIM_DelayStatus+0xb6>
    12aa:	18 2f       	mov	r17, r24
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    12ac:	be 01       	movw	r22, r28
    12ae:	6f 5f       	subi	r22, 0xFF	; 255
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255
    12b2:	0e 94 9a 07 	call	0xf34	; 0xf34 <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    12b6:	81 11       	cpse	r24, r1
    12b8:	35 c0       	rjmp	.+106    	; 0x1324 <TIM_DelayStatus+0xaa>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    12ba:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <gu8_OverflowsComplete>
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	41 f4       	brne	.+16     	; 0x12d2 <TIM_DelayStatus+0x58>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    12c2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <gEnu_State>
            gu8_OverflowsComplete = LOW;
    12c6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <gu8_OverflowsComplete>
            gu8_Remindar = 0;
    12ca:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <gu8_Remindar>
            /* return success message. */
            return ERROR_OK;
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	30 c0       	rjmp	.+96     	; 0x1332 <TIM_DelayStatus+0xb8>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    12d2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <gu32_Overflows>
    12d6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <gu32_Overflows+0x1>
    12da:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <gu32_Overflows+0x2>
    12de:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <gu32_Overflows+0x3>
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	a1 09       	sbc	r26, r1
    12e6:	b1 09       	sbc	r27, r1
    12e8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <gu32_Overflows>
    12ec:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <gu32_Overflows+0x1>
    12f0:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <gu32_Overflows+0x2>
    12f4:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <gu32_Overflows+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    12f8:	89 2b       	or	r24, r25
    12fa:	8a 2b       	or	r24, r26
    12fc:	8b 2b       	or	r24, r27
    12fe:	59 f4       	brne	.+22     	; 0x1316 <TIM_DelayStatus+0x9c>
         {
            gu8_OverflowsComplete = HIGH;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <gu8_OverflowsComplete>
            TIM_Start(TIM_channel, gu8_Remindar);
    1306:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <gu8_Remindar>
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	81 2f       	mov	r24, r17
    130e:	0e 94 73 07 	call	0xee6	; 0xee6 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
    1312:	8d ef       	ldi	r24, 0xFD	; 253
    1314:	0e c0       	rjmp	.+28     	; 0x1332 <TIM_DelayStatus+0xb8>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    1316:	6f ef       	ldi	r22, 0xFF	; 255
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	81 2f       	mov	r24, r17
    131c:	0e 94 73 07 	call	0xee6	; 0xee6 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    1320:	8d ef       	ldi	r24, 0xFD	; 253
    1322:	07 c0       	rjmp	.+14     	; 0x1332 <TIM_DelayStatus+0xb8>
   }
   else
   {
      return ERROR_NOK;
   }
   return 0;
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	05 c0       	rjmp	.+10     	; 0x1332 <TIM_DelayStatus+0xb8>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
    1328:	8b ef       	ldi	r24, 0xFB	; 251
    132a:	03 c0       	rjmp	.+6      	; 0x1332 <TIM_DelayStatus+0xb8>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <TIM_DelayStatus+0xb8>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
    1330:	81 e0       	ldi	r24, 0x01	; 1
   }
   return 0;
    1332:	0f 90       	pop	r0
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	08 95       	ret

0000133c <DISPLAY_START_SHIFTING>:
	}
	Last_state = State;
}

void DISPLAY_START_SHIFTING(uint8_t stringLength, uint8_t passWordLength)
{
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	1f 92       	push	r1
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
	uint8_t volatile StringMotionRange = DISPLAY_WIDTH - stringLength;
    1346:	90 e1       	ldi	r25, 0x10	; 16
    1348:	98 1b       	sub	r25, r24
    134a:	99 83       	std	Y+1, r25	; 0x01
	switch (Shifting_State)
    134c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Shifting_State>
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	19 f0       	breq	.+6      	; 0x135a <DISPLAY_START_SHIFTING+0x1e>
    1354:	82 30       	cpi	r24, 0x02	; 2
    1356:	c1 f0       	breq	.+48     	; 0x1388 <DISPLAY_START_SHIFTING+0x4c>
    1358:	38 c0       	rjmp	.+112    	; 0x13ca <DISPLAY_START_SHIFTING+0x8e>
	{
		case ShiftingLeft:
			if(passWordLength!=0)
    135a:	66 23       	and	r22, r22
    135c:	29 f0       	breq	.+10     	; 0x1368 <DISPLAY_START_SHIFTING+0x2c>
			{
				while(LCD_SendData('*')!= OperationSuccess);
    135e:	8a e2       	ldi	r24, 0x2A	; 42
    1360:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1364:	81 11       	cpse	r24, r1
    1366:	fb cf       	rjmp	.-10     	; 0x135e <DISPLAY_START_SHIFTING+0x22>
			}
			while(LCD_SendCommand(LCD_SHIFTDISPLEFT)!= OperationSuccess);
    1368:	88 e1       	ldi	r24, 0x18	; 24
    136a:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    136e:	81 11       	cpse	r24, r1
    1370:	fb cf       	rjmp	.-10     	; 0x1368 <DISPLAY_START_SHIFTING+0x2c>
			Position--;
    1372:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Position>
    1376:	81 50       	subi	r24, 0x01	; 1
    1378:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Position>
			if (Position == 0)
    137c:	81 11       	cpse	r24, r1
    137e:	25 c0       	rjmp	.+74     	; 0x13ca <DISPLAY_START_SHIFTING+0x8e>
			{
				Shifting_State = ShiftingRight;
    1380:	82 e0       	ldi	r24, 0x02	; 2
    1382:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Shifting_State>
    1386:	21 c0       	rjmp	.+66     	; 0x13ca <DISPLAY_START_SHIFTING+0x8e>
			}
			break;
		case ShiftingRight:
			if(passWordLength!=0)
    1388:	66 23       	and	r22, r22
    138a:	79 f0       	breq	.+30     	; 0x13aa <DISPLAY_START_SHIFTING+0x6e>
			{
				while (LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    138c:	80 e1       	ldi	r24, 0x10	; 16
    138e:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1392:	81 11       	cpse	r24, r1
    1394:	fb cf       	rjmp	.-10     	; 0x138c <DISPLAY_START_SHIFTING+0x50>
				while(LCD_SendData(' ')!= OperationSuccess);
    1396:	80 e2       	ldi	r24, 0x20	; 32
    1398:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    139c:	81 11       	cpse	r24, r1
    139e:	fb cf       	rjmp	.-10     	; 0x1396 <DISPLAY_START_SHIFTING+0x5a>
				while (LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    13a0:	80 e1       	ldi	r24, 0x10	; 16
    13a2:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    13a6:	81 11       	cpse	r24, r1
    13a8:	fb cf       	rjmp	.-10     	; 0x13a0 <DISPLAY_START_SHIFTING+0x64>
			}
			while(LCD_SendCommand(LCD_SHIFTDISPRIGHT)!= OperationSuccess);
    13aa:	8c e1       	ldi	r24, 0x1C	; 28
    13ac:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    13b0:	81 11       	cpse	r24, r1
    13b2:	fb cf       	rjmp	.-10     	; 0x13aa <DISPLAY_START_SHIFTING+0x6e>
			Position++;
    13b4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Position>
    13b8:	8f 5f       	subi	r24, 0xFF	; 255
    13ba:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Position>
			if (Position >= StringMotionRange)
    13be:	99 81       	ldd	r25, Y+1	; 0x01
    13c0:	89 17       	cp	r24, r25
    13c2:	18 f0       	brcs	.+6      	; 0x13ca <DISPLAY_START_SHIFTING+0x8e>
			{
				Shifting_State = ShiftingLeft;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Shifting_State>
			}
			break;
	}
}
    13ca:	0f 90       	pop	r0
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <DISPLAY_MainFunction>:
uint8_t Number_of_Asteriks = 0;
uint8_t Shifting_State = OperationStarted;//OperationStarted
uint8_t WrongPassEntries = 0;

void DISPLAY_MainFunction(void)
{
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	1f 92       	push	r1
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
	uint8_t static Last_state = OperationStarted;
	uint8_t static Counter = 0;
	uint8_t State =0;
    13de:	19 82       	std	Y+1, r1	; 0x01
	DISPLAY_GetNumber_of_Asterisk(&Number_of_Asteriks);
    13e0:	8c e1       	ldi	r24, 0x1C	; 28
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	0e 94 9f 0b 	call	0x173e	; 0x173e <DISPLAY_GetNumber_of_Asterisk>
	DISPLAY_GetState(&State);
    13e8:	ce 01       	movw	r24, r28
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	0e 94 9a 0b 	call	0x1734	; 0x1734 <DISPLAY_GetState>
	if((Last_state == CorrectPassword || Last_state == WrongPassword || Last_state == Waiting)&&(Counter!=0))
    13f0:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <Last_state.1751>
    13f4:	8a ef       	ldi	r24, 0xFA	; 250
    13f6:	82 0f       	add	r24, r18
    13f8:	83 30       	cpi	r24, 0x03	; 3
    13fa:	20 f4       	brcc	.+8      	; 0x1404 <DISPLAY_MainFunction+0x32>
    13fc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Counter.1752>
    1400:	81 11       	cpse	r24, r1
	{
		State = Last_state;
    1402:	29 83       	std	Y+1, r18	; 0x01
	}
	switch(State)
    1404:	39 81       	ldd	r19, Y+1	; 0x01
    1406:	83 2f       	mov	r24, r19
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	fc 01       	movw	r30, r24
    140c:	33 97       	sbiw	r30, 0x03	; 3
    140e:	e8 30       	cpi	r30, 0x08	; 8
    1410:	f1 05       	cpc	r31, r1
    1412:	08 f0       	brcs	.+2      	; 0x1416 <DISPLAY_MainFunction+0x44>
    1414:	82 c1       	rjmp	.+772    	; 0x171a <DISPLAY_MainFunction+0x348>
    1416:	ef 5c       	subi	r30, 0xCF	; 207
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__tablejump2__>
	{
		case SystemLoading:
			if(Last_state != State)
    141e:	23 17       	cp	r18, r19
    1420:	a9 f0       	breq	.+42     	; 0x144c <DISPLAY_MainFunction+0x7a>
			{
				Position = 0;
    1422:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <Position>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    142c:	81 11       	cpse	r24, r1
    142e:	fb cf       	rjmp	.-10     	; 0x1426 <DISPLAY_MainFunction+0x54>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    1430:	82 e0       	ldi	r24, 0x02	; 2
    1432:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1436:	81 11       	cpse	r24, r1
    1438:	fb cf       	rjmp	.-10     	; 0x1430 <DISPLAY_MainFunction+0x5e>
				while(LCD_SendString((uint8_t*)"System Loading") != OperationSuccess);
    143a:	84 e8       	ldi	r24, 0x84	; 132
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    1442:	81 11       	cpse	r24, r1
    1444:	fa cf       	rjmp	.-12     	; 0x143a <DISPLAY_MainFunction+0x68>
				Shifting_State = ShiftingRight;
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Shifting_State>
			}
			DISPLAY_START_SHIFTING(SystemLoading_StringWidth,0);
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	8e e0       	ldi	r24, 0x0E	; 14
    1450:	0e 94 9e 09 	call	0x133c	; 0x133c <DISPLAY_START_SHIFTING>
			break;
    1454:	67 c1       	rjmp	.+718    	; 0x1724 <DISPLAY_MainFunction+0x352>
		case Welcome:
			if(Last_state != State)
    1456:	23 17       	cp	r18, r19
    1458:	a9 f0       	breq	.+42     	; 0x1484 <DISPLAY_MainFunction+0xb2>
			{
				Position = 0;
    145a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <Position>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1464:	81 11       	cpse	r24, r1
    1466:	fb cf       	rjmp	.-10     	; 0x145e <DISPLAY_MainFunction+0x8c>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    146e:	81 11       	cpse	r24, r1
    1470:	fb cf       	rjmp	.-10     	; 0x1468 <DISPLAY_MainFunction+0x96>
				while(LCD_SendString((uint8_t*)"WELCOME") != OperationSuccess);
    1472:	83 e9       	ldi	r24, 0x93	; 147
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    147a:	81 11       	cpse	r24, r1
    147c:	fa cf       	rjmp	.-12     	; 0x1472 <DISPLAY_MainFunction+0xa0>
				Shifting_State = ShiftingRight;
    147e:	82 e0       	ldi	r24, 0x02	; 2
    1480:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Shifting_State>
			}
			DISPLAY_START_SHIFTING(Welcome_StringWidth,0);
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	87 e0       	ldi	r24, 0x07	; 7
    1488:	0e 94 9e 09 	call	0x133c	; 0x133c <DISPLAY_START_SHIFTING>
			break;
    148c:	4b c1       	rjmp	.+662    	; 0x1724 <DISPLAY_MainFunction+0x352>
		case PassEntering:
			if(Last_state != State)
    148e:	23 17       	cp	r18, r19
    1490:	81 f1       	breq	.+96     	; 0x14f2 <DISPLAY_MainFunction+0x120>
			{
				Position = DISPLAY_WIDTH-EnterPass_StringWidth;
    1492:	86 e0       	ldi	r24, 0x06	; 6
    1494:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Position>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    149e:	81 11       	cpse	r24, r1
    14a0:	fb cf       	rjmp	.-10     	; 0x1498 <DISPLAY_MainFunction+0xc6>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    14a8:	81 11       	cpse	r24, r1
    14aa:	fb cf       	rjmp	.-10     	; 0x14a2 <DISPLAY_MainFunction+0xd0>
				while (LCD_SendCommand(LCD_CURS_Position0|Position)!=OperationSuccess);
    14ac:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Position>
    14b0:	80 68       	ori	r24, 0x80	; 128
    14b2:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    14b6:	81 11       	cpse	r24, r1
    14b8:	f9 cf       	rjmp	.-14     	; 0x14ac <DISPLAY_MainFunction+0xda>
				while (LCD_SendString((uint8_t*)"Enter Pass") != OperationSuccess);
    14ba:	8b e9       	ldi	r24, 0x9B	; 155
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    14c2:	81 11       	cpse	r24, r1
    14c4:	fa cf       	rjmp	.-12     	; 0x14ba <DISPLAY_MainFunction+0xe8>
				Shifting_State = ShiftingLeft;
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Shifting_State>
				while (LCD_SendCommand(LCD_CURS_LINE2)!=OperationSuccess);
    14cc:	80 ec       	ldi	r24, 0xC0	; 192
    14ce:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    14d2:	81 11       	cpse	r24, r1
    14d4:	fb cf       	rjmp	.-10     	; 0x14cc <DISPLAY_MainFunction+0xfa>
    14d6:	10 e0       	ldi	r17, 0x00	; 0
    14d8:	08 c0       	rjmp	.+16     	; 0x14ea <DISPLAY_MainFunction+0x118>
				for(uint8_t i = 0; i < Number_of_Asteriks; i++)
				{
					while(LCD_SendData('*')!= OperationSuccess);
    14da:	8a e2       	ldi	r24, 0x2A	; 42
    14dc:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    14e0:	81 11       	cpse	r24, r1
    14e2:	fb cf       	rjmp	.-10     	; 0x14da <DISPLAY_MainFunction+0x108>
					if (i>5)
    14e4:	16 30       	cpi	r17, 0x06	; 6
    14e6:	28 f4       	brcc	.+10     	; 0x14f2 <DISPLAY_MainFunction+0x120>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
				while (LCD_SendCommand(LCD_CURS_Position0|Position)!=OperationSuccess);
				while (LCD_SendString((uint8_t*)"Enter Pass") != OperationSuccess);
				Shifting_State = ShiftingLeft;
				while (LCD_SendCommand(LCD_CURS_LINE2)!=OperationSuccess);
				for(uint8_t i = 0; i < Number_of_Asteriks; i++)
    14e8:	1f 5f       	subi	r17, 0xFF	; 255
    14ea:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Number_of_Asteriks>
    14ee:	18 17       	cp	r17, r24
    14f0:	a0 f3       	brcs	.-24     	; 0x14da <DISPLAY_MainFunction+0x108>
					{
						break;
					}
				}
			}
			DISPLAY_START_SHIFTING(EnterPass_StringWidth,Number_of_Asteriks);
    14f2:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <Number_of_Asteriks>
    14f6:	8a e0       	ldi	r24, 0x0A	; 10
    14f8:	0e 94 9e 09 	call	0x133c	; 0x133c <DISPLAY_START_SHIFTING>
			break;
    14fc:	13 c1       	rjmp	.+550    	; 0x1724 <DISPLAY_MainFunction+0x352>
		case CorrectPassword:
			if(Last_state != State)
    14fe:	23 17       	cp	r18, r19
    1500:	c1 f0       	breq	.+48     	; 0x1532 <DISPLAY_MainFunction+0x160>
			{
				Position = 0;
    1502:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <Position>
				DISPLAY_SetNumber_of_Asterisk(0);
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	0e 94 a7 0b 	call	0x174e	; 0x174e <DISPLAY_SetNumber_of_Asterisk>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1512:	81 11       	cpse	r24, r1
    1514:	fb cf       	rjmp	.-10     	; 0x150c <DISPLAY_MainFunction+0x13a>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    151c:	81 11       	cpse	r24, r1
    151e:	fb cf       	rjmp	.-10     	; 0x1516 <DISPLAY_MainFunction+0x144>
				while (LCD_SendString((uint8_t*)"Pass OK") != OperationSuccess);
    1520:	86 ea       	ldi	r24, 0xA6	; 166
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    1528:	81 11       	cpse	r24, r1
    152a:	fa cf       	rjmp	.-12     	; 0x1520 <DISPLAY_MainFunction+0x14e>
				Shifting_State = ShiftingRight;
    152c:	82 e0       	ldi	r24, 0x02	; 2
    152e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Shifting_State>
			}
			DISPLAY_START_SHIFTING(CorrectPass_StringWidth,0);
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	87 e0       	ldi	r24, 0x07	; 7
    1536:	0e 94 9e 09 	call	0x133c	; 0x133c <DISPLAY_START_SHIFTING>
			
			Counter ++;
    153a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Counter.1752>
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Counter.1752>
			if(Counter == (uint8_t)(TwoSeconds/MainFunction_Periodicity))
    1544:	88 32       	cpi	r24, 0x28	; 40
    1546:	09 f0       	breq	.+2      	; 0x154a <DISPLAY_MainFunction+0x178>
    1548:	ed c0       	rjmp	.+474    	; 0x1724 <DISPLAY_MainFunction+0x352>
			{
				WrongPassEntries = 0;
    154a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <WrongPassEntries>
				Counter = 0;
    154e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <Counter.1752>
				DISPLAY_SetState(SevenSegments);
    1552:	89 e0       	ldi	r24, 0x09	; 9
    1554:	0e 94 a4 0b 	call	0x1748	; 0x1748 <DISPLAY_SetState>
    1558:	e5 c0       	rjmp	.+458    	; 0x1724 <DISPLAY_MainFunction+0x352>
			}
			break;
		/*Counter*/
		case WrongPassword:
			if(Last_state != State)
    155a:	23 17       	cp	r18, r19
    155c:	c1 f0       	breq	.+48     	; 0x158e <DISPLAY_MainFunction+0x1bc>
			{
				Position = 0;
    155e:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <Position>
				DISPLAY_SetNumber_of_Asterisk(0);
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	0e 94 a7 0b 	call	0x174e	; 0x174e <DISPLAY_SetNumber_of_Asterisk>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    156e:	81 11       	cpse	r24, r1
    1570:	fb cf       	rjmp	.-10     	; 0x1568 <DISPLAY_MainFunction+0x196>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1578:	81 11       	cpse	r24, r1
    157a:	fb cf       	rjmp	.-10     	; 0x1572 <DISPLAY_MainFunction+0x1a0>
				while (LCD_SendString((uint8_t*)"Wrong Pass") != OperationSuccess);
    157c:	8e ea       	ldi	r24, 0xAE	; 174
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    1584:	81 11       	cpse	r24, r1
    1586:	fa cf       	rjmp	.-12     	; 0x157c <DISPLAY_MainFunction+0x1aa>
				Shifting_State = ShiftingRight;
    1588:	82 e0       	ldi	r24, 0x02	; 2
    158a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Shifting_State>
			}
			DISPLAY_START_SHIFTING(WrongPass_StringWidth,0);
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	8a e0       	ldi	r24, 0x0A	; 10
    1592:	0e 94 9e 09 	call	0x133c	; 0x133c <DISPLAY_START_SHIFTING>
			Counter ++;
    1596:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Counter.1752>
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Counter.1752>
			if(Counter == (uint8_t)(TwoSeconds/MainFunction_Periodicity))
    15a0:	88 32       	cpi	r24, 0x28	; 40
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <DISPLAY_MainFunction+0x1d4>
    15a4:	bf c0       	rjmp	.+382    	; 0x1724 <DISPLAY_MainFunction+0x352>
			{
				Counter = 0;
    15a6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <Counter.1752>
				WrongPassEntries++;
    15aa:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <WrongPassEntries>
    15ae:	8f 5f       	subi	r24, 0xFF	; 255
    15b0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <WrongPassEntries>
				if(WrongPassEntries==3)
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	21 f4       	brne	.+8      	; 0x15c0 <DISPLAY_MainFunction+0x1ee>
					DISPLAY_SetState(Waiting);
    15b8:	88 e0       	ldi	r24, 0x08	; 8
    15ba:	0e 94 a4 0b 	call	0x1748	; 0x1748 <DISPLAY_SetState>
    15be:	b2 c0       	rjmp	.+356    	; 0x1724 <DISPLAY_MainFunction+0x352>
				else
					DISPLAY_SetState(PassEntering);
    15c0:	85 e0       	ldi	r24, 0x05	; 5
    15c2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <DISPLAY_SetState>
    15c6:	ae c0       	rjmp	.+348    	; 0x1724 <DISPLAY_MainFunction+0x352>
			}
			break;
		case Waiting:
			if(Last_state != State)
    15c8:	23 17       	cp	r18, r19
    15ca:	f1 f0       	breq	.+60     	; 0x1608 <DISPLAY_MainFunction+0x236>
			{
				Position = DISPLAY_WIDTH - Waiting_StringWidth;
    15cc:	89 e0       	ldi	r24, 0x09	; 9
    15ce:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Position>
				DISPLAY_SetNumber_of_Asterisk(0);
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	0e 94 a7 0b 	call	0x174e	; 0x174e <DISPLAY_SetNumber_of_Asterisk>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    15de:	81 11       	cpse	r24, r1
    15e0:	fb cf       	rjmp	.-10     	; 0x15d8 <DISPLAY_MainFunction+0x206>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    15e8:	81 11       	cpse	r24, r1
    15ea:	fb cf       	rjmp	.-10     	; 0x15e2 <DISPLAY_MainFunction+0x210>
				while (LCD_SendString((uint8_t*)"Waiting") != OperationSuccess);
    15ec:	89 eb       	ldi	r24, 0xB9	; 185
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    15f4:	81 11       	cpse	r24, r1
    15f6:	fa cf       	rjmp	.-12     	; 0x15ec <DISPLAY_MainFunction+0x21a>
				Shifting_State = ShiftingLeft;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Shifting_State>
				while (LCD_SendCommand(LCD_CURS_LINE2)!=OperationSuccess);
    15fe:	80 ec       	ldi	r24, 0xC0	; 192
    1600:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1604:	81 11       	cpse	r24, r1
    1606:	fb cf       	rjmp	.-10     	; 0x15fe <DISPLAY_MainFunction+0x22c>
			}
			DISPLAY_START_SHIFTING(Waiting_StringWidth,0);
    1608:	60 e0       	ldi	r22, 0x00	; 0
    160a:	87 e0       	ldi	r24, 0x07	; 7
    160c:	0e 94 9e 09 	call	0x133c	; 0x133c <DISPLAY_START_SHIFTING>
			if(Shifting_State == ShiftingLeft)
    1610:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Shifting_State>
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	79 f4       	brne	.+30     	; 0x1636 <DISPLAY_MainFunction+0x264>
			{
				while (LCD_SendCommand(LCD_SHIFTCURSRIGHT)!=OperationSuccess);
    1618:	84 e1       	ldi	r24, 0x14	; 20
    161a:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    161e:	81 11       	cpse	r24, r1
    1620:	fb cf       	rjmp	.-10     	; 0x1618 <DISPLAY_MainFunction+0x246>
				while(LCD_SendNumber(Counter)!=OperationStarted);
    1622:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <Counter.1752>
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	0e 94 34 05 	call	0xa68	; 0xa68 <LCD_SendNumber>
    1630:	8f 3f       	cpi	r24, 0xFF	; 255
    1632:	b9 f7       	brne	.-18     	; 0x1622 <DISPLAY_MainFunction+0x250>
    1634:	13 c0       	rjmp	.+38     	; 0x165c <DISPLAY_MainFunction+0x28a>
			}
			else
			{
				while (LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1636:	80 e1       	ldi	r24, 0x10	; 16
    1638:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    163c:	81 11       	cpse	r24, r1
    163e:	fb cf       	rjmp	.-10     	; 0x1636 <DISPLAY_MainFunction+0x264>
				while(LCD_SendNumber(Counter)!= OperationSuccess);
    1640:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <Counter.1752>
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 34 05 	call	0xa68	; 0xa68 <LCD_SendNumber>
    164e:	81 11       	cpse	r24, r1
    1650:	f7 cf       	rjmp	.-18     	; 0x1640 <DISPLAY_MainFunction+0x26e>
				while (LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1652:	80 e1       	ldi	r24, 0x10	; 16
    1654:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1658:	81 11       	cpse	r24, r1
    165a:	fb cf       	rjmp	.-10     	; 0x1652 <DISPLAY_MainFunction+0x280>
			}
			Counter ++;
    165c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Counter.1752>
    1660:	8f 5f       	subi	r24, 0xFF	; 255
    1662:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Counter.1752>
			if(Counter == (uint8_t)(TenSeconds/MainFunction_Periodicity))
    1666:	88 3c       	cpi	r24, 0xC8	; 200
    1668:	09 f0       	breq	.+2      	; 0x166c <DISPLAY_MainFunction+0x29a>
    166a:	5c c0       	rjmp	.+184    	; 0x1724 <DISPLAY_MainFunction+0x352>
			{
				WrongPassEntries = 0;
    166c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <WrongPassEntries>
				Counter = 0;
    1670:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <Counter.1752>
				DISPLAY_SetState(PassEntering);
    1674:	85 e0       	ldi	r24, 0x05	; 5
    1676:	0e 94 a4 0b 	call	0x1748	; 0x1748 <DISPLAY_SetState>
    167a:	54 c0       	rjmp	.+168    	; 0x1724 <DISPLAY_MainFunction+0x352>
			}
			break;
		case SevenSegments:
			if(Last_state != State)
    167c:	23 17       	cp	r18, r19
    167e:	a9 f0       	breq	.+42     	; 0x16aa <DISPLAY_MainFunction+0x2d8>
			{
				Position = 0;
    1680:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <Position>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    168a:	81 11       	cpse	r24, r1
    168c:	fb cf       	rjmp	.-10     	; 0x1684 <DISPLAY_MainFunction+0x2b2>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1694:	81 11       	cpse	r24, r1
    1696:	fb cf       	rjmp	.-10     	; 0x168e <DISPLAY_MainFunction+0x2bc>
				while (LCD_SendString((uint8_t*)"System is ON") != OperationSuccess);
    1698:	81 ec       	ldi	r24, 0xC1	; 193
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    16a0:	81 11       	cpse	r24, r1
    16a2:	fa cf       	rjmp	.-12     	; 0x1698 <DISPLAY_MainFunction+0x2c6>
				Shifting_State = ShiftingRight;
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Shifting_State>
			}
			DISPLAY_START_SHIFTING(SystemOn_StringWidth,0);
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	8c e0       	ldi	r24, 0x0C	; 12
    16ae:	0e 94 9e 09 	call	0x133c	; 0x133c <DISPLAY_START_SHIFTING>
			break;
    16b2:	38 c0       	rjmp	.+112    	; 0x1724 <DISPLAY_MainFunction+0x352>
		case ChangePassword:
			if(Last_state != State)
    16b4:	23 17       	cp	r18, r19
    16b6:	b1 f1       	breq	.+108    	; 0x1724 <DISPLAY_MainFunction+0x352>
			{
				Position = DISPLAY_WIDTH-ChangePassword_StringWidth;
    16b8:	83 e0       	ldi	r24, 0x03	; 3
    16ba:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Position>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    16c4:	81 11       	cpse	r24, r1
    16c6:	fb cf       	rjmp	.-10     	; 0x16be <DISPLAY_MainFunction+0x2ec>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    16c8:	82 e0       	ldi	r24, 0x02	; 2
    16ca:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    16ce:	81 11       	cpse	r24, r1
    16d0:	fb cf       	rjmp	.-10     	; 0x16c8 <DISPLAY_MainFunction+0x2f6>
				while (LCD_SendCommand(LCD_CURS_Position0|Position)!=OperationSuccess);
    16d2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Position>
    16d6:	80 68       	ori	r24, 0x80	; 128
    16d8:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    16dc:	81 11       	cpse	r24, r1
    16de:	f9 cf       	rjmp	.-14     	; 0x16d2 <DISPLAY_MainFunction+0x300>
				while (LCD_SendString((uint8_t*)"Changing Pass") != OperationSuccess);
    16e0:	8e ec       	ldi	r24, 0xCE	; 206
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    16e8:	81 11       	cpse	r24, r1
    16ea:	fa cf       	rjmp	.-12     	; 0x16e0 <DISPLAY_MainFunction+0x30e>
				Shifting_State = ShiftingLeft;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Shifting_State>
				while (LCD_SendCommand(0xc0)!=OperationSuccess);
    16f2:	80 ec       	ldi	r24, 0xC0	; 192
    16f4:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    16f8:	81 11       	cpse	r24, r1
    16fa:	fb cf       	rjmp	.-10     	; 0x16f2 <DISPLAY_MainFunction+0x320>
    16fc:	10 e0       	ldi	r17, 0x00	; 0
    16fe:	08 c0       	rjmp	.+16     	; 0x1710 <DISPLAY_MainFunction+0x33e>
				for(uint8_t i = 0; i < Number_of_Asteriks; i++)
				{
					while(LCD_SendData('*')!= OperationSuccess);
    1700:	8a e2       	ldi	r24, 0x2A	; 42
    1702:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1706:	81 11       	cpse	r24, r1
    1708:	fb cf       	rjmp	.-10     	; 0x1700 <DISPLAY_MainFunction+0x32e>
					if (i>5)
    170a:	16 30       	cpi	r17, 0x06	; 6
    170c:	58 f4       	brcc	.+22     	; 0x1724 <DISPLAY_MainFunction+0x352>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
				while (LCD_SendCommand(LCD_CURS_Position0|Position)!=OperationSuccess);
				while (LCD_SendString((uint8_t*)"Changing Pass") != OperationSuccess);
				Shifting_State = ShiftingLeft;
				while (LCD_SendCommand(0xc0)!=OperationSuccess);
				for(uint8_t i = 0; i < Number_of_Asteriks; i++)
    170e:	1f 5f       	subi	r17, 0xFF	; 255
    1710:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Number_of_Asteriks>
    1714:	18 17       	cp	r17, r24
    1716:	a0 f3       	brcs	.-24     	; 0x1700 <DISPLAY_MainFunction+0x32e>
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <DISPLAY_MainFunction+0x352>
					}
				}
			}
			break;
		default:
			while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1720:	81 11       	cpse	r24, r1
    1722:	fb cf       	rjmp	.-10     	; 0x171a <DISPLAY_MainFunction+0x348>
			break;
	}
	Last_state = State;
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Last_state.1751>
}
    172a:	0f 90       	pop	r0
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	08 95       	ret

00001734 <DISPLAY_GetState>:
uint8_t static State = OperationStarted;
uint8_t static Number_of_Asteriks = 0;

void DISPLAY_GetState(uint8_t* StateVal)
{
	*StateVal = State;
    1734:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <State>
    1738:	fc 01       	movw	r30, r24
    173a:	20 83       	st	Z, r18
    173c:	08 95       	ret

0000173e <DISPLAY_GetNumber_of_Asterisk>:
}
void DISPLAY_GetNumber_of_Asterisk(uint8_t* AsterisksNumVal)
{
	*AsterisksNumVal = Number_of_Asteriks;
    173e:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <Number_of_Asteriks>
    1742:	fc 01       	movw	r30, r24
    1744:	20 83       	st	Z, r18
    1746:	08 95       	ret

00001748 <DISPLAY_SetState>:
}
void DISPLAY_SetState(uint8_t StateVal)
{
	State = StateVal;
    1748:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <State>
    174c:	08 95       	ret

0000174e <DISPLAY_SetNumber_of_Asterisk>:
}
void DISPLAY_SetNumber_of_Asterisk(uint8_t AsterisksNumVal)
{
	Number_of_Asteriks = AsterisksNumVal;
    174e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Number_of_Asteriks>
    1752:	08 95       	ret

00001754 <main>:
#include "task.h"
#include "DISPLAY.h"
#include "STORAGE.h"

int main(void)
{
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	00 d0       	rcall	.+0      	; 0x175a <main+0x6>
    175a:	00 d0       	rcall	.+0      	; 0x175c <main+0x8>
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
	*/
	//while( != OperationSuccess);
	//uint8_t passworLength = 4;
	//uint8_t const wordLength = 9;
	//uint8_t positionaftefirstlineword = 0xc0;
	while(LCD_Init() != OperationSuccess);
    1760:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_Init>
    1764:	81 11       	cpse	r24, r1
    1766:	fc cf       	rjmp	.-8      	; 0x1760 <main+0xc>
	//{
		//while(LCD_SendData('*')!= OperationSuccess);
	//}
	//uint8_t l = (passworLength+(16-wordLength));
	
	DISPLAY_SetNumber_of_Asterisk(6);
    1768:	86 e0       	ldi	r24, 0x06	; 6
    176a:	0e 94 a7 0b 	call	0x174e	; 0x174e <DISPLAY_SetNumber_of_Asterisk>
	DISPLAY_SetState(Waiting);
    176e:	88 e0       	ldi	r24, 0x08	; 8
    1770:	0e 94 a4 0b 	call	0x1748	; 0x1748 <DISPLAY_SetState>
			//while(LCD_SendCommand((0xc0|l)-1)!= OperationSuccess);
			//for(uint32_t volatile x = 0; x < 50000; x++);
			//l--;
		//}
		//l = (passworLength+(16-wordLength));
		DISPLAY_MainFunction();
    1774:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <DISPLAY_MainFunction>
		for(uint32_t volatile x = 0; x < 100000; x++);
    1778:	19 82       	std	Y+1, r1	; 0x01
    177a:	1a 82       	std	Y+2, r1	; 0x02
    177c:	1b 82       	std	Y+3, r1	; 0x03
    177e:	1c 82       	std	Y+4, r1	; 0x04
    1780:	0b c0       	rjmp	.+22     	; 0x1798 <main+0x44>
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	9a 81       	ldd	r25, Y+2	; 0x02
    1786:	ab 81       	ldd	r26, Y+3	; 0x03
    1788:	bc 81       	ldd	r27, Y+4	; 0x04
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	a1 1d       	adc	r26, r1
    178e:	b1 1d       	adc	r27, r1
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	9a 83       	std	Y+2, r25	; 0x02
    1794:	ab 83       	std	Y+3, r26	; 0x03
    1796:	bc 83       	std	Y+4, r27	; 0x04
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	ab 81       	ldd	r26, Y+3	; 0x03
    179e:	bc 81       	ldd	r27, Y+4	; 0x04
    17a0:	80 3a       	cpi	r24, 0xA0	; 160
    17a2:	96 48       	sbci	r25, 0x86	; 134
    17a4:	a1 40       	sbci	r26, 0x01	; 1
    17a6:	b1 05       	cpc	r27, r1
    17a8:	60 f3       	brcs	.-40     	; 0x1782 <main+0x2e>
    17aa:	e4 cf       	rjmp	.-56     	; 0x1774 <main+0x20>

000017ac <__cmpsf2>:
    17ac:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__fp_cmp>
    17b0:	08 f4       	brcc	.+2      	; 0x17b4 <__cmpsf2+0x8>
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	08 95       	ret

000017b6 <__divsf3>:
    17b6:	0e 94 ef 0b 	call	0x17de	; 0x17de <__divsf3x>
    17ba:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__fp_round>
    17be:	0e 94 ed 0c 	call	0x19da	; 0x19da <__fp_pscB>
    17c2:	58 f0       	brcs	.+22     	; 0x17da <__divsf3+0x24>
    17c4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__fp_pscA>
    17c8:	40 f0       	brcs	.+16     	; 0x17da <__divsf3+0x24>
    17ca:	29 f4       	brne	.+10     	; 0x17d6 <__divsf3+0x20>
    17cc:	5f 3f       	cpi	r21, 0xFF	; 255
    17ce:	29 f0       	breq	.+10     	; 0x17da <__divsf3+0x24>
    17d0:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__fp_inf>
    17d4:	51 11       	cpse	r21, r1
    17d6:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__fp_szero>
    17da:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__fp_nan>

000017de <__divsf3x>:
    17de:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__fp_split3>
    17e2:	68 f3       	brcs	.-38     	; 0x17be <__divsf3+0x8>

000017e4 <__divsf3_pse>:
    17e4:	99 23       	and	r25, r25
    17e6:	b1 f3       	breq	.-20     	; 0x17d4 <__divsf3+0x1e>
    17e8:	55 23       	and	r21, r21
    17ea:	91 f3       	breq	.-28     	; 0x17d0 <__divsf3+0x1a>
    17ec:	95 1b       	sub	r25, r21
    17ee:	55 0b       	sbc	r21, r21
    17f0:	bb 27       	eor	r27, r27
    17f2:	aa 27       	eor	r26, r26
    17f4:	62 17       	cp	r22, r18
    17f6:	73 07       	cpc	r23, r19
    17f8:	84 07       	cpc	r24, r20
    17fa:	38 f0       	brcs	.+14     	; 0x180a <__divsf3_pse+0x26>
    17fc:	9f 5f       	subi	r25, 0xFF	; 255
    17fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1800:	22 0f       	add	r18, r18
    1802:	33 1f       	adc	r19, r19
    1804:	44 1f       	adc	r20, r20
    1806:	aa 1f       	adc	r26, r26
    1808:	a9 f3       	breq	.-22     	; 0x17f4 <__divsf3_pse+0x10>
    180a:	35 d0       	rcall	.+106    	; 0x1876 <__divsf3_pse+0x92>
    180c:	0e 2e       	mov	r0, r30
    180e:	3a f0       	brmi	.+14     	; 0x181e <__divsf3_pse+0x3a>
    1810:	e0 e8       	ldi	r30, 0x80	; 128
    1812:	32 d0       	rcall	.+100    	; 0x1878 <__divsf3_pse+0x94>
    1814:	91 50       	subi	r25, 0x01	; 1
    1816:	50 40       	sbci	r21, 0x00	; 0
    1818:	e6 95       	lsr	r30
    181a:	00 1c       	adc	r0, r0
    181c:	ca f7       	brpl	.-14     	; 0x1810 <__divsf3_pse+0x2c>
    181e:	2b d0       	rcall	.+86     	; 0x1876 <__divsf3_pse+0x92>
    1820:	fe 2f       	mov	r31, r30
    1822:	29 d0       	rcall	.+82     	; 0x1876 <__divsf3_pse+0x92>
    1824:	66 0f       	add	r22, r22
    1826:	77 1f       	adc	r23, r23
    1828:	88 1f       	adc	r24, r24
    182a:	bb 1f       	adc	r27, r27
    182c:	26 17       	cp	r18, r22
    182e:	37 07       	cpc	r19, r23
    1830:	48 07       	cpc	r20, r24
    1832:	ab 07       	cpc	r26, r27
    1834:	b0 e8       	ldi	r27, 0x80	; 128
    1836:	09 f0       	breq	.+2      	; 0x183a <__divsf3_pse+0x56>
    1838:	bb 0b       	sbc	r27, r27
    183a:	80 2d       	mov	r24, r0
    183c:	bf 01       	movw	r22, r30
    183e:	ff 27       	eor	r31, r31
    1840:	93 58       	subi	r25, 0x83	; 131
    1842:	5f 4f       	sbci	r21, 0xFF	; 255
    1844:	3a f0       	brmi	.+14     	; 0x1854 <__divsf3_pse+0x70>
    1846:	9e 3f       	cpi	r25, 0xFE	; 254
    1848:	51 05       	cpc	r21, r1
    184a:	78 f0       	brcs	.+30     	; 0x186a <__divsf3_pse+0x86>
    184c:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__fp_inf>
    1850:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__fp_szero>
    1854:	5f 3f       	cpi	r21, 0xFF	; 255
    1856:	e4 f3       	brlt	.-8      	; 0x1850 <__divsf3_pse+0x6c>
    1858:	98 3e       	cpi	r25, 0xE8	; 232
    185a:	d4 f3       	brlt	.-12     	; 0x1850 <__divsf3_pse+0x6c>
    185c:	86 95       	lsr	r24
    185e:	77 95       	ror	r23
    1860:	67 95       	ror	r22
    1862:	b7 95       	ror	r27
    1864:	f7 95       	ror	r31
    1866:	9f 5f       	subi	r25, 0xFF	; 255
    1868:	c9 f7       	brne	.-14     	; 0x185c <__divsf3_pse+0x78>
    186a:	88 0f       	add	r24, r24
    186c:	91 1d       	adc	r25, r1
    186e:	96 95       	lsr	r25
    1870:	87 95       	ror	r24
    1872:	97 f9       	bld	r25, 7
    1874:	08 95       	ret
    1876:	e1 e0       	ldi	r30, 0x01	; 1
    1878:	66 0f       	add	r22, r22
    187a:	77 1f       	adc	r23, r23
    187c:	88 1f       	adc	r24, r24
    187e:	bb 1f       	adc	r27, r27
    1880:	62 17       	cp	r22, r18
    1882:	73 07       	cpc	r23, r19
    1884:	84 07       	cpc	r24, r20
    1886:	ba 07       	cpc	r27, r26
    1888:	20 f0       	brcs	.+8      	; 0x1892 <__divsf3_pse+0xae>
    188a:	62 1b       	sub	r22, r18
    188c:	73 0b       	sbc	r23, r19
    188e:	84 0b       	sbc	r24, r20
    1890:	ba 0b       	sbc	r27, r26
    1892:	ee 1f       	adc	r30, r30
    1894:	88 f7       	brcc	.-30     	; 0x1878 <__divsf3_pse+0x94>
    1896:	e0 95       	com	r30
    1898:	08 95       	ret

0000189a <__fixunssfsi>:
    189a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fp_splitA>
    189e:	88 f0       	brcs	.+34     	; 0x18c2 <__fixunssfsi+0x28>
    18a0:	9f 57       	subi	r25, 0x7F	; 127
    18a2:	98 f0       	brcs	.+38     	; 0x18ca <__fixunssfsi+0x30>
    18a4:	b9 2f       	mov	r27, r25
    18a6:	99 27       	eor	r25, r25
    18a8:	b7 51       	subi	r27, 0x17	; 23
    18aa:	b0 f0       	brcs	.+44     	; 0x18d8 <__fixunssfsi+0x3e>
    18ac:	e1 f0       	breq	.+56     	; 0x18e6 <__fixunssfsi+0x4c>
    18ae:	66 0f       	add	r22, r22
    18b0:	77 1f       	adc	r23, r23
    18b2:	88 1f       	adc	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	1a f0       	brmi	.+6      	; 0x18be <__fixunssfsi+0x24>
    18b8:	ba 95       	dec	r27
    18ba:	c9 f7       	brne	.-14     	; 0x18ae <__fixunssfsi+0x14>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <__fixunssfsi+0x4c>
    18be:	b1 30       	cpi	r27, 0x01	; 1
    18c0:	91 f0       	breq	.+36     	; 0x18e6 <__fixunssfsi+0x4c>
    18c2:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__fp_zero>
    18c6:	b1 e0       	ldi	r27, 0x01	; 1
    18c8:	08 95       	ret
    18ca:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__fp_zero>
    18ce:	67 2f       	mov	r22, r23
    18d0:	78 2f       	mov	r23, r24
    18d2:	88 27       	eor	r24, r24
    18d4:	b8 5f       	subi	r27, 0xF8	; 248
    18d6:	39 f0       	breq	.+14     	; 0x18e6 <__fixunssfsi+0x4c>
    18d8:	b9 3f       	cpi	r27, 0xF9	; 249
    18da:	cc f3       	brlt	.-14     	; 0x18ce <__fixunssfsi+0x34>
    18dc:	86 95       	lsr	r24
    18de:	77 95       	ror	r23
    18e0:	67 95       	ror	r22
    18e2:	b3 95       	inc	r27
    18e4:	d9 f7       	brne	.-10     	; 0x18dc <__fixunssfsi+0x42>
    18e6:	3e f4       	brtc	.+14     	; 0x18f6 <__fixunssfsi+0x5c>
    18e8:	90 95       	com	r25
    18ea:	80 95       	com	r24
    18ec:	70 95       	com	r23
    18ee:	61 95       	neg	r22
    18f0:	7f 4f       	sbci	r23, 0xFF	; 255
    18f2:	8f 4f       	sbci	r24, 0xFF	; 255
    18f4:	9f 4f       	sbci	r25, 0xFF	; 255
    18f6:	08 95       	ret

000018f8 <__floatunsisf>:
    18f8:	e8 94       	clt
    18fa:	09 c0       	rjmp	.+18     	; 0x190e <__floatsisf+0x12>

000018fc <__floatsisf>:
    18fc:	97 fb       	bst	r25, 7
    18fe:	3e f4       	brtc	.+14     	; 0x190e <__floatsisf+0x12>
    1900:	90 95       	com	r25
    1902:	80 95       	com	r24
    1904:	70 95       	com	r23
    1906:	61 95       	neg	r22
    1908:	7f 4f       	sbci	r23, 0xFF	; 255
    190a:	8f 4f       	sbci	r24, 0xFF	; 255
    190c:	9f 4f       	sbci	r25, 0xFF	; 255
    190e:	99 23       	and	r25, r25
    1910:	a9 f0       	breq	.+42     	; 0x193c <__floatsisf+0x40>
    1912:	f9 2f       	mov	r31, r25
    1914:	96 e9       	ldi	r25, 0x96	; 150
    1916:	bb 27       	eor	r27, r27
    1918:	93 95       	inc	r25
    191a:	f6 95       	lsr	r31
    191c:	87 95       	ror	r24
    191e:	77 95       	ror	r23
    1920:	67 95       	ror	r22
    1922:	b7 95       	ror	r27
    1924:	f1 11       	cpse	r31, r1
    1926:	f8 cf       	rjmp	.-16     	; 0x1918 <__floatsisf+0x1c>
    1928:	fa f4       	brpl	.+62     	; 0x1968 <__floatsisf+0x6c>
    192a:	bb 0f       	add	r27, r27
    192c:	11 f4       	brne	.+4      	; 0x1932 <__floatsisf+0x36>
    192e:	60 ff       	sbrs	r22, 0
    1930:	1b c0       	rjmp	.+54     	; 0x1968 <__floatsisf+0x6c>
    1932:	6f 5f       	subi	r22, 0xFF	; 255
    1934:	7f 4f       	sbci	r23, 0xFF	; 255
    1936:	8f 4f       	sbci	r24, 0xFF	; 255
    1938:	9f 4f       	sbci	r25, 0xFF	; 255
    193a:	16 c0       	rjmp	.+44     	; 0x1968 <__floatsisf+0x6c>
    193c:	88 23       	and	r24, r24
    193e:	11 f0       	breq	.+4      	; 0x1944 <__floatsisf+0x48>
    1940:	96 e9       	ldi	r25, 0x96	; 150
    1942:	11 c0       	rjmp	.+34     	; 0x1966 <__floatsisf+0x6a>
    1944:	77 23       	and	r23, r23
    1946:	21 f0       	breq	.+8      	; 0x1950 <__floatsisf+0x54>
    1948:	9e e8       	ldi	r25, 0x8E	; 142
    194a:	87 2f       	mov	r24, r23
    194c:	76 2f       	mov	r23, r22
    194e:	05 c0       	rjmp	.+10     	; 0x195a <__floatsisf+0x5e>
    1950:	66 23       	and	r22, r22
    1952:	71 f0       	breq	.+28     	; 0x1970 <__floatsisf+0x74>
    1954:	96 e8       	ldi	r25, 0x86	; 134
    1956:	86 2f       	mov	r24, r22
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	2a f0       	brmi	.+10     	; 0x1968 <__floatsisf+0x6c>
    195e:	9a 95       	dec	r25
    1960:	66 0f       	add	r22, r22
    1962:	77 1f       	adc	r23, r23
    1964:	88 1f       	adc	r24, r24
    1966:	da f7       	brpl	.-10     	; 0x195e <__floatsisf+0x62>
    1968:	88 0f       	add	r24, r24
    196a:	96 95       	lsr	r25
    196c:	87 95       	ror	r24
    196e:	97 f9       	bld	r25, 7
    1970:	08 95       	ret

00001972 <__fp_cmp>:
    1972:	99 0f       	add	r25, r25
    1974:	00 08       	sbc	r0, r0
    1976:	55 0f       	add	r21, r21
    1978:	aa 0b       	sbc	r26, r26
    197a:	e0 e8       	ldi	r30, 0x80	; 128
    197c:	fe ef       	ldi	r31, 0xFE	; 254
    197e:	16 16       	cp	r1, r22
    1980:	17 06       	cpc	r1, r23
    1982:	e8 07       	cpc	r30, r24
    1984:	f9 07       	cpc	r31, r25
    1986:	c0 f0       	brcs	.+48     	; 0x19b8 <__fp_cmp+0x46>
    1988:	12 16       	cp	r1, r18
    198a:	13 06       	cpc	r1, r19
    198c:	e4 07       	cpc	r30, r20
    198e:	f5 07       	cpc	r31, r21
    1990:	98 f0       	brcs	.+38     	; 0x19b8 <__fp_cmp+0x46>
    1992:	62 1b       	sub	r22, r18
    1994:	73 0b       	sbc	r23, r19
    1996:	84 0b       	sbc	r24, r20
    1998:	95 0b       	sbc	r25, r21
    199a:	39 f4       	brne	.+14     	; 0x19aa <__fp_cmp+0x38>
    199c:	0a 26       	eor	r0, r26
    199e:	61 f0       	breq	.+24     	; 0x19b8 <__fp_cmp+0x46>
    19a0:	23 2b       	or	r18, r19
    19a2:	24 2b       	or	r18, r20
    19a4:	25 2b       	or	r18, r21
    19a6:	21 f4       	brne	.+8      	; 0x19b0 <__fp_cmp+0x3e>
    19a8:	08 95       	ret
    19aa:	0a 26       	eor	r0, r26
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <__fp_cmp+0x3e>
    19ae:	a1 40       	sbci	r26, 0x01	; 1
    19b0:	a6 95       	lsr	r26
    19b2:	8f ef       	ldi	r24, 0xFF	; 255
    19b4:	81 1d       	adc	r24, r1
    19b6:	81 1d       	adc	r24, r1
    19b8:	08 95       	ret

000019ba <__fp_inf>:
    19ba:	97 f9       	bld	r25, 7
    19bc:	9f 67       	ori	r25, 0x7F	; 127
    19be:	80 e8       	ldi	r24, 0x80	; 128
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	60 e0       	ldi	r22, 0x00	; 0
    19c4:	08 95       	ret

000019c6 <__fp_nan>:
    19c6:	9f ef       	ldi	r25, 0xFF	; 255
    19c8:	80 ec       	ldi	r24, 0xC0	; 192
    19ca:	08 95       	ret

000019cc <__fp_pscA>:
    19cc:	00 24       	eor	r0, r0
    19ce:	0a 94       	dec	r0
    19d0:	16 16       	cp	r1, r22
    19d2:	17 06       	cpc	r1, r23
    19d4:	18 06       	cpc	r1, r24
    19d6:	09 06       	cpc	r0, r25
    19d8:	08 95       	ret

000019da <__fp_pscB>:
    19da:	00 24       	eor	r0, r0
    19dc:	0a 94       	dec	r0
    19de:	12 16       	cp	r1, r18
    19e0:	13 06       	cpc	r1, r19
    19e2:	14 06       	cpc	r1, r20
    19e4:	05 06       	cpc	r0, r21
    19e6:	08 95       	ret

000019e8 <__fp_round>:
    19e8:	09 2e       	mov	r0, r25
    19ea:	03 94       	inc	r0
    19ec:	00 0c       	add	r0, r0
    19ee:	11 f4       	brne	.+4      	; 0x19f4 <__fp_round+0xc>
    19f0:	88 23       	and	r24, r24
    19f2:	52 f0       	brmi	.+20     	; 0x1a08 <__fp_round+0x20>
    19f4:	bb 0f       	add	r27, r27
    19f6:	40 f4       	brcc	.+16     	; 0x1a08 <__fp_round+0x20>
    19f8:	bf 2b       	or	r27, r31
    19fa:	11 f4       	brne	.+4      	; 0x1a00 <__fp_round+0x18>
    19fc:	60 ff       	sbrs	r22, 0
    19fe:	04 c0       	rjmp	.+8      	; 0x1a08 <__fp_round+0x20>
    1a00:	6f 5f       	subi	r22, 0xFF	; 255
    1a02:	7f 4f       	sbci	r23, 0xFF	; 255
    1a04:	8f 4f       	sbci	r24, 0xFF	; 255
    1a06:	9f 4f       	sbci	r25, 0xFF	; 255
    1a08:	08 95       	ret

00001a0a <__fp_split3>:
    1a0a:	57 fd       	sbrc	r21, 7
    1a0c:	90 58       	subi	r25, 0x80	; 128
    1a0e:	44 0f       	add	r20, r20
    1a10:	55 1f       	adc	r21, r21
    1a12:	59 f0       	breq	.+22     	; 0x1a2a <__fp_splitA+0x10>
    1a14:	5f 3f       	cpi	r21, 0xFF	; 255
    1a16:	71 f0       	breq	.+28     	; 0x1a34 <__fp_splitA+0x1a>
    1a18:	47 95       	ror	r20

00001a1a <__fp_splitA>:
    1a1a:	88 0f       	add	r24, r24
    1a1c:	97 fb       	bst	r25, 7
    1a1e:	99 1f       	adc	r25, r25
    1a20:	61 f0       	breq	.+24     	; 0x1a3a <__fp_splitA+0x20>
    1a22:	9f 3f       	cpi	r25, 0xFF	; 255
    1a24:	79 f0       	breq	.+30     	; 0x1a44 <__fp_splitA+0x2a>
    1a26:	87 95       	ror	r24
    1a28:	08 95       	ret
    1a2a:	12 16       	cp	r1, r18
    1a2c:	13 06       	cpc	r1, r19
    1a2e:	14 06       	cpc	r1, r20
    1a30:	55 1f       	adc	r21, r21
    1a32:	f2 cf       	rjmp	.-28     	; 0x1a18 <__fp_split3+0xe>
    1a34:	46 95       	lsr	r20
    1a36:	f1 df       	rcall	.-30     	; 0x1a1a <__fp_splitA>
    1a38:	08 c0       	rjmp	.+16     	; 0x1a4a <__fp_splitA+0x30>
    1a3a:	16 16       	cp	r1, r22
    1a3c:	17 06       	cpc	r1, r23
    1a3e:	18 06       	cpc	r1, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	f1 cf       	rjmp	.-30     	; 0x1a26 <__fp_splitA+0xc>
    1a44:	86 95       	lsr	r24
    1a46:	71 05       	cpc	r23, r1
    1a48:	61 05       	cpc	r22, r1
    1a4a:	08 94       	sec
    1a4c:	08 95       	ret

00001a4e <__fp_zero>:
    1a4e:	e8 94       	clt

00001a50 <__fp_szero>:
    1a50:	bb 27       	eor	r27, r27
    1a52:	66 27       	eor	r22, r22
    1a54:	77 27       	eor	r23, r23
    1a56:	cb 01       	movw	r24, r22
    1a58:	97 f9       	bld	r25, 7
    1a5a:	08 95       	ret

00001a5c <__udivmodsi4>:
    1a5c:	a1 e2       	ldi	r26, 0x21	; 33
    1a5e:	1a 2e       	mov	r1, r26
    1a60:	aa 1b       	sub	r26, r26
    1a62:	bb 1b       	sub	r27, r27
    1a64:	fd 01       	movw	r30, r26
    1a66:	0d c0       	rjmp	.+26     	; 0x1a82 <__udivmodsi4_ep>

00001a68 <__udivmodsi4_loop>:
    1a68:	aa 1f       	adc	r26, r26
    1a6a:	bb 1f       	adc	r27, r27
    1a6c:	ee 1f       	adc	r30, r30
    1a6e:	ff 1f       	adc	r31, r31
    1a70:	a2 17       	cp	r26, r18
    1a72:	b3 07       	cpc	r27, r19
    1a74:	e4 07       	cpc	r30, r20
    1a76:	f5 07       	cpc	r31, r21
    1a78:	20 f0       	brcs	.+8      	; 0x1a82 <__udivmodsi4_ep>
    1a7a:	a2 1b       	sub	r26, r18
    1a7c:	b3 0b       	sbc	r27, r19
    1a7e:	e4 0b       	sbc	r30, r20
    1a80:	f5 0b       	sbc	r31, r21

00001a82 <__udivmodsi4_ep>:
    1a82:	66 1f       	adc	r22, r22
    1a84:	77 1f       	adc	r23, r23
    1a86:	88 1f       	adc	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	1a 94       	dec	r1
    1a8c:	69 f7       	brne	.-38     	; 0x1a68 <__udivmodsi4_loop>
    1a8e:	60 95       	com	r22
    1a90:	70 95       	com	r23
    1a92:	80 95       	com	r24
    1a94:	90 95       	com	r25
    1a96:	9b 01       	movw	r18, r22
    1a98:	ac 01       	movw	r20, r24
    1a9a:	bd 01       	movw	r22, r26
    1a9c:	cf 01       	movw	r24, r30
    1a9e:	08 95       	ret

00001aa0 <__tablejump2__>:
    1aa0:	ee 0f       	add	r30, r30
    1aa2:	ff 1f       	adc	r31, r31
    1aa4:	05 90       	lpm	r0, Z+
    1aa6:	f4 91       	lpm	r31, Z
    1aa8:	e0 2d       	mov	r30, r0
    1aaa:	09 94       	ijmp

00001aac <__muluhisi3>:
    1aac:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__umulhisi3>
    1ab0:	a5 9f       	mul	r26, r21
    1ab2:	90 0d       	add	r25, r0
    1ab4:	b4 9f       	mul	r27, r20
    1ab6:	90 0d       	add	r25, r0
    1ab8:	a4 9f       	mul	r26, r20
    1aba:	80 0d       	add	r24, r0
    1abc:	91 1d       	adc	r25, r1
    1abe:	11 24       	eor	r1, r1
    1ac0:	08 95       	ret

00001ac2 <__umulhisi3>:
    1ac2:	a2 9f       	mul	r26, r18
    1ac4:	b0 01       	movw	r22, r0
    1ac6:	b3 9f       	mul	r27, r19
    1ac8:	c0 01       	movw	r24, r0
    1aca:	a3 9f       	mul	r26, r19
    1acc:	70 0d       	add	r23, r0
    1ace:	81 1d       	adc	r24, r1
    1ad0:	11 24       	eor	r1, r1
    1ad2:	91 1d       	adc	r25, r1
    1ad4:	b2 9f       	mul	r27, r18
    1ad6:	70 0d       	add	r23, r0
    1ad8:	81 1d       	adc	r24, r1
    1ada:	11 24       	eor	r1, r1
    1adc:	91 1d       	adc	r25, r1
    1ade:	08 95       	ret

00001ae0 <_exit>:
    1ae0:	f8 94       	cli

00001ae2 <__stop_program>:
    1ae2:	ff cf       	rjmp	.-2      	; 0x1ae2 <__stop_program>
