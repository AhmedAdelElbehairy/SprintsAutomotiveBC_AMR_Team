
MCU_To_MCU_Bluetooth_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  00000b2a  00000bbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  00800160  00800160  00000cbe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027e2  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af0  00000000  00000000  0000373e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b9d  00000000  00000000  0000422e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000734  00000000  00000000  00005dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001046  00000000  00000000  00006500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002779  00000000  00000000  00007546  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00009cbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6d 05 	call	0xada	; 0xada <main>
  8a:	0c 94 93 05 	jmp	0xb26	; 0xb26 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	0f 92       	push	r0
  9a:	1f 92       	push	r1
  9c:	11 24       	eor	r1, r1
  9e:	2f 92       	push	r2
  a0:	3f 92       	push	r3
  a2:	4f 92       	push	r4
  a4:	5f 92       	push	r5
  a6:	6f 92       	push	r6
  a8:	7f 92       	push	r7
  aa:	8f 92       	push	r8
  ac:	9f 92       	push	r9
  ae:	af 92       	push	r10
  b0:	bf 92       	push	r11
  b2:	cf 92       	push	r12
  b4:	df 92       	push	r13
  b6:	ef 92       	push	r14
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
  da:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <pxCurrentTCB>
  de:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <pxCurrentTCB+0x1>
  e2:	0d b6       	in	r0, 0x3d	; 61
  e4:	0d 92       	st	X+, r0
  e6:	0e b6       	in	r0, 0x3e	; 62
  e8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
  ea:	0e 94 c4 00 	call	0x188	; 0x188 <xTaskIncrementTick>
  ee:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
  f0:	0e 94 de 01 	call	0x3bc	; 0x3bc <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
  f4:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <pxCurrentTCB>
  f8:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <pxCurrentTCB+0x1>
  fc:	cd 91       	ld	r28, X+
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	dd 91       	ld	r29, X+
 102:	de bf       	out	0x3e, r29	; 62
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	bf 91       	pop	r27
 10e:	af 91       	pop	r26
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	7f 91       	pop	r23
 116:	6f 91       	pop	r22
 118:	5f 91       	pop	r21
 11a:	4f 91       	pop	r20
 11c:	3f 91       	pop	r19
 11e:	2f 91       	pop	r18
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	ff 90       	pop	r15
 126:	ef 90       	pop	r14
 128:	df 90       	pop	r13
 12a:	cf 90       	pop	r12
 12c:	bf 90       	pop	r11
 12e:	af 90       	pop	r10
 130:	9f 90       	pop	r9
 132:	8f 90       	pop	r8
 134:	7f 90       	pop	r7
 136:	6f 90       	pop	r6
 138:	5f 90       	pop	r5
 13a:	4f 90       	pop	r4
 13c:	3f 90       	pop	r3
 13e:	2f 90       	pop	r2
 140:	1f 90       	pop	r1
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0

	asm volatile ( "ret" );
 148:	08 95       	ret

0000014a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 14a:	0e 94 49 00 	call	0x92	; 0x92 <vPortYieldFromTick>
		asm volatile ( "reti" );
 14e:	18 95       	reti

00000150 <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
 150:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <pxDelayedTaskList>
 154:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
 158:	80 81       	ld	r24, Z
 15a:	81 11       	cpse	r24, r1
 15c:	07 c0       	rjmp	.+14     	; 0x16c <prvResetNextTaskUnblockTime+0x1c>
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	9f ef       	ldi	r25, 0xFF	; 255
 162:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <xNextTaskUnblockTime+0x1>
 166:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <xNextTaskUnblockTime>
 16a:	08 95       	ret
 16c:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <pxDelayedTaskList>
 170:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
 174:	05 80       	ldd	r0, Z+5	; 0x05
 176:	f6 81       	ldd	r31, Z+6	; 0x06
 178:	e0 2d       	mov	r30, r0
 17a:	80 81       	ld	r24, Z
 17c:	91 81       	ldd	r25, Z+1	; 0x01
 17e:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <xNextTaskUnblockTime+0x1>
 182:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <xNextTaskUnblockTime>
 186:	08 95       	ret

00000188 <xTaskIncrementTick>:
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
 194:	81 11       	cpse	r24, r1
 196:	01 c1       	rjmp	.+514    	; 0x39a <xTaskIncrementTick+0x212>
 198:	c0 91 68 01 	lds	r28, 0x0168	; 0x800168 <xTickCount>
 19c:	d0 91 69 01 	lds	r29, 0x0169	; 0x800169 <xTickCount+0x1>
 1a0:	8e 01       	movw	r16, r28
 1a2:	0f 5f       	subi	r16, 0xFF	; 255
 1a4:	1f 4f       	sbci	r17, 0xFF	; 255
 1a6:	10 93 69 01 	sts	0x0169, r17	; 0x800169 <xTickCount+0x1>
 1aa:	00 93 68 01 	sts	0x0168, r16	; 0x800168 <xTickCount>
 1ae:	01 15       	cp	r16, r1
 1b0:	11 05       	cpc	r17, r1
 1b2:	b9 f4       	brne	.+46     	; 0x1e2 <xTaskIncrementTick+0x5a>
 1b4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <pxDelayedTaskList>
 1b8:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
 1bc:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <pxOverflowDelayedTaskList>
 1c0:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <pxOverflowDelayedTaskList+0x1>
 1c4:	30 93 6d 01 	sts	0x016D, r19	; 0x80016d <pxDelayedTaskList+0x1>
 1c8:	20 93 6c 01 	sts	0x016C, r18	; 0x80016c <pxDelayedTaskList>
 1cc:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <pxOverflowDelayedTaskList+0x1>
 1d0:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <pxOverflowDelayedTaskList>
 1d4:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <xNumOfOverflows>
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <xNumOfOverflows>
 1de:	0e 94 a8 00 	call	0x150	; 0x150 <prvResetNextTaskUnblockTime>
 1e2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <xNextTaskUnblockTime>
 1e6:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <xNextTaskUnblockTime+0x1>
 1ea:	08 17       	cp	r16, r24
 1ec:	19 07       	cpc	r17, r25
 1ee:	20 f4       	brcc	.+8      	; 0x1f8 <xTaskIncrementTick+0x70>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	b8 c0       	rjmp	.+368    	; 0x364 <xTaskIncrementTick+0x1dc>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <xTaskIncrementTick+0x72>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <pxDelayedTaskList>
 1fe:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
 202:	90 81       	ld	r25, Z
 204:	91 11       	cpse	r25, r1
 206:	07 c0       	rjmp	.+14     	; 0x216 <xTaskIncrementTick+0x8e>
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	3f ef       	ldi	r19, 0xFF	; 255
 20c:	30 93 62 01 	sts	0x0162, r19	; 0x800162 <xNextTaskUnblockTime+0x1>
 210:	20 93 61 01 	sts	0x0161, r18	; 0x800161 <xNextTaskUnblockTime>
 214:	a7 c0       	rjmp	.+334    	; 0x364 <xTaskIncrementTick+0x1dc>
 216:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <pxDelayedTaskList>
 21a:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <pxDelayedTaskList+0x1>
 21e:	05 80       	ldd	r0, Z+5	; 0x05
 220:	f6 81       	ldd	r31, Z+6	; 0x06
 222:	e0 2d       	mov	r30, r0
 224:	06 80       	ldd	r0, Z+6	; 0x06
 226:	f7 81       	ldd	r31, Z+7	; 0x07
 228:	e0 2d       	mov	r30, r0
 22a:	22 81       	ldd	r18, Z+2	; 0x02
 22c:	33 81       	ldd	r19, Z+3	; 0x03
 22e:	02 17       	cp	r16, r18
 230:	13 07       	cpc	r17, r19
 232:	28 f4       	brcc	.+10     	; 0x23e <xTaskIncrementTick+0xb6>
 234:	30 93 62 01 	sts	0x0162, r19	; 0x800162 <xNextTaskUnblockTime+0x1>
 238:	20 93 61 01 	sts	0x0161, r18	; 0x800161 <xNextTaskUnblockTime>
 23c:	93 c0       	rjmp	.+294    	; 0x364 <xTaskIncrementTick+0x1dc>
 23e:	a2 85       	ldd	r26, Z+10	; 0x0a
 240:	b3 85       	ldd	r27, Z+11	; 0x0b
 242:	24 81       	ldd	r18, Z+4	; 0x04
 244:	35 81       	ldd	r19, Z+5	; 0x05
 246:	46 81       	ldd	r20, Z+6	; 0x06
 248:	57 81       	ldd	r21, Z+7	; 0x07
 24a:	e9 01       	movw	r28, r18
 24c:	5d 83       	std	Y+5, r21	; 0x05
 24e:	4c 83       	std	Y+4, r20	; 0x04
 250:	26 81       	ldd	r18, Z+6	; 0x06
 252:	37 81       	ldd	r19, Z+7	; 0x07
 254:	44 81       	ldd	r20, Z+4	; 0x04
 256:	55 81       	ldd	r21, Z+5	; 0x05
 258:	e9 01       	movw	r28, r18
 25a:	5b 83       	std	Y+3, r21	; 0x03
 25c:	4a 83       	std	Y+2, r20	; 0x02
 25e:	11 96       	adiw	r26, 0x01	; 1
 260:	2d 91       	ld	r18, X+
 262:	3c 91       	ld	r19, X
 264:	12 97       	sbiw	r26, 0x02	; 2
 266:	af 01       	movw	r20, r30
 268:	4e 5f       	subi	r20, 0xFE	; 254
 26a:	5f 4f       	sbci	r21, 0xFF	; 255
 26c:	24 17       	cp	r18, r20
 26e:	35 07       	cpc	r19, r21
 270:	31 f4       	brne	.+12     	; 0x27e <xTaskIncrementTick+0xf6>
 272:	26 81       	ldd	r18, Z+6	; 0x06
 274:	37 81       	ldd	r19, Z+7	; 0x07
 276:	12 96       	adiw	r26, 0x02	; 2
 278:	3c 93       	st	X, r19
 27a:	2e 93       	st	-X, r18
 27c:	11 97       	sbiw	r26, 0x01	; 1
 27e:	13 86       	std	Z+11, r1	; 0x0b
 280:	12 86       	std	Z+10, r1	; 0x0a
 282:	9c 91       	ld	r25, X
 284:	91 50       	subi	r25, 0x01	; 1
 286:	9c 93       	st	X, r25
 288:	a4 89       	ldd	r26, Z+20	; 0x14
 28a:	b5 89       	ldd	r27, Z+21	; 0x15
 28c:	10 97       	sbiw	r26, 0x00	; 0
 28e:	19 f1       	breq	.+70     	; 0x2d6 <xTaskIncrementTick+0x14e>
 290:	26 85       	ldd	r18, Z+14	; 0x0e
 292:	37 85       	ldd	r19, Z+15	; 0x0f
 294:	60 89       	ldd	r22, Z+16	; 0x10
 296:	71 89       	ldd	r23, Z+17	; 0x11
 298:	e9 01       	movw	r28, r18
 29a:	7d 83       	std	Y+5, r23	; 0x05
 29c:	6c 83       	std	Y+4, r22	; 0x04
 29e:	20 89       	ldd	r18, Z+16	; 0x10
 2a0:	31 89       	ldd	r19, Z+17	; 0x11
 2a2:	66 85       	ldd	r22, Z+14	; 0x0e
 2a4:	77 85       	ldd	r23, Z+15	; 0x0f
 2a6:	e9 01       	movw	r28, r18
 2a8:	7b 83       	std	Y+3, r23	; 0x03
 2aa:	6a 83       	std	Y+2, r22	; 0x02
 2ac:	11 96       	adiw	r26, 0x01	; 1
 2ae:	6d 91       	ld	r22, X+
 2b0:	7c 91       	ld	r23, X
 2b2:	12 97       	sbiw	r26, 0x02	; 2
 2b4:	9f 01       	movw	r18, r30
 2b6:	24 5f       	subi	r18, 0xF4	; 244
 2b8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ba:	62 17       	cp	r22, r18
 2bc:	73 07       	cpc	r23, r19
 2be:	31 f4       	brne	.+12     	; 0x2cc <xTaskIncrementTick+0x144>
 2c0:	20 89       	ldd	r18, Z+16	; 0x10
 2c2:	31 89       	ldd	r19, Z+17	; 0x11
 2c4:	12 96       	adiw	r26, 0x02	; 2
 2c6:	3c 93       	st	X, r19
 2c8:	2e 93       	st	-X, r18
 2ca:	11 97       	sbiw	r26, 0x01	; 1
 2cc:	15 8a       	std	Z+21, r1	; 0x15
 2ce:	14 8a       	std	Z+20, r1	; 0x14
 2d0:	9c 91       	ld	r25, X
 2d2:	91 50       	subi	r25, 0x01	; 1
 2d4:	9c 93       	st	X, r25
 2d6:	26 89       	ldd	r18, Z+22	; 0x16
 2d8:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <uxTopReadyPriority>
 2dc:	92 17       	cp	r25, r18
 2de:	10 f4       	brcc	.+4      	; 0x2e4 <xTaskIncrementTick+0x15c>
 2e0:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <uxTopReadyPriority>
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	d9 01       	movw	r26, r18
 2e8:	aa 0f       	add	r26, r26
 2ea:	bb 1f       	adc	r27, r27
 2ec:	aa 0f       	add	r26, r26
 2ee:	bb 1f       	adc	r27, r27
 2f0:	aa 0f       	add	r26, r26
 2f2:	bb 1f       	adc	r27, r27
 2f4:	2a 0f       	add	r18, r26
 2f6:	3b 1f       	adc	r19, r27
 2f8:	d9 01       	movw	r26, r18
 2fa:	a2 59       	subi	r26, 0x92	; 146
 2fc:	be 4f       	sbci	r27, 0xFE	; 254
 2fe:	11 96       	adiw	r26, 0x01	; 1
 300:	0d 90       	ld	r0, X+
 302:	bc 91       	ld	r27, X
 304:	a0 2d       	mov	r26, r0
 306:	b5 83       	std	Z+5, r27	; 0x05
 308:	a4 83       	std	Z+4, r26	; 0x04
 30a:	14 96       	adiw	r26, 0x04	; 4
 30c:	2d 91       	ld	r18, X+
 30e:	3c 91       	ld	r19, X
 310:	15 97       	sbiw	r26, 0x05	; 5
 312:	37 83       	std	Z+7, r19	; 0x07
 314:	26 83       	std	Z+6, r18	; 0x06
 316:	14 96       	adiw	r26, 0x04	; 4
 318:	2d 91       	ld	r18, X+
 31a:	3c 91       	ld	r19, X
 31c:	15 97       	sbiw	r26, 0x05	; 5
 31e:	e9 01       	movw	r28, r18
 320:	5b 83       	std	Y+3, r21	; 0x03
 322:	4a 83       	std	Y+2, r20	; 0x02
 324:	15 96       	adiw	r26, 0x05	; 5
 326:	5c 93       	st	X, r21
 328:	4e 93       	st	-X, r20
 32a:	14 97       	sbiw	r26, 0x04	; 4
 32c:	a6 89       	ldd	r26, Z+22	; 0x16
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	9d 01       	movw	r18, r26
 332:	22 0f       	add	r18, r18
 334:	33 1f       	adc	r19, r19
 336:	22 0f       	add	r18, r18
 338:	33 1f       	adc	r19, r19
 33a:	22 0f       	add	r18, r18
 33c:	33 1f       	adc	r19, r19
 33e:	a2 0f       	add	r26, r18
 340:	b3 1f       	adc	r27, r19
 342:	a2 59       	subi	r26, 0x92	; 146
 344:	be 4f       	sbci	r27, 0xFE	; 254
 346:	b3 87       	std	Z+11, r27	; 0x0b
 348:	a2 87       	std	Z+10, r26	; 0x0a
 34a:	9c 91       	ld	r25, X
 34c:	9f 5f       	subi	r25, 0xFF	; 255
 34e:	9c 93       	st	X, r25
 350:	26 89       	ldd	r18, Z+22	; 0x16
 352:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <pxCurrentTCB>
 356:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <pxCurrentTCB+0x1>
 35a:	96 89       	ldd	r25, Z+22	; 0x16
 35c:	29 17       	cp	r18, r25
 35e:	08 f0       	brcs	.+2      	; 0x362 <xTaskIncrementTick+0x1da>
 360:	49 cf       	rjmp	.-366    	; 0x1f4 <xTaskIncrementTick+0x6c>
 362:	4b cf       	rjmp	.-362    	; 0x1fa <xTaskIncrementTick+0x72>
 364:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <pxCurrentTCB>
 368:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <pxCurrentTCB+0x1>
 36c:	26 89       	ldd	r18, Z+22	; 0x16
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	f9 01       	movw	r30, r18
 372:	ee 0f       	add	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	2e 0f       	add	r18, r30
 380:	3f 1f       	adc	r19, r31
 382:	f9 01       	movw	r30, r18
 384:	e2 59       	subi	r30, 0x92	; 146
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	90 81       	ld	r25, Z
 38a:	92 30       	cpi	r25, 0x02	; 2
 38c:	08 f0       	brcs	.+2      	; 0x390 <xTaskIncrementTick+0x208>
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <xYieldPending>
 394:	91 11       	cpse	r25, r1
 396:	0c c0       	rjmp	.+24     	; 0x3b0 <xTaskIncrementTick+0x228>
 398:	0c c0       	rjmp	.+24     	; 0x3b2 <xTaskIncrementTick+0x22a>
 39a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <xPendedTicks>
 39e:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <xPendedTicks+0x1>
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <xPendedTicks+0x1>
 3a8:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <xPendedTicks>
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <xTaskIncrementTick+0x22a>
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	08 95       	ret

000003bc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3bc:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
 3c0:	88 23       	and	r24, r24
 3c2:	21 f0       	breq	.+8      	; 0x3cc <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <xYieldPending>
 3ca:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
 3cc:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 3d0:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <uxTopReadyPriority>
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <vTaskSwitchContext+0x1c>
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	82 2f       	mov	r24, r18
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	fc 01       	movw	r30, r24
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	e8 0f       	add	r30, r24
 3ec:	f9 1f       	adc	r31, r25
 3ee:	e2 59       	subi	r30, 0x92	; 146
 3f0:	fe 4f       	sbci	r31, 0xFE	; 254
 3f2:	30 81       	ld	r19, Z
 3f4:	33 23       	and	r19, r19
 3f6:	79 f3       	breq	.-34     	; 0x3d6 <vTaskSwitchContext+0x1a>
 3f8:	ac 01       	movw	r20, r24
 3fa:	44 0f       	add	r20, r20
 3fc:	55 1f       	adc	r21, r21
 3fe:	44 0f       	add	r20, r20
 400:	55 1f       	adc	r21, r21
 402:	44 0f       	add	r20, r20
 404:	55 1f       	adc	r21, r21
 406:	48 0f       	add	r20, r24
 408:	59 1f       	adc	r21, r25
 40a:	df 01       	movw	r26, r30
 40c:	01 80       	ldd	r0, Z+1	; 0x01
 40e:	f2 81       	ldd	r31, Z+2	; 0x02
 410:	e0 2d       	mov	r30, r0
 412:	02 80       	ldd	r0, Z+2	; 0x02
 414:	f3 81       	ldd	r31, Z+3	; 0x03
 416:	e0 2d       	mov	r30, r0
 418:	12 96       	adiw	r26, 0x02	; 2
 41a:	fc 93       	st	X, r31
 41c:	ee 93       	st	-X, r30
 41e:	11 97       	sbiw	r26, 0x01	; 1
 420:	4f 58       	subi	r20, 0x8F	; 143
 422:	5e 4f       	sbci	r21, 0xFE	; 254
 424:	e4 17       	cp	r30, r20
 426:	f5 07       	cpc	r31, r21
 428:	29 f4       	brne	.+10     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42a:	42 81       	ldd	r20, Z+2	; 0x02
 42c:	53 81       	ldd	r21, Z+3	; 0x03
 42e:	fd 01       	movw	r30, r26
 430:	52 83       	std	Z+2, r21	; 0x02
 432:	41 83       	std	Z+1, r20	; 0x01
 434:	fc 01       	movw	r30, r24
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	8e 0f       	add	r24, r30
 444:	9f 1f       	adc	r25, r31
 446:	fc 01       	movw	r30, r24
 448:	e2 59       	subi	r30, 0x92	; 146
 44a:	fe 4f       	sbci	r31, 0xFE	; 254
 44c:	01 80       	ldd	r0, Z+1	; 0x01
 44e:	f2 81       	ldd	r31, Z+2	; 0x02
 450:	e0 2d       	mov	r30, r0
 452:	86 81       	ldd	r24, Z+6	; 0x06
 454:	97 81       	ldd	r25, Z+7	; 0x07
 456:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <pxCurrentTCB+0x1>
 45a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <pxCurrentTCB>
 45e:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <uxTopReadyPriority>
 462:	08 95       	ret

00000464 <STR_Length>:
		}while(Number);
		*String = NULL_TERMINATOR;
	}
	STR_StringReverse(SringCpy);
	return 0;
}
 464:	fc 01       	movw	r30, r24
 466:	db 01       	movw	r26, r22
 468:	11 96       	adiw	r26, 0x01	; 1
 46a:	1c 92       	st	X, r1
 46c:	1e 92       	st	-X, r1
 46e:	09 c0       	rjmp	.+18     	; 0x482 <STR_Length+0x1e>
 470:	2d 91       	ld	r18, X+
 472:	3c 91       	ld	r19, X
 474:	11 97       	sbiw	r26, 0x01	; 1
 476:	2f 5f       	subi	r18, 0xFF	; 255
 478:	3f 4f       	sbci	r19, 0xFF	; 255
 47a:	11 96       	adiw	r26, 0x01	; 1
 47c:	3c 93       	st	X, r19
 47e:	2e 93       	st	-X, r18
 480:	31 96       	adiw	r30, 0x01	; 1
 482:	80 81       	ld	r24, Z
 484:	81 11       	cpse	r24, r1
 486:	f4 cf       	rjmp	.-24     	; 0x470 <STR_Length+0xc>
 488:	08 95       	ret

0000048a <CRC_16_Calc>:
https://rndtool.info/CRC-step-by-step-calculator/
https://www.lammertbies.nl/comm/info/crc-calculation
https://www.youtube.com/watch?v=izG7qT0EpBw
*/
uint8_t CRC_16_Calc (uint8_t* STRING, uint16_t* CalculatedCRC)
{
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	c6 50       	subi	r28, 0x06	; 6
 498:	d1 40       	sbci	r29, 0x01	; 1
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	cd bf       	out	0x3d, r28	; 61
 4a4:	8c 01       	movw	r16, r24
	/*change array of character to array of bits*/
	/*initialize the array of bits*/
	uint8_t volatile BitArr[255] = {0};
 4a6:	fe 01       	movw	r30, r28
 4a8:	31 96       	adiw	r30, 0x01	; 1
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	df 01       	movw	r26, r30
 4ae:	1d 92       	st	X+, r1
 4b0:	8a 95       	dec	r24
 4b2:	e9 f7       	brne	.-6      	; 0x4ae <CRC_16_Calc+0x24>
	/*flag used for breaking through outer loop*/
	uint8_t volatile Flag = 0;
 4b4:	c0 50       	subi	r28, 0x00	; 0
 4b6:	df 4f       	sbci	r29, 0xFF	; 255
 4b8:	18 82       	st	Y, r1
 4ba:	c0 50       	subi	r28, 0x00	; 0
 4bc:	d1 40       	sbci	r29, 0x01	; 1
	const uint16_t polynomial = 0b1000000000000101;
	/*variable that holds the value to be XORED and SHIFTED*/
	uint16_t volatile Window_16_Element; 
	/*initialize the variable that holds the number of characters to which CRC is calculated*/
	/*number of characters in the inserted string*/
	uint8_t volatile StrLength =0;
 4be:	cd 5f       	subi	r28, 0xFD	; 253
 4c0:	de 4f       	sbci	r29, 0xFE	; 254
 4c2:	18 82       	st	Y, r1
 4c4:	c3 50       	subi	r28, 0x03	; 3
 4c6:	d1 40       	sbci	r29, 0x01	; 1
	/*initialize the variable that holds the number of bits in the inserted string*/
	uint8_t volatile BitArr_Size = 0;
 4c8:	cc 5f       	subi	r28, 0xFC	; 252
 4ca:	de 4f       	sbci	r29, 0xFE	; 254
 4cc:	18 82       	st	Y, r1
 4ce:	c4 50       	subi	r28, 0x04	; 4
 4d0:	d1 40       	sbci	r29, 0x01	; 1
	/*using STR_Length() function to calculate Number of characters in the inserted String*/
	STR_Length(STRING, &StrLength);
 4d2:	be 01       	movw	r22, r28
 4d4:	6d 5f       	subi	r22, 0xFD	; 253
 4d6:	7e 4f       	sbci	r23, 0xFE	; 254
 4d8:	c8 01       	movw	r24, r16
 4da:	0e 94 32 02 	call	0x464	; 0x464 <STR_Length>
	/*initializing the iterator for the array of bits of the inserted Character string*/
	uint8_t volatile iterator_of_BitArr = 0;
 4de:	cb 5f       	subi	r28, 0xFB	; 251
 4e0:	de 4f       	sbci	r29, 0xFE	; 254
 4e2:	18 82       	st	Y, r1
 4e4:	c5 50       	subi	r28, 0x05	; 5
 4e6:	d1 40       	sbci	r29, 0x01	; 1
	/*initializing the iterator for the array of the inserted Characters in the string*/
	uint8_t volatile iterator_of_characters = 0;
 4e8:	ca 5f       	subi	r28, 0xFA	; 250
 4ea:	de 4f       	sbci	r29, 0xFE	; 254
 4ec:	18 82       	st	Y, r1
 4ee:	c6 50       	subi	r28, 0x06	; 6
 4f0:	d1 40       	sbci	r29, 0x01	; 1
	/*assigning the bits of the character in the passed string to the array of bits*/
	/*bits are arranged in the array the form of an extra long number"Index 0:MSB,..,..,..,. . .,Index N:LSB"*/
	for(iterator_of_characters = 0; iterator_of_characters < StrLength; iterator_of_characters++)
 4f2:	ca 5f       	subi	r28, 0xFA	; 250
 4f4:	de 4f       	sbci	r29, 0xFE	; 254
 4f6:	18 82       	st	Y, r1
 4f8:	c6 50       	subi	r28, 0x06	; 6
 4fa:	d1 40       	sbci	r29, 0x01	; 1
 4fc:	41 c1       	rjmp	.+642    	; 0x780 <CRC_16_Calc+0x2f6>
	{
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_7);
 4fe:	cb 5f       	subi	r28, 0xFB	; 251
 500:	de 4f       	sbci	r29, 0xFE	; 254
 502:	98 81       	ld	r25, Y
 504:	c5 50       	subi	r28, 0x05	; 5
 506:	d1 40       	sbci	r29, 0x01	; 1
 508:	ca 5f       	subi	r28, 0xFA	; 250
 50a:	de 4f       	sbci	r29, 0xFE	; 254
 50c:	88 81       	ld	r24, Y
 50e:	c6 50       	subi	r28, 0x06	; 6
 510:	d1 40       	sbci	r29, 0x01	; 1
 512:	f8 01       	movw	r30, r16
 514:	e8 0f       	add	r30, r24
 516:	f1 1d       	adc	r31, r1
 518:	80 81       	ld	r24, Z
 51a:	88 1f       	adc	r24, r24
 51c:	88 27       	eor	r24, r24
 51e:	88 1f       	adc	r24, r24
 520:	e1 e0       	ldi	r30, 0x01	; 1
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	ec 0f       	add	r30, r28
 526:	fd 1f       	adc	r31, r29
 528:	e9 0f       	add	r30, r25
 52a:	f1 1d       	adc	r31, r1
 52c:	80 83       	st	Z, r24
		iterator_of_BitArr++;
 52e:	cb 5f       	subi	r28, 0xFB	; 251
 530:	de 4f       	sbci	r29, 0xFE	; 254
 532:	88 81       	ld	r24, Y
 534:	c5 50       	subi	r28, 0x05	; 5
 536:	d1 40       	sbci	r29, 0x01	; 1
 538:	8f 5f       	subi	r24, 0xFF	; 255
 53a:	cb 5f       	subi	r28, 0xFB	; 251
 53c:	de 4f       	sbci	r29, 0xFE	; 254
 53e:	88 83       	st	Y, r24
 540:	c5 50       	subi	r28, 0x05	; 5
 542:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_6);
 544:	cb 5f       	subi	r28, 0xFB	; 251
 546:	de 4f       	sbci	r29, 0xFE	; 254
 548:	28 81       	ld	r18, Y
 54a:	c5 50       	subi	r28, 0x05	; 5
 54c:	d1 40       	sbci	r29, 0x01	; 1
 54e:	ca 5f       	subi	r28, 0xFA	; 250
 550:	de 4f       	sbci	r29, 0xFE	; 254
 552:	88 81       	ld	r24, Y
 554:	c6 50       	subi	r28, 0x06	; 6
 556:	d1 40       	sbci	r29, 0x01	; 1
 558:	f8 01       	movw	r30, r16
 55a:	e8 0f       	add	r30, r24
 55c:	f1 1d       	adc	r31, r1
 55e:	80 81       	ld	r24, Z
 560:	80 74       	andi	r24, 0x40	; 64
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	08 2e       	mov	r0, r24
 566:	89 2f       	mov	r24, r25
 568:	00 0c       	add	r0, r0
 56a:	88 1f       	adc	r24, r24
 56c:	99 0b       	sbc	r25, r25
 56e:	00 0c       	add	r0, r0
 570:	88 1f       	adc	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	e1 e0       	ldi	r30, 0x01	; 1
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	ec 0f       	add	r30, r28
 57a:	fd 1f       	adc	r31, r29
 57c:	e2 0f       	add	r30, r18
 57e:	f1 1d       	adc	r31, r1
 580:	80 83       	st	Z, r24
		iterator_of_BitArr++;
 582:	cb 5f       	subi	r28, 0xFB	; 251
 584:	de 4f       	sbci	r29, 0xFE	; 254
 586:	88 81       	ld	r24, Y
 588:	c5 50       	subi	r28, 0x05	; 5
 58a:	d1 40       	sbci	r29, 0x01	; 1
 58c:	8f 5f       	subi	r24, 0xFF	; 255
 58e:	cb 5f       	subi	r28, 0xFB	; 251
 590:	de 4f       	sbci	r29, 0xFE	; 254
 592:	88 83       	st	Y, r24
 594:	c5 50       	subi	r28, 0x05	; 5
 596:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_5);
 598:	cb 5f       	subi	r28, 0xFB	; 251
 59a:	de 4f       	sbci	r29, 0xFE	; 254
 59c:	28 81       	ld	r18, Y
 59e:	c5 50       	subi	r28, 0x05	; 5
 5a0:	d1 40       	sbci	r29, 0x01	; 1
 5a2:	ca 5f       	subi	r28, 0xFA	; 250
 5a4:	de 4f       	sbci	r29, 0xFE	; 254
 5a6:	88 81       	ld	r24, Y
 5a8:	c6 50       	subi	r28, 0x06	; 6
 5aa:	d1 40       	sbci	r29, 0x01	; 1
 5ac:	f8 01       	movw	r30, r16
 5ae:	e8 0f       	add	r30, r24
 5b0:	f1 1d       	adc	r31, r1
 5b2:	80 81       	ld	r24, Z
 5b4:	80 72       	andi	r24, 0x20	; 32
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	95 95       	asr	r25
 5ba:	87 95       	ror	r24
 5bc:	95 95       	asr	r25
 5be:	87 95       	ror	r24
 5c0:	95 95       	asr	r25
 5c2:	87 95       	ror	r24
 5c4:	95 95       	asr	r25
 5c6:	87 95       	ror	r24
 5c8:	95 95       	asr	r25
 5ca:	87 95       	ror	r24
 5cc:	e1 e0       	ldi	r30, 0x01	; 1
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	ec 0f       	add	r30, r28
 5d2:	fd 1f       	adc	r31, r29
 5d4:	e2 0f       	add	r30, r18
 5d6:	f1 1d       	adc	r31, r1
 5d8:	80 83       	st	Z, r24
		iterator_of_BitArr++;
 5da:	cb 5f       	subi	r28, 0xFB	; 251
 5dc:	de 4f       	sbci	r29, 0xFE	; 254
 5de:	88 81       	ld	r24, Y
 5e0:	c5 50       	subi	r28, 0x05	; 5
 5e2:	d1 40       	sbci	r29, 0x01	; 1
 5e4:	8f 5f       	subi	r24, 0xFF	; 255
 5e6:	cb 5f       	subi	r28, 0xFB	; 251
 5e8:	de 4f       	sbci	r29, 0xFE	; 254
 5ea:	88 83       	st	Y, r24
 5ec:	c5 50       	subi	r28, 0x05	; 5
 5ee:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_4);
 5f0:	cb 5f       	subi	r28, 0xFB	; 251
 5f2:	de 4f       	sbci	r29, 0xFE	; 254
 5f4:	28 81       	ld	r18, Y
 5f6:	c5 50       	subi	r28, 0x05	; 5
 5f8:	d1 40       	sbci	r29, 0x01	; 1
 5fa:	ca 5f       	subi	r28, 0xFA	; 250
 5fc:	de 4f       	sbci	r29, 0xFE	; 254
 5fe:	88 81       	ld	r24, Y
 600:	c6 50       	subi	r28, 0x06	; 6
 602:	d1 40       	sbci	r29, 0x01	; 1
 604:	f8 01       	movw	r30, r16
 606:	e8 0f       	add	r30, r24
 608:	f1 1d       	adc	r31, r1
 60a:	80 81       	ld	r24, Z
 60c:	80 71       	andi	r24, 0x10	; 16
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	95 95       	asr	r25
 612:	87 95       	ror	r24
 614:	95 95       	asr	r25
 616:	87 95       	ror	r24
 618:	95 95       	asr	r25
 61a:	87 95       	ror	r24
 61c:	95 95       	asr	r25
 61e:	87 95       	ror	r24
 620:	e1 e0       	ldi	r30, 0x01	; 1
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	ec 0f       	add	r30, r28
 626:	fd 1f       	adc	r31, r29
 628:	e2 0f       	add	r30, r18
 62a:	f1 1d       	adc	r31, r1
 62c:	80 83       	st	Z, r24
		iterator_of_BitArr++;
 62e:	cb 5f       	subi	r28, 0xFB	; 251
 630:	de 4f       	sbci	r29, 0xFE	; 254
 632:	88 81       	ld	r24, Y
 634:	c5 50       	subi	r28, 0x05	; 5
 636:	d1 40       	sbci	r29, 0x01	; 1
 638:	8f 5f       	subi	r24, 0xFF	; 255
 63a:	cb 5f       	subi	r28, 0xFB	; 251
 63c:	de 4f       	sbci	r29, 0xFE	; 254
 63e:	88 83       	st	Y, r24
 640:	c5 50       	subi	r28, 0x05	; 5
 642:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_3);
 644:	cb 5f       	subi	r28, 0xFB	; 251
 646:	de 4f       	sbci	r29, 0xFE	; 254
 648:	28 81       	ld	r18, Y
 64a:	c5 50       	subi	r28, 0x05	; 5
 64c:	d1 40       	sbci	r29, 0x01	; 1
 64e:	ca 5f       	subi	r28, 0xFA	; 250
 650:	de 4f       	sbci	r29, 0xFE	; 254
 652:	88 81       	ld	r24, Y
 654:	c6 50       	subi	r28, 0x06	; 6
 656:	d1 40       	sbci	r29, 0x01	; 1
 658:	f8 01       	movw	r30, r16
 65a:	e8 0f       	add	r30, r24
 65c:	f1 1d       	adc	r31, r1
 65e:	80 81       	ld	r24, Z
 660:	88 70       	andi	r24, 0x08	; 8
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	95 95       	asr	r25
 666:	87 95       	ror	r24
 668:	95 95       	asr	r25
 66a:	87 95       	ror	r24
 66c:	95 95       	asr	r25
 66e:	87 95       	ror	r24
 670:	e1 e0       	ldi	r30, 0x01	; 1
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	ec 0f       	add	r30, r28
 676:	fd 1f       	adc	r31, r29
 678:	e2 0f       	add	r30, r18
 67a:	f1 1d       	adc	r31, r1
 67c:	80 83       	st	Z, r24
		iterator_of_BitArr++;
 67e:	cb 5f       	subi	r28, 0xFB	; 251
 680:	de 4f       	sbci	r29, 0xFE	; 254
 682:	88 81       	ld	r24, Y
 684:	c5 50       	subi	r28, 0x05	; 5
 686:	d1 40       	sbci	r29, 0x01	; 1
 688:	8f 5f       	subi	r24, 0xFF	; 255
 68a:	cb 5f       	subi	r28, 0xFB	; 251
 68c:	de 4f       	sbci	r29, 0xFE	; 254
 68e:	88 83       	st	Y, r24
 690:	c5 50       	subi	r28, 0x05	; 5
 692:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_2);
 694:	cb 5f       	subi	r28, 0xFB	; 251
 696:	de 4f       	sbci	r29, 0xFE	; 254
 698:	28 81       	ld	r18, Y
 69a:	c5 50       	subi	r28, 0x05	; 5
 69c:	d1 40       	sbci	r29, 0x01	; 1
 69e:	ca 5f       	subi	r28, 0xFA	; 250
 6a0:	de 4f       	sbci	r29, 0xFE	; 254
 6a2:	88 81       	ld	r24, Y
 6a4:	c6 50       	subi	r28, 0x06	; 6
 6a6:	d1 40       	sbci	r29, 0x01	; 1
 6a8:	f8 01       	movw	r30, r16
 6aa:	e8 0f       	add	r30, r24
 6ac:	f1 1d       	adc	r31, r1
 6ae:	80 81       	ld	r24, Z
 6b0:	84 70       	andi	r24, 0x04	; 4
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	95 95       	asr	r25
 6b6:	87 95       	ror	r24
 6b8:	95 95       	asr	r25
 6ba:	87 95       	ror	r24
 6bc:	e1 e0       	ldi	r30, 0x01	; 1
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	ec 0f       	add	r30, r28
 6c2:	fd 1f       	adc	r31, r29
 6c4:	e2 0f       	add	r30, r18
 6c6:	f1 1d       	adc	r31, r1
 6c8:	80 83       	st	Z, r24
		iterator_of_BitArr++;
 6ca:	cb 5f       	subi	r28, 0xFB	; 251
 6cc:	de 4f       	sbci	r29, 0xFE	; 254
 6ce:	88 81       	ld	r24, Y
 6d0:	c5 50       	subi	r28, 0x05	; 5
 6d2:	d1 40       	sbci	r29, 0x01	; 1
 6d4:	8f 5f       	subi	r24, 0xFF	; 255
 6d6:	cb 5f       	subi	r28, 0xFB	; 251
 6d8:	de 4f       	sbci	r29, 0xFE	; 254
 6da:	88 83       	st	Y, r24
 6dc:	c5 50       	subi	r28, 0x05	; 5
 6de:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_1);
 6e0:	cb 5f       	subi	r28, 0xFB	; 251
 6e2:	de 4f       	sbci	r29, 0xFE	; 254
 6e4:	28 81       	ld	r18, Y
 6e6:	c5 50       	subi	r28, 0x05	; 5
 6e8:	d1 40       	sbci	r29, 0x01	; 1
 6ea:	ca 5f       	subi	r28, 0xFA	; 250
 6ec:	de 4f       	sbci	r29, 0xFE	; 254
 6ee:	88 81       	ld	r24, Y
 6f0:	c6 50       	subi	r28, 0x06	; 6
 6f2:	d1 40       	sbci	r29, 0x01	; 1
 6f4:	f8 01       	movw	r30, r16
 6f6:	e8 0f       	add	r30, r24
 6f8:	f1 1d       	adc	r31, r1
 6fa:	80 81       	ld	r24, Z
 6fc:	82 70       	andi	r24, 0x02	; 2
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	95 95       	asr	r25
 702:	87 95       	ror	r24
 704:	e1 e0       	ldi	r30, 0x01	; 1
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	ec 0f       	add	r30, r28
 70a:	fd 1f       	adc	r31, r29
 70c:	e2 0f       	add	r30, r18
 70e:	f1 1d       	adc	r31, r1
 710:	80 83       	st	Z, r24
		iterator_of_BitArr++;
 712:	cb 5f       	subi	r28, 0xFB	; 251
 714:	de 4f       	sbci	r29, 0xFE	; 254
 716:	88 81       	ld	r24, Y
 718:	c5 50       	subi	r28, 0x05	; 5
 71a:	d1 40       	sbci	r29, 0x01	; 1
 71c:	8f 5f       	subi	r24, 0xFF	; 255
 71e:	cb 5f       	subi	r28, 0xFB	; 251
 720:	de 4f       	sbci	r29, 0xFE	; 254
 722:	88 83       	st	Y, r24
 724:	c5 50       	subi	r28, 0x05	; 5
 726:	d1 40       	sbci	r29, 0x01	; 1
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_0);
 728:	cb 5f       	subi	r28, 0xFB	; 251
 72a:	de 4f       	sbci	r29, 0xFE	; 254
 72c:	98 81       	ld	r25, Y
 72e:	c5 50       	subi	r28, 0x05	; 5
 730:	d1 40       	sbci	r29, 0x01	; 1
 732:	ca 5f       	subi	r28, 0xFA	; 250
 734:	de 4f       	sbci	r29, 0xFE	; 254
 736:	88 81       	ld	r24, Y
 738:	c6 50       	subi	r28, 0x06	; 6
 73a:	d1 40       	sbci	r29, 0x01	; 1
 73c:	f8 01       	movw	r30, r16
 73e:	e8 0f       	add	r30, r24
 740:	f1 1d       	adc	r31, r1
 742:	80 81       	ld	r24, Z
 744:	81 70       	andi	r24, 0x01	; 1
 746:	e1 e0       	ldi	r30, 0x01	; 1
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	ec 0f       	add	r30, r28
 74c:	fd 1f       	adc	r31, r29
 74e:	e9 0f       	add	r30, r25
 750:	f1 1d       	adc	r31, r1
 752:	80 83       	st	Z, r24
		iterator_of_BitArr++;
 754:	cb 5f       	subi	r28, 0xFB	; 251
 756:	de 4f       	sbci	r29, 0xFE	; 254
 758:	88 81       	ld	r24, Y
 75a:	c5 50       	subi	r28, 0x05	; 5
 75c:	d1 40       	sbci	r29, 0x01	; 1
 75e:	8f 5f       	subi	r24, 0xFF	; 255
 760:	cb 5f       	subi	r28, 0xFB	; 251
 762:	de 4f       	sbci	r29, 0xFE	; 254
 764:	88 83       	st	Y, r24
 766:	c5 50       	subi	r28, 0x05	; 5
 768:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t volatile iterator_of_BitArr = 0;
	/*initializing the iterator for the array of the inserted Characters in the string*/
	uint8_t volatile iterator_of_characters = 0;
	/*assigning the bits of the character in the passed string to the array of bits*/
	/*bits are arranged in the array the form of an extra long number"Index 0:MSB,..,..,..,. . .,Index N:LSB"*/
	for(iterator_of_characters = 0; iterator_of_characters < StrLength; iterator_of_characters++)
 76a:	ca 5f       	subi	r28, 0xFA	; 250
 76c:	de 4f       	sbci	r29, 0xFE	; 254
 76e:	88 81       	ld	r24, Y
 770:	c6 50       	subi	r28, 0x06	; 6
 772:	d1 40       	sbci	r29, 0x01	; 1
 774:	8f 5f       	subi	r24, 0xFF	; 255
 776:	ca 5f       	subi	r28, 0xFA	; 250
 778:	de 4f       	sbci	r29, 0xFE	; 254
 77a:	88 83       	st	Y, r24
 77c:	c6 50       	subi	r28, 0x06	; 6
 77e:	d1 40       	sbci	r29, 0x01	; 1
 780:	ca 5f       	subi	r28, 0xFA	; 250
 782:	de 4f       	sbci	r29, 0xFE	; 254
 784:	98 81       	ld	r25, Y
 786:	c6 50       	subi	r28, 0x06	; 6
 788:	d1 40       	sbci	r29, 0x01	; 1
 78a:	cd 5f       	subi	r28, 0xFD	; 253
 78c:	de 4f       	sbci	r29, 0xFE	; 254
 78e:	88 81       	ld	r24, Y
 790:	c3 50       	subi	r28, 0x03	; 3
 792:	d1 40       	sbci	r29, 0x01	; 1
 794:	98 17       	cp	r25, r24
 796:	08 f4       	brcc	.+2      	; 0x79a <CRC_16_Calc+0x310>
 798:	b2 ce       	rjmp	.-668    	; 0x4fe <CRC_16_Calc+0x74>
		iterator_of_BitArr++;
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_0);
		iterator_of_BitArr++;
	}
	/*calculating the size of the array of bits taking into consideration the size of the 16 bits of CRC_16*/
	BitArr_Size = iterator_of_BitArr + 15;
 79a:	cb 5f       	subi	r28, 0xFB	; 251
 79c:	de 4f       	sbci	r29, 0xFE	; 254
 79e:	88 81       	ld	r24, Y
 7a0:	c5 50       	subi	r28, 0x05	; 5
 7a2:	d1 40       	sbci	r29, 0x01	; 1
 7a4:	81 5f       	subi	r24, 0xF1	; 241
 7a6:	cc 5f       	subi	r28, 0xFC	; 252
 7a8:	de 4f       	sbci	r29, 0xFE	; 254
 7aa:	88 83       	st	Y, r24
 7ac:	c4 50       	subi	r28, 0x04	; 4
 7ae:	d1 40       	sbci	r29, 0x01	; 1
	/*reset the iterator of the Bits Array to zero to iterate through the array*/
	iterator_of_BitArr = 0;
 7b0:	cb 5f       	subi	r28, 0xFB	; 251
 7b2:	de 4f       	sbci	r29, 0xFE	; 254
 7b4:	18 82       	st	Y, r1
 7b6:	c5 50       	subi	r28, 0x05	; 5
 7b8:	d1 40       	sbci	r29, 0x01	; 1
	/*Moving to the first occurance of high bit to start our CRC calculation*/
	while(BitArr[iterator_of_BitArr]!=1)
 7ba:	0b c0       	rjmp	.+22     	; 0x7d2 <CRC_16_Calc+0x348>
	{
		/*increment the iterator to the first occurance of High bit*/
		iterator_of_BitArr++;
 7bc:	cb 5f       	subi	r28, 0xFB	; 251
 7be:	de 4f       	sbci	r29, 0xFE	; 254
 7c0:	88 81       	ld	r24, Y
 7c2:	c5 50       	subi	r28, 0x05	; 5
 7c4:	d1 40       	sbci	r29, 0x01	; 1
 7c6:	8f 5f       	subi	r24, 0xFF	; 255
 7c8:	cb 5f       	subi	r28, 0xFB	; 251
 7ca:	de 4f       	sbci	r29, 0xFE	; 254
 7cc:	88 83       	st	Y, r24
 7ce:	c5 50       	subi	r28, 0x05	; 5
 7d0:	d1 40       	sbci	r29, 0x01	; 1
	/*calculating the size of the array of bits taking into consideration the size of the 16 bits of CRC_16*/
	BitArr_Size = iterator_of_BitArr + 15;
	/*reset the iterator of the Bits Array to zero to iterate through the array*/
	iterator_of_BitArr = 0;
	/*Moving to the first occurance of high bit to start our CRC calculation*/
	while(BitArr[iterator_of_BitArr]!=1)
 7d2:	cb 5f       	subi	r28, 0xFB	; 251
 7d4:	de 4f       	sbci	r29, 0xFE	; 254
 7d6:	88 81       	ld	r24, Y
 7d8:	c5 50       	subi	r28, 0x05	; 5
 7da:	d1 40       	sbci	r29, 0x01	; 1
 7dc:	e1 e0       	ldi	r30, 0x01	; 1
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	ec 0f       	add	r30, r28
 7e2:	fd 1f       	adc	r31, r29
 7e4:	e8 0f       	add	r30, r24
 7e6:	f1 1d       	adc	r31, r1
 7e8:	80 81       	ld	r24, Z
 7ea:	81 30       	cpi	r24, 0x01	; 1
 7ec:	39 f7       	brne	.-50     	; 0x7bc <CRC_16_Calc+0x332>
	{
		/*increment the iterator to the first occurance of High bit*/
		iterator_of_BitArr++;
	}
	/*increment by one to the first element after the first high bit in the array of bits*/
	iterator_of_BitArr++;
 7ee:	cb 5f       	subi	r28, 0xFB	; 251
 7f0:	de 4f       	sbci	r29, 0xFE	; 254
 7f2:	88 81       	ld	r24, Y
 7f4:	c5 50       	subi	r28, 0x05	; 5
 7f6:	d1 40       	sbci	r29, 0x01	; 1
 7f8:	8f 5f       	subi	r24, 0xFF	; 255
 7fa:	cb 5f       	subi	r28, 0xFB	; 251
 7fc:	de 4f       	sbci	r29, 0xFE	; 254
 7fe:	88 83       	st	Y, r24
 800:	c5 50       	subi	r28, 0x05	; 5
 802:	d1 40       	sbci	r29, 0x01	; 1
	/*setting the window value*/
	for (uint8_t i = 0; i<=15; i++)
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	41 c0       	rjmp	.+130    	; 0x88a <__stack+0x2b>
	{
		Window_16_Element &=~(1<<(15-i)); 
 808:	86 2f       	mov	r24, r22
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	4f e0       	ldi	r20, 0x0F	; 15
 80e:	50 e0       	ldi	r21, 0x00	; 0
 810:	48 1b       	sub	r20, r24
 812:	59 0b       	sbc	r21, r25
 814:	21 e0       	ldi	r18, 0x01	; 1
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	04 2e       	mov	r0, r20
 81a:	02 c0       	rjmp	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81c:	22 0f       	add	r18, r18
 81e:	33 1f       	adc	r19, r19
 820:	0a 94       	dec	r0
 822:	e2 f7       	brpl	.-8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 824:	20 95       	com	r18
 826:	30 95       	com	r19
 828:	cf 5f       	subi	r28, 0xFF	; 255
 82a:	de 4f       	sbci	r29, 0xFE	; 254
 82c:	e8 81       	ld	r30, Y
 82e:	f9 81       	ldd	r31, Y+1	; 0x01
 830:	c1 50       	subi	r28, 0x01	; 1
 832:	d1 40       	sbci	r29, 0x01	; 1
 834:	2e 23       	and	r18, r30
 836:	3f 23       	and	r19, r31
 838:	cf 5f       	subi	r28, 0xFF	; 255
 83a:	de 4f       	sbci	r29, 0xFE	; 254
 83c:	39 83       	std	Y+1, r19	; 0x01
 83e:	28 83       	st	Y, r18
 840:	c1 50       	subi	r28, 0x01	; 1
 842:	d1 40       	sbci	r29, 0x01	; 1
		Window_16_Element |= (BitArr[iterator_of_BitArr+i]<<(15-i));
 844:	cb 5f       	subi	r28, 0xFB	; 251
 846:	de 4f       	sbci	r29, 0xFE	; 254
 848:	28 81       	ld	r18, Y
 84a:	c5 50       	subi	r28, 0x05	; 5
 84c:	d1 40       	sbci	r29, 0x01	; 1
 84e:	82 0f       	add	r24, r18
 850:	91 1d       	adc	r25, r1
 852:	e1 e0       	ldi	r30, 0x01	; 1
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	ec 0f       	add	r30, r28
 858:	fd 1f       	adc	r31, r29
 85a:	e8 0f       	add	r30, r24
 85c:	f9 1f       	adc	r31, r25
 85e:	80 81       	ld	r24, Z
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	02 c0       	rjmp	.+4      	; 0x868 <__stack+0x9>
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	4a 95       	dec	r20
 86a:	e2 f7       	brpl	.-8      	; 0x864 <__stack+0x5>
 86c:	cf 5f       	subi	r28, 0xFF	; 255
 86e:	de 4f       	sbci	r29, 0xFE	; 254
 870:	28 81       	ld	r18, Y
 872:	39 81       	ldd	r19, Y+1	; 0x01
 874:	c1 50       	subi	r28, 0x01	; 1
 876:	d1 40       	sbci	r29, 0x01	; 1
 878:	82 2b       	or	r24, r18
 87a:	93 2b       	or	r25, r19
 87c:	cf 5f       	subi	r28, 0xFF	; 255
 87e:	de 4f       	sbci	r29, 0xFE	; 254
 880:	99 83       	std	Y+1, r25	; 0x01
 882:	88 83       	st	Y, r24
 884:	c1 50       	subi	r28, 0x01	; 1
 886:	d1 40       	sbci	r29, 0x01	; 1
		iterator_of_BitArr++;
	}
	/*increment by one to the first element after the first high bit in the array of bits*/
	iterator_of_BitArr++;
	/*setting the window value*/
	for (uint8_t i = 0; i<=15; i++)
 888:	6f 5f       	subi	r22, 0xFF	; 255
 88a:	60 31       	cpi	r22, 0x10	; 16
 88c:	08 f4       	brcc	.+2      	; 0x890 <__stack+0x31>
 88e:	bc cf       	rjmp	.-136    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 890:	dd c0       	rjmp	.+442    	; 0xa4c <__stack+0x1ed>
	}
	/*Start the modulo Operation continues until the polynomial doesn't fit into the reminder*/
	while(iterator_of_BitArr <= BitArr_Size-15)
	{
		/*Xoring operation between the Window and the polynomial*/
		Window_16_Element ^= polynomial;
 892:	cf 5f       	subi	r28, 0xFF	; 255
 894:	de 4f       	sbci	r29, 0xFE	; 254
 896:	88 81       	ld	r24, Y
 898:	99 81       	ldd	r25, Y+1	; 0x01
 89a:	c1 50       	subi	r28, 0x01	; 1
 89c:	d1 40       	sbci	r29, 0x01	; 1
 89e:	b5 e0       	ldi	r27, 0x05	; 5
 8a0:	8b 27       	eor	r24, r27
 8a2:	90 58       	subi	r25, 0x80	; 128
 8a4:	cf 5f       	subi	r28, 0xFF	; 255
 8a6:	de 4f       	sbci	r29, 0xFE	; 254
 8a8:	99 83       	std	Y+1, r25	; 0x01
 8aa:	88 83       	st	Y, r24
 8ac:	c1 50       	subi	r28, 0x01	; 1
 8ae:	d1 40       	sbci	r29, 0x01	; 1
		/*checking if the most signifigant Bit in the window is zero*/
		if(READ_BIT(Window_16_Element,15)==0)
 8b0:	cf 5f       	subi	r28, 0xFF	; 255
 8b2:	de 4f       	sbci	r29, 0xFE	; 254
 8b4:	88 81       	ld	r24, Y
 8b6:	99 81       	ldd	r25, Y+1	; 0x01
 8b8:	c1 50       	subi	r28, 0x01	; 1
 8ba:	d1 40       	sbci	r29, 0x01	; 1
 8bc:	99 23       	and	r25, r25
 8be:	0c f0       	brlt	.+2      	; 0x8c2 <__stack+0x63>
 8c0:	4c c0       	rjmp	.+152    	; 0x95a <__stack+0xfb>
 8c2:	90 c0       	rjmp	.+288    	; 0x9e4 <__stack+0x185>
		{
			/*shift until we reach the first one*/
			while(READ_BIT(Window_16_Element,15)==0)
			{
				/*check before shifting that you haven't exceeded the limits of shifting*/
				if(iterator_of_BitArr >= BitArr_Size-15)
 8c4:	cb 5f       	subi	r28, 0xFB	; 251
 8c6:	de 4f       	sbci	r29, 0xFE	; 254
 8c8:	28 81       	ld	r18, Y
 8ca:	c5 50       	subi	r28, 0x05	; 5
 8cc:	d1 40       	sbci	r29, 0x01	; 1
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	cc 5f       	subi	r28, 0xFC	; 252
 8d2:	de 4f       	sbci	r29, 0xFE	; 254
 8d4:	88 81       	ld	r24, Y
 8d6:	c4 50       	subi	r28, 0x04	; 4
 8d8:	d1 40       	sbci	r29, 0x01	; 1
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	0f 97       	sbiw	r24, 0x0f	; 15
 8de:	28 17       	cp	r18, r24
 8e0:	39 07       	cpc	r19, r25
 8e2:	3c f0       	brlt	.+14     	; 0x8f2 <__stack+0x93>
				{
					/*if limits of shifting is about to be exceeded rise a flag to break from the outer loop and break from inner loop*/
					Flag = 1;
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	c0 50       	subi	r28, 0x00	; 0
 8e8:	df 4f       	sbci	r29, 0xFF	; 255
 8ea:	88 83       	st	Y, r24
 8ec:	c0 50       	subi	r28, 0x00	; 0
 8ee:	d1 40       	sbci	r29, 0x01	; 1
					break;
 8f0:	3d c0       	rjmp	.+122    	; 0x96c <__stack+0x10d>
				}
				/*if the limits of shifting aren't about to be exceeded then shift and add a new element from the array of bits to the window*/
				/*shifting*/
				Window_16_Element <<=1;
 8f2:	cf 5f       	subi	r28, 0xFF	; 255
 8f4:	de 4f       	sbci	r29, 0xFE	; 254
 8f6:	88 81       	ld	r24, Y
 8f8:	99 81       	ldd	r25, Y+1	; 0x01
 8fa:	c1 50       	subi	r28, 0x01	; 1
 8fc:	d1 40       	sbci	r29, 0x01	; 1
 8fe:	88 0f       	add	r24, r24
 900:	99 1f       	adc	r25, r25
 902:	cf 5f       	subi	r28, 0xFF	; 255
 904:	de 4f       	sbci	r29, 0xFE	; 254
 906:	99 83       	std	Y+1, r25	; 0x01
 908:	88 83       	st	Y, r24
 90a:	c1 50       	subi	r28, 0x01	; 1
 90c:	d1 40       	sbci	r29, 0x01	; 1
				/*Adding new element from the array of bits to the window*/
				Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
 90e:	cb 5f       	subi	r28, 0xFB	; 251
 910:	de 4f       	sbci	r29, 0xFE	; 254
 912:	e8 81       	ld	r30, Y
 914:	c5 50       	subi	r28, 0x05	; 5
 916:	d1 40       	sbci	r29, 0x01	; 1
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	70 96       	adiw	r30, 0x10	; 16
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	8c 0f       	add	r24, r28
 922:	9d 1f       	adc	r25, r29
 924:	e8 0f       	add	r30, r24
 926:	f9 1f       	adc	r31, r25
 928:	20 81       	ld	r18, Z
 92a:	cf 5f       	subi	r28, 0xFF	; 255
 92c:	de 4f       	sbci	r29, 0xFE	; 254
 92e:	88 81       	ld	r24, Y
 930:	99 81       	ldd	r25, Y+1	; 0x01
 932:	c1 50       	subi	r28, 0x01	; 1
 934:	d1 40       	sbci	r29, 0x01	; 1
 936:	82 2b       	or	r24, r18
 938:	cf 5f       	subi	r28, 0xFF	; 255
 93a:	de 4f       	sbci	r29, 0xFE	; 254
 93c:	99 83       	std	Y+1, r25	; 0x01
 93e:	88 83       	st	Y, r24
 940:	c1 50       	subi	r28, 0x01	; 1
 942:	d1 40       	sbci	r29, 0x01	; 1
				/*increment the iterator of bit array*/
				iterator_of_BitArr++;
 944:	cb 5f       	subi	r28, 0xFB	; 251
 946:	de 4f       	sbci	r29, 0xFE	; 254
 948:	88 81       	ld	r24, Y
 94a:	c5 50       	subi	r28, 0x05	; 5
 94c:	d1 40       	sbci	r29, 0x01	; 1
 94e:	8f 5f       	subi	r24, 0xFF	; 255
 950:	cb 5f       	subi	r28, 0xFB	; 251
 952:	de 4f       	sbci	r29, 0xFE	; 254
 954:	88 83       	st	Y, r24
 956:	c5 50       	subi	r28, 0x05	; 5
 958:	d1 40       	sbci	r29, 0x01	; 1
		Window_16_Element ^= polynomial;
		/*checking if the most signifigant Bit in the window is zero*/
		if(READ_BIT(Window_16_Element,15)==0)
		{
			/*shift until we reach the first one*/
			while(READ_BIT(Window_16_Element,15)==0)
 95a:	cf 5f       	subi	r28, 0xFF	; 255
 95c:	de 4f       	sbci	r29, 0xFE	; 254
 95e:	88 81       	ld	r24, Y
 960:	99 81       	ldd	r25, Y+1	; 0x01
 962:	c1 50       	subi	r28, 0x01	; 1
 964:	d1 40       	sbci	r29, 0x01	; 1
 966:	99 23       	and	r25, r25
 968:	0c f0       	brlt	.+2      	; 0x96c <__stack+0x10d>
 96a:	ac cf       	rjmp	.-168    	; 0x8c4 <__stack+0x65>
				Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
				/*increment the iterator of bit array*/
				iterator_of_BitArr++;
			}
			/*checking if the flag is rised to perform a break from the outer loop*/
			if(Flag)
 96c:	c0 50       	subi	r28, 0x00	; 0
 96e:	df 4f       	sbci	r29, 0xFF	; 255
 970:	88 81       	ld	r24, Y
 972:	c0 50       	subi	r28, 0x00	; 0
 974:	d1 40       	sbci	r29, 0x01	; 1
 976:	81 11       	cpse	r24, r1
 978:	7a c0       	rjmp	.+244    	; 0xa6e <__stack+0x20f>
			{
				break;
			}
			/*shifting*/
			Window_16_Element <<=1;
 97a:	cf 5f       	subi	r28, 0xFF	; 255
 97c:	de 4f       	sbci	r29, 0xFE	; 254
 97e:	88 81       	ld	r24, Y
 980:	99 81       	ldd	r25, Y+1	; 0x01
 982:	c1 50       	subi	r28, 0x01	; 1
 984:	d1 40       	sbci	r29, 0x01	; 1
 986:	88 0f       	add	r24, r24
 988:	99 1f       	adc	r25, r25
 98a:	cf 5f       	subi	r28, 0xFF	; 255
 98c:	de 4f       	sbci	r29, 0xFE	; 254
 98e:	99 83       	std	Y+1, r25	; 0x01
 990:	88 83       	st	Y, r24
 992:	c1 50       	subi	r28, 0x01	; 1
 994:	d1 40       	sbci	r29, 0x01	; 1
			/*Adding new element from the array of bits to the window*/
			Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
 996:	cb 5f       	subi	r28, 0xFB	; 251
 998:	de 4f       	sbci	r29, 0xFE	; 254
 99a:	e8 81       	ld	r30, Y
 99c:	c5 50       	subi	r28, 0x05	; 5
 99e:	d1 40       	sbci	r29, 0x01	; 1
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	70 96       	adiw	r30, 0x10	; 16
 9a4:	a1 e0       	ldi	r26, 0x01	; 1
 9a6:	b0 e0       	ldi	r27, 0x00	; 0
 9a8:	ac 0f       	add	r26, r28
 9aa:	bd 1f       	adc	r27, r29
 9ac:	ea 0f       	add	r30, r26
 9ae:	fb 1f       	adc	r31, r27
 9b0:	20 81       	ld	r18, Z
 9b2:	cf 5f       	subi	r28, 0xFF	; 255
 9b4:	de 4f       	sbci	r29, 0xFE	; 254
 9b6:	88 81       	ld	r24, Y
 9b8:	99 81       	ldd	r25, Y+1	; 0x01
 9ba:	c1 50       	subi	r28, 0x01	; 1
 9bc:	d1 40       	sbci	r29, 0x01	; 1
 9be:	82 2b       	or	r24, r18
 9c0:	cf 5f       	subi	r28, 0xFF	; 255
 9c2:	de 4f       	sbci	r29, 0xFE	; 254
 9c4:	99 83       	std	Y+1, r25	; 0x01
 9c6:	88 83       	st	Y, r24
 9c8:	c1 50       	subi	r28, 0x01	; 1
 9ca:	d1 40       	sbci	r29, 0x01	; 1
			/*increment the iterator of bit array*/
			iterator_of_BitArr++;
 9cc:	cb 5f       	subi	r28, 0xFB	; 251
 9ce:	de 4f       	sbci	r29, 0xFE	; 254
 9d0:	88 81       	ld	r24, Y
 9d2:	c5 50       	subi	r28, 0x05	; 5
 9d4:	d1 40       	sbci	r29, 0x01	; 1
 9d6:	8f 5f       	subi	r24, 0xFF	; 255
 9d8:	cb 5f       	subi	r28, 0xFB	; 251
 9da:	de 4f       	sbci	r29, 0xFE	; 254
 9dc:	88 83       	st	Y, r24
 9de:	c5 50       	subi	r28, 0x05	; 5
 9e0:	d1 40       	sbci	r29, 0x01	; 1
 9e2:	34 c0       	rjmp	.+104    	; 0xa4c <__stack+0x1ed>
		}
		else
		{
			/*shifting*/
			Window_16_Element <<=1;
 9e4:	cf 5f       	subi	r28, 0xFF	; 255
 9e6:	de 4f       	sbci	r29, 0xFE	; 254
 9e8:	88 81       	ld	r24, Y
 9ea:	99 81       	ldd	r25, Y+1	; 0x01
 9ec:	c1 50       	subi	r28, 0x01	; 1
 9ee:	d1 40       	sbci	r29, 0x01	; 1
 9f0:	88 0f       	add	r24, r24
 9f2:	99 1f       	adc	r25, r25
 9f4:	cf 5f       	subi	r28, 0xFF	; 255
 9f6:	de 4f       	sbci	r29, 0xFE	; 254
 9f8:	99 83       	std	Y+1, r25	; 0x01
 9fa:	88 83       	st	Y, r24
 9fc:	c1 50       	subi	r28, 0x01	; 1
 9fe:	d1 40       	sbci	r29, 0x01	; 1
			/*Adding new element from the array of bits to the window*/
			Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
 a00:	cb 5f       	subi	r28, 0xFB	; 251
 a02:	de 4f       	sbci	r29, 0xFE	; 254
 a04:	e8 81       	ld	r30, Y
 a06:	c5 50       	subi	r28, 0x05	; 5
 a08:	d1 40       	sbci	r29, 0x01	; 1
 a0a:	f0 e0       	ldi	r31, 0x00	; 0
 a0c:	70 96       	adiw	r30, 0x10	; 16
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	8c 0f       	add	r24, r28
 a14:	9d 1f       	adc	r25, r29
 a16:	e8 0f       	add	r30, r24
 a18:	f9 1f       	adc	r31, r25
 a1a:	20 81       	ld	r18, Z
 a1c:	cf 5f       	subi	r28, 0xFF	; 255
 a1e:	de 4f       	sbci	r29, 0xFE	; 254
 a20:	88 81       	ld	r24, Y
 a22:	99 81       	ldd	r25, Y+1	; 0x01
 a24:	c1 50       	subi	r28, 0x01	; 1
 a26:	d1 40       	sbci	r29, 0x01	; 1
 a28:	82 2b       	or	r24, r18
 a2a:	cf 5f       	subi	r28, 0xFF	; 255
 a2c:	de 4f       	sbci	r29, 0xFE	; 254
 a2e:	99 83       	std	Y+1, r25	; 0x01
 a30:	88 83       	st	Y, r24
 a32:	c1 50       	subi	r28, 0x01	; 1
 a34:	d1 40       	sbci	r29, 0x01	; 1
			/*increment the iterator of bit array*/
			iterator_of_BitArr++;
 a36:	cb 5f       	subi	r28, 0xFB	; 251
 a38:	de 4f       	sbci	r29, 0xFE	; 254
 a3a:	88 81       	ld	r24, Y
 a3c:	c5 50       	subi	r28, 0x05	; 5
 a3e:	d1 40       	sbci	r29, 0x01	; 1
 a40:	8f 5f       	subi	r24, 0xFF	; 255
 a42:	cb 5f       	subi	r28, 0xFB	; 251
 a44:	de 4f       	sbci	r29, 0xFE	; 254
 a46:	88 83       	st	Y, r24
 a48:	c5 50       	subi	r28, 0x05	; 5
 a4a:	d1 40       	sbci	r29, 0x01	; 1
	{
		Window_16_Element &=~(1<<(15-i)); 
		Window_16_Element |= (BitArr[iterator_of_BitArr+i]<<(15-i));
	}
	/*Start the modulo Operation continues until the polynomial doesn't fit into the reminder*/
	while(iterator_of_BitArr <= BitArr_Size-15)
 a4c:	cb 5f       	subi	r28, 0xFB	; 251
 a4e:	de 4f       	sbci	r29, 0xFE	; 254
 a50:	28 81       	ld	r18, Y
 a52:	c5 50       	subi	r28, 0x05	; 5
 a54:	d1 40       	sbci	r29, 0x01	; 1
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	cc 5f       	subi	r28, 0xFC	; 252
 a5a:	de 4f       	sbci	r29, 0xFE	; 254
 a5c:	88 81       	ld	r24, Y
 a5e:	c4 50       	subi	r28, 0x04	; 4
 a60:	d1 40       	sbci	r29, 0x01	; 1
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	0f 97       	sbiw	r24, 0x0f	; 15
 a66:	82 17       	cp	r24, r18
 a68:	93 07       	cpc	r25, r19
 a6a:	0c f0       	brlt	.+2      	; 0xa6e <__stack+0x20f>
 a6c:	12 cf       	rjmp	.-476    	; 0x892 <__stack+0x33>
		}	
	}
	#if 0 
	*CalculatedCRC = Window_16_Element;
	#else
	STRING[StrLength] = (uint8_t)(Window_16_Element>>8);
 a6e:	cd 5f       	subi	r28, 0xFD	; 253
 a70:	de 4f       	sbci	r29, 0xFE	; 254
 a72:	88 81       	ld	r24, Y
 a74:	c3 50       	subi	r28, 0x03	; 3
 a76:	d1 40       	sbci	r29, 0x01	; 1
 a78:	f8 01       	movw	r30, r16
 a7a:	e8 0f       	add	r30, r24
 a7c:	f1 1d       	adc	r31, r1
 a7e:	cf 5f       	subi	r28, 0xFF	; 255
 a80:	de 4f       	sbci	r29, 0xFE	; 254
 a82:	88 81       	ld	r24, Y
 a84:	99 81       	ldd	r25, Y+1	; 0x01
 a86:	c1 50       	subi	r28, 0x01	; 1
 a88:	d1 40       	sbci	r29, 0x01	; 1
 a8a:	90 83       	st	Z, r25
	STRING[StrLength+1] = (uint8_t)(Window_16_Element&0x00FF);
 a8c:	cd 5f       	subi	r28, 0xFD	; 253
 a8e:	de 4f       	sbci	r29, 0xFE	; 254
 a90:	e8 81       	ld	r30, Y
 a92:	c3 50       	subi	r28, 0x03	; 3
 a94:	d1 40       	sbci	r29, 0x01	; 1
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	31 96       	adiw	r30, 0x01	; 1
 a9a:	e0 0f       	add	r30, r16
 a9c:	f1 1f       	adc	r31, r17
 a9e:	cf 5f       	subi	r28, 0xFF	; 255
 aa0:	de 4f       	sbci	r29, 0xFE	; 254
 aa2:	88 81       	ld	r24, Y
 aa4:	99 81       	ldd	r25, Y+1	; 0x01
 aa6:	c1 50       	subi	r28, 0x01	; 1
 aa8:	d1 40       	sbci	r29, 0x01	; 1
 aaa:	80 83       	st	Z, r24
	STRING[StrLength+2] = NULL_TERMINATOR;
 aac:	cd 5f       	subi	r28, 0xFD	; 253
 aae:	de 4f       	sbci	r29, 0xFE	; 254
 ab0:	e8 81       	ld	r30, Y
 ab2:	c3 50       	subi	r28, 0x03	; 3
 ab4:	d1 40       	sbci	r29, 0x01	; 1
 ab6:	f0 e0       	ldi	r31, 0x00	; 0
 ab8:	32 96       	adiw	r30, 0x02	; 2
 aba:	e0 0f       	add	r30, r16
 abc:	f1 1f       	adc	r31, r17
 abe:	10 82       	st	Z, r1
	#endif
	return 0 ;
}
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	ca 5f       	subi	r28, 0xFA	; 250
 ac4:	de 4f       	sbci	r29, 0xFE	; 254
 ac6:	0f b6       	in	r0, 0x3f	; 63
 ac8:	f8 94       	cli
 aca:	de bf       	out	0x3e, r29	; 62
 acc:	0f be       	out	0x3f, r0	; 63
 ace:	cd bf       	out	0x3d, r28	; 61
 ad0:	df 91       	pop	r29
 ad2:	cf 91       	pop	r28
 ad4:	1f 91       	pop	r17
 ad6:	0f 91       	pop	r16
 ad8:	08 95       	ret

00000ada <main>:
//Load={'A','L','I','\0'};
//uint8_t *MAC = (uint8_t*)"ALI";
uint8_t MAC[6] = {0x41,0x4C,0x49,0x00,0x27,0xEB};
uint16_t low;
int main(void)
{
 ada:	cf 93       	push	r28
 adc:	df 93       	push	r29
 ade:	00 d0       	rcall	.+0      	; 0xae0 <main+0x6>
 ae0:	00 d0       	rcall	.+0      	; 0xae2 <main+0x8>
 ae2:	cd b7       	in	r28, 0x3d	; 61
 ae4:	de b7       	in	r29, 0x3e	; 62
	//uint8_t iterator = 0;
	//while(LCD_Init()!= OperationSuccess);
	//DISPLAY_SetState(SystemLoading);
	//STORAGE_MAC_Save(MAC);
	//STORAGE_MAC_Load(Load);
	CRC_16_Calc(Load,&low);
 ae6:	64 e9       	ldi	r22, 0x94	; 148
 ae8:	71 e0       	ldi	r23, 0x01	; 1
 aea:	80 e6       	ldi	r24, 0x60	; 96
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	0e 94 45 02 	call	0x48a	; 0x48a <CRC_16_Calc>
		//DISPLAY_MainFunction();
		//iterator ++;
		//if(x=='A')
		//DIO_WritePin(PORT_D,PIN0,PIN_HIGH);
		//LCD_SendCommand(0x1C);
		for(volatile uint32_t i = 0; i<25000;i++);
 af2:	19 82       	std	Y+1, r1	; 0x01
 af4:	1a 82       	std	Y+2, r1	; 0x02
 af6:	1b 82       	std	Y+3, r1	; 0x03
 af8:	1c 82       	std	Y+4, r1	; 0x04
 afa:	0b c0       	rjmp	.+22     	; 0xb12 <main+0x38>
 afc:	89 81       	ldd	r24, Y+1	; 0x01
 afe:	9a 81       	ldd	r25, Y+2	; 0x02
 b00:	ab 81       	ldd	r26, Y+3	; 0x03
 b02:	bc 81       	ldd	r27, Y+4	; 0x04
 b04:	01 96       	adiw	r24, 0x01	; 1
 b06:	a1 1d       	adc	r26, r1
 b08:	b1 1d       	adc	r27, r1
 b0a:	89 83       	std	Y+1, r24	; 0x01
 b0c:	9a 83       	std	Y+2, r25	; 0x02
 b0e:	ab 83       	std	Y+3, r26	; 0x03
 b10:	bc 83       	std	Y+4, r27	; 0x04
 b12:	89 81       	ldd	r24, Y+1	; 0x01
 b14:	9a 81       	ldd	r25, Y+2	; 0x02
 b16:	ab 81       	ldd	r26, Y+3	; 0x03
 b18:	bc 81       	ldd	r27, Y+4	; 0x04
 b1a:	88 3a       	cpi	r24, 0xA8	; 168
 b1c:	91 46       	sbci	r25, 0x61	; 97
 b1e:	a1 05       	cpc	r26, r1
 b20:	b1 05       	cpc	r27, r1
 b22:	60 f3       	brcs	.-40     	; 0xafc <main+0x22>
 b24:	e6 cf       	rjmp	.-52     	; 0xaf2 <main+0x18>

00000b26 <_exit>:
 b26:	f8 94       	cli

00000b28 <__stop_program>:
 b28:	ff cf       	rjmp	.-2      	; 0xb28 <__stop_program>
