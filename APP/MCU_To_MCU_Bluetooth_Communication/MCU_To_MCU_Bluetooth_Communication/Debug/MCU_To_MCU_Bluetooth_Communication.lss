
MCU_To_MCU_Bluetooth_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  000024ea  0000257e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  008000de  008000de  000025fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000262c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003145  00000000  00000000  000029f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4e  00000000  00000000  00005b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000311a  00000000  00000000  0000698b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b8c  00000000  00000000  00009aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015f7  00000000  00000000  0000a634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017b9  00000000  00000000  0000bc2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000d3e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_7>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	fa 09       	sbc	r31, r10
      56:	06 0a       	sbc	r0, r22
      58:	12 0a       	sbc	r1, r18
      5a:	1e 0a       	sbc	r1, r30
      5c:	2a 0a       	sbc	r2, r26
      5e:	36 0a       	sbc	r3, r22
      60:	42 0a       	sbc	r4, r18
      62:	a9 0e       	add	r10, r25
      64:	b5 0e       	add	r11, r21
      66:	c1 0e       	add	r12, r17
      68:	e8 0e       	add	r14, r24
      6a:	05 0f       	add	r16, r21
      6c:	2d 0f       	add	r18, r29
      6e:	6a 0f       	add	r22, r26
      70:	76 0f       	add	r23, r22

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	10 e0       	ldi	r17, 0x00	; 0
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	ea ee       	ldi	r30, 0xEA	; 234
      86:	f4 e2       	ldi	r31, 0x24	; 36
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	ae 3d       	cpi	r26, 0xDE	; 222
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	21 e0       	ldi	r18, 0x01	; 1
      96:	ae ed       	ldi	r26, 0xDE	; 222
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a1 32       	cpi	r26, 0x21	; 33
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 87 10 	call	0x210e	; 0x210e <main>
      a8:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <vPortYieldFromTick>:
	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
	TIMSK = ucLowByte;
}
      b0:	0f 92       	push	r0
      b2:	0f b6       	in	r0, 0x3f	; 63
      b4:	f8 94       	cli
      b6:	0f 92       	push	r0
      b8:	1f 92       	push	r1
      ba:	11 24       	eor	r1, r1
      bc:	2f 92       	push	r2
      be:	3f 92       	push	r3
      c0:	4f 92       	push	r4
      c2:	5f 92       	push	r5
      c4:	6f 92       	push	r6
      c6:	7f 92       	push	r7
      c8:	8f 92       	push	r8
      ca:	9f 92       	push	r9
      cc:	af 92       	push	r10
      ce:	bf 92       	push	r11
      d0:	cf 92       	push	r12
      d2:	df 92       	push	r13
      d4:	ef 92       	push	r14
      d6:	ff 92       	push	r15
      d8:	0f 93       	push	r16
      da:	1f 93       	push	r17
      dc:	2f 93       	push	r18
      de:	3f 93       	push	r19
      e0:	4f 93       	push	r20
      e2:	5f 93       	push	r21
      e4:	6f 93       	push	r22
      e6:	7f 93       	push	r23
      e8:	8f 93       	push	r24
      ea:	9f 93       	push	r25
      ec:	af 93       	push	r26
      ee:	bf 93       	push	r27
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	ef 93       	push	r30
      f6:	ff 93       	push	r31
      f8:	a0 91 de 00 	lds	r26, 0x00DE	; 0x8000de <__data_end>
      fc:	b0 91 df 00 	lds	r27, 0x00DF	; 0x8000df <__data_end+0x1>
     100:	0d b6       	in	r0, 0x3d	; 61
     102:	0d 92       	st	X+, r0
     104:	0e b6       	in	r0, 0x3e	; 62
     106:	0d 92       	st	X+, r0
     108:	0e 94 ba 00 	call	0x174	; 0x174 <xTaskIncrementTick>
     10c:	88 23       	and	r24, r24
     10e:	11 f0       	breq	.+4      	; 0x114 <vPortYieldFromTick+0x64>
     110:	0e 94 89 02 	call	0x512	; 0x512 <vTaskSwitchContext>
     114:	a0 91 de 00 	lds	r26, 0x00DE	; 0x8000de <__data_end>
     118:	b0 91 df 00 	lds	r27, 0x00DF	; 0x8000df <__data_end+0x1>
     11c:	cd 91       	ld	r28, X+
     11e:	cd bf       	out	0x3d, r28	; 61
     120:	dd 91       	ld	r29, X+
     122:	de bf       	out	0x3e, r29	; 62
     124:	ff 91       	pop	r31
     126:	ef 91       	pop	r30
     128:	df 91       	pop	r29
     12a:	cf 91       	pop	r28
     12c:	bf 91       	pop	r27
     12e:	af 91       	pop	r26
     130:	9f 91       	pop	r25
     132:	8f 91       	pop	r24
     134:	7f 91       	pop	r23
     136:	6f 91       	pop	r22
     138:	5f 91       	pop	r21
     13a:	4f 91       	pop	r20
     13c:	3f 91       	pop	r19
     13e:	2f 91       	pop	r18
     140:	1f 91       	pop	r17
     142:	0f 91       	pop	r16
     144:	ff 90       	pop	r15
     146:	ef 90       	pop	r14
     148:	df 90       	pop	r13
     14a:	cf 90       	pop	r12
     14c:	bf 90       	pop	r11
     14e:	af 90       	pop	r10
     150:	9f 90       	pop	r9
     152:	8f 90       	pop	r8
     154:	7f 90       	pop	r7
     156:	6f 90       	pop	r6
     158:	5f 90       	pop	r5
     15a:	4f 90       	pop	r4
     15c:	3f 90       	pop	r3
     15e:	2f 90       	pop	r2
     160:	1f 90       	pop	r1
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	08 95       	ret
	...

0000016c <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     16c:	0e 94 58 00 	call	0xb0	; 0xb0 <vPortYieldFromTick>
		asm volatile ( "reti" );
     170:	18 95       	reti
	...

00000174 <xTaskIncrementTick>:
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
     17c:	2f 97       	sbiw	r28, 0x0f	; 15
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	f8 94       	cli
     182:	de bf       	out	0x3e, r29	; 62
     184:	0f be       	out	0x3f, r0	; 63
     186:	cd bf       	out	0x3d, r28	; 61
     188:	19 82       	std	Y+1, r1	; 0x01
     18a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <uxSchedulerSuspended>
     18e:	88 23       	and	r24, r24
     190:	09 f0       	breq	.+2      	; 0x194 <xTaskIncrementTick+0x20>
     192:	ac c1       	rjmp	.+856    	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
     194:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <xTickCount>
     198:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <xTickCount+0x1>
     19c:	01 96       	adiw	r24, 0x01	; 1
     19e:	9b 83       	std	Y+3, r25	; 0x03
     1a0:	8a 83       	std	Y+2, r24	; 0x02
     1a2:	8a 81       	ldd	r24, Y+2	; 0x02
     1a4:	9b 81       	ldd	r25, Y+3	; 0x03
     1a6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <xTickCount+0x1>
     1aa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <xTickCount>
     1ae:	8a 81       	ldd	r24, Y+2	; 0x02
     1b0:	9b 81       	ldd	r25, Y+3	; 0x03
     1b2:	89 2b       	or	r24, r25
     1b4:	d9 f4       	brne	.+54     	; 0x1ec <xTaskIncrementTick+0x78>
     1b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pxDelayedTaskList>
     1ba:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pxDelayedTaskList+0x1>
     1be:	9d 83       	std	Y+5, r25	; 0x05
     1c0:	8c 83       	std	Y+4, r24	; 0x04
     1c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pxOverflowDelayedTaskList>
     1c6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <pxOverflowDelayedTaskList+0x1>
     1ca:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pxDelayedTaskList+0x1>
     1ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pxDelayedTaskList>
     1d2:	8c 81       	ldd	r24, Y+4	; 0x04
     1d4:	9d 81       	ldd	r25, Y+5	; 0x05
     1d6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <pxOverflowDelayedTaskList+0x1>
     1da:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pxOverflowDelayedTaskList>
     1de:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <xNumOfOverflows>
     1e2:	8f 5f       	subi	r24, 0xFF	; 255
     1e4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNumOfOverflows>
     1e8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <prvResetNextTaskUnblockTime>
     1ec:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <xNextTaskUnblockTime>
     1f0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <xNextTaskUnblockTime+0x1>
     1f4:	2a 81       	ldd	r18, Y+2	; 0x02
     1f6:	3b 81       	ldd	r19, Y+3	; 0x03
     1f8:	28 17       	cp	r18, r24
     1fa:	39 07       	cpc	r19, r25
     1fc:	08 f4       	brcc	.+2      	; 0x200 <xTaskIncrementTick+0x8c>
     1fe:	56 c1       	rjmp	.+684    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     200:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pxDelayedTaskList>
     204:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pxDelayedTaskList+0x1>
     208:	fc 01       	movw	r30, r24
     20a:	80 81       	ld	r24, Z
     20c:	88 23       	and	r24, r24
     20e:	39 f4       	brne	.+14     	; 0x21e <xTaskIncrementTick+0xaa>
     210:	8f ef       	ldi	r24, 0xFF	; 255
     212:	9f ef       	ldi	r25, 0xFF	; 255
     214:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <xNextTaskUnblockTime+0x1>
     218:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <xNextTaskUnblockTime>
     21c:	47 c1       	rjmp	.+654    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     21e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pxDelayedTaskList>
     222:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pxDelayedTaskList+0x1>
     226:	fc 01       	movw	r30, r24
     228:	85 81       	ldd	r24, Z+5	; 0x05
     22a:	96 81       	ldd	r25, Z+6	; 0x06
     22c:	fc 01       	movw	r30, r24
     22e:	86 81       	ldd	r24, Z+6	; 0x06
     230:	97 81       	ldd	r25, Z+7	; 0x07
     232:	9f 83       	std	Y+7, r25	; 0x07
     234:	8e 83       	std	Y+6, r24	; 0x06
     236:	8e 81       	ldd	r24, Y+6	; 0x06
     238:	9f 81       	ldd	r25, Y+7	; 0x07
     23a:	fc 01       	movw	r30, r24
     23c:	82 81       	ldd	r24, Z+2	; 0x02
     23e:	93 81       	ldd	r25, Z+3	; 0x03
     240:	99 87       	std	Y+9, r25	; 0x09
     242:	88 87       	std	Y+8, r24	; 0x08
     244:	2a 81       	ldd	r18, Y+2	; 0x02
     246:	3b 81       	ldd	r19, Y+3	; 0x03
     248:	88 85       	ldd	r24, Y+8	; 0x08
     24a:	99 85       	ldd	r25, Y+9	; 0x09
     24c:	28 17       	cp	r18, r24
     24e:	39 07       	cpc	r19, r25
     250:	38 f4       	brcc	.+14     	; 0x260 <xTaskIncrementTick+0xec>
     252:	88 85       	ldd	r24, Y+8	; 0x08
     254:	99 85       	ldd	r25, Y+9	; 0x09
     256:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <xNextTaskUnblockTime+0x1>
     25a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <xNextTaskUnblockTime>
     25e:	26 c1       	rjmp	.+588    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     260:	8e 81       	ldd	r24, Y+6	; 0x06
     262:	9f 81       	ldd	r25, Y+7	; 0x07
     264:	fc 01       	movw	r30, r24
     266:	82 85       	ldd	r24, Z+10	; 0x0a
     268:	93 85       	ldd	r25, Z+11	; 0x0b
     26a:	9b 87       	std	Y+11, r25	; 0x0b
     26c:	8a 87       	std	Y+10, r24	; 0x0a
     26e:	8e 81       	ldd	r24, Y+6	; 0x06
     270:	9f 81       	ldd	r25, Y+7	; 0x07
     272:	fc 01       	movw	r30, r24
     274:	84 81       	ldd	r24, Z+4	; 0x04
     276:	95 81       	ldd	r25, Z+5	; 0x05
     278:	2e 81       	ldd	r18, Y+6	; 0x06
     27a:	3f 81       	ldd	r19, Y+7	; 0x07
     27c:	f9 01       	movw	r30, r18
     27e:	26 81       	ldd	r18, Z+6	; 0x06
     280:	37 81       	ldd	r19, Z+7	; 0x07
     282:	fc 01       	movw	r30, r24
     284:	35 83       	std	Z+5, r19	; 0x05
     286:	24 83       	std	Z+4, r18	; 0x04
     288:	8e 81       	ldd	r24, Y+6	; 0x06
     28a:	9f 81       	ldd	r25, Y+7	; 0x07
     28c:	fc 01       	movw	r30, r24
     28e:	86 81       	ldd	r24, Z+6	; 0x06
     290:	97 81       	ldd	r25, Z+7	; 0x07
     292:	2e 81       	ldd	r18, Y+6	; 0x06
     294:	3f 81       	ldd	r19, Y+7	; 0x07
     296:	f9 01       	movw	r30, r18
     298:	24 81       	ldd	r18, Z+4	; 0x04
     29a:	35 81       	ldd	r19, Z+5	; 0x05
     29c:	fc 01       	movw	r30, r24
     29e:	33 83       	std	Z+3, r19	; 0x03
     2a0:	22 83       	std	Z+2, r18	; 0x02
     2a2:	8a 85       	ldd	r24, Y+10	; 0x0a
     2a4:	9b 85       	ldd	r25, Y+11	; 0x0b
     2a6:	fc 01       	movw	r30, r24
     2a8:	21 81       	ldd	r18, Z+1	; 0x01
     2aa:	32 81       	ldd	r19, Z+2	; 0x02
     2ac:	8e 81       	ldd	r24, Y+6	; 0x06
     2ae:	9f 81       	ldd	r25, Y+7	; 0x07
     2b0:	02 96       	adiw	r24, 0x02	; 2
     2b2:	28 17       	cp	r18, r24
     2b4:	39 07       	cpc	r19, r25
     2b6:	51 f4       	brne	.+20     	; 0x2cc <xTaskIncrementTick+0x158>
     2b8:	8e 81       	ldd	r24, Y+6	; 0x06
     2ba:	9f 81       	ldd	r25, Y+7	; 0x07
     2bc:	fc 01       	movw	r30, r24
     2be:	26 81       	ldd	r18, Z+6	; 0x06
     2c0:	37 81       	ldd	r19, Z+7	; 0x07
     2c2:	8a 85       	ldd	r24, Y+10	; 0x0a
     2c4:	9b 85       	ldd	r25, Y+11	; 0x0b
     2c6:	fc 01       	movw	r30, r24
     2c8:	32 83       	std	Z+2, r19	; 0x02
     2ca:	21 83       	std	Z+1, r18	; 0x01
     2cc:	8e 81       	ldd	r24, Y+6	; 0x06
     2ce:	9f 81       	ldd	r25, Y+7	; 0x07
     2d0:	fc 01       	movw	r30, r24
     2d2:	13 86       	std	Z+11, r1	; 0x0b
     2d4:	12 86       	std	Z+10, r1	; 0x0a
     2d6:	8a 85       	ldd	r24, Y+10	; 0x0a
     2d8:	9b 85       	ldd	r25, Y+11	; 0x0b
     2da:	fc 01       	movw	r30, r24
     2dc:	80 81       	ld	r24, Z
     2de:	2f ef       	ldi	r18, 0xFF	; 255
     2e0:	28 0f       	add	r18, r24
     2e2:	8a 85       	ldd	r24, Y+10	; 0x0a
     2e4:	9b 85       	ldd	r25, Y+11	; 0x0b
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
     2ea:	8e 81       	ldd	r24, Y+6	; 0x06
     2ec:	9f 81       	ldd	r25, Y+7	; 0x07
     2ee:	fc 01       	movw	r30, r24
     2f0:	84 89       	ldd	r24, Z+20	; 0x14
     2f2:	95 89       	ldd	r25, Z+21	; 0x15
     2f4:	89 2b       	or	r24, r25
     2f6:	09 f4       	brne	.+2      	; 0x2fa <xTaskIncrementTick+0x186>
     2f8:	45 c0       	rjmp	.+138    	; 0x384 <xTaskIncrementTick+0x210>
     2fa:	8e 81       	ldd	r24, Y+6	; 0x06
     2fc:	9f 81       	ldd	r25, Y+7	; 0x07
     2fe:	fc 01       	movw	r30, r24
     300:	84 89       	ldd	r24, Z+20	; 0x14
     302:	95 89       	ldd	r25, Z+21	; 0x15
     304:	9d 87       	std	Y+13, r25	; 0x0d
     306:	8c 87       	std	Y+12, r24	; 0x0c
     308:	8e 81       	ldd	r24, Y+6	; 0x06
     30a:	9f 81       	ldd	r25, Y+7	; 0x07
     30c:	fc 01       	movw	r30, r24
     30e:	86 85       	ldd	r24, Z+14	; 0x0e
     310:	97 85       	ldd	r25, Z+15	; 0x0f
     312:	2e 81       	ldd	r18, Y+6	; 0x06
     314:	3f 81       	ldd	r19, Y+7	; 0x07
     316:	f9 01       	movw	r30, r18
     318:	20 89       	ldd	r18, Z+16	; 0x10
     31a:	31 89       	ldd	r19, Z+17	; 0x11
     31c:	fc 01       	movw	r30, r24
     31e:	35 83       	std	Z+5, r19	; 0x05
     320:	24 83       	std	Z+4, r18	; 0x04
     322:	8e 81       	ldd	r24, Y+6	; 0x06
     324:	9f 81       	ldd	r25, Y+7	; 0x07
     326:	fc 01       	movw	r30, r24
     328:	80 89       	ldd	r24, Z+16	; 0x10
     32a:	91 89       	ldd	r25, Z+17	; 0x11
     32c:	2e 81       	ldd	r18, Y+6	; 0x06
     32e:	3f 81       	ldd	r19, Y+7	; 0x07
     330:	f9 01       	movw	r30, r18
     332:	26 85       	ldd	r18, Z+14	; 0x0e
     334:	37 85       	ldd	r19, Z+15	; 0x0f
     336:	fc 01       	movw	r30, r24
     338:	33 83       	std	Z+3, r19	; 0x03
     33a:	22 83       	std	Z+2, r18	; 0x02
     33c:	8c 85       	ldd	r24, Y+12	; 0x0c
     33e:	9d 85       	ldd	r25, Y+13	; 0x0d
     340:	fc 01       	movw	r30, r24
     342:	21 81       	ldd	r18, Z+1	; 0x01
     344:	32 81       	ldd	r19, Z+2	; 0x02
     346:	8e 81       	ldd	r24, Y+6	; 0x06
     348:	9f 81       	ldd	r25, Y+7	; 0x07
     34a:	0c 96       	adiw	r24, 0x0c	; 12
     34c:	28 17       	cp	r18, r24
     34e:	39 07       	cpc	r19, r25
     350:	51 f4       	brne	.+20     	; 0x366 <xTaskIncrementTick+0x1f2>
     352:	8e 81       	ldd	r24, Y+6	; 0x06
     354:	9f 81       	ldd	r25, Y+7	; 0x07
     356:	fc 01       	movw	r30, r24
     358:	20 89       	ldd	r18, Z+16	; 0x10
     35a:	31 89       	ldd	r19, Z+17	; 0x11
     35c:	8c 85       	ldd	r24, Y+12	; 0x0c
     35e:	9d 85       	ldd	r25, Y+13	; 0x0d
     360:	fc 01       	movw	r30, r24
     362:	32 83       	std	Z+2, r19	; 0x02
     364:	21 83       	std	Z+1, r18	; 0x01
     366:	8e 81       	ldd	r24, Y+6	; 0x06
     368:	9f 81       	ldd	r25, Y+7	; 0x07
     36a:	fc 01       	movw	r30, r24
     36c:	15 8a       	std	Z+21, r1	; 0x15
     36e:	14 8a       	std	Z+20, r1	; 0x14
     370:	8c 85       	ldd	r24, Y+12	; 0x0c
     372:	9d 85       	ldd	r25, Y+13	; 0x0d
     374:	fc 01       	movw	r30, r24
     376:	80 81       	ld	r24, Z
     378:	2f ef       	ldi	r18, 0xFF	; 255
     37a:	28 0f       	add	r18, r24
     37c:	8c 85       	ldd	r24, Y+12	; 0x0c
     37e:	9d 85       	ldd	r25, Y+13	; 0x0d
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18
     384:	8e 81       	ldd	r24, Y+6	; 0x06
     386:	9f 81       	ldd	r25, Y+7	; 0x07
     388:	fc 01       	movw	r30, r24
     38a:	96 89       	ldd	r25, Z+22	; 0x16
     38c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <uxTopReadyPriority>
     390:	89 17       	cp	r24, r25
     392:	30 f4       	brcc	.+12     	; 0x3a0 <xTaskIncrementTick+0x22c>
     394:	8e 81       	ldd	r24, Y+6	; 0x06
     396:	9f 81       	ldd	r25, Y+7	; 0x07
     398:	fc 01       	movw	r30, r24
     39a:	86 89       	ldd	r24, Z+22	; 0x16
     39c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <uxTopReadyPriority>
     3a0:	8e 81       	ldd	r24, Y+6	; 0x06
     3a2:	9f 81       	ldd	r25, Y+7	; 0x07
     3a4:	fc 01       	movw	r30, r24
     3a6:	86 89       	ldd	r24, Z+22	; 0x16
     3a8:	28 2f       	mov	r18, r24
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	c9 01       	movw	r24, r18
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	82 0f       	add	r24, r18
     3bc:	93 1f       	adc	r25, r19
     3be:	8f 51       	subi	r24, 0x1F	; 31
     3c0:	9f 4f       	sbci	r25, 0xFF	; 255
     3c2:	fc 01       	movw	r30, r24
     3c4:	80 81       	ld	r24, Z
     3c6:	91 81       	ldd	r25, Z+1	; 0x01
     3c8:	9f 87       	std	Y+15, r25	; 0x0f
     3ca:	8e 87       	std	Y+14, r24	; 0x0e
     3cc:	8e 81       	ldd	r24, Y+6	; 0x06
     3ce:	9f 81       	ldd	r25, Y+7	; 0x07
     3d0:	2e 85       	ldd	r18, Y+14	; 0x0e
     3d2:	3f 85       	ldd	r19, Y+15	; 0x0f
     3d4:	fc 01       	movw	r30, r24
     3d6:	35 83       	std	Z+5, r19	; 0x05
     3d8:	24 83       	std	Z+4, r18	; 0x04
     3da:	8e 85       	ldd	r24, Y+14	; 0x0e
     3dc:	9f 85       	ldd	r25, Y+15	; 0x0f
     3de:	fc 01       	movw	r30, r24
     3e0:	24 81       	ldd	r18, Z+4	; 0x04
     3e2:	35 81       	ldd	r19, Z+5	; 0x05
     3e4:	8e 81       	ldd	r24, Y+6	; 0x06
     3e6:	9f 81       	ldd	r25, Y+7	; 0x07
     3e8:	fc 01       	movw	r30, r24
     3ea:	37 83       	std	Z+7, r19	; 0x07
     3ec:	26 83       	std	Z+6, r18	; 0x06
     3ee:	8e 85       	ldd	r24, Y+14	; 0x0e
     3f0:	9f 85       	ldd	r25, Y+15	; 0x0f
     3f2:	fc 01       	movw	r30, r24
     3f4:	84 81       	ldd	r24, Z+4	; 0x04
     3f6:	95 81       	ldd	r25, Z+5	; 0x05
     3f8:	2e 81       	ldd	r18, Y+6	; 0x06
     3fa:	3f 81       	ldd	r19, Y+7	; 0x07
     3fc:	2e 5f       	subi	r18, 0xFE	; 254
     3fe:	3f 4f       	sbci	r19, 0xFF	; 255
     400:	fc 01       	movw	r30, r24
     402:	33 83       	std	Z+3, r19	; 0x03
     404:	22 83       	std	Z+2, r18	; 0x02
     406:	8e 81       	ldd	r24, Y+6	; 0x06
     408:	9f 81       	ldd	r25, Y+7	; 0x07
     40a:	9c 01       	movw	r18, r24
     40c:	2e 5f       	subi	r18, 0xFE	; 254
     40e:	3f 4f       	sbci	r19, 0xFF	; 255
     410:	8e 85       	ldd	r24, Y+14	; 0x0e
     412:	9f 85       	ldd	r25, Y+15	; 0x0f
     414:	fc 01       	movw	r30, r24
     416:	35 83       	std	Z+5, r19	; 0x05
     418:	24 83       	std	Z+4, r18	; 0x04
     41a:	8e 81       	ldd	r24, Y+6	; 0x06
     41c:	9f 81       	ldd	r25, Y+7	; 0x07
     41e:	fc 01       	movw	r30, r24
     420:	86 89       	ldd	r24, Z+22	; 0x16
     422:	28 2f       	mov	r18, r24
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	c9 01       	movw	r24, r18
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	88 0f       	add	r24, r24
     42e:	99 1f       	adc	r25, r25
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	82 0f       	add	r24, r18
     436:	93 1f       	adc	r25, r19
     438:	9c 01       	movw	r18, r24
     43a:	20 52       	subi	r18, 0x20	; 32
     43c:	3f 4f       	sbci	r19, 0xFF	; 255
     43e:	8e 81       	ldd	r24, Y+6	; 0x06
     440:	9f 81       	ldd	r25, Y+7	; 0x07
     442:	fc 01       	movw	r30, r24
     444:	33 87       	std	Z+11, r19	; 0x0b
     446:	22 87       	std	Z+10, r18	; 0x0a
     448:	8e 81       	ldd	r24, Y+6	; 0x06
     44a:	9f 81       	ldd	r25, Y+7	; 0x07
     44c:	fc 01       	movw	r30, r24
     44e:	86 89       	ldd	r24, Z+22	; 0x16
     450:	28 2f       	mov	r18, r24
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	c9 01       	movw	r24, r18
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	82 0f       	add	r24, r18
     464:	93 1f       	adc	r25, r19
     466:	80 52       	subi	r24, 0x20	; 32
     468:	9f 4f       	sbci	r25, 0xFF	; 255
     46a:	fc 01       	movw	r30, r24
     46c:	80 81       	ld	r24, Z
     46e:	41 e0       	ldi	r20, 0x01	; 1
     470:	48 0f       	add	r20, r24
     472:	c9 01       	movw	r24, r18
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	82 0f       	add	r24, r18
     482:	93 1f       	adc	r25, r19
     484:	80 52       	subi	r24, 0x20	; 32
     486:	9f 4f       	sbci	r25, 0xFF	; 255
     488:	fc 01       	movw	r30, r24
     48a:	40 83       	st	Z, r20
     48c:	8e 81       	ldd	r24, Y+6	; 0x06
     48e:	9f 81       	ldd	r25, Y+7	; 0x07
     490:	fc 01       	movw	r30, r24
     492:	26 89       	ldd	r18, Z+22	; 0x16
     494:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__data_end>
     498:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <__data_end+0x1>
     49c:	fc 01       	movw	r30, r24
     49e:	86 89       	ldd	r24, Z+22	; 0x16
     4a0:	28 17       	cp	r18, r24
     4a2:	08 f4       	brcc	.+2      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     4a4:	ad ce       	rjmp	.-678    	; 0x200 <xTaskIncrementTick+0x8c>
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	89 83       	std	Y+1, r24	; 0x01
     4aa:	aa ce       	rjmp	.-684    	; 0x200 <xTaskIncrementTick+0x8c>
     4ac:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__data_end>
     4b0:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <__data_end+0x1>
     4b4:	fc 01       	movw	r30, r24
     4b6:	86 89       	ldd	r24, Z+22	; 0x16
     4b8:	28 2f       	mov	r18, r24
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	c9 01       	movw	r24, r18
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	82 0f       	add	r24, r18
     4cc:	93 1f       	adc	r25, r19
     4ce:	80 52       	subi	r24, 0x20	; 32
     4d0:	9f 4f       	sbci	r25, 0xFF	; 255
     4d2:	fc 01       	movw	r30, r24
     4d4:	80 81       	ld	r24, Z
     4d6:	82 30       	cpi	r24, 0x02	; 2
     4d8:	10 f0       	brcs	.+4      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	89 83       	std	Y+1, r24	; 0x01
     4de:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <xYieldPending>
     4e2:	88 23       	and	r24, r24
     4e4:	61 f0       	breq	.+24     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	89 83       	std	Y+1, r24	; 0x01
     4ea:	09 c0       	rjmp	.+18     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
     4ec:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <xPendedTicks>
     4f0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <xPendedTicks+0x1>
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <xPendedTicks+0x1>
     4fa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <xPendedTicks>
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	2f 96       	adiw	r28, 0x0f	; 15
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <vTaskSwitchContext>:
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	00 d0       	rcall	.+0      	; 0x518 <vTaskSwitchContext+0x6>
     518:	1f 92       	push	r1
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <uxSchedulerSuspended>
     522:	88 23       	and	r24, r24
     524:	21 f0       	breq	.+8      	; 0x52e <vTaskSwitchContext+0x1c>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <xYieldPending>
     52c:	5f c0       	rjmp	.+190    	; 0x5ec <vTaskSwitchContext+0xda>
     52e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <xYieldPending>
     532:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <uxTopReadyPriority>
     536:	89 83       	std	Y+1, r24	; 0x01
     538:	03 c0       	rjmp	.+6      	; 0x540 <vTaskSwitchContext+0x2e>
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	81 50       	subi	r24, 0x01	; 1
     53e:	89 83       	std	Y+1, r24	; 0x01
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	28 2f       	mov	r18, r24
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	c9 01       	movw	r24, r18
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	82 0f       	add	r24, r18
     556:	93 1f       	adc	r25, r19
     558:	80 52       	subi	r24, 0x20	; 32
     55a:	9f 4f       	sbci	r25, 0xFF	; 255
     55c:	fc 01       	movw	r30, r24
     55e:	80 81       	ld	r24, Z
     560:	88 23       	and	r24, r24
     562:	59 f3       	breq	.-42     	; 0x53a <vTaskSwitchContext+0x28>
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	28 2f       	mov	r18, r24
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	c9 01       	movw	r24, r18
     56c:	88 0f       	add	r24, r24
     56e:	99 1f       	adc	r25, r25
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	82 0f       	add	r24, r18
     57a:	93 1f       	adc	r25, r19
     57c:	80 52       	subi	r24, 0x20	; 32
     57e:	9f 4f       	sbci	r25, 0xFF	; 255
     580:	9b 83       	std	Y+3, r25	; 0x03
     582:	8a 83       	std	Y+2, r24	; 0x02
     584:	8a 81       	ldd	r24, Y+2	; 0x02
     586:	9b 81       	ldd	r25, Y+3	; 0x03
     588:	fc 01       	movw	r30, r24
     58a:	81 81       	ldd	r24, Z+1	; 0x01
     58c:	92 81       	ldd	r25, Z+2	; 0x02
     58e:	fc 01       	movw	r30, r24
     590:	22 81       	ldd	r18, Z+2	; 0x02
     592:	33 81       	ldd	r19, Z+3	; 0x03
     594:	8a 81       	ldd	r24, Y+2	; 0x02
     596:	9b 81       	ldd	r25, Y+3	; 0x03
     598:	fc 01       	movw	r30, r24
     59a:	32 83       	std	Z+2, r19	; 0x02
     59c:	21 83       	std	Z+1, r18	; 0x01
     59e:	8a 81       	ldd	r24, Y+2	; 0x02
     5a0:	9b 81       	ldd	r25, Y+3	; 0x03
     5a2:	fc 01       	movw	r30, r24
     5a4:	21 81       	ldd	r18, Z+1	; 0x01
     5a6:	32 81       	ldd	r19, Z+2	; 0x02
     5a8:	8a 81       	ldd	r24, Y+2	; 0x02
     5aa:	9b 81       	ldd	r25, Y+3	; 0x03
     5ac:	03 96       	adiw	r24, 0x03	; 3
     5ae:	28 17       	cp	r18, r24
     5b0:	39 07       	cpc	r19, r25
     5b2:	69 f4       	brne	.+26     	; 0x5ce <vTaskSwitchContext+0xbc>
     5b4:	8a 81       	ldd	r24, Y+2	; 0x02
     5b6:	9b 81       	ldd	r25, Y+3	; 0x03
     5b8:	fc 01       	movw	r30, r24
     5ba:	81 81       	ldd	r24, Z+1	; 0x01
     5bc:	92 81       	ldd	r25, Z+2	; 0x02
     5be:	fc 01       	movw	r30, r24
     5c0:	22 81       	ldd	r18, Z+2	; 0x02
     5c2:	33 81       	ldd	r19, Z+3	; 0x03
     5c4:	8a 81       	ldd	r24, Y+2	; 0x02
     5c6:	9b 81       	ldd	r25, Y+3	; 0x03
     5c8:	fc 01       	movw	r30, r24
     5ca:	32 83       	std	Z+2, r19	; 0x02
     5cc:	21 83       	std	Z+1, r18	; 0x01
     5ce:	8a 81       	ldd	r24, Y+2	; 0x02
     5d0:	9b 81       	ldd	r25, Y+3	; 0x03
     5d2:	fc 01       	movw	r30, r24
     5d4:	81 81       	ldd	r24, Z+1	; 0x01
     5d6:	92 81       	ldd	r25, Z+2	; 0x02
     5d8:	fc 01       	movw	r30, r24
     5da:	86 81       	ldd	r24, Z+6	; 0x06
     5dc:	97 81       	ldd	r25, Z+7	; 0x07
     5de:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <__data_end+0x1>
     5e2:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__data_end>
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <uxTopReadyPriority>
     5ec:	00 00       	nop
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     602:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pxDelayedTaskList>
     606:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pxDelayedTaskList+0x1>
     60a:	fc 01       	movw	r30, r24
     60c:	80 81       	ld	r24, Z
     60e:	88 23       	and	r24, r24
     610:	39 f4       	brne	.+14     	; 0x620 <prvResetNextTaskUnblockTime+0x26>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	9f ef       	ldi	r25, 0xFF	; 255
     616:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <xNextTaskUnblockTime+0x1>
     61a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <xNextTaskUnblockTime>
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
     61e:	0e c0       	rjmp	.+28     	; 0x63c <prvResetNextTaskUnblockTime+0x42>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
     620:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pxDelayedTaskList>
     624:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pxDelayedTaskList+0x1>
     628:	fc 01       	movw	r30, r24
     62a:	85 81       	ldd	r24, Z+5	; 0x05
     62c:	96 81       	ldd	r25, Z+6	; 0x06
     62e:	fc 01       	movw	r30, r24
     630:	80 81       	ld	r24, Z
     632:	91 81       	ldd	r25, Z+1	; 0x01
     634:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <xNextTaskUnblockTime+0x1>
     638:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <xNextTaskUnblockTime>
    }
}
     63c:	00 00       	nop
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <LCD_SendCommand>:
/*Externed global variables*/
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];
extern const STR_LCD_8_config_t gastr_LCD_8_Config[LCD_NUMBER];
/*functions Implementations*/
ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	00 d0       	rcall	.+0      	; 0x64a <LCD_SendCommand+0x6>
     64a:	1f 92       	push	r1
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	8b 83       	std	Y+3, r24	; 0x03
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	89 83       	std	Y+1, r24	; 0x01
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	8a 83       	std	Y+2, r24	; 0x02
	}
	/************************************************************************/
	/*						IF LCD is IN 8_BIT MODE                         */
	/************************************************************************/
	#else
	switch (State)
     65a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     65e:	88 2f       	mov	r24, r24
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	85 31       	cpi	r24, 0x15	; 21
     664:	91 05       	cpc	r25, r1
     666:	09 f4       	brne	.+2      	; 0x66a <LCD_SendCommand+0x26>
     668:	d9 c0       	rjmp	.+434    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     66a:	8f 3f       	cpi	r24, 0xFF	; 255
     66c:	91 05       	cpc	r25, r1
     66e:	21 f0       	breq	.+8      	; 0x678 <LCD_SendCommand+0x34>
     670:	44 97       	sbiw	r24, 0x14	; 20
     672:	09 f4       	brne	.+2      	; 0x676 <LCD_SendCommand+0x32>
     674:	af c0       	rjmp	.+350    	; 0x7d4 <LCD_SendCommand+0x190>
     676:	ec c0       	rjmp	.+472    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
	{
		case OperationStarted:
			/*sending control signals with configurations of selection of control reg. and write process*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     678:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <gastr_LCD_Config+0x1>
     67c:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <gastr_LCD_Config>
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	69 2f       	mov	r22, r25
     684:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     688:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <gastr_LCD_Config+0x2>
     68c:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <gastr_LCD_Config>
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	69 2f       	mov	r22, r25
     694:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			/*Setting the lcd pins*/
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0,READ_BIT(CMD,BIT_0));
     698:	8b 81       	ldd	r24, Y+3	; 0x03
     69a:	28 2f       	mov	r18, r24
     69c:	21 70       	andi	r18, 0x01	; 1
     69e:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <gastr_LCD_8_Config+0xc>
     6a2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     6a6:	42 2f       	mov	r20, r18
     6a8:	69 2f       	mov	r22, r25
     6aa:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1,READ_BIT(CMD,BIT_1));
     6ae:	8b 81       	ldd	r24, Y+3	; 0x03
     6b0:	88 2f       	mov	r24, r24
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	82 70       	andi	r24, 0x02	; 2
     6b6:	99 27       	eor	r25, r25
     6b8:	95 95       	asr	r25
     6ba:	87 95       	ror	r24
     6bc:	28 2f       	mov	r18, r24
     6be:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <gastr_LCD_8_Config+0xb>
     6c2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     6c6:	42 2f       	mov	r20, r18
     6c8:	69 2f       	mov	r22, r25
     6ca:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2,READ_BIT(CMD,BIT_2));
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	88 2f       	mov	r24, r24
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	84 70       	andi	r24, 0x04	; 4
     6d6:	99 27       	eor	r25, r25
     6d8:	95 95       	asr	r25
     6da:	87 95       	ror	r24
     6dc:	95 95       	asr	r25
     6de:	87 95       	ror	r24
     6e0:	28 2f       	mov	r18, r24
     6e2:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <gastr_LCD_8_Config+0xa>
     6e6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     6ea:	42 2f       	mov	r20, r18
     6ec:	69 2f       	mov	r22, r25
     6ee:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3,READ_BIT(CMD,BIT_3));
     6f2:	8b 81       	ldd	r24, Y+3	; 0x03
     6f4:	88 2f       	mov	r24, r24
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	88 70       	andi	r24, 0x08	; 8
     6fa:	99 27       	eor	r25, r25
     6fc:	95 95       	asr	r25
     6fe:	87 95       	ror	r24
     700:	95 95       	asr	r25
     702:	87 95       	ror	r24
     704:	95 95       	asr	r25
     706:	87 95       	ror	r24
     708:	28 2f       	mov	r18, r24
     70a:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <gastr_LCD_8_Config+0x9>
     70e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     712:	42 2f       	mov	r20, r18
     714:	69 2f       	mov	r22, r25
     716:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(CMD,BIT_4));
     71a:	8b 81       	ldd	r24, Y+3	; 0x03
     71c:	88 2f       	mov	r24, r24
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	80 71       	andi	r24, 0x10	; 16
     722:	99 27       	eor	r25, r25
     724:	95 95       	asr	r25
     726:	87 95       	ror	r24
     728:	95 95       	asr	r25
     72a:	87 95       	ror	r24
     72c:	95 95       	asr	r25
     72e:	87 95       	ror	r24
     730:	95 95       	asr	r25
     732:	87 95       	ror	r24
     734:	28 2f       	mov	r18, r24
     736:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <gastr_LCD_8_Config+0x8>
     73a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     73e:	42 2f       	mov	r20, r18
     740:	69 2f       	mov	r22, r25
     742:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(CMD,BIT_5));
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	88 2f       	mov	r24, r24
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	80 72       	andi	r24, 0x20	; 32
     74e:	99 27       	eor	r25, r25
     750:	95 95       	asr	r25
     752:	87 95       	ror	r24
     754:	95 95       	asr	r25
     756:	87 95       	ror	r24
     758:	95 95       	asr	r25
     75a:	87 95       	ror	r24
     75c:	95 95       	asr	r25
     75e:	87 95       	ror	r24
     760:	95 95       	asr	r25
     762:	87 95       	ror	r24
     764:	28 2f       	mov	r18, r24
     766:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <gastr_LCD_8_Config+0x7>
     76a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     76e:	42 2f       	mov	r20, r18
     770:	69 2f       	mov	r22, r25
     772:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(CMD,BIT_6));
     776:	8b 81       	ldd	r24, Y+3	; 0x03
     778:	88 2f       	mov	r24, r24
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	80 74       	andi	r24, 0x40	; 64
     77e:	99 27       	eor	r25, r25
     780:	08 2e       	mov	r0, r24
     782:	89 2f       	mov	r24, r25
     784:	00 0c       	add	r0, r0
     786:	88 1f       	adc	r24, r24
     788:	99 0b       	sbc	r25, r25
     78a:	00 0c       	add	r0, r0
     78c:	88 1f       	adc	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	28 2f       	mov	r18, r24
     792:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <gastr_LCD_8_Config+0x6>
     796:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     79a:	42 2f       	mov	r20, r18
     79c:	69 2f       	mov	r22, r25
     79e:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_7));
     7a2:	8b 81       	ldd	r24, Y+3	; 0x03
     7a4:	28 2f       	mov	r18, r24
     7a6:	22 1f       	adc	r18, r18
     7a8:	22 27       	eor	r18, r18
     7aa:	22 1f       	adc	r18, r18
     7ac:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <gastr_LCD_8_Config+0x5>
     7b0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     7b4:	42 2f       	mov	r20, r18
     7b6:	69 2f       	mov	r22, r25
     7b8:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			/*writing data to the register by pulling the enable pin high for 1 Us*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     7bc:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <gastr_LCD_Config+0x3>
     7c0:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <gastr_LCD_Config>
     7c4:	41 e0       	ldi	r20, 0x01	; 1
     7c6:	69 2f       	mov	r22, r25
     7c8:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			State = CMD_Sending;
     7cc:	84 e1       	ldi	r24, 0x14	; 20
     7ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
     7d2:	44 c0       	rjmp	.+136    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		case CMD_Sending:
			/*start timer delay in background*/
			if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     7d4:	62 e2       	ldi	r22, 0x22	; 34
     7d6:	73 e0       	ldi	r23, 0x03	; 3
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <TIM_DelayStatus>
     7de:	8b 3f       	cpi	r24, 0xFB	; 251
     7e0:	d1 f5       	brne	.+116    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
			{
				TIM_DelayUs(TIMER_2, 1,(void (*)(void)) LCD_SendCommand);
     7e2:	22 e2       	ldi	r18, 0x22	; 34
     7e4:	33 e0       	ldi	r19, 0x03	; 3
     7e6:	41 e0       	ldi	r20, 0x01	; 1
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	0e 94 a8 0c 	call	0x1950	; 0x1950 <TIM_DelayUs>
				while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     7f4:	00 00       	nop
     7f6:	62 e2       	ldi	r22, 0x22	; 34
     7f8:	73 e0       	ldi	r23, 0x03	; 3
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <TIM_DelayStatus>
     800:	88 23       	and	r24, r24
     802:	c9 f7       	brne	.-14     	; 0x7f6 <LCD_SendCommand+0x1b2>
				/*if timer delay function finished correctly pull enable pin low*/
				DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     804:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <gastr_LCD_Config+0x3>
     808:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <gastr_LCD_Config>
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	69 2f       	mov	r22, r25
     810:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
				/*update the function's state*/
				State = CMD_Sent;
     814:	85 e1       	ldi	r24, 0x15	; 21
     816:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			break;
     81a:	1d c0       	rjmp	.+58     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
		case CMD_Sent:
			/*start timer delay in background*/
			TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
     81c:	62 e2       	ldi	r22, 0x22	; 34
     81e:	73 e0       	ldi	r23, 0x03	; 3
     820:	82 e0       	ldi	r24, 0x02	; 2
     822:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <TIM_DelayStatus>
     826:	8a 83       	std	Y+2, r24	; 0x02
			if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	8b 3f       	cpi	r24, 0xFB	; 251
     82c:	49 f4       	brne	.+18     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
			{
				TIM_DelayMs(TIMER_2,2, (void (*)(void))LCD_SendCommand);
     82e:	22 e2       	ldi	r18, 0x22	; 34
     830:	33 e0       	ldi	r19, 0x03	; 3
     832:	42 e0       	ldi	r20, 0x02	; 2
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <TIM_DelayMs>
			}
			if(TimerRetVal == ((uint8_t)ERROR_OK))
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	88 23       	and	r24, r24
     844:	51 f4       	brne	.+20     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			{
				ErrRetVal = OperationSuccess;
     846:	19 82       	std	Y+1, r1	; 0x01
				State = OperationStarted;
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			break;
     84e:	05 c0       	rjmp	.+10     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		default:
			ErrRetVal = OperationFail;
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	89 83       	std	Y+1, r24	; 0x01
			break;
     854:	03 c0       	rjmp	.+6      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
				/*if timer delay function finished correctly pull enable pin low*/
				DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
				/*update the function's state*/
				State = CMD_Sent;
			}
			break;
     856:	00 00       	nop
     858:	01 c0       	rjmp	.+2      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
			if(TimerRetVal == ((uint8_t)ERROR_OK))
			{
				ErrRetVal = OperationSuccess;
				State = OperationStarted;
			}
			break;
     85a:	00 00       	nop
			ErrRetVal = OperationFail;
			break;
	}
	#endif
	/*return from function*/
	return ErrRetVal;
     85c:	89 81       	ldd	r24, Y+1	; 0x01
}
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <LCD_SendData>:
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	00 d0       	rcall	.+0      	; 0x870 <LCD_SendData+0x6>
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	8a 83       	std	Y+2, r24	; 0x02
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     876:	8f ef       	ldi	r24, 0xFF	; 255
     878:	89 83       	std	Y+1, r24	; 0x01
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	#else
	switch (State)
     87a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <State.1749>
     87e:	88 2f       	mov	r24, r24
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	84 31       	cpi	r24, 0x14	; 20
     884:	91 05       	cpc	r25, r1
     886:	09 f4       	brne	.+2      	; 0x88a <LCD_SendData+0x20>
     888:	b2 c0       	rjmp	.+356    	; 0x9ee <LCD_SendData+0x184>
     88a:	8f 3f       	cpi	r24, 0xFF	; 255
     88c:	91 05       	cpc	r25, r1
     88e:	09 f0       	breq	.+2      	; 0x892 <LCD_SendData+0x28>
     890:	d3 c0       	rjmp	.+422    	; 0xa38 <LCD_SendData+0x1ce>
	{
		case OperationStarted:
			/*sending control signals with configurations of selection of control reg. and write process*/
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     892:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <gastr_LCD_8_Config+0x2>
     896:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <gastr_LCD_8_Config>
     89a:	41 e0       	ldi	r20, 0x01	; 1
     89c:	69 2f       	mov	r22, r25
     89e:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     8a2:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <gastr_LCD_8_Config+0x3>
     8a6:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <gastr_LCD_8_Config>
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	69 2f       	mov	r22, r25
     8ae:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			/*Setting the lcd pins*/
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0,READ_BIT(Character,BIT_0));
     8b2:	8a 81       	ldd	r24, Y+2	; 0x02
     8b4:	28 2f       	mov	r18, r24
     8b6:	21 70       	andi	r18, 0x01	; 1
     8b8:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <gastr_LCD_8_Config+0xc>
     8bc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     8c0:	42 2f       	mov	r20, r18
     8c2:	69 2f       	mov	r22, r25
     8c4:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1,READ_BIT(Character,BIT_1));
     8c8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ca:	88 2f       	mov	r24, r24
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	82 70       	andi	r24, 0x02	; 2
     8d0:	99 27       	eor	r25, r25
     8d2:	95 95       	asr	r25
     8d4:	87 95       	ror	r24
     8d6:	28 2f       	mov	r18, r24
     8d8:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <gastr_LCD_8_Config+0xb>
     8dc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     8e0:	42 2f       	mov	r20, r18
     8e2:	69 2f       	mov	r22, r25
     8e4:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2,READ_BIT(Character,BIT_2));
     8e8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ea:	88 2f       	mov	r24, r24
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	84 70       	andi	r24, 0x04	; 4
     8f0:	99 27       	eor	r25, r25
     8f2:	95 95       	asr	r25
     8f4:	87 95       	ror	r24
     8f6:	95 95       	asr	r25
     8f8:	87 95       	ror	r24
     8fa:	28 2f       	mov	r18, r24
     8fc:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <gastr_LCD_8_Config+0xa>
     900:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     904:	42 2f       	mov	r20, r18
     906:	69 2f       	mov	r22, r25
     908:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3,READ_BIT(Character,BIT_3));
     90c:	8a 81       	ldd	r24, Y+2	; 0x02
     90e:	88 2f       	mov	r24, r24
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	88 70       	andi	r24, 0x08	; 8
     914:	99 27       	eor	r25, r25
     916:	95 95       	asr	r25
     918:	87 95       	ror	r24
     91a:	95 95       	asr	r25
     91c:	87 95       	ror	r24
     91e:	95 95       	asr	r25
     920:	87 95       	ror	r24
     922:	28 2f       	mov	r18, r24
     924:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <gastr_LCD_8_Config+0x9>
     928:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     92c:	42 2f       	mov	r20, r18
     92e:	69 2f       	mov	r22, r25
     930:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(Character,BIT_4));
     934:	8a 81       	ldd	r24, Y+2	; 0x02
     936:	88 2f       	mov	r24, r24
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	80 71       	andi	r24, 0x10	; 16
     93c:	99 27       	eor	r25, r25
     93e:	95 95       	asr	r25
     940:	87 95       	ror	r24
     942:	95 95       	asr	r25
     944:	87 95       	ror	r24
     946:	95 95       	asr	r25
     948:	87 95       	ror	r24
     94a:	95 95       	asr	r25
     94c:	87 95       	ror	r24
     94e:	28 2f       	mov	r18, r24
     950:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <gastr_LCD_8_Config+0x8>
     954:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     958:	42 2f       	mov	r20, r18
     95a:	69 2f       	mov	r22, r25
     95c:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(Character,BIT_5));
     960:	8a 81       	ldd	r24, Y+2	; 0x02
     962:	88 2f       	mov	r24, r24
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	80 72       	andi	r24, 0x20	; 32
     968:	99 27       	eor	r25, r25
     96a:	95 95       	asr	r25
     96c:	87 95       	ror	r24
     96e:	95 95       	asr	r25
     970:	87 95       	ror	r24
     972:	95 95       	asr	r25
     974:	87 95       	ror	r24
     976:	95 95       	asr	r25
     978:	87 95       	ror	r24
     97a:	95 95       	asr	r25
     97c:	87 95       	ror	r24
     97e:	28 2f       	mov	r18, r24
     980:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <gastr_LCD_8_Config+0x7>
     984:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     988:	42 2f       	mov	r20, r18
     98a:	69 2f       	mov	r22, r25
     98c:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(Character,BIT_6));
     990:	8a 81       	ldd	r24, Y+2	; 0x02
     992:	88 2f       	mov	r24, r24
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	80 74       	andi	r24, 0x40	; 64
     998:	99 27       	eor	r25, r25
     99a:	08 2e       	mov	r0, r24
     99c:	89 2f       	mov	r24, r25
     99e:	00 0c       	add	r0, r0
     9a0:	88 1f       	adc	r24, r24
     9a2:	99 0b       	sbc	r25, r25
     9a4:	00 0c       	add	r0, r0
     9a6:	88 1f       	adc	r24, r24
     9a8:	99 1f       	adc	r25, r25
     9aa:	28 2f       	mov	r18, r24
     9ac:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <gastr_LCD_8_Config+0x6>
     9b0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     9b4:	42 2f       	mov	r20, r18
     9b6:	69 2f       	mov	r22, r25
     9b8:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(Character,BIT_7));
     9bc:	8a 81       	ldd	r24, Y+2	; 0x02
     9be:	28 2f       	mov	r18, r24
     9c0:	22 1f       	adc	r18, r18
     9c2:	22 27       	eor	r18, r18
     9c4:	22 1f       	adc	r18, r18
     9c6:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <gastr_LCD_8_Config+0x5>
     9ca:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     9ce:	42 2f       	mov	r20, r18
     9d0:	69 2f       	mov	r22, r25
     9d2:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			/*writing data to the register by pulling the enable pin high for 1 Us*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     9d6:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <gastr_LCD_Config+0x3>
     9da:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <gastr_LCD_Config>
     9de:	41 e0       	ldi	r20, 0x01	; 1
     9e0:	69 2f       	mov	r22, r25
     9e2:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
			State = CMD_Sending;
     9e6:	84 e1       	ldi	r24, 0x14	; 20
     9e8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1749>
			break;
     9ec:	29 c0       	rjmp	.+82     	; 0xa40 <LCD_SendData+0x1d6>
		case CMD_Sending:
			/*start timer delay in background*/
			if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendData))
     9ee:	65 e3       	ldi	r22, 0x35	; 53
     9f0:	74 e0       	ldi	r23, 0x04	; 4
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <TIM_DelayStatus>
     9f8:	8b 3f       	cpi	r24, 0xFB	; 251
     9fa:	09 f5       	brne	.+66     	; 0xa3e <LCD_SendData+0x1d4>
			{
				TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendData);
     9fc:	25 e3       	ldi	r18, 0x35	; 53
     9fe:	34 e0       	ldi	r19, 0x04	; 4
     a00:	41 e0       	ldi	r20, 0x01	; 1
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <TIM_DelayUs>
				while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendData));
     a0e:	00 00       	nop
     a10:	65 e3       	ldi	r22, 0x35	; 53
     a12:	74 e0       	ldi	r23, 0x04	; 4
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <TIM_DelayStatus>
     a1a:	88 23       	and	r24, r24
     a1c:	c9 f7       	brne	.-14     	; 0xa10 <LCD_SendData+0x1a6>
				/*if timer delay function finished correctly pull enable pin low*/
				DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     a1e:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <gastr_LCD_Config+0x3>
     a22:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <gastr_LCD_Config>
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	69 2f       	mov	r22, r25
     a2a:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
				/*reset the function's state*/
				State = OperationStarted;
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1749>
				/*process finished successfully*/
				ErrRetVal = OperationSuccess;
     a34:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     a36:	03 c0       	rjmp	.+6      	; 0xa3e <LCD_SendData+0x1d4>
		default:
		ErrRetVal = OperationFail;
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	89 83       	std	Y+1, r24	; 0x01
		break;
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <LCD_SendData+0x1d6>
				/*reset the function's state*/
				State = OperationStarted;
				/*process finished successfully*/
				ErrRetVal = OperationSuccess;
			}
			break;
     a3e:	00 00       	nop
		ErrRetVal = OperationFail;
		break;
	}
	#endif
	/*return from function*/
	return ErrRetVal;
     a40:	89 81       	ldd	r24, Y+1	; 0x01

}
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	08 95       	ret

00000a4c <LCD_Init>:
ERROR_STATE_t LCD_Init()
{
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	00 d0       	rcall	.+0      	; 0xa52 <LCD_Init+0x6>
     a52:	1f 92       	push	r1
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a58:	8f ef       	ldi	r24, 0xFF	; 255
     a5a:	89 83       	std	Y+1, r24	; 0x01
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t LCD_SendCommandRetVal = OperationStarted;
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	8b 83       	std	Y+3, r24	; 0x03
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	#else
	/*Starting the initialization sequence*/
	switch(State)
     a64:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <State.1763>
     a68:	88 2f       	mov	r24, r24
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	8b 30       	cpi	r24, 0x0B	; 11
     a6e:	91 05       	cpc	r25, r1
     a70:	09 f4       	brne	.+2      	; 0xa74 <LCD_Init+0x28>
     a72:	19 c1       	rjmp	.+562    	; 0xca6 <LCD_Init+0x25a>
     a74:	8c 30       	cpi	r24, 0x0C	; 12
     a76:	91 05       	cpc	r25, r1
     a78:	bc f4       	brge	.+46     	; 0xaa8 <LCD_Init+0x5c>
     a7a:	88 30       	cpi	r24, 0x08	; 8
     a7c:	91 05       	cpc	r25, r1
     a7e:	09 f4       	brne	.+2      	; 0xa82 <LCD_Init+0x36>
     a80:	ee c0       	rjmp	.+476    	; 0xc5e <LCD_Init+0x212>
     a82:	89 30       	cpi	r24, 0x09	; 9
     a84:	91 05       	cpc	r25, r1
     a86:	44 f4       	brge	.+16     	; 0xa98 <LCD_Init+0x4c>
     a88:	85 30       	cpi	r24, 0x05	; 5
     a8a:	91 05       	cpc	r25, r1
     a8c:	09 f4       	brne	.+2      	; 0xa90 <LCD_Init+0x44>
     a8e:	c1 c0       	rjmp	.+386    	; 0xc12 <LCD_Init+0x1c6>
     a90:	06 97       	sbiw	r24, 0x06	; 6
     a92:	09 f4       	brne	.+2      	; 0xa96 <LCD_Init+0x4a>
     a94:	d8 c0       	rjmp	.+432    	; 0xc46 <LCD_Init+0x1fa>
     a96:	40 c1       	rjmp	.+640    	; 0xd18 <LCD_Init+0x2cc>
     a98:	89 30       	cpi	r24, 0x09	; 9
     a9a:	91 05       	cpc	r25, r1
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <LCD_Init+0x54>
     a9e:	eb c0       	rjmp	.+470    	; 0xc76 <LCD_Init+0x22a>
     aa0:	0a 97       	sbiw	r24, 0x0a	; 10
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <LCD_Init+0x5a>
     aa4:	f4 c0       	rjmp	.+488    	; 0xc8e <LCD_Init+0x242>
     aa6:	38 c1       	rjmp	.+624    	; 0xd18 <LCD_Init+0x2cc>
     aa8:	8e 30       	cpi	r24, 0x0E	; 14
     aaa:	91 05       	cpc	r25, r1
     aac:	09 f4       	brne	.+2      	; 0xab0 <LCD_Init+0x64>
     aae:	1d c1       	rjmp	.+570    	; 0xcea <LCD_Init+0x29e>
     ab0:	8f 30       	cpi	r24, 0x0F	; 15
     ab2:	91 05       	cpc	r25, r1
     ab4:	44 f4       	brge	.+16     	; 0xac6 <LCD_Init+0x7a>
     ab6:	8c 30       	cpi	r24, 0x0C	; 12
     ab8:	91 05       	cpc	r25, r1
     aba:	09 f4       	brne	.+2      	; 0xabe <LCD_Init+0x72>
     abc:	00 c1       	rjmp	.+512    	; 0xcbe <LCD_Init+0x272>
     abe:	0d 97       	sbiw	r24, 0x0d	; 13
     ac0:	09 f4       	brne	.+2      	; 0xac4 <LCD_Init+0x78>
     ac2:	08 c1       	rjmp	.+528    	; 0xcd4 <LCD_Init+0x288>
     ac4:	29 c1       	rjmp	.+594    	; 0xd18 <LCD_Init+0x2cc>
     ac6:	8f 30       	cpi	r24, 0x0F	; 15
     ac8:	91 05       	cpc	r25, r1
     aca:	09 f4       	brne	.+2      	; 0xace <LCD_Init+0x82>
     acc:	19 c1       	rjmp	.+562    	; 0xd00 <LCD_Init+0x2b4>
     ace:	8f 3f       	cpi	r24, 0xFF	; 255
     ad0:	91 05       	cpc	r25, r1
     ad2:	09 f0       	breq	.+2      	; 0xad6 <LCD_Init+0x8a>
     ad4:	21 c1       	rjmp	.+578    	; 0xd18 <LCD_Init+0x2cc>
	{
		case OperationStarted:
		/*Initialize timer2*/
		TIM_Init(TIMER_2);
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	0e 94 57 0a 	call	0x14ae	; 0x14ae <TIM_Init>
		/*Initializing the LCD Data Pins*/
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     adc:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <gastr_LCD_8_Config+0x5>
     ae0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     ae4:	41 e0       	ldi	r20, 0x01	; 1
     ae6:	69 2f       	mov	r22, r25
     ae8:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     aec:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <gastr_LCD_8_Config+0x6>
     af0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     af4:	41 e0       	ldi	r20, 0x01	; 1
     af6:	69 2f       	mov	r22, r25
     af8:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     afc:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <gastr_LCD_8_Config+0x7>
     b00:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	69 2f       	mov	r22, r25
     b08:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     b0c:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <gastr_LCD_8_Config+0x8>
     b10:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     b14:	41 e0       	ldi	r20, 0x01	; 1
     b16:	69 2f       	mov	r22, r25
     b18:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3, PIN_OUTPUT);
     b1c:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <gastr_LCD_8_Config+0x9>
     b20:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     b24:	41 e0       	ldi	r20, 0x01	; 1
     b26:	69 2f       	mov	r22, r25
     b28:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2, PIN_OUTPUT);
     b2c:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <gastr_LCD_8_Config+0xa>
     b30:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     b34:	41 e0       	ldi	r20, 0x01	; 1
     b36:	69 2f       	mov	r22, r25
     b38:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1, PIN_OUTPUT);
     b3c:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <gastr_LCD_8_Config+0xb>
     b40:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     b44:	41 e0       	ldi	r20, 0x01	; 1
     b46:	69 2f       	mov	r22, r25
     b48:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0, PIN_OUTPUT);
     b4c:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <gastr_LCD_8_Config+0xc>
     b50:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	69 2f       	mov	r22, r25
     b58:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_SetPinDirection>
		/*Initializing the LCD CTRL Pins*/
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     b5c:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <gastr_LCD_8_Config+0x2>
     b60:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <gastr_LCD_8_Config>
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	69 2f       	mov	r22, r25
     b68:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     b6c:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <gastr_LCD_8_Config+0x3>
     b70:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <gastr_LCD_8_Config>
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	69 2f       	mov	r22, r25
     b78:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     b7c:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <gastr_LCD_8_Config+0x4>
     b80:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <gastr_LCD_8_Config>
     b84:	41 e0       	ldi	r20, 0x01	; 1
     b86:	69 2f       	mov	r22, r25
     b88:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
     b8c:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <gastr_LCD_8_Config+0x5>
     b90:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	69 2f       	mov	r22, r25
     b98:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
     b9c:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <gastr_LCD_8_Config+0x6>
     ba0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	69 2f       	mov	r22, r25
     ba8:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
     bac:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <gastr_LCD_8_Config+0x7>
     bb0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	69 2f       	mov	r22, r25
     bb8:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
     bbc:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <gastr_LCD_8_Config+0x8>
     bc0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	69 2f       	mov	r22, r25
     bc8:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3, PIN_LOW);
     bcc:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <gastr_LCD_8_Config+0x9>
     bd0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	69 2f       	mov	r22, r25
     bd8:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2, PIN_LOW);
     bdc:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <gastr_LCD_8_Config+0xa>
     be0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	69 2f       	mov	r22, r25
     be8:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1, PIN_LOW);
     bec:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <gastr_LCD_8_Config+0xb>
     bf0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	69 2f       	mov	r22, r25
     bf8:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0, PIN_LOW);
     bfc:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <gastr_LCD_8_Config+0xc>
     c00:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <gastr_LCD_8_Config+0x1>
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	69 2f       	mov	r22, r25
     c08:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_WritePin>
		State = LCD_Pin_Initializing;
     c0c:	85 e0       	ldi	r24, 0x05	; 5
     c0e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
     c12:	62 e2       	ldi	r22, 0x22	; 34
     c14:	73 e0       	ldi	r23, 0x03	; 3
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <TIM_DelayStatus>
     c1c:	8a 83       	std	Y+2, r24	; 0x02
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	8b 3f       	cpi	r24, 0xFB	; 251
     c22:	49 f4       	brne	.+18     	; 0xc36 <LCD_Init+0x1ea>
		{
			TIM_DelayMs(TIMER_2,15, (void (*)(void))LCD_SendCommand);
     c24:	22 e2       	ldi	r18, 0x22	; 34
     c26:	33 e0       	ldi	r19, 0x03	; 3
     c28:	4f e0       	ldi	r20, 0x0F	; 15
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <TIM_DelayMs>
		}
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	88 23       	and	r24, r24
     c3a:	09 f0       	breq	.+2      	; 0xc3e <LCD_Init+0x1f2>
     c3c:	70 c0       	rjmp	.+224    	; 0xd1e <LCD_Init+0x2d2>
		{
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
     c3e:	86 e0       	ldi	r24, 0x06	; 6
     c40:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     c44:	6c c0       	rjmp	.+216    	; 0xd1e <LCD_Init+0x2d2>
		case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     c46:	80 e3       	ldi	r24, 0x30	; 48
     c48:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
     c4c:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	88 23       	and	r24, r24
     c52:	09 f0       	breq	.+2      	; 0xc56 <LCD_Init+0x20a>
     c54:	66 c0       	rjmp	.+204    	; 0xd22 <LCD_Init+0x2d6>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     c56:	88 e0       	ldi	r24, 0x08	; 8
     c58:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     c5c:	62 c0       	rjmp	.+196    	; 0xd22 <LCD_Init+0x2d6>
		case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     c5e:	80 e3       	ldi	r24, 0x30	; 48
     c60:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
     c64:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	88 23       	and	r24, r24
     c6a:	09 f0       	breq	.+2      	; 0xc6e <LCD_Init+0x222>
     c6c:	5c c0       	rjmp	.+184    	; 0xd26 <LCD_Init+0x2da>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     c6e:	89 e0       	ldi	r24, 0x09	; 9
     c70:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     c74:	58 c0       	rjmp	.+176    	; 0xd26 <LCD_Init+0x2da>
		case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     c76:	80 e3       	ldi	r24, 0x30	; 48
     c78:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
     c7c:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	88 23       	and	r24, r24
     c82:	09 f0       	breq	.+2      	; 0xc86 <LCD_Init+0x23a>
     c84:	52 c0       	rjmp	.+164    	; 0xd2a <LCD_Init+0x2de>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     c86:	8a e0       	ldi	r24, 0x0A	; 10
     c88:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     c8c:	4e c0       	rjmp	.+156    	; 0xd2a <LCD_Init+0x2de>
		case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_3);//LCD_HOME
     c8e:	88 e3       	ldi	r24, 0x38	; 56
     c90:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
     c94:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	88 23       	and	r24, r24
     c9a:	09 f0       	breq	.+2      	; 0xc9e <LCD_Init+0x252>
     c9c:	48 c0       	rjmp	.+144    	; 0xd2e <LCD_Init+0x2e2>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     c9e:	8b e0       	ldi	r24, 0x0B	; 11
     ca0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     ca4:	44 c0       	rjmp	.+136    	; 0xd2e <LCD_Init+0x2e2>
		case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
     ca6:	8c e0       	ldi	r24, 0x0C	; 12
     ca8:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
     cac:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	88 23       	and	r24, r24
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <LCD_Init+0x26a>
     cb4:	3e c0       	rjmp	.+124    	; 0xd32 <LCD_Init+0x2e6>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     cb6:	8c e0       	ldi	r24, 0x0C	; 12
     cb8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     cbc:	3a c0       	rjmp	.+116    	; 0xd32 <LCD_Init+0x2e6>
		case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);//LCD_INCREMENTENTRYMODE/LCD_SHIFTINCREMENTENTRYMODE
     cbe:	86 e0       	ldi	r24, 0x06	; 6
     cc0:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
     cc4:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	88 23       	and	r24, r24
     cca:	a9 f5       	brne	.+106    	; 0xd36 <LCD_Init+0x2ea>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     ccc:	8d e0       	ldi	r24, 0x0D	; 13
     cce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     cd2:	31 c0       	rjmp	.+98     	; 0xd36 <LCD_Init+0x2ea>
		case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
     cda:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	88 23       	and	r24, r24
     ce0:	61 f5       	brne	.+88     	; 0xd3a <LCD_Init+0x2ee>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     ce2:	8e e0       	ldi	r24, 0x0E	; 14
     ce4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     ce8:	28 c0       	rjmp	.+80     	; 0xd3a <LCD_Init+0x2ee>
		case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     cea:	80 e8       	ldi	r24, 0x80	; 128
     cec:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
     cf0:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	88 23       	and	r24, r24
     cf6:	19 f5       	brne	.+70     	; 0xd3e <LCD_Init+0x2f2>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     cf8:	8f e0       	ldi	r24, 0x0F	; 15
     cfa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
		}
		break;
     cfe:	1f c0       	rjmp	.+62     	; 0xd3e <LCD_Init+0x2f2>
		case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     d00:	80 e8       	ldi	r24, 0x80	; 128
     d02:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
     d06:	8b 83       	std	Y+3, r24	; 0x03
		if(LCD_SendCommandRetVal == OperationSuccess)
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	88 23       	and	r24, r24
     d0c:	d1 f4       	brne	.+52     	; 0xd42 <LCD_Init+0x2f6>
		{
			State = OperationStarted;
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
     d10:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1763>
			ErrRetVal = OperationSuccess;
     d14:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
     d16:	15 c0       	rjmp	.+42     	; 0xd42 <LCD_Init+0x2f6>
		default:
		ErrRetVal = OperationFail;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	89 83       	std	Y+1, r24	; 0x01
		break;
     d1c:	13 c0       	rjmp	.+38     	; 0xd44 <LCD_Init+0x2f8>
		if(TimerRetVal == ((uint8_t)ERROR_OK))
		{
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
     d1e:	00 00       	nop
     d20:	11 c0       	rjmp	.+34     	; 0xd44 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d22:	00 00       	nop
     d24:	0f c0       	rjmp	.+30     	; 0xd44 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d26:	00 00       	nop
     d28:	0d c0       	rjmp	.+26     	; 0xd44 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d2a:	00 00       	nop
     d2c:	0b c0       	rjmp	.+22     	; 0xd44 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_3);//LCD_HOME
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d2e:	00 00       	nop
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d32:	00 00       	nop
     d34:	07 c0       	rjmp	.+14     	; 0xd44 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);//LCD_INCREMENTENTRYMODE/LCD_SHIFTINCREMENTENTRYMODE
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d36:	00 00       	nop
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d3a:	00 00       	nop
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <LCD_Init+0x2f8>
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
     d3e:	00 00       	nop
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <LCD_Init+0x2f8>
		if(LCD_SendCommandRetVal == OperationSuccess)
		{
			State = OperationStarted;
			ErrRetVal = OperationSuccess;
		}
		break;
     d42:	00 00       	nop
		default:
		ErrRetVal = OperationFail;
		break;
	}
	#endif
	return ErrRetVal;
     d44:	89 81       	ldd	r24, Y+1	; 0x01
}
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	08 95       	ret

00000d52 <LCD_SendString>:
ERROR_STATE_t LCD_SendString(const uint8_t* String)
{
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	00 d0       	rcall	.+0      	; 0xd58 <LCD_SendString+0x6>
     d58:	00 d0       	rcall	.+0      	; 0xd5a <LCD_SendString+0x8>
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	89 83       	std	Y+1, r24	; 0x01
	uint8_t LCD_SendDataRetVal = OperationStarted;
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	8a 83       	std	Y+2, r24	; 0x02
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	89 2b       	or	r24, r25
     d70:	41 f1       	breq	.+80     	; 0xdc2 <LCD_SendString+0x70>
		if (String[Number] != NULL_TERMINATOR ) {
     d72:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Number.1786>
     d76:	88 2f       	mov	r24, r24
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	2b 81       	ldd	r18, Y+3	; 0x03
     d7c:	3c 81       	ldd	r19, Y+4	; 0x04
     d7e:	82 0f       	add	r24, r18
     d80:	93 1f       	adc	r25, r19
     d82:	fc 01       	movw	r30, r24
     d84:	80 81       	ld	r24, Z
     d86:	88 23       	and	r24, r24
     d88:	c1 f0       	breq	.+48     	; 0xdba <LCD_SendString+0x68>
			ErrRetVal = OperationRunning;
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	89 83       	std	Y+1, r24	; 0x01
			LCD_SendDataRetVal = LCD_SendData(String[Number]);
     d8e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Number.1786>
     d92:	88 2f       	mov	r24, r24
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	2b 81       	ldd	r18, Y+3	; 0x03
     d98:	3c 81       	ldd	r19, Y+4	; 0x04
     d9a:	82 0f       	add	r24, r18
     d9c:	93 1f       	adc	r25, r19
     d9e:	fc 01       	movw	r30, r24
     da0:	80 81       	ld	r24, Z
     da2:	0e 94 35 04 	call	0x86a	; 0x86a <LCD_SendData>
     da6:	8a 83       	std	Y+2, r24	; 0x02
			if(LCD_SendDataRetVal == OperationSuccess)
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	88 23       	and	r24, r24
     dac:	61 f4       	brne	.+24     	; 0xdc6 <LCD_SendString+0x74>
			{
				Number++;
     dae:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Number.1786>
     db2:	8f 5f       	subi	r24, 0xFF	; 255
     db4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Number.1786>
     db8:	06 c0       	rjmp	.+12     	; 0xdc6 <LCD_SendString+0x74>
			}
		}
		else
		{
			Number = 0;
     dba:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <Number.1786>
			ErrRetVal = OperationSuccess;
     dbe:	19 82       	std	Y+1, r1	; 0x01
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <LCD_SendString+0x74>
		}
	} else {
		ErrRetVal = OperationFail;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
}
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	08 95       	ret

00000dd6 <LCD_SendNumber>:
/*urgent a blocking function*/
ERROR_STATE_t LCD_SendNumber(uint32_t Number)
{
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	60 97       	sbiw	r28, 0x10	; 16
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	6d 87       	std	Y+13, r22	; 0x0d
     dec:	7e 87       	std	Y+14, r23	; 0x0e
     dee:	8f 87       	std	Y+15, r24	; 0x0f
     df0:	98 8b       	std	Y+16, r25	; 0x10
	uint8_t ErrRetVal = OperationStarted;
     df2:	8f ef       	ldi	r24, 0xFF	; 255
     df4:	89 83       	std	Y+1, r24	; 0x01
	uint8_t FunRetVal = OperationStarted;
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t String[10];
	STR_Number2String((uint32_t)Number,String);
     dfa:	9e 01       	movw	r18, r28
     dfc:	2d 5f       	subi	r18, 0xFD	; 253
     dfe:	3f 4f       	sbci	r19, 0xFF	; 255
     e00:	8d 85       	ldd	r24, Y+13	; 0x0d
     e02:	9e 85       	ldd	r25, Y+14	; 0x0e
     e04:	af 85       	ldd	r26, Y+15	; 0x0f
     e06:	b8 89       	ldd	r27, Y+16	; 0x10
     e08:	a9 01       	movw	r20, r18
     e0a:	bc 01       	movw	r22, r24
     e0c:	cd 01       	movw	r24, r26
     e0e:	0e 94 23 07 	call	0xe46	; 0xe46 <STR_Number2String>
	while(FunRetVal != OperationSuccess)
     e12:	0c c0       	rjmp	.+24     	; 0xe2c <LCD_SendNumber+0x56>
   {
      FunRetVal = LCD_SendString((uint8_t*)String);
     e14:	ce 01       	movw	r24, r28
     e16:	03 96       	adiw	r24, 0x03	; 3
     e18:	0e 94 a9 06 	call	0xd52	; 0xd52 <LCD_SendString>
     e1c:	8a 83       	std	Y+2, r24	; 0x02
      if(FunRetVal == OperationSuccess)
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	88 23       	and	r24, r24
     e22:	11 f4       	brne	.+4      	; 0xe28 <LCD_SendNumber+0x52>
      {
         ErrRetVal = OperationSuccess;
     e24:	19 82       	std	Y+1, r1	; 0x01
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <LCD_SendNumber+0x56>
      }
      else
      {
         ErrRetVal = OperationFail;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	89 83       	std	Y+1, r24	; 0x01
{
	uint8_t ErrRetVal = OperationStarted;
	uint8_t FunRetVal = OperationStarted;
	uint8_t String[10];
	STR_Number2String((uint32_t)Number,String);
	while(FunRetVal != OperationSuccess)
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	88 23       	and	r24, r24
     e30:	89 f7       	brne	.-30     	; 0xe14 <LCD_SendNumber+0x3e>
      else
      {
         ErrRetVal = OperationFail;
      }
   }
	return ErrRetVal;
     e32:	89 81       	ldd	r24, Y+1	; 0x01
}
     e34:	60 96       	adiw	r28, 0x10	; 16
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <STR_Number2String>:
		Multiplier*=10;
	}while(String!=StartOfString);
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	28 97       	sbiw	r28, 0x08	; 8
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	6b 83       	std	Y+3, r22	; 0x03
     e5c:	7c 83       	std	Y+4, r23	; 0x04
     e5e:	8d 83       	std	Y+5, r24	; 0x05
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	58 87       	std	Y+8, r21	; 0x08
     e64:	4f 83       	std	Y+7, r20	; 0x07
	uint8_t* SringCpy = String;
     e66:	8f 81       	ldd	r24, Y+7	; 0x07
     e68:	98 85       	ldd	r25, Y+8	; 0x08
     e6a:	9a 83       	std	Y+2, r25	; 0x02
     e6c:	89 83       	std	Y+1, r24	; 0x01
	if(Number==0)
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	ad 81       	ldd	r26, Y+5	; 0x05
     e74:	be 81       	ldd	r27, Y+6	; 0x06
     e76:	89 2b       	or	r24, r25
     e78:	8a 2b       	or	r24, r26
     e7a:	8b 2b       	or	r24, r27
     e7c:	31 f4       	brne	.+12     	; 0xe8a <STR_Number2String+0x44>
	{
		*String='0';
     e7e:	8f 81       	ldd	r24, Y+7	; 0x07
     e80:	98 85       	ldd	r25, Y+8	; 0x08
     e82:	20 e3       	ldi	r18, 0x30	; 48
     e84:	fc 01       	movw	r30, r24
     e86:	20 83       	st	Z, r18
     e88:	37 c0       	rjmp	.+110    	; 0xef8 <STR_Number2String+0xb2>
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	9c 81       	ldd	r25, Y+4	; 0x04
     e8e:	ad 81       	ldd	r26, Y+5	; 0x05
     e90:	be 81       	ldd	r27, Y+6	; 0x06
     e92:	2a e0       	ldi	r18, 0x0A	; 10
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e0       	ldi	r20, 0x00	; 0
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	bc 01       	movw	r22, r24
     e9c:	cd 01       	movw	r24, r26
     e9e:	0e 94 31 12 	call	0x2462	; 0x2462 <__udivmodsi4>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	20 e3       	ldi	r18, 0x30	; 48
     ea8:	28 0f       	add	r18, r24
     eaa:	8f 81       	ldd	r24, Y+7	; 0x07
     eac:	98 85       	ldd	r25, Y+8	; 0x08
     eae:	fc 01       	movw	r30, r24
     eb0:	20 83       	st	Z, r18
			String++;
     eb2:	8f 81       	ldd	r24, Y+7	; 0x07
     eb4:	98 85       	ldd	r25, Y+8	; 0x08
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	98 87       	std	Y+8, r25	; 0x08
     eba:	8f 83       	std	Y+7, r24	; 0x07
			Number/=10;
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	9c 81       	ldd	r25, Y+4	; 0x04
     ec0:	ad 81       	ldd	r26, Y+5	; 0x05
     ec2:	be 81       	ldd	r27, Y+6	; 0x06
     ec4:	2a e0       	ldi	r18, 0x0A	; 10
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	bc 01       	movw	r22, r24
     ece:	cd 01       	movw	r24, r26
     ed0:	0e 94 31 12 	call	0x2462	; 0x2462 <__udivmodsi4>
     ed4:	da 01       	movw	r26, r20
     ed6:	c9 01       	movw	r24, r18
     ed8:	8b 83       	std	Y+3, r24	; 0x03
     eda:	9c 83       	std	Y+4, r25	; 0x04
     edc:	ad 83       	std	Y+5, r26	; 0x05
     ede:	be 83       	std	Y+6, r27	; 0x06
		}while(Number);
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	ad 81       	ldd	r26, Y+5	; 0x05
     ee6:	be 81       	ldd	r27, Y+6	; 0x06
     ee8:	89 2b       	or	r24, r25
     eea:	8a 2b       	or	r24, r26
     eec:	8b 2b       	or	r24, r27
     eee:	69 f6       	brne	.-102    	; 0xe8a <STR_Number2String+0x44>
		*String = NULL_TERMINATOR;
     ef0:	8f 81       	ldd	r24, Y+7	; 0x07
     ef2:	98 85       	ldd	r25, Y+8	; 0x08
     ef4:	fc 01       	movw	r30, r24
     ef6:	10 82       	st	Z, r1
	}
	STR_StringReverse(SringCpy);
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	0e 94 8a 07 	call	0xf14	; 0xf14 <STR_StringReverse>
	return 0;
     f00:	80 e0       	ldi	r24, 0x00	; 0
}
     f02:	28 96       	adiw	r28, 0x08	; 8
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <STR_StringReverse>:
uint8_t STR_StringReverse(uint8_t* String)
{
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	27 97       	sbiw	r28, 0x07	; 7
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	9f 83       	std	Y+7, r25	; 0x07
     f2a:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t* A = String;
     f2c:	8e 81       	ldd	r24, Y+6	; 0x06
     f2e:	9f 81       	ldd	r25, Y+7	; 0x07
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
	uint8_t* B = String;
     f34:	8e 81       	ldd	r24, Y+6	; 0x06
     f36:	9f 81       	ldd	r25, Y+7	; 0x07
     f38:	9c 83       	std	Y+4, r25	; 0x04
     f3a:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t Temp = 0;
     f3c:	1d 82       	std	Y+5, r1	; 0x05
	while(*B != '\0')
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <STR_StringReverse+0x36>
	{
		B++;
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	9c 83       	std	Y+4, r25	; 0x04
     f48:	8b 83       	std	Y+3, r24	; 0x03
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	fc 01       	movw	r30, r24
     f50:	80 81       	ld	r24, Z
     f52:	88 23       	and	r24, r24
     f54:	a9 f7       	brne	.-22     	; 0xf40 <STR_StringReverse+0x2c>
	{
		B++;
	}
	B--;
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	9c 83       	std	Y+4, r25	; 0x04
     f5e:	8b 83       	std	Y+3, r24	; 0x03
	while(A<B)
     f60:	1c c0       	rjmp	.+56     	; 0xf9a <STR_StringReverse+0x86>
	{
		//swap
		Temp=*A;
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	fc 01       	movw	r30, r24
     f68:	80 81       	ld	r24, Z
     f6a:	8d 83       	std	Y+5, r24	; 0x05
		*A=*B;
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	fc 01       	movw	r30, r24
     f72:	20 81       	ld	r18, Z
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	9a 81       	ldd	r25, Y+2	; 0x02
     f78:	fc 01       	movw	r30, r24
     f7a:	20 83       	st	Z, r18
		*B=Temp;
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	9c 81       	ldd	r25, Y+4	; 0x04
     f80:	2d 81       	ldd	r18, Y+5	; 0x05
     f82:	fc 01       	movw	r30, r24
     f84:	20 83       	st	Z, r18
		A++;B--;
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	9c 83       	std	Y+4, r25	; 0x04
     f98:	8b 83       	std	Y+3, r24	; 0x03
	while(*B != '\0')
	{
		B++;
	}
	B--;
	while(A<B)
     f9a:	29 81       	ldd	r18, Y+1	; 0x01
     f9c:	3a 81       	ldd	r19, Y+2	; 0x02
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	28 17       	cp	r18, r24
     fa4:	39 07       	cpc	r19, r25
     fa6:	e8 f2       	brcs	.-70     	; 0xf62 <STR_StringReverse+0x4e>
		Temp=*A;
		*A=*B;
		*B=Temp;
		A++;B--;
	}
	return 0;
     fa8:	80 e0       	ldi	r24, 0x00	; 0
}
     faa:	27 96       	adiw	r28, 0x07	; 7
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <DIO_SetPinDirection>:

#include "MC_REGISTERS.h"
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <DIO_SetPinDirection+0x6>
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <DIO_SetPinDirection+0x8>
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	8a 83       	std	Y+2, r24	; 0x02
     fca:	6b 83       	std	Y+3, r22	; 0x03
     fcc:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState=ERROR_OK;
     fce:	19 82       	std	Y+1, r1	; 0x01
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	88 23       	and	r24, r24
     fd4:	31 f0       	breq	.+12     	; 0xfe2 <DIO_SetPinDirection+0x26>
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	19 f0       	breq	.+6      	; 0xfe2 <DIO_SetPinDirection+0x26>
	{
		u8_ErrorState=ERROR_NOK;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	a9 c0       	rjmp	.+338    	; 0x1134 <DIO_SetPinDirection+0x178>
	}
	else if(PinNo>PIN7)
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	88 30       	cpi	r24, 0x08	; 8
     fe6:	18 f0       	brcs	.+6      	; 0xfee <DIO_SetPinDirection+0x32>
	{
		u8_ErrorState=ERROR_NOK;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	a3 c0       	rjmp	.+326    	; 0x1134 <DIO_SetPinDirection+0x178>
	}
	else
	{
		switch(PortName)
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	88 2f       	mov	r24, r24
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	91 05       	cpc	r25, r1
     ff8:	89 f1       	breq	.+98     	; 0x105c <DIO_SetPinDirection+0xa0>
     ffa:	82 30       	cpi	r24, 0x02	; 2
     ffc:	91 05       	cpc	r25, r1
     ffe:	1c f4       	brge	.+6      	; 0x1006 <DIO_SetPinDirection+0x4a>
    1000:	89 2b       	or	r24, r25
    1002:	49 f0       	breq	.+18     	; 0x1016 <DIO_SetPinDirection+0x5a>
    1004:	94 c0       	rjmp	.+296    	; 0x112e <DIO_SetPinDirection+0x172>
    1006:	82 30       	cpi	r24, 0x02	; 2
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <DIO_SetPinDirection+0x52>
    100c:	4a c0       	rjmp	.+148    	; 0x10a2 <DIO_SetPinDirection+0xe6>
    100e:	03 97       	sbiw	r24, 0x03	; 3
    1010:	09 f4       	brne	.+2      	; 0x1014 <DIO_SetPinDirection+0x58>
    1012:	6a c0       	rjmp	.+212    	; 0x10e8 <DIO_SetPinDirection+0x12c>
    1014:	8c c0       	rjmp	.+280    	; 0x112e <DIO_SetPinDirection+0x172>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
    1016:	8a e3       	ldi	r24, 0x3A	; 58
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	2a e3       	ldi	r18, 0x3A	; 58
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	f9 01       	movw	r30, r18
    1020:	20 81       	ld	r18, Z
    1022:	62 2f       	mov	r22, r18
    1024:	2b 81       	ldd	r18, Y+3	; 0x03
    1026:	42 2f       	mov	r20, r18
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	21 e0       	ldi	r18, 0x01	; 1
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_SetPinDirection+0x78>
    1030:	22 0f       	add	r18, r18
    1032:	33 1f       	adc	r19, r19
    1034:	4a 95       	dec	r20
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_SetPinDirection+0x74>
    1038:	20 95       	com	r18
    103a:	62 23       	and	r22, r18
    103c:	2c 81       	ldd	r18, Y+4	; 0x04
    103e:	22 2f       	mov	r18, r18
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	4b 81       	ldd	r20, Y+3	; 0x03
    1044:	44 2f       	mov	r20, r20
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_SetPinDirection+0x92>
    104a:	22 0f       	add	r18, r18
    104c:	33 1f       	adc	r19, r19
    104e:	4a 95       	dec	r20
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_SetPinDirection+0x8e>
    1052:	26 2b       	or	r18, r22
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    1058:	19 82       	std	Y+1, r1	; 0x01
				break;
    105a:	6c c0       	rjmp	.+216    	; 0x1134 <DIO_SetPinDirection+0x178>
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
    105c:	87 e3       	ldi	r24, 0x37	; 55
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	27 e3       	ldi	r18, 0x37	; 55
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	f9 01       	movw	r30, r18
    1066:	20 81       	ld	r18, Z
    1068:	62 2f       	mov	r22, r18
    106a:	2b 81       	ldd	r18, Y+3	; 0x03
    106c:	42 2f       	mov	r20, r18
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	21 e0       	ldi	r18, 0x01	; 1
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_SetPinDirection+0xbe>
    1076:	22 0f       	add	r18, r18
    1078:	33 1f       	adc	r19, r19
    107a:	4a 95       	dec	r20
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_SetPinDirection+0xba>
    107e:	20 95       	com	r18
    1080:	62 23       	and	r22, r18
    1082:	2c 81       	ldd	r18, Y+4	; 0x04
    1084:	22 2f       	mov	r18, r18
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	4b 81       	ldd	r20, Y+3	; 0x03
    108a:	44 2f       	mov	r20, r20
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_SetPinDirection+0xd8>
    1090:	22 0f       	add	r18, r18
    1092:	33 1f       	adc	r19, r19
    1094:	4a 95       	dec	r20
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_SetPinDirection+0xd4>
    1098:	26 2b       	or	r18, r22
    109a:	fc 01       	movw	r30, r24
    109c:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    109e:	19 82       	std	Y+1, r1	; 0x01
				break;
    10a0:	49 c0       	rjmp	.+146    	; 0x1134 <DIO_SetPinDirection+0x178>
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
    10a2:	84 e3       	ldi	r24, 0x34	; 52
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	24 e3       	ldi	r18, 0x34	; 52
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	f9 01       	movw	r30, r18
    10ac:	20 81       	ld	r18, Z
    10ae:	62 2f       	mov	r22, r18
    10b0:	2b 81       	ldd	r18, Y+3	; 0x03
    10b2:	42 2f       	mov	r20, r18
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	21 e0       	ldi	r18, 0x01	; 1
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_SetPinDirection+0x104>
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	4a 95       	dec	r20
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_SetPinDirection+0x100>
    10c4:	20 95       	com	r18
    10c6:	62 23       	and	r22, r18
    10c8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ca:	22 2f       	mov	r18, r18
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	4b 81       	ldd	r20, Y+3	; 0x03
    10d0:	44 2f       	mov	r20, r20
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_SetPinDirection+0x11e>
    10d6:	22 0f       	add	r18, r18
    10d8:	33 1f       	adc	r19, r19
    10da:	4a 95       	dec	r20
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_SetPinDirection+0x11a>
    10de:	26 2b       	or	r18, r22
    10e0:	fc 01       	movw	r30, r24
    10e2:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    10e4:	19 82       	std	Y+1, r1	; 0x01
				break;
    10e6:	26 c0       	rjmp	.+76     	; 0x1134 <DIO_SetPinDirection+0x178>
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
    10e8:	81 e3       	ldi	r24, 0x31	; 49
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	21 e3       	ldi	r18, 0x31	; 49
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	f9 01       	movw	r30, r18
    10f2:	20 81       	ld	r18, Z
    10f4:	62 2f       	mov	r22, r18
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	42 2f       	mov	r20, r18
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	21 e0       	ldi	r18, 0x01	; 1
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_SetPinDirection+0x14a>
    1102:	22 0f       	add	r18, r18
    1104:	33 1f       	adc	r19, r19
    1106:	4a 95       	dec	r20
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_SetPinDirection+0x146>
    110a:	20 95       	com	r18
    110c:	62 23       	and	r22, r18
    110e:	2c 81       	ldd	r18, Y+4	; 0x04
    1110:	22 2f       	mov	r18, r18
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	4b 81       	ldd	r20, Y+3	; 0x03
    1116:	44 2f       	mov	r20, r20
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_SetPinDirection+0x164>
    111c:	22 0f       	add	r18, r18
    111e:	33 1f       	adc	r19, r19
    1120:	4a 95       	dec	r20
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_SetPinDirection+0x160>
    1124:	26 2b       	or	r18, r22
    1126:	fc 01       	movw	r30, r24
    1128:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    112a:	19 82       	std	Y+1, r1	; 0x01
				break;
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <DIO_SetPinDirection+0x178>
			default:
				u8_ErrorState=ERROR_NOK;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	89 83       	std	Y+1, r24	; 0x01
				break;
    1132:	00 00       	nop
		}		
	}
	return u8_ErrorState;
    1134:	89 81       	ldd	r24, Y+1	; 0x01
}
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	00 d0       	rcall	.+0      	; 0x114a <DIO_WritePin+0x6>
    114a:	00 d0       	rcall	.+0      	; 0x114c <DIO_WritePin+0x8>
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	8a 83       	std	Y+2, r24	; 0x02
    1152:	6b 83       	std	Y+3, r22	; 0x03
    1154:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState=ERROR_OK;
    1156:	19 82       	std	Y+1, r1	; 0x01
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	88 23       	and	r24, r24
    115c:	31 f0       	breq	.+12     	; 0x116a <DIO_WritePin+0x26>
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	19 f0       	breq	.+6      	; 0x116a <DIO_WritePin+0x26>
	{
		u8_ErrorState=ERROR_NOK;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	a9 c0       	rjmp	.+338    	; 0x12bc <DIO_WritePin+0x178>
	}
	else if(PinNo>PIN7)
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	88 30       	cpi	r24, 0x08	; 8
    116e:	18 f0       	brcs	.+6      	; 0x1176 <DIO_WritePin+0x32>
	{
		u8_ErrorState=ERROR_NOK;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	a3 c0       	rjmp	.+326    	; 0x12bc <DIO_WritePin+0x178>
	}
	else
	{
		switch(PortName)
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	91 05       	cpc	r25, r1
    1180:	89 f1       	breq	.+98     	; 0x11e4 <DIO_WritePin+0xa0>
    1182:	82 30       	cpi	r24, 0x02	; 2
    1184:	91 05       	cpc	r25, r1
    1186:	1c f4       	brge	.+6      	; 0x118e <DIO_WritePin+0x4a>
    1188:	89 2b       	or	r24, r25
    118a:	49 f0       	breq	.+18     	; 0x119e <DIO_WritePin+0x5a>
    118c:	94 c0       	rjmp	.+296    	; 0x12b6 <DIO_WritePin+0x172>
    118e:	82 30       	cpi	r24, 0x02	; 2
    1190:	91 05       	cpc	r25, r1
    1192:	09 f4       	brne	.+2      	; 0x1196 <DIO_WritePin+0x52>
    1194:	4a c0       	rjmp	.+148    	; 0x122a <DIO_WritePin+0xe6>
    1196:	03 97       	sbiw	r24, 0x03	; 3
    1198:	09 f4       	brne	.+2      	; 0x119c <DIO_WritePin+0x58>
    119a:	6a c0       	rjmp	.+212    	; 0x1270 <DIO_WritePin+0x12c>
    119c:	8c c0       	rjmp	.+280    	; 0x12b6 <DIO_WritePin+0x172>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
    119e:	8b e3       	ldi	r24, 0x3B	; 59
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	2b e3       	ldi	r18, 0x3B	; 59
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	f9 01       	movw	r30, r18
    11a8:	20 81       	ld	r18, Z
    11aa:	62 2f       	mov	r22, r18
    11ac:	2b 81       	ldd	r18, Y+3	; 0x03
    11ae:	42 2f       	mov	r20, r18
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	21 e0       	ldi	r18, 0x01	; 1
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_WritePin+0x78>
    11b8:	22 0f       	add	r18, r18
    11ba:	33 1f       	adc	r19, r19
    11bc:	4a 95       	dec	r20
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <DIO_WritePin+0x74>
    11c0:	20 95       	com	r18
    11c2:	62 23       	and	r22, r18
    11c4:	2c 81       	ldd	r18, Y+4	; 0x04
    11c6:	22 2f       	mov	r18, r18
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	4b 81       	ldd	r20, Y+3	; 0x03
    11cc:	44 2f       	mov	r20, r20
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_WritePin+0x92>
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	4a 95       	dec	r20
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_WritePin+0x8e>
    11da:	26 2b       	or	r18, r22
    11dc:	fc 01       	movw	r30, r24
    11de:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    11e0:	19 82       	std	Y+1, r1	; 0x01
				break;
    11e2:	6c c0       	rjmp	.+216    	; 0x12bc <DIO_WritePin+0x178>
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
    11e4:	88 e3       	ldi	r24, 0x38	; 56
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	28 e3       	ldi	r18, 0x38	; 56
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	f9 01       	movw	r30, r18
    11ee:	20 81       	ld	r18, Z
    11f0:	62 2f       	mov	r22, r18
    11f2:	2b 81       	ldd	r18, Y+3	; 0x03
    11f4:	42 2f       	mov	r20, r18
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	21 e0       	ldi	r18, 0x01	; 1
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_WritePin+0xbe>
    11fe:	22 0f       	add	r18, r18
    1200:	33 1f       	adc	r19, r19
    1202:	4a 95       	dec	r20
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_WritePin+0xba>
    1206:	20 95       	com	r18
    1208:	62 23       	and	r22, r18
    120a:	2c 81       	ldd	r18, Y+4	; 0x04
    120c:	22 2f       	mov	r18, r18
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	4b 81       	ldd	r20, Y+3	; 0x03
    1212:	44 2f       	mov	r20, r20
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_WritePin+0xd8>
    1218:	22 0f       	add	r18, r18
    121a:	33 1f       	adc	r19, r19
    121c:	4a 95       	dec	r20
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_WritePin+0xd4>
    1220:	26 2b       	or	r18, r22
    1222:	fc 01       	movw	r30, r24
    1224:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    1226:	19 82       	std	Y+1, r1	; 0x01
				break;
    1228:	49 c0       	rjmp	.+146    	; 0x12bc <DIO_WritePin+0x178>
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
    122a:	85 e3       	ldi	r24, 0x35	; 53
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	25 e3       	ldi	r18, 0x35	; 53
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	f9 01       	movw	r30, r18
    1234:	20 81       	ld	r18, Z
    1236:	62 2f       	mov	r22, r18
    1238:	2b 81       	ldd	r18, Y+3	; 0x03
    123a:	42 2f       	mov	r20, r18
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	21 e0       	ldi	r18, 0x01	; 1
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_WritePin+0x104>
    1244:	22 0f       	add	r18, r18
    1246:	33 1f       	adc	r19, r19
    1248:	4a 95       	dec	r20
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_WritePin+0x100>
    124c:	20 95       	com	r18
    124e:	62 23       	and	r22, r18
    1250:	2c 81       	ldd	r18, Y+4	; 0x04
    1252:	22 2f       	mov	r18, r18
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	4b 81       	ldd	r20, Y+3	; 0x03
    1258:	44 2f       	mov	r20, r20
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_WritePin+0x11e>
    125e:	22 0f       	add	r18, r18
    1260:	33 1f       	adc	r19, r19
    1262:	4a 95       	dec	r20
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_WritePin+0x11a>
    1266:	26 2b       	or	r18, r22
    1268:	fc 01       	movw	r30, r24
    126a:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    126c:	19 82       	std	Y+1, r1	; 0x01
				break;
    126e:	26 c0       	rjmp	.+76     	; 0x12bc <DIO_WritePin+0x178>
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
    1270:	82 e3       	ldi	r24, 0x32	; 50
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	22 e3       	ldi	r18, 0x32	; 50
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	f9 01       	movw	r30, r18
    127a:	20 81       	ld	r18, Z
    127c:	62 2f       	mov	r22, r18
    127e:	2b 81       	ldd	r18, Y+3	; 0x03
    1280:	42 2f       	mov	r20, r18
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	21 e0       	ldi	r18, 0x01	; 1
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	02 c0       	rjmp	.+4      	; 0x128e <DIO_WritePin+0x14a>
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	4a 95       	dec	r20
    1290:	e2 f7       	brpl	.-8      	; 0x128a <DIO_WritePin+0x146>
    1292:	20 95       	com	r18
    1294:	62 23       	and	r22, r18
    1296:	2c 81       	ldd	r18, Y+4	; 0x04
    1298:	22 2f       	mov	r18, r18
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	4b 81       	ldd	r20, Y+3	; 0x03
    129e:	44 2f       	mov	r20, r20
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <DIO_WritePin+0x164>
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	4a 95       	dec	r20
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <DIO_WritePin+0x160>
    12ac:	26 2b       	or	r18, r22
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
				u8_ErrorState=ERROR_OK;
    12b2:	19 82       	std	Y+1, r1	; 0x01
				break;
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <DIO_WritePin+0x178>
			default:
				u8_ErrorState=ERROR_NOK;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	89 83       	std	Y+1, r24	; 0x01
				break;
    12ba:	00 00       	nop
		}
	}	
	return u8_ErrorState;
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <GetFreqPrescaleRatio>:
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <GetFreqPrescaleRatio+0x6>
    12d2:	1f 92       	push	r1
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	7b 83       	std	Y+3, r23	; 0x03
    12dc:	6a 83       	std	Y+2, r22	; 0x02
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	88 23       	and	r24, r24
    12e2:	21 f0       	breq	.+8      	; 0x12ec <GetFreqPrescaleRatio+0x20>
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	09 f0       	breq	.+2      	; 0x12ec <GetFreqPrescaleRatio+0x20>
    12ea:	5f c0       	rjmp	.+190    	; 0x13aa <GetFreqPrescaleRatio+0xde>
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	c9 01       	movw	r24, r18
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	82 0f       	add	r24, r18
    12fa:	93 1f       	adc	r25, r19
    12fc:	8a 52       	subi	r24, 0x2A	; 42
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	fc 01       	movw	r30, r24
    1302:	80 81       	ld	r24, Z
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	91 05       	cpc	r25, r1
    130c:	39 f1       	breq	.+78     	; 0x135c <GetFreqPrescaleRatio+0x90>
    130e:	84 30       	cpi	r24, 0x04	; 4
    1310:	91 05       	cpc	r25, r1
    1312:	34 f4       	brge	.+12     	; 0x1320 <GetFreqPrescaleRatio+0x54>
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	91 05       	cpc	r25, r1
    1318:	49 f0       	breq	.+18     	; 0x132c <GetFreqPrescaleRatio+0x60>
    131a:	02 97       	sbiw	r24, 0x02	; 2
    131c:	99 f0       	breq	.+38     	; 0x1344 <GetFreqPrescaleRatio+0x78>
    131e:	42 c0       	rjmp	.+132    	; 0x13a4 <GetFreqPrescaleRatio+0xd8>
    1320:	84 30       	cpi	r24, 0x04	; 4
    1322:	91 05       	cpc	r25, r1
    1324:	39 f1       	breq	.+78     	; 0x1374 <GetFreqPrescaleRatio+0xa8>
    1326:	05 97       	sbiw	r24, 0x05	; 5
    1328:	89 f1       	breq	.+98     	; 0x138c <GetFreqPrescaleRatio+0xc0>
    132a:	3c c0       	rjmp	.+120    	; 0x13a4 <GetFreqPrescaleRatio+0xd8>
    132c:	2a 81       	ldd	r18, Y+2	; 0x02
    132e:	3b 81       	ldd	r19, Y+3	; 0x03
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a0 e8       	ldi	r26, 0x80	; 128
    1336:	bd e3       	ldi	r27, 0x3D	; 61
    1338:	f9 01       	movw	r30, r18
    133a:	80 83       	st	Z, r24
    133c:	91 83       	std	Z+1, r25	; 0x01
    133e:	a2 83       	std	Z+2, r26	; 0x02
    1340:	b3 83       	std	Z+3, r27	; 0x03
    1342:	32 c0       	rjmp	.+100    	; 0x13a8 <GetFreqPrescaleRatio+0xdc>
    1344:	2a 81       	ldd	r18, Y+2	; 0x02
    1346:	3b 81       	ldd	r19, Y+3	; 0x03
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a0 e0       	ldi	r26, 0x00	; 0
    134e:	bf e3       	ldi	r27, 0x3F	; 63
    1350:	f9 01       	movw	r30, r18
    1352:	80 83       	st	Z, r24
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	a2 83       	std	Z+2, r26	; 0x02
    1358:	b3 83       	std	Z+3, r27	; 0x03
    135a:	26 c0       	rjmp	.+76     	; 0x13a8 <GetFreqPrescaleRatio+0xdc>
    135c:	2a 81       	ldd	r18, Y+2	; 0x02
    135e:	3b 81       	ldd	r19, Y+3	; 0x03
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	a0 e8       	ldi	r26, 0x80	; 128
    1366:	b0 e4       	ldi	r27, 0x40	; 64
    1368:	f9 01       	movw	r30, r18
    136a:	80 83       	st	Z, r24
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	a2 83       	std	Z+2, r26	; 0x02
    1370:	b3 83       	std	Z+3, r27	; 0x03
    1372:	1a c0       	rjmp	.+52     	; 0x13a8 <GetFreqPrescaleRatio+0xdc>
    1374:	2a 81       	ldd	r18, Y+2	; 0x02
    1376:	3b 81       	ldd	r19, Y+3	; 0x03
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a0 e8       	ldi	r26, 0x80	; 128
    137e:	b1 e4       	ldi	r27, 0x41	; 65
    1380:	f9 01       	movw	r30, r18
    1382:	80 83       	st	Z, r24
    1384:	91 83       	std	Z+1, r25	; 0x01
    1386:	a2 83       	std	Z+2, r26	; 0x02
    1388:	b3 83       	std	Z+3, r27	; 0x03
    138a:	0e c0       	rjmp	.+28     	; 0x13a8 <GetFreqPrescaleRatio+0xdc>
    138c:	2a 81       	ldd	r18, Y+2	; 0x02
    138e:	3b 81       	ldd	r19, Y+3	; 0x03
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	a0 e8       	ldi	r26, 0x80	; 128
    1396:	b2 e4       	ldi	r27, 0x42	; 66
    1398:	f9 01       	movw	r30, r18
    139a:	80 83       	st	Z, r24
    139c:	91 83       	std	Z+1, r25	; 0x01
    139e:	a2 83       	std	Z+2, r26	; 0x02
    13a0:	b3 83       	std	Z+3, r27	; 0x03
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <GetFreqPrescaleRatio+0xdc>
    13a4:	8c ef       	ldi	r24, 0xFC	; 252
    13a6:	7d c0       	rjmp	.+250    	; 0x14a2 <GetFreqPrescaleRatio+0x1d6>
    13a8:	7b c0       	rjmp	.+246    	; 0x14a0 <GetFreqPrescaleRatio+0x1d4>
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <GetFreqPrescaleRatio+0xe6>
    13b0:	77 c0       	rjmp	.+238    	; 0x14a0 <GetFreqPrescaleRatio+0x1d4>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	c9 01       	movw	r24, r18
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	82 0f       	add	r24, r18
    13c0:	93 1f       	adc	r25, r19
    13c2:	8a 52       	subi	r24, 0x2A	; 42
    13c4:	9f 4f       	sbci	r25, 0xFF	; 255
    13c6:	fc 01       	movw	r30, r24
    13c8:	80 81       	ld	r24, Z
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	09 2e       	mov	r0, r25
    13d0:	00 0c       	add	r0, r0
    13d2:	aa 0b       	sbc	r26, r26
    13d4:	bb 0b       	sbc	r27, r27
    13d6:	41 e0       	ldi	r20, 0x01	; 1
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	26 e0       	ldi	r18, 0x06	; 6
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	84 1b       	sub	r24, r20
    13e0:	95 0b       	sbc	r25, r21
    13e2:	28 17       	cp	r18, r24
    13e4:	39 07       	cpc	r19, r25
    13e6:	08 f4       	brcc	.+2      	; 0x13ea <GetFreqPrescaleRatio+0x11e>
    13e8:	59 c0       	rjmp	.+178    	; 0x149c <GetFreqPrescaleRatio+0x1d0>
    13ea:	86 5d       	subi	r24, 0xD6	; 214
    13ec:	9f 4f       	sbci	r25, 0xFF	; 255
    13ee:	fc 01       	movw	r30, r24
    13f0:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__tablejump2__>
    13f4:	2a 81       	ldd	r18, Y+2	; 0x02
    13f6:	3b 81       	ldd	r19, Y+3	; 0x03
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a0 e8       	ldi	r26, 0x80	; 128
    13fe:	bd e3       	ldi	r27, 0x3D	; 61
    1400:	f9 01       	movw	r30, r18
    1402:	80 83       	st	Z, r24
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	a2 83       	std	Z+2, r26	; 0x02
    1408:	b3 83       	std	Z+3, r27	; 0x03
    140a:	4a c0       	rjmp	.+148    	; 0x14a0 <GetFreqPrescaleRatio+0x1d4>
    140c:	2a 81       	ldd	r18, Y+2	; 0x02
    140e:	3b 81       	ldd	r19, Y+3	; 0x03
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a0 e0       	ldi	r26, 0x00	; 0
    1416:	bf e3       	ldi	r27, 0x3F	; 63
    1418:	f9 01       	movw	r30, r18
    141a:	80 83       	st	Z, r24
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	a2 83       	std	Z+2, r26	; 0x02
    1420:	b3 83       	std	Z+3, r27	; 0x03
    1422:	3e c0       	rjmp	.+124    	; 0x14a0 <GetFreqPrescaleRatio+0x1d4>
    1424:	2a 81       	ldd	r18, Y+2	; 0x02
    1426:	3b 81       	ldd	r19, Y+3	; 0x03
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a0 e0       	ldi	r26, 0x00	; 0
    142e:	b0 e4       	ldi	r27, 0x40	; 64
    1430:	f9 01       	movw	r30, r18
    1432:	80 83       	st	Z, r24
    1434:	91 83       	std	Z+1, r25	; 0x01
    1436:	a2 83       	std	Z+2, r26	; 0x02
    1438:	b3 83       	std	Z+3, r27	; 0x03
    143a:	32 c0       	rjmp	.+100    	; 0x14a0 <GetFreqPrescaleRatio+0x1d4>
    143c:	2a 81       	ldd	r18, Y+2	; 0x02
    143e:	3b 81       	ldd	r19, Y+3	; 0x03
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	a0 e8       	ldi	r26, 0x80	; 128
    1446:	b0 e4       	ldi	r27, 0x40	; 64
    1448:	f9 01       	movw	r30, r18
    144a:	80 83       	st	Z, r24
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	a2 83       	std	Z+2, r26	; 0x02
    1450:	b3 83       	std	Z+3, r27	; 0x03
    1452:	26 c0       	rjmp	.+76     	; 0x14a0 <GetFreqPrescaleRatio+0x1d4>
    1454:	2a 81       	ldd	r18, Y+2	; 0x02
    1456:	3b 81       	ldd	r19, Y+3	; 0x03
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a0 e0       	ldi	r26, 0x00	; 0
    145e:	b1 e4       	ldi	r27, 0x41	; 65
    1460:	f9 01       	movw	r30, r18
    1462:	80 83       	st	Z, r24
    1464:	91 83       	std	Z+1, r25	; 0x01
    1466:	a2 83       	std	Z+2, r26	; 0x02
    1468:	b3 83       	std	Z+3, r27	; 0x03
    146a:	1a c0       	rjmp	.+52     	; 0x14a0 <GetFreqPrescaleRatio+0x1d4>
    146c:	2a 81       	ldd	r18, Y+2	; 0x02
    146e:	3b 81       	ldd	r19, Y+3	; 0x03
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a0 e8       	ldi	r26, 0x80	; 128
    1476:	b1 e4       	ldi	r27, 0x41	; 65
    1478:	f9 01       	movw	r30, r18
    147a:	80 83       	st	Z, r24
    147c:	91 83       	std	Z+1, r25	; 0x01
    147e:	a2 83       	std	Z+2, r26	; 0x02
    1480:	b3 83       	std	Z+3, r27	; 0x03
    1482:	0e c0       	rjmp	.+28     	; 0x14a0 <GetFreqPrescaleRatio+0x1d4>
    1484:	2a 81       	ldd	r18, Y+2	; 0x02
    1486:	3b 81       	ldd	r19, Y+3	; 0x03
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a0 e8       	ldi	r26, 0x80	; 128
    148e:	b2 e4       	ldi	r27, 0x42	; 66
    1490:	f9 01       	movw	r30, r18
    1492:	80 83       	st	Z, r24
    1494:	91 83       	std	Z+1, r25	; 0x01
    1496:	a2 83       	std	Z+2, r26	; 0x02
    1498:	b3 83       	std	Z+3, r27	; 0x03
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <GetFreqPrescaleRatio+0x1d4>
    149c:	8c ef       	ldi	r24, 0xFC	; 252
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <GetFreqPrescaleRatio+0x1d6>
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <TIM_Init>:
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	1f 92       	push	r1
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	91 05       	cpc	r25, r1
    14c4:	b1 f1       	breq	.+108    	; 0x1532 <TIM_Init+0x84>
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	91 05       	cpc	r25, r1
    14ca:	09 f4       	brne	.+2      	; 0x14ce <TIM_Init+0x20>
    14cc:	6a c0       	rjmp	.+212    	; 0x15a2 <TIM_Init+0xf4>
    14ce:	89 2b       	or	r24, r25
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <TIM_Init+0x26>
    14d2:	a2 c0       	rjmp	.+324    	; 0x1618 <TIM_Init+0x16a>
    14d4:	43 e5       	ldi	r20, 0x53	; 83
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	c9 01       	movw	r24, r18
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	82 0f       	add	r24, r18
    14e6:	93 1f       	adc	r25, r19
    14e8:	8c 52       	subi	r24, 0x2C	; 44
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	fc 01       	movw	r30, r24
    14ee:	80 81       	ld	r24, Z
    14f0:	fa 01       	movw	r30, r20
    14f2:	80 83       	st	Z, r24
    14f4:	89 e5       	ldi	r24, 0x59	; 89
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	29 e5       	ldi	r18, 0x59	; 89
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	f9 01       	movw	r30, r18
    14fe:	20 81       	ld	r18, Z
    1500:	2c 7f       	andi	r18, 0xFC	; 252
    1502:	fc 01       	movw	r30, r24
    1504:	20 83       	st	Z, r18
    1506:	49 e5       	ldi	r20, 0x59	; 89
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	89 e5       	ldi	r24, 0x59	; 89
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	fc 01       	movw	r30, r24
    1510:	60 81       	ld	r22, Z
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	c9 01       	movw	r24, r18
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	82 0f       	add	r24, r18
    1520:	93 1f       	adc	r25, r19
    1522:	8b 52       	subi	r24, 0x2B	; 43
    1524:	9f 4f       	sbci	r25, 0xFF	; 255
    1526:	fc 01       	movw	r30, r24
    1528:	80 81       	ld	r24, Z
    152a:	86 2b       	or	r24, r22
    152c:	fa 01       	movw	r30, r20
    152e:	80 83       	st	Z, r24
    1530:	75 c0       	rjmp	.+234    	; 0x161c <TIM_Init+0x16e>
    1532:	4e e4       	ldi	r20, 0x4E	; 78
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	c9 01       	movw	r24, r18
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	82 0f       	add	r24, r18
    1544:	93 1f       	adc	r25, r19
    1546:	8c 52       	subi	r24, 0x2C	; 44
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	fc 01       	movw	r30, r24
    154c:	80 81       	ld	r24, Z
    154e:	fa 01       	movw	r30, r20
    1550:	80 83       	st	Z, r24
    1552:	89 e5       	ldi	r24, 0x59	; 89
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	29 e5       	ldi	r18, 0x59	; 89
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	f9 01       	movw	r30, r18
    155c:	20 81       	ld	r18, Z
    155e:	27 7e       	andi	r18, 0xE7	; 231
    1560:	fc 01       	movw	r30, r24
    1562:	20 83       	st	Z, r18
    1564:	49 e5       	ldi	r20, 0x59	; 89
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	89 e5       	ldi	r24, 0x59	; 89
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	fc 01       	movw	r30, r24
    156e:	80 81       	ld	r24, Z
    1570:	68 2f       	mov	r22, r24
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	c9 01       	movw	r24, r18
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	82 0f       	add	r24, r18
    1580:	93 1f       	adc	r25, r19
    1582:	8b 52       	subi	r24, 0x2B	; 43
    1584:	9f 4f       	sbci	r25, 0xFF	; 255
    1586:	fc 01       	movw	r30, r24
    1588:	80 81       	ld	r24, Z
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	86 2b       	or	r24, r22
    159c:	fa 01       	movw	r30, r20
    159e:	80 83       	st	Z, r24
    15a0:	3d c0       	rjmp	.+122    	; 0x161c <TIM_Init+0x16e>
    15a2:	45 e4       	ldi	r20, 0x45	; 69
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	c9 01       	movw	r24, r18
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	82 0f       	add	r24, r18
    15b4:	93 1f       	adc	r25, r19
    15b6:	8c 52       	subi	r24, 0x2C	; 44
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	fc 01       	movw	r30, r24
    15bc:	80 81       	ld	r24, Z
    15be:	fa 01       	movw	r30, r20
    15c0:	80 83       	st	Z, r24
    15c2:	89 e5       	ldi	r24, 0x59	; 89
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	29 e5       	ldi	r18, 0x59	; 89
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	f9 01       	movw	r30, r18
    15cc:	20 81       	ld	r18, Z
    15ce:	2f 73       	andi	r18, 0x3F	; 63
    15d0:	fc 01       	movw	r30, r24
    15d2:	20 83       	st	Z, r18
    15d4:	49 e5       	ldi	r20, 0x59	; 89
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	89 e5       	ldi	r24, 0x59	; 89
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	fc 01       	movw	r30, r24
    15de:	80 81       	ld	r24, Z
    15e0:	68 2f       	mov	r22, r24
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	c9 01       	movw	r24, r18
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	82 0f       	add	r24, r18
    15f0:	93 1f       	adc	r25, r19
    15f2:	8b 52       	subi	r24, 0x2B	; 43
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	fc 01       	movw	r30, r24
    15f8:	80 81       	ld	r24, Z
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	00 24       	eor	r0, r0
    1600:	96 95       	lsr	r25
    1602:	87 95       	ror	r24
    1604:	07 94       	ror	r0
    1606:	96 95       	lsr	r25
    1608:	87 95       	ror	r24
    160a:	07 94       	ror	r0
    160c:	98 2f       	mov	r25, r24
    160e:	80 2d       	mov	r24, r0
    1610:	86 2b       	or	r24, r22
    1612:	fa 01       	movw	r30, r20
    1614:	80 83       	st	Z, r24
    1616:	02 c0       	rjmp	.+4      	; 0x161c <TIM_Init+0x16e>
    1618:	8e ef       	ldi	r24, 0xFE	; 254
    161a:	01 c0       	rjmp	.+2      	; 0x161e <TIM_Init+0x170>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	0f 90       	pop	r0
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	08 95       	ret

00001626 <TIM_Start>:
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	27 97       	sbiw	r28, 0x07	; 7
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	8d 83       	std	Y+5, r24	; 0x05
    163c:	7f 83       	std	Y+7, r23	; 0x07
    163e:	6e 83       	std	Y+6, r22	; 0x06
    1640:	1a 82       	std	Y+2, r1	; 0x02
    1642:	19 82       	std	Y+1, r1	; 0x01
    1644:	1c 82       	std	Y+4, r1	; 0x04
    1646:	1b 82       	std	Y+3, r1	; 0x03
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	91 05       	cpc	r25, r1
    1652:	71 f0       	breq	.+28     	; 0x1670 <TIM_Start+0x4a>
    1654:	82 30       	cpi	r24, 0x02	; 2
    1656:	91 05       	cpc	r25, r1
    1658:	a1 f0       	breq	.+40     	; 0x1682 <TIM_Start+0x5c>
    165a:	89 2b       	or	r24, r25
    165c:	d9 f4       	brne	.+54     	; 0x1694 <TIM_Start+0x6e>
    165e:	83 e5       	ldi	r24, 0x53	; 83
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	9a 83       	std	Y+2, r25	; 0x02
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	82 e5       	ldi	r24, 0x52	; 82
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9c 83       	std	Y+4, r25	; 0x04
    166c:	8b 83       	std	Y+3, r24	; 0x03
    166e:	14 c0       	rjmp	.+40     	; 0x1698 <TIM_Start+0x72>
    1670:	8e e4       	ldi	r24, 0x4E	; 78
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9a 83       	std	Y+2, r25	; 0x02
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	8c e4       	ldi	r24, 0x4C	; 76
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	9c 83       	std	Y+4, r25	; 0x04
    167e:	8b 83       	std	Y+3, r24	; 0x03
    1680:	0b c0       	rjmp	.+22     	; 0x1698 <TIM_Start+0x72>
    1682:	85 e4       	ldi	r24, 0x45	; 69
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	84 e4       	ldi	r24, 0x44	; 68
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	9c 83       	std	Y+4, r25	; 0x04
    1690:	8b 83       	std	Y+3, r24	; 0x03
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <TIM_Start+0x72>
    1694:	8e ef       	ldi	r24, 0xFE	; 254
    1696:	1e c0       	rjmp	.+60     	; 0x16d4 <TIM_Start+0xae>
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	2e 81       	ldd	r18, Y+6	; 0x06
    169e:	3f 81       	ldd	r19, Y+7	; 0x07
    16a0:	fc 01       	movw	r30, r24
    16a2:	31 83       	std	Z+1, r19	; 0x01
    16a4:	20 83       	st	Z, r18
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	fc 01       	movw	r30, r24
    16ac:	40 81       	ld	r20, Z
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	c9 01       	movw	r24, r18
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	82 0f       	add	r24, r18
    16bc:	93 1f       	adc	r25, r19
    16be:	8a 52       	subi	r24, 0x2A	; 42
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	fc 01       	movw	r30, r24
    16c4:	80 81       	ld	r24, Z
    16c6:	24 2f       	mov	r18, r20
    16c8:	28 2b       	or	r18, r24
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	fc 01       	movw	r30, r24
    16d0:	20 83       	st	Z, r18
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	27 96       	adiw	r28, 0x07	; 7
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <TIM_GetStatus>:
* @param [out] FlagStatus  -  pointer to the variable to save the timer status in it.
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <TIM_GetStatus+0x6>
    16ec:	1f 92       	push	r1
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	7b 83       	std	Y+3, r23	; 0x03
    16f6:	6a 83       	std	Y+2, r22	; 0x02
   if(NULL_PTR == FlagStatus)
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	9b 81       	ldd	r25, Y+3	; 0x03
    16fc:	89 2b       	or	r24, r25
    16fe:	11 f4       	brne	.+4      	; 0x1704 <TIM_GetStatus+0x1e>
   {
      return TIMER_E_NULL_PTR;
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	20 c1       	rjmp	.+576    	; 0x1944 <TIM_GetStatus+0x25e>
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	91 05       	cpc	r25, r1
    170e:	09 f4       	brne	.+2      	; 0x1712 <TIM_GetStatus+0x2c>
    1710:	59 c0       	rjmp	.+178    	; 0x17c4 <TIM_GetStatus+0xde>
    1712:	82 30       	cpi	r24, 0x02	; 2
    1714:	91 05       	cpc	r25, r1
    1716:	09 f4       	brne	.+2      	; 0x171a <TIM_GetStatus+0x34>
    1718:	c0 c0       	rjmp	.+384    	; 0x189a <TIM_GetStatus+0x1b4>
    171a:	89 2b       	or	r24, r25
    171c:	09 f0       	breq	.+2      	; 0x1720 <TIM_GetStatus+0x3a>
    171e:	0a c1       	rjmp	.+532    	; 0x1934 <TIM_GetStatus+0x24e>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	c9 01       	movw	r24, r18
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	82 0f       	add	r24, r18
    172e:	93 1f       	adc	r25, r19
    1730:	8c 52       	subi	r24, 0x2C	; 44
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	fc 01       	movw	r30, r24
    1736:	80 81       	ld	r24, Z
    1738:	88 23       	and	r24, r24
    173a:	d1 f4       	brne	.+52     	; 0x1770 <TIM_GetStatus+0x8a>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
    173c:	88 e5       	ldi	r24, 0x58	; 88
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	fc 01       	movw	r30, r24
    1742:	80 81       	ld	r24, Z
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	81 70       	andi	r24, 0x01	; 1
    174a:	99 27       	eor	r25, r25
    174c:	89 2b       	or	r24, r25
    174e:	71 f0       	breq	.+28     	; 0x176c <TIM_GetStatus+0x86>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	9b 81       	ldd	r25, Y+3	; 0x03
    1754:	fc 01       	movw	r30, r24
    1756:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
    1758:	88 e5       	ldi	r24, 0x58	; 88
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	28 e5       	ldi	r18, 0x58	; 88
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	f9 01       	movw	r30, r18
    1762:	20 81       	ld	r18, Z
    1764:	21 60       	ori	r18, 0x01	; 1
    1766:	fc 01       	movw	r30, r24
    1768:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    176a:	e6 c0       	rjmp	.+460    	; 0x1938 <TIM_GetStatus+0x252>
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    176c:	8d ef       	ldi	r24, 0xFD	; 253
    176e:	ea c0       	rjmp	.+468    	; 0x1944 <TIM_GetStatus+0x25e>
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	c9 01       	movw	r24, r18
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	82 0f       	add	r24, r18
    177e:	93 1f       	adc	r25, r19
    1780:	8c 52       	subi	r24, 0x2C	; 44
    1782:	9f 4f       	sbci	r25, 0xFF	; 255
    1784:	fc 01       	movw	r30, r24
    1786:	80 81       	ld	r24, Z
    1788:	88 30       	cpi	r24, 0x08	; 8
    178a:	09 f0       	breq	.+2      	; 0x178e <TIM_GetStatus+0xa8>
    178c:	d5 c0       	rjmp	.+426    	; 0x1938 <TIM_GetStatus+0x252>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
    178e:	88 e5       	ldi	r24, 0x58	; 88
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	fc 01       	movw	r30, r24
    1794:	80 81       	ld	r24, Z
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	82 70       	andi	r24, 0x02	; 2
    179c:	99 27       	eor	r25, r25
    179e:	89 2b       	or	r24, r25
    17a0:	79 f0       	breq	.+30     	; 0x17c0 <TIM_GetStatus+0xda>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	9b 81       	ldd	r25, Y+3	; 0x03
    17a6:	21 e0       	ldi	r18, 0x01	; 1
    17a8:	fc 01       	movw	r30, r24
    17aa:	20 83       	st	Z, r18
               TIFR |= TIMER_0_COMPARE_FLAG;
    17ac:	88 e5       	ldi	r24, 0x58	; 88
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	28 e5       	ldi	r18, 0x58	; 88
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	f9 01       	movw	r30, r18
    17b6:	20 81       	ld	r18, Z
    17b8:	22 60       	ori	r18, 0x02	; 2
    17ba:	fc 01       	movw	r30, r24
    17bc:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    17be:	bc c0       	rjmp	.+376    	; 0x1938 <TIM_GetStatus+0x252>
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    17c0:	8d ef       	ldi	r24, 0xFD	; 253
    17c2:	c0 c0       	rjmp	.+384    	; 0x1944 <TIM_GetStatus+0x25e>
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	c9 01       	movw	r24, r18
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	82 0f       	add	r24, r18
    17d2:	93 1f       	adc	r25, r19
    17d4:	8c 52       	subi	r24, 0x2C	; 44
    17d6:	9f 4f       	sbci	r25, 0xFF	; 255
    17d8:	fc 01       	movw	r30, r24
    17da:	80 81       	ld	r24, Z
    17dc:	88 23       	and	r24, r24
    17de:	d1 f4       	brne	.+52     	; 0x1814 <TIM_GetStatus+0x12e>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
    17e0:	88 e5       	ldi	r24, 0x58	; 88
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	fc 01       	movw	r30, r24
    17e6:	80 81       	ld	r24, Z
    17e8:	88 2f       	mov	r24, r24
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	84 70       	andi	r24, 0x04	; 4
    17ee:	99 27       	eor	r25, r25
    17f0:	89 2b       	or	r24, r25
    17f2:	71 f0       	breq	.+28     	; 0x1810 <TIM_GetStatus+0x12a>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	9b 81       	ldd	r25, Y+3	; 0x03
    17f8:	fc 01       	movw	r30, r24
    17fa:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
    17fc:	88 e5       	ldi	r24, 0x58	; 88
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	28 e5       	ldi	r18, 0x58	; 88
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	f9 01       	movw	r30, r18
    1806:	20 81       	ld	r18, Z
    1808:	24 60       	ori	r18, 0x04	; 4
    180a:	fc 01       	movw	r30, r24
    180c:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    180e:	96 c0       	rjmp	.+300    	; 0x193c <TIM_GetStatus+0x256>
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1810:	8d ef       	ldi	r24, 0xFD	; 253
    1812:	98 c0       	rjmp	.+304    	; 0x1944 <TIM_GetStatus+0x25e>
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	c9 01       	movw	r24, r18
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	82 0f       	add	r24, r18
    1822:	93 1f       	adc	r25, r19
    1824:	8c 52       	subi	r24, 0x2C	; 44
    1826:	9f 4f       	sbci	r25, 0xFF	; 255
    1828:	fc 01       	movw	r30, r24
    182a:	80 81       	ld	r24, Z
    182c:	88 30       	cpi	r24, 0x08	; 8
    182e:	09 f0       	breq	.+2      	; 0x1832 <TIM_GetStatus+0x14c>
    1830:	85 c0       	rjmp	.+266    	; 0x193c <TIM_GetStatus+0x256>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
    1832:	88 e5       	ldi	r24, 0x58	; 88
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	fc 01       	movw	r30, r24
    1838:	80 81       	ld	r24, Z
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	80 71       	andi	r24, 0x10	; 16
    1840:	99 27       	eor	r25, r25
    1842:	89 2b       	or	r24, r25
    1844:	79 f0       	breq	.+30     	; 0x1864 <TIM_GetStatus+0x17e>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	9b 81       	ldd	r25, Y+3	; 0x03
    184a:	21 e0       	ldi	r18, 0x01	; 1
    184c:	fc 01       	movw	r30, r24
    184e:	20 83       	st	Z, r18
               TIFR |= TIMER_1A_COMPARE_FLAG;
    1850:	88 e5       	ldi	r24, 0x58	; 88
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	28 e5       	ldi	r18, 0x58	; 88
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	f9 01       	movw	r30, r18
    185a:	20 81       	ld	r18, Z
    185c:	20 61       	ori	r18, 0x10	; 16
    185e:	fc 01       	movw	r30, r24
    1860:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    1862:	6c c0       	rjmp	.+216    	; 0x193c <TIM_GetStatus+0x256>
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
    1864:	88 e5       	ldi	r24, 0x58	; 88
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	fc 01       	movw	r30, r24
    186a:	80 81       	ld	r24, Z
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	88 70       	andi	r24, 0x08	; 8
    1872:	99 27       	eor	r25, r25
    1874:	89 2b       	or	r24, r25
    1876:	79 f0       	breq	.+30     	; 0x1896 <TIM_GetStatus+0x1b0>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	9b 81       	ldd	r25, Y+3	; 0x03
    187c:	21 e0       	ldi	r18, 0x01	; 1
    187e:	fc 01       	movw	r30, r24
    1880:	20 83       	st	Z, r18
               TIFR |= TIMER_1B_COMPARE_FLAG;
    1882:	88 e5       	ldi	r24, 0x58	; 88
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	28 e5       	ldi	r18, 0x58	; 88
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	f9 01       	movw	r30, r18
    188c:	20 81       	ld	r18, Z
    188e:	28 60       	ori	r18, 0x08	; 8
    1890:	fc 01       	movw	r30, r24
    1892:	20 83       	st	Z, r18
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    1894:	53 c0       	rjmp	.+166    	; 0x193c <TIM_GetStatus+0x256>
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1896:	8d ef       	ldi	r24, 0xFD	; 253
    1898:	55 c0       	rjmp	.+170    	; 0x1944 <TIM_GetStatus+0x25e>
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	c9 01       	movw	r24, r18
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	82 0f       	add	r24, r18
    18a8:	93 1f       	adc	r25, r19
    18aa:	8c 52       	subi	r24, 0x2C	; 44
    18ac:	9f 4f       	sbci	r25, 0xFF	; 255
    18ae:	fc 01       	movw	r30, r24
    18b0:	80 81       	ld	r24, Z
    18b2:	88 23       	and	r24, r24
    18b4:	d1 f4       	brne	.+52     	; 0x18ea <TIM_GetStatus+0x204>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
    18b6:	88 e5       	ldi	r24, 0x58	; 88
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	fc 01       	movw	r30, r24
    18bc:	80 81       	ld	r24, Z
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	80 74       	andi	r24, 0x40	; 64
    18c4:	99 27       	eor	r25, r25
    18c6:	89 2b       	or	r24, r25
    18c8:	71 f0       	breq	.+28     	; 0x18e6 <TIM_GetStatus+0x200>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	9b 81       	ldd	r25, Y+3	; 0x03
    18ce:	fc 01       	movw	r30, r24
    18d0:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
    18d2:	88 e5       	ldi	r24, 0x58	; 88
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	28 e5       	ldi	r18, 0x58	; 88
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	f9 01       	movw	r30, r18
    18dc:	20 81       	ld	r18, Z
    18de:	20 64       	ori	r18, 0x40	; 64
    18e0:	fc 01       	movw	r30, r24
    18e2:	20 83       	st	Z, r18
            {
               return TIMER_E_PENDING;
            }
         }
         
         break;
    18e4:	2d c0       	rjmp	.+90     	; 0x1940 <TIM_GetStatus+0x25a>
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    18e6:	8d ef       	ldi	r24, 0xFD	; 253
    18e8:	2d c0       	rjmp	.+90     	; 0x1944 <TIM_GetStatus+0x25e>
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	c9 01       	movw	r24, r18
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	82 0f       	add	r24, r18
    18f8:	93 1f       	adc	r25, r19
    18fa:	8c 52       	subi	r24, 0x2C	; 44
    18fc:	9f 4f       	sbci	r25, 0xFF	; 255
    18fe:	fc 01       	movw	r30, r24
    1900:	80 81       	ld	r24, Z
    1902:	88 30       	cpi	r24, 0x08	; 8
    1904:	e9 f4       	brne	.+58     	; 0x1940 <TIM_GetStatus+0x25a>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
    1906:	88 e5       	ldi	r24, 0x58	; 88
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	fc 01       	movw	r30, r24
    190c:	80 81       	ld	r24, Z
    190e:	88 23       	and	r24, r24
    1910:	7c f4       	brge	.+30     	; 0x1930 <TIM_GetStatus+0x24a>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	9b 81       	ldd	r25, Y+3	; 0x03
    1916:	21 e0       	ldi	r18, 0x01	; 1
    1918:	fc 01       	movw	r30, r24
    191a:	20 83       	st	Z, r18
               TIFR |= TIMER_2_COMPARE_FLAG;
    191c:	88 e5       	ldi	r24, 0x58	; 88
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	28 e5       	ldi	r18, 0x58	; 88
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	f9 01       	movw	r30, r18
    1926:	20 81       	ld	r18, Z
    1928:	20 68       	ori	r18, 0x80	; 128
    192a:	fc 01       	movw	r30, r24
    192c:	20 83       	st	Z, r18
            {
               return TIMER_E_PENDING;
            }
         }
         
         break;
    192e:	08 c0       	rjmp	.+16     	; 0x1940 <TIM_GetStatus+0x25a>
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1930:	8d ef       	ldi	r24, 0xFD	; 253
    1932:	08 c0       	rjmp	.+16     	; 0x1944 <TIM_GetStatus+0x25e>
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    1934:	8e ef       	ldi	r24, 0xFE	; 254
    1936:	06 c0       	rjmp	.+12     	; 0x1944 <TIM_GetStatus+0x25e>
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    1938:	00 00       	nop
    193a:	03 c0       	rjmp	.+6      	; 0x1942 <TIM_GetStatus+0x25c>
            else
            {
               return TIMER_E_PENDING;
            }
         }
         break;
    193c:	00 00       	nop
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <TIM_GetStatus+0x25c>
            {
               return TIMER_E_PENDING;
            }
         }
         
         break;
    1940:	00 00       	nop
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1942:	80 e0       	ldi	r24, 0x00	; 0
}
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	08 95       	ret

00001950 <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1950:	ef 92       	push	r14
    1952:	ff 92       	push	r15
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	2c 97       	sbiw	r28, 0x0c	; 12
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	8e 83       	std	Y+6, r24	; 0x06
    196e:	4f 83       	std	Y+7, r20	; 0x07
    1970:	58 87       	std	Y+8, r21	; 0x08
    1972:	69 87       	std	Y+9, r22	; 0x09
    1974:	7a 87       	std	Y+10, r23	; 0x0a
    1976:	3c 87       	std	Y+12, r19	; 0x0c
    1978:	2b 87       	std	Y+11, r18	; 0x0b
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    197a:	8e 81       	ldd	r24, Y+6	; 0x06
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	10 f0       	brcs	.+4      	; 0x1984 <TIM_DelayUs+0x34>
   {
      return TIMER_E_INVALID_CH_NUM;
    1980:	8e ef       	ldi	r24, 0xFE	; 254
    1982:	7e c0       	rjmp	.+252    	; 0x1a80 <TIM_DelayUs+0x130>
   }
   
   if(NULL_PTR == DelayRequester)
    1984:	8b 85       	ldd	r24, Y+11	; 0x0b
    1986:	9c 85       	ldd	r25, Y+12	; 0x0c
    1988:	89 2b       	or	r24, r25
    198a:	11 f4       	brne	.+4      	; 0x1990 <TIM_DelayUs+0x40>
   {
      return ERROR_NOK;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	78 c0       	rjmp	.+240    	; 0x1a80 <TIM_DelayUs+0x130>
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    1990:	8b 85       	ldd	r24, Y+11	; 0x0b
    1992:	9c 85       	ldd	r25, Y+12	; 0x0c
    1994:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <gptr_CallerFunc+0x1>
    1998:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <gptr_CallerFunc>
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    199c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <gEnu_State>
    19a0:	88 23       	and	r24, r24
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <TIM_DelayUs+0x56>
    19a4:	6c c0       	rjmp	.+216    	; 0x1a7e <TIM_DelayUs+0x12e>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    19a6:	ce 01       	movw	r24, r28
    19a8:	02 96       	adiw	r24, 0x02	; 2
    19aa:	bc 01       	movw	r22, r24
    19ac:	8e 81       	ldd	r24, Y+6	; 0x06
    19ae:	0e 94 66 09 	call	0x12cc	; 0x12cc <GetFreqPrescaleRatio>
    19b2:	89 83       	std	Y+1, r24	; 0x01
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	8c 3f       	cpi	r24, 0xFC	; 252
    19b8:	11 f4       	brne	.+4      	; 0x19be <TIM_DelayUs+0x6e>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    19ba:	8c ef       	ldi	r24, 0xFC	; 252
    19bc:	61 c0       	rjmp	.+194    	; 0x1a80 <TIM_DelayUs+0x130>
      }
      
      if(f32_FreqRatio != 0)
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	9b 81       	ldd	r25, Y+3	; 0x03
    19c2:	ac 81       	ldd	r26, Y+4	; 0x04
    19c4:	bd 81       	ldd	r27, Y+5	; 0x05
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	a9 01       	movw	r20, r18
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 b1 10 	call	0x2162	; 0x2162 <__cmpsf2>
    19d4:	88 23       	and	r24, r24
    19d6:	f1 f0       	breq	.+60     	; 0x1a14 <TIM_DelayUs+0xc4>
      {
         TIM_Delay /= f32_FreqRatio;
    19d8:	6f 81       	ldd	r22, Y+7	; 0x07
    19da:	78 85       	ldd	r23, Y+8	; 0x08
    19dc:	89 85       	ldd	r24, Y+9	; 0x09
    19de:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e0:	0e 94 57 11 	call	0x22ae	; 0x22ae <__floatunsisf>
    19e4:	7b 01       	movw	r14, r22
    19e6:	8c 01       	movw	r16, r24
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	9b 81       	ldd	r25, Y+3	; 0x03
    19ec:	ac 81       	ldd	r26, Y+4	; 0x04
    19ee:	bd 81       	ldd	r27, Y+5	; 0x05
    19f0:	9c 01       	movw	r18, r24
    19f2:	ad 01       	movw	r20, r26
    19f4:	c8 01       	movw	r24, r16
    19f6:	b7 01       	movw	r22, r14
    19f8:	0e 94 b6 10 	call	0x216c	; 0x216c <__divsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 28 11 	call	0x2250	; 0x2250 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	8f 83       	std	Y+7, r24	; 0x07
    1a0e:	98 87       	std	Y+8, r25	; 0x08
    1a10:	a9 87       	std	Y+9, r26	; 0x09
    1a12:	ba 87       	std	Y+10, r27	; 0x0a
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    1a14:	8f 81       	ldd	r24, Y+7	; 0x07
    1a16:	98 85       	ldd	r25, Y+8	; 0x08
    1a18:	a9 85       	ldd	r26, Y+9	; 0x09
    1a1a:	ba 85       	ldd	r27, Y+10	; 0x0a
    1a1c:	89 2f       	mov	r24, r25
    1a1e:	9a 2f       	mov	r25, r26
    1a20:	ab 2f       	mov	r26, r27
    1a22:	bb 27       	eor	r27, r27
    1a24:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <gu32_Overflows>
    1a28:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <gu32_Overflows+0x1>
    1a2c:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <gu32_Overflows+0x2>
    1a30:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    1a34:	8f 81       	ldd	r24, Y+7	; 0x07
    1a36:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    1a3a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <gu32_Overflows>
    1a3e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <gu32_Overflows+0x1>
    1a42:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <gu32_Overflows+0x2>
    1a46:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <gu32_Overflows+0x3>
    1a4a:	89 2b       	or	r24, r25
    1a4c:	8a 2b       	or	r24, r26
    1a4e:	8b 2b       	or	r24, r27
    1a50:	61 f4       	brne	.+24     	; 0x1a6a <TIM_DelayUs+0x11a>
      {
         gu8_OverflowsComplete = HIGH;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    1a58:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <gu8_Remindar>
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	bc 01       	movw	r22, r24
    1a62:	8e 81       	ldd	r24, Y+6	; 0x06
    1a64:	0e 94 13 0b 	call	0x1626	; 0x1626 <TIM_Start>
    1a68:	05 c0       	rjmp	.+10     	; 0x1a74 <TIM_DelayUs+0x124>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1a6a:	6f ef       	ldi	r22, 0xFF	; 255
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a70:	0e 94 13 0b 	call	0x1626	; 0x1626 <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <gEnu_State>
      return TIMER_E_PENDING;
    1a7a:	8d ef       	ldi	r24, 0xFD	; 253
    1a7c:	01 c0       	rjmp	.+2      	; 0x1a80 <TIM_DelayUs+0x130>
   }
   
   return ERROR_NOK;            
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
}
    1a80:	2c 96       	adiw	r28, 0x0c	; 12
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	ff 90       	pop	r15
    1a96:	ef 90       	pop	r14
    1a98:	08 95       	ret

00001a9a <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1a9a:	ef 92       	push	r14
    1a9c:	ff 92       	push	r15
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	2c 97       	sbiw	r28, 0x0c	; 12
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	8e 83       	std	Y+6, r24	; 0x06
    1ab8:	4f 83       	std	Y+7, r20	; 0x07
    1aba:	58 87       	std	Y+8, r21	; 0x08
    1abc:	69 87       	std	Y+9, r22	; 0x09
    1abe:	7a 87       	std	Y+10, r23	; 0x0a
    1ac0:	3c 87       	std	Y+12, r19	; 0x0c
    1ac2:	2b 87       	std	Y+11, r18	; 0x0b
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1ac4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac6:	83 30       	cpi	r24, 0x03	; 3
    1ac8:	10 f0       	brcs	.+4      	; 0x1ace <TIM_DelayMs+0x34>
   {
      return TIMER_E_INVALID_CH_NUM;
    1aca:	8e ef       	ldi	r24, 0xFE	; 254
    1acc:	89 c0       	rjmp	.+274    	; 0x1be0 <TIM_DelayMs+0x146>
   }
   
   if(NULL_PTR == DelayRequester)
    1ace:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ad0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ad2:	89 2b       	or	r24, r25
    1ad4:	11 f4       	brne	.+4      	; 0x1ada <TIM_DelayMs+0x40>
   {
      return ERROR_NOK;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	83 c0       	rjmp	.+262    	; 0x1be0 <TIM_DelayMs+0x146>
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    1ada:	8b 85       	ldd	r24, Y+11	; 0x0b
    1adc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ade:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <gptr_CallerFunc+0x1>
    1ae2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <gptr_CallerFunc>
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    1ae6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <gEnu_State>
    1aea:	88 23       	and	r24, r24
    1aec:	09 f0       	breq	.+2      	; 0x1af0 <TIM_DelayMs+0x56>
    1aee:	77 c0       	rjmp	.+238    	; 0x1bde <TIM_DelayMs+0x144>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    1af0:	ce 01       	movw	r24, r28
    1af2:	02 96       	adiw	r24, 0x02	; 2
    1af4:	bc 01       	movw	r22, r24
    1af6:	8e 81       	ldd	r24, Y+6	; 0x06
    1af8:	0e 94 66 09 	call	0x12cc	; 0x12cc <GetFreqPrescaleRatio>
    1afc:	89 83       	std	Y+1, r24	; 0x01
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	8c 3f       	cpi	r24, 0xFC	; 252
    1b02:	11 f4       	brne	.+4      	; 0x1b08 <TIM_DelayMs+0x6e>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1b04:	8c ef       	ldi	r24, 0xFC	; 252
    1b06:	6c c0       	rjmp	.+216    	; 0x1be0 <TIM_DelayMs+0x146>
      }
      
      if(f32_FreqRatio != 0)
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0c:	ac 81       	ldd	r26, Y+4	; 0x04
    1b0e:	bd 81       	ldd	r27, Y+5	; 0x05
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	a9 01       	movw	r20, r18
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 b1 10 	call	0x2162	; 0x2162 <__cmpsf2>
    1b1e:	88 23       	and	r24, r24
    1b20:	f1 f0       	breq	.+60     	; 0x1b5e <TIM_DelayMs+0xc4>
      {
         TIM_Delay /= f32_FreqRatio;
    1b22:	6f 81       	ldd	r22, Y+7	; 0x07
    1b24:	78 85       	ldd	r23, Y+8	; 0x08
    1b26:	89 85       	ldd	r24, Y+9	; 0x09
    1b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2a:	0e 94 57 11 	call	0x22ae	; 0x22ae <__floatunsisf>
    1b2e:	7b 01       	movw	r14, r22
    1b30:	8c 01       	movw	r16, r24
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	9b 81       	ldd	r25, Y+3	; 0x03
    1b36:	ac 81       	ldd	r26, Y+4	; 0x04
    1b38:	bd 81       	ldd	r27, Y+5	; 0x05
    1b3a:	9c 01       	movw	r18, r24
    1b3c:	ad 01       	movw	r20, r26
    1b3e:	c8 01       	movw	r24, r16
    1b40:	b7 01       	movw	r22, r14
    1b42:	0e 94 b6 10 	call	0x216c	; 0x216c <__divsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	0e 94 28 11 	call	0x2250	; 0x2250 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	8f 83       	std	Y+7, r24	; 0x07
    1b58:	98 87       	std	Y+8, r25	; 0x08
    1b5a:	a9 87       	std	Y+9, r26	; 0x09
    1b5c:	ba 87       	std	Y+10, r27	; 0x0a
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    1b5e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b60:	38 85       	ldd	r19, Y+8	; 0x08
    1b62:	49 85       	ldd	r20, Y+9	; 0x09
    1b64:	5a 85       	ldd	r21, Y+10	; 0x0a
    1b66:	88 ee       	ldi	r24, 0xE8	; 232
    1b68:	93 e0       	ldi	r25, 0x03	; 3
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__muluhisi3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	89 2f       	mov	r24, r25
    1b76:	9a 2f       	mov	r25, r26
    1b78:	ab 2f       	mov	r26, r27
    1b7a:	bb 27       	eor	r27, r27
    1b7c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <gu32_Overflows>
    1b80:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <gu32_Overflows+0x1>
    1b84:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <gu32_Overflows+0x2>
    1b88:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    1b8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b8e:	88 ee       	ldi	r24, 0xE8	; 232
    1b90:	98 9f       	mul	r25, r24
    1b92:	80 2d       	mov	r24, r0
    1b94:	11 24       	eor	r1, r1
    1b96:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    1b9a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <gu32_Overflows>
    1b9e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <gu32_Overflows+0x1>
    1ba2:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <gu32_Overflows+0x2>
    1ba6:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <gu32_Overflows+0x3>
    1baa:	89 2b       	or	r24, r25
    1bac:	8a 2b       	or	r24, r26
    1bae:	8b 2b       	or	r24, r27
    1bb0:	61 f4       	brne	.+24     	; 0x1bca <TIM_DelayMs+0x130>
      {
         gu8_OverflowsComplete = HIGH;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    1bb8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <gu8_Remindar>
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc4:	0e 94 13 0b 	call	0x1626	; 0x1626 <TIM_Start>
    1bc8:	05 c0       	rjmp	.+10     	; 0x1bd4 <TIM_DelayMs+0x13a>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1bca:	6f ef       	ldi	r22, 0xFF	; 255
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd0:	0e 94 13 0b 	call	0x1626	; 0x1626 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <gEnu_State>
      return TIMER_E_PENDING;
    1bda:	8d ef       	ldi	r24, 0xFD	; 253
    1bdc:	01 c0       	rjmp	.+2      	; 0x1be0 <TIM_DelayMs+0x146>
   }
   
   return ERROR_NOK;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
}
    1be0:	2c 96       	adiw	r28, 0x0c	; 12
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	1f 91       	pop	r17
    1bf2:	0f 91       	pop	r16
    1bf4:	ff 90       	pop	r15
    1bf6:	ef 90       	pop	r14
    1bf8:	08 95       	ret

00001bfa <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <TIM_DelayStatus+0x6>
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <TIM_DelayStatus+0x8>
    1c02:	1f 92       	push	r1
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	8b 83       	std	Y+3, r24	; 0x03
    1c0a:	7d 83       	std	Y+5, r23	; 0x05
    1c0c:	6c 83       	std	Y+4, r22	; 0x04
   if(DelayReady == gEnu_State)
    1c0e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <gEnu_State>
    1c12:	88 23       	and	r24, r24
    1c14:	11 f4       	brne	.+4      	; 0x1c1a <TIM_DelayStatus+0x20>
   {
      return TIMER_E_DELAY_EMPTY;
    1c16:	8b ef       	ldi	r24, 0xFB	; 251
    1c18:	5c c0       	rjmp	.+184    	; 0x1cd2 <TIM_DelayStatus+0xd8>
   }
   
   if(DelayRequester != gptr_CallerFunc)
    1c1a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <gptr_CallerFunc>
    1c1e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <gptr_CallerFunc+0x1>
    1c22:	2c 81       	ldd	r18, Y+4	; 0x04
    1c24:	3d 81       	ldd	r19, Y+5	; 0x05
    1c26:	28 17       	cp	r18, r24
    1c28:	39 07       	cpc	r19, r25
    1c2a:	11 f0       	breq	.+4      	; 0x1c30 <TIM_DelayStatus+0x36>
   {
      return ERROR_NOK;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	51 c0       	rjmp	.+162    	; 0x1cd2 <TIM_DelayStatus+0xd8>
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    1c30:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <gEnu_State>
    1c34:	81 30       	cpi	r24, 0x01	; 1
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <TIM_DelayStatus+0x40>
    1c38:	49 c0       	rjmp	.+146    	; 0x1ccc <TIM_DelayStatus+0xd2>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	02 96       	adiw	r24, 0x02	; 2
    1c3e:	bc 01       	movw	r22, r24
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <TIM_GetStatus>
    1c46:	89 83       	std	Y+1, r24	; 0x01
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	88 23       	and	r24, r24
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <TIM_DelayStatus+0x56>
    1c4e:	40 c0       	rjmp	.+128    	; 0x1cd0 <TIM_DelayStatus+0xd6>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    1c50:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <gu8_OverflowsComplete>
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	41 f4       	brne	.+16     	; 0x1c68 <TIM_DelayStatus+0x6e>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    1c58:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <gEnu_State>
            gu8_OverflowsComplete = LOW;
    1c5c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <gu8_OverflowsComplete>
            gu8_Remindar = 0;
    1c60:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <gu8_Remindar>
            /* return success message. */
            return ERROR_OK;
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	35 c0       	rjmp	.+106    	; 0x1cd2 <TIM_DelayStatus+0xd8>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    1c68:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <gu32_Overflows>
    1c6c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <gu32_Overflows+0x1>
    1c70:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <gu32_Overflows+0x2>
    1c74:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <gu32_Overflows+0x3>
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	a1 09       	sbc	r26, r1
    1c7c:	b1 09       	sbc	r27, r1
    1c7e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <gu32_Overflows>
    1c82:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <gu32_Overflows+0x1>
    1c86:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <gu32_Overflows+0x2>
    1c8a:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <gu32_Overflows+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    1c8e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <gu32_Overflows>
    1c92:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <gu32_Overflows+0x1>
    1c96:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <gu32_Overflows+0x2>
    1c9a:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <gu32_Overflows+0x3>
    1c9e:	89 2b       	or	r24, r25
    1ca0:	8a 2b       	or	r24, r26
    1ca2:	8b 2b       	or	r24, r27
    1ca4:	61 f4       	brne	.+24     	; 0x1cbe <TIM_DelayStatus+0xc4>
         {
            gu8_OverflowsComplete = HIGH;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <gu8_OverflowsComplete>
            TIM_Start(TIM_channel, gu8_Remindar);
    1cac:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <gu8_Remindar>
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	0e 94 13 0b 	call	0x1626	; 0x1626 <TIM_Start>
    1cbc:	05 c0       	rjmp	.+10     	; 0x1cc8 <TIM_DelayStatus+0xce>
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    1cbe:	6f ef       	ldi	r22, 0xFF	; 255
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	0e 94 13 0b 	call	0x1626	; 0x1626 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    1cc8:	8d ef       	ldi	r24, 0xFD	; 253
    1cca:	03 c0       	rjmp	.+6      	; 0x1cd2 <TIM_DelayStatus+0xd8>
      }
   }
   else
   {
      return ERROR_NOK;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	01 c0       	rjmp	.+2      	; 0x1cd2 <TIM_DelayStatus+0xd8>
   }
   return 0;
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	df 91       	pop	r29
    1cde:	cf 91       	pop	r28
    1ce0:	08 95       	ret

00001ce2 <DISPLAY_MainFunction>:
/*Moving to the interface files*/
uint8_t Number_of_Asteriks = 0;
uint8_t State = OperationStarted;//OperationStarted
uint8_t WrongPassEntries = 0;
void DISPLAY_MainFunction(void)
{
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <DISPLAY_MainFunction+0x6>
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
	uint8_t static Last_state = OperationStarted;
	uint8_t static Counter = 0;
	DISPLAY_GetNumber_of_Asterisk(&Number_of_Asteriks);
    1cec:	8d e1       	ldi	r24, 0x1D	; 29
    1cee:	91 e0       	ldi	r25, 0x01	; 1
    1cf0:	0e 94 66 10 	call	0x20cc	; 0x20cc <DISPLAY_GetNumber_of_Asterisk>
	DISPLAY_GetState(&State);
    1cf4:	83 e6       	ldi	r24, 0x63	; 99
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <DISPLAY_GetState>
	if((Last_state == CorrectPassword || Last_state == WrongPassword || Last_state == Waiting)&&(Counter!=0))
    1cfc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Last_state.1744>
    1d00:	86 30       	cpi	r24, 0x06	; 6
    1d02:	41 f0       	breq	.+16     	; 0x1d14 <DISPLAY_MainFunction+0x32>
    1d04:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Last_state.1744>
    1d08:	87 30       	cpi	r24, 0x07	; 7
    1d0a:	21 f0       	breq	.+8      	; 0x1d14 <DISPLAY_MainFunction+0x32>
    1d0c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Last_state.1744>
    1d10:	88 30       	cpi	r24, 0x08	; 8
    1d12:	41 f4       	brne	.+16     	; 0x1d24 <DISPLAY_MainFunction+0x42>
    1d14:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Counter.1745>
    1d18:	88 23       	and	r24, r24
    1d1a:	21 f0       	breq	.+8      	; 0x1d24 <DISPLAY_MainFunction+0x42>
	{
		State = Last_state;
    1d1c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Last_state.1744>
    1d20:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State>
	}
	switch(State)
    1d24:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <State>
    1d28:	88 2f       	mov	r24, r24
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	09 2e       	mov	r0, r25
    1d2e:	00 0c       	add	r0, r0
    1d30:	aa 0b       	sbc	r26, r26
    1d32:	bb 0b       	sbc	r27, r27
    1d34:	43 e0       	ldi	r20, 0x03	; 3
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	27 e0       	ldi	r18, 0x07	; 7
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	84 1b       	sub	r24, r20
    1d3e:	95 0b       	sbc	r25, r21
    1d40:	28 17       	cp	r18, r24
    1d42:	39 07       	cpc	r19, r25
    1d44:	08 f4       	brcc	.+2      	; 0x1d48 <DISPLAY_MainFunction+0x66>
    1d46:	f9 c0       	rjmp	.+498    	; 0x1f3a <DISPLAY_MainFunction+0x258>
    1d48:	8f 5c       	subi	r24, 0xCF	; 207
    1d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__tablejump2__>
	{
		case SystemLoading:
			while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1d52:	00 00       	nop
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    1d5a:	88 23       	and	r24, r24
    1d5c:	d9 f7       	brne	.-10     	; 0x1d54 <DISPLAY_MainFunction+0x72>
			DISPLAY_ShiftAndDisplay(14, (uint8_t*)"System Loading");
    1d5e:	67 e6       	ldi	r22, 0x67	; 103
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	8e e0       	ldi	r24, 0x0E	; 14
    1d64:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <DISPLAY_ShiftAndDisplay>
			break;
    1d68:	ef c0       	rjmp	.+478    	; 0x1f48 <DISPLAY_MainFunction+0x266>
		case Welcome:
			while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1d6a:	00 00       	nop
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    1d72:	88 23       	and	r24, r24
    1d74:	d9 f7       	brne	.-10     	; 0x1d6c <DISPLAY_MainFunction+0x8a>
			DISPLAY_ShiftAndDisplay(7, (uint8_t*)"Welcome");
    1d76:	66 e7       	ldi	r22, 0x76	; 118
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	87 e0       	ldi	r24, 0x07	; 7
    1d7c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <DISPLAY_ShiftAndDisplay>
			break;
    1d80:	e3 c0       	rjmp	.+454    	; 0x1f48 <DISPLAY_MainFunction+0x266>
		case PassEntering:
			while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1d82:	00 00       	nop
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    1d8a:	88 23       	and	r24, r24
    1d8c:	d9 f7       	brne	.-10     	; 0x1d84 <DISPLAY_MainFunction+0xa2>
			while (LCD_SendCommand(0xc0)!=OperationSuccess);
    1d8e:	00 00       	nop
    1d90:	80 ec       	ldi	r24, 0xC0	; 192
    1d92:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    1d96:	88 23       	and	r24, r24
    1d98:	d9 f7       	brne	.-10     	; 0x1d90 <DISPLAY_MainFunction+0xae>
			for(uint8_t iterator = 0; iterator<Number_of_Asteriks; iterator++)
    1d9a:	19 82       	std	Y+1, r1	; 0x01
    1d9c:	0c c0       	rjmp	.+24     	; 0x1db6 <DISPLAY_MainFunction+0xd4>
			{
				if(iterator>6)
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	87 30       	cpi	r24, 0x07	; 7
    1da2:	78 f4       	brcc	.+30     	; 0x1dc2 <DISPLAY_MainFunction+0xe0>
				break;
				while(LCD_SendData('*')!=OperationSuccess);
    1da4:	00 00       	nop
    1da6:	8a e2       	ldi	r24, 0x2A	; 42
    1da8:	0e 94 35 04 	call	0x86a	; 0x86a <LCD_SendData>
    1dac:	88 23       	and	r24, r24
    1dae:	d9 f7       	brne	.-10     	; 0x1da6 <DISPLAY_MainFunction+0xc4>
			DISPLAY_ShiftAndDisplay(7, (uint8_t*)"Welcome");
			break;
		case PassEntering:
			while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
			while (LCD_SendCommand(0xc0)!=OperationSuccess);
			for(uint8_t iterator = 0; iterator<Number_of_Asteriks; iterator++)
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	8f 5f       	subi	r24, 0xFF	; 255
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Number_of_Asteriks>
    1dba:	99 81       	ldd	r25, Y+1	; 0x01
    1dbc:	98 17       	cp	r25, r24
    1dbe:	78 f3       	brcs	.-34     	; 0x1d9e <DISPLAY_MainFunction+0xbc>
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <DISPLAY_MainFunction+0xe2>
			{
				if(iterator>6)
				break;
    1dc2:	00 00       	nop
				while(LCD_SendData('*')!=OperationSuccess);
			}
			DISPLAY_ShiftAndDisplay(10,(uint8_t*)"Enter Pass");
    1dc4:	6e e7       	ldi	r22, 0x7E	; 126
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	8a e0       	ldi	r24, 0x0A	; 10
    1dca:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <DISPLAY_ShiftAndDisplay>
			break;
    1dce:	bc c0       	rjmp	.+376    	; 0x1f48 <DISPLAY_MainFunction+0x266>
		case CorrectPassword:
			if(Counter == 40)
    1dd0:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Counter.1745>
    1dd4:	88 32       	cpi	r24, 0x28	; 40
    1dd6:	41 f4       	brne	.+16     	; 0x1de8 <DISPLAY_MainFunction+0x106>
			{
				WrongPassEntries = 0;
    1dd8:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <WrongPassEntries>
				Counter = 0;
    1ddc:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Counter.1745>
				//State = SevenSegments;
				DISPLAY_SetState(SevenSegments);
    1de0:	89 e0       	ldi	r24, 0x09	; 9
    1de2:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DISPLAY_SetState>
				break;
    1de6:	b0 c0       	rjmp	.+352    	; 0x1f48 <DISPLAY_MainFunction+0x266>
			}
			while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1de8:	00 00       	nop
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    1df0:	88 23       	and	r24, r24
    1df2:	d9 f7       	brne	.-10     	; 0x1dea <DISPLAY_MainFunction+0x108>
			DISPLAY_ShiftAndDisplay(10,(uint8_t*)"Pass OK");
    1df4:	69 e8       	ldi	r22, 0x89	; 137
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	8a e0       	ldi	r24, 0x0A	; 10
    1dfa:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <DISPLAY_ShiftAndDisplay>
			Counter ++;
    1dfe:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Counter.1745>
    1e02:	8f 5f       	subi	r24, 0xFF	; 255
    1e04:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Counter.1745>
			break;
    1e08:	9f c0       	rjmp	.+318    	; 0x1f48 <DISPLAY_MainFunction+0x266>
			
			/*Counter*/
		case WrongPassword:
			while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1e0a:	00 00       	nop
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    1e12:	88 23       	and	r24, r24
    1e14:	d9 f7       	brne	.-10     	; 0x1e0c <DISPLAY_MainFunction+0x12a>
			if(Counter == 40)
    1e16:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Counter.1745>
    1e1a:	88 32       	cpi	r24, 0x28	; 40
    1e1c:	99 f4       	brne	.+38     	; 0x1e44 <DISPLAY_MainFunction+0x162>
			{
				Counter = 0;
    1e1e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Counter.1745>
				WrongPassEntries++;
    1e22:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <WrongPassEntries>
    1e26:	8f 5f       	subi	r24, 0xFF	; 255
    1e28:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <WrongPassEntries>
				if(WrongPassEntries==3)
    1e2c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <WrongPassEntries>
    1e30:	83 30       	cpi	r24, 0x03	; 3
    1e32:	21 f4       	brne	.+8      	; 0x1e3c <DISPLAY_MainFunction+0x15a>
				DISPLAY_SetState(Waiting);
    1e34:	88 e0       	ldi	r24, 0x08	; 8
    1e36:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DISPLAY_SetState>
				else
				DISPLAY_SetState(PassEntering);
				break;
    1e3a:	86 c0       	rjmp	.+268    	; 0x1f48 <DISPLAY_MainFunction+0x266>
				Counter = 0;
				WrongPassEntries++;
				if(WrongPassEntries==3)
				DISPLAY_SetState(Waiting);
				else
				DISPLAY_SetState(PassEntering);
    1e3c:	85 e0       	ldi	r24, 0x05	; 5
    1e3e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DISPLAY_SetState>
				break;
    1e42:	82 c0       	rjmp	.+260    	; 0x1f48 <DISPLAY_MainFunction+0x266>
			}
			DISPLAY_ShiftAndDisplay(10,(uint8_t*)"Wrong Pass");
    1e44:	61 e9       	ldi	r22, 0x91	; 145
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	8a e0       	ldi	r24, 0x0A	; 10
    1e4a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <DISPLAY_ShiftAndDisplay>
			/*check the counter*/
			Counter ++;
    1e4e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Counter.1745>
    1e52:	8f 5f       	subi	r24, 0xFF	; 255
    1e54:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Counter.1745>
			break;
    1e58:	77 c0       	rjmp	.+238    	; 0x1f48 <DISPLAY_MainFunction+0x266>
		case Waiting:
			while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1e5a:	00 00       	nop
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    1e62:	88 23       	and	r24, r24
    1e64:	d9 f7       	brne	.-10     	; 0x1e5c <DISPLAY_MainFunction+0x17a>
			while (LCD_SendCommand(0xc0)!=OperationSuccess);
    1e66:	00 00       	nop
    1e68:	80 ec       	ldi	r24, 0xC0	; 192
    1e6a:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    1e6e:	88 23       	and	r24, r24
    1e70:	d9 f7       	brne	.-10     	; 0x1e68 <DISPLAY_MainFunction+0x186>
			LCD_SendNumber((10000-(Counter*50))/1000);
    1e72:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Counter.1745>
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	4e ec       	ldi	r20, 0xCE	; 206
    1e7c:	42 03       	mulsu	r20, r18
    1e7e:	c0 01       	movw	r24, r0
    1e80:	43 9f       	mul	r20, r19
    1e82:	90 0d       	add	r25, r0
    1e84:	11 24       	eor	r1, r1
    1e86:	80 5f       	subi	r24, 0xF0	; 240
    1e88:	98 4d       	sbci	r25, 0xD8	; 216
    1e8a:	28 ee       	ldi	r18, 0xE8	; 232
    1e8c:	33 e0       	ldi	r19, 0x03	; 3
    1e8e:	b9 01       	movw	r22, r18
    1e90:	0e 94 1d 12 	call	0x243a	; 0x243a <__divmodhi4>
    1e94:	cb 01       	movw	r24, r22
    1e96:	09 2e       	mov	r0, r25
    1e98:	00 0c       	add	r0, r0
    1e9a:	aa 0b       	sbc	r26, r26
    1e9c:	bb 0b       	sbc	r27, r27
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <LCD_SendNumber>
			if(Counter == 199)
    1ea6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Counter.1745>
    1eaa:	87 3c       	cpi	r24, 0xC7	; 199
    1eac:	41 f4       	brne	.+16     	; 0x1ebe <DISPLAY_MainFunction+0x1dc>
			{
				WrongPassEntries = 0;
    1eae:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <WrongPassEntries>
				Counter = 0;
    1eb2:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Counter.1745>
				//State = PassEntering;
				DISPLAY_SetState(PassEntering);
    1eb6:	85 e0       	ldi	r24, 0x05	; 5
    1eb8:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DISPLAY_SetState>
				break;
    1ebc:	45 c0       	rjmp	.+138    	; 0x1f48 <DISPLAY_MainFunction+0x266>
			}
			DISPLAY_ShiftAndDisplay(7,(uint8_t*)"Waiting");
    1ebe:	6c e9       	ldi	r22, 0x9C	; 156
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	87 e0       	ldi	r24, 0x07	; 7
    1ec4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <DISPLAY_ShiftAndDisplay>
			/*seconds remaining in the second row*/
			Counter ++;
    1ec8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Counter.1745>
    1ecc:	8f 5f       	subi	r24, 0xFF	; 255
    1ece:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Counter.1745>
			break;
    1ed2:	3a c0       	rjmp	.+116    	; 0x1f48 <DISPLAY_MainFunction+0x266>
		case SevenSegments: 
			while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1ed4:	00 00       	nop
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    1edc:	88 23       	and	r24, r24
    1ede:	d9 f7       	brne	.-10     	; 0x1ed6 <DISPLAY_MainFunction+0x1f4>
			DISPLAY_ShiftAndDisplay(12,(uint8_t*)"System is ON");
    1ee0:	64 ea       	ldi	r22, 0xA4	; 164
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	8c e0       	ldi	r24, 0x0C	; 12
    1ee6:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <DISPLAY_ShiftAndDisplay>
			/*task of seven segment*/
			break;
    1eea:	2e c0       	rjmp	.+92     	; 0x1f48 <DISPLAY_MainFunction+0x266>
		case ChangePassword:
			while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1eec:	00 00       	nop
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    1ef4:	88 23       	and	r24, r24
    1ef6:	d9 f7       	brne	.-10     	; 0x1eee <DISPLAY_MainFunction+0x20c>
			while (LCD_SendCommand(0xc0)!=OperationSuccess);
    1ef8:	00 00       	nop
    1efa:	80 ec       	ldi	r24, 0xC0	; 192
    1efc:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    1f00:	88 23       	and	r24, r24
    1f02:	d9 f7       	brne	.-10     	; 0x1efa <DISPLAY_MainFunction+0x218>
			for(uint8_t iterator = 0; iterator<Number_of_Asteriks; iterator++)
    1f04:	1a 82       	std	Y+2, r1	; 0x02
    1f06:	0c c0       	rjmp	.+24     	; 0x1f20 <DISPLAY_MainFunction+0x23e>
			{
				if(iterator>6)
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	87 30       	cpi	r24, 0x07	; 7
    1f0c:	78 f4       	brcc	.+30     	; 0x1f2c <DISPLAY_MainFunction+0x24a>
				break;
				while(LCD_SendData('*')!=OperationSuccess);
    1f0e:	00 00       	nop
    1f10:	8a e2       	ldi	r24, 0x2A	; 42
    1f12:	0e 94 35 04 	call	0x86a	; 0x86a <LCD_SendData>
    1f16:	88 23       	and	r24, r24
    1f18:	d9 f7       	brne	.-10     	; 0x1f10 <DISPLAY_MainFunction+0x22e>
			/*task of seven segment*/
			break;
		case ChangePassword:
			while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
			while (LCD_SendCommand(0xc0)!=OperationSuccess);
			for(uint8_t iterator = 0; iterator<Number_of_Asteriks; iterator++)
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	8f 5f       	subi	r24, 0xFF	; 255
    1f1e:	8a 83       	std	Y+2, r24	; 0x02
    1f20:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Number_of_Asteriks>
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	98 17       	cp	r25, r24
    1f28:	78 f3       	brcs	.-34     	; 0x1f08 <DISPLAY_MainFunction+0x226>
    1f2a:	01 c0       	rjmp	.+2      	; 0x1f2e <DISPLAY_MainFunction+0x24c>
			{
				if(iterator>6)
				break;
    1f2c:	00 00       	nop
				while(LCD_SendData('*')!=OperationSuccess);
			}
			DISPLAY_ShiftAndDisplay(13,(uint8_t*)"Changing Pass");
    1f2e:	61 eb       	ldi	r22, 0xB1	; 177
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	8d e0       	ldi	r24, 0x0D	; 13
    1f34:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <DISPLAY_ShiftAndDisplay>
			/*Stars on the second ROW*/
			break;
    1f38:	07 c0       	rjmp	.+14     	; 0x1f48 <DISPLAY_MainFunction+0x266>
		default:
			while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1f3a:	00 00       	nop
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    1f42:	88 23       	and	r24, r24
    1f44:	d9 f7       	brne	.-10     	; 0x1f3c <DISPLAY_MainFunction+0x25a>
			break;
    1f46:	00 00       	nop
	}
	Last_state = State;
    1f48:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <State>
    1f4c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Last_state.1744>
}
    1f50:	00 00       	nop
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	08 95       	ret

00001f5c <DISPLAY_ShiftAndDisplay>:
#if 1
void DISPLAY_ShiftAndDisplay(uint8_t StringLength, uint8_t* StringPTR)
{
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <DISPLAY_ShiftAndDisplay+0x6>
    1f62:	1f 92       	push	r1
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	7b 83       	std	Y+3, r23	; 0x03
    1f6c:	6a 83       	std	Y+2, r22	; 0x02
	uint8_t static State = OperationStarted;
	
	switch(State)
    1f6e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <State.1810>
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	82 30       	cpi	r24, 0x02	; 2
    1f78:	91 05       	cpc	r25, r1
    1f7a:	a9 f1       	breq	.+106    	; 0x1fe6 <DISPLAY_ShiftAndDisplay+0x8a>
    1f7c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f7e:	91 05       	cpc	r25, r1
    1f80:	21 f0       	breq	.+8      	; 0x1f8a <DISPLAY_ShiftAndDisplay+0x2e>
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <DISPLAY_ShiftAndDisplay+0x2c>
    1f86:	66 c0       	rjmp	.+204    	; 0x2054 <DISPLAY_ShiftAndDisplay+0xf8>
			while(LCD_SendCommand(0x80|Position) != OperationSuccess);
			while(LCD_SendString(StringPTR) != OperationSuccess);
			while(LCD_SendData(' ')!= OperationSuccess);
			break;
		default:
			break;
    1f88:	87 c0       	rjmp	.+270    	; 0x2098 <DISPLAY_ShiftAndDisplay+0x13c>
	uint8_t static State = OperationStarted;
	
	switch(State)
	{
		case OperationStarted:
			if(Position<16-StringLength)
    1f8a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Position>
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	88 2f       	mov	r24, r24
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	40 e1       	ldi	r20, 0x10	; 16
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	ba 01       	movw	r22, r20
    1f9e:	68 1b       	sub	r22, r24
    1fa0:	79 0b       	sbc	r23, r25
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	28 17       	cp	r18, r24
    1fa6:	39 07       	cpc	r19, r25
    1fa8:	24 f4       	brge	.+8      	; 0x1fb2 <DISPLAY_ShiftAndDisplay+0x56>
			{
				State = ShiftingRight;
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <State.1810>
			else
			{
				Position = 0;
				State = ShiftingRight;
			}
			break;
    1fb0:	73 c0       	rjmp	.+230    	; 0x2098 <DISPLAY_ShiftAndDisplay+0x13c>
		case OperationStarted:
			if(Position<16-StringLength)
			{
				State = ShiftingRight;
			}
			else if (Position == 15-StringLength)
    1fb2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Position>
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	88 2f       	mov	r24, r24
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	4f e0       	ldi	r20, 0x0F	; 15
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	ba 01       	movw	r22, r20
    1fc6:	68 1b       	sub	r22, r24
    1fc8:	79 0b       	sbc	r23, r25
    1fca:	cb 01       	movw	r24, r22
    1fcc:	28 17       	cp	r18, r24
    1fce:	39 07       	cpc	r19, r25
    1fd0:	21 f4       	brne	.+8      	; 0x1fda <DISPLAY_ShiftAndDisplay+0x7e>
			{
				State = ShiftingLeft;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <State.1810>
			else
			{
				Position = 0;
				State = ShiftingRight;
			}
			break;
    1fd8:	5f c0       	rjmp	.+190    	; 0x2098 <DISPLAY_ShiftAndDisplay+0x13c>
			{
				State = ShiftingLeft;
			}
			else
			{
				Position = 0;
    1fda:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <Position>
				State = ShiftingRight;
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <State.1810>
			}
			break;
    1fe4:	59 c0       	rjmp	.+178    	; 0x2098 <DISPLAY_ShiftAndDisplay+0x13c>
		case ShiftingRight:
			while(LCD_SendCommand(0x80|Position) != OperationSuccess);
    1fe6:	00 00       	nop
    1fe8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Position>
    1fec:	80 68       	ori	r24, 0x80	; 128
    1fee:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    1ff2:	88 23       	and	r24, r24
    1ff4:	c9 f7       	brne	.-14     	; 0x1fe8 <DISPLAY_ShiftAndDisplay+0x8c>
			while(LCD_SendString(StringPTR) != OperationSuccess);
    1ff6:	00 00       	nop
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffc:	0e 94 a9 06 	call	0xd52	; 0xd52 <LCD_SendString>
    2000:	88 23       	and	r24, r24
    2002:	d1 f7       	brne	.-12     	; 0x1ff8 <DISPLAY_ShiftAndDisplay+0x9c>
			while(LCD_SendCommand(0x80|(Position-1)) != OperationSuccess);
    2004:	00 00       	nop
    2006:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Position>
    200a:	81 50       	subi	r24, 0x01	; 1
    200c:	80 68       	ori	r24, 0x80	; 128
    200e:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    2012:	88 23       	and	r24, r24
    2014:	c1 f7       	brne	.-16     	; 0x2006 <DISPLAY_ShiftAndDisplay+0xaa>
			while(LCD_SendData(' ')!= OperationSuccess);
    2016:	00 00       	nop
    2018:	80 e2       	ldi	r24, 0x20	; 32
    201a:	0e 94 35 04 	call	0x86a	; 0x86a <LCD_SendData>
    201e:	88 23       	and	r24, r24
    2020:	d9 f7       	brne	.-10     	; 0x2018 <DISPLAY_ShiftAndDisplay+0xbc>
			if (Position == 16-StringLength)
    2022:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Position>
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	40 e1       	ldi	r20, 0x10	; 16
    2032:	50 e0       	ldi	r21, 0x00	; 0
    2034:	ba 01       	movw	r22, r20
    2036:	68 1b       	sub	r22, r24
    2038:	79 0b       	sbc	r23, r25
    203a:	cb 01       	movw	r24, r22
    203c:	28 17       	cp	r18, r24
    203e:	39 07       	cpc	r19, r25
    2040:	19 f4       	brne	.+6      	; 0x2048 <DISPLAY_ShiftAndDisplay+0xec>
			{
				 State = ShiftingLeft;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <State.1810>
			}
			Position++;
    2048:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Position>
    204c:	8f 5f       	subi	r24, 0xFF	; 255
    204e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Position>
			break;
    2052:	22 c0       	rjmp	.+68     	; 0x2098 <DISPLAY_ShiftAndDisplay+0x13c>
		case ShiftingLeft:
			Position--;
    2054:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Position>
    2058:	81 50       	subi	r24, 0x01	; 1
    205a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Position>
			if (Position == 0)
    205e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Position>
    2062:	88 23       	and	r24, r24
    2064:	19 f4       	brne	.+6      	; 0x206c <DISPLAY_ShiftAndDisplay+0x110>
			{
				State = ShiftingRight;
    2066:	82 e0       	ldi	r24, 0x02	; 2
    2068:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <State.1810>
			}
			while(LCD_SendCommand(0x80|Position) != OperationSuccess);
    206c:	00 00       	nop
    206e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Position>
    2072:	80 68       	ori	r24, 0x80	; 128
    2074:	0e 94 22 03 	call	0x644	; 0x644 <LCD_SendCommand>
    2078:	88 23       	and	r24, r24
    207a:	c9 f7       	brne	.-14     	; 0x206e <DISPLAY_ShiftAndDisplay+0x112>
			while(LCD_SendString(StringPTR) != OperationSuccess);
    207c:	00 00       	nop
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	9b 81       	ldd	r25, Y+3	; 0x03
    2082:	0e 94 a9 06 	call	0xd52	; 0xd52 <LCD_SendString>
    2086:	88 23       	and	r24, r24
    2088:	d1 f7       	brne	.-12     	; 0x207e <DISPLAY_ShiftAndDisplay+0x122>
			while(LCD_SendData(' ')!= OperationSuccess);
    208a:	00 00       	nop
    208c:	80 e2       	ldi	r24, 0x20	; 32
    208e:	0e 94 35 04 	call	0x86a	; 0x86a <LCD_SendData>
    2092:	88 23       	and	r24, r24
    2094:	d9 f7       	brne	.-10     	; 0x208c <DISPLAY_ShiftAndDisplay+0x130>
			break;
    2096:	00 00       	nop
		default:
			break;
	}
}
    2098:	00 00       	nop
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	08 95       	ret

000020a6 <DISPLAY_GetState>:
#include "DISPLAY_Interface.h"
uint8_t static State = OperationStarted;
uint8_t static Number_of_Asteriks = 0;

void DISPLAY_GetState(uint8_t* StateVal)
{
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <DISPLAY_GetState+0x6>
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	9a 83       	std	Y+2, r25	; 0x02
    20b2:	89 83       	std	Y+1, r24	; 0x01
	*StateVal = State;
    20b4:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <State>
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	9a 81       	ldd	r25, Y+2	; 0x02
    20bc:	fc 01       	movw	r30, r24
    20be:	20 83       	st	Z, r18
}
    20c0:	00 00       	nop
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
    20ca:	08 95       	ret

000020cc <DISPLAY_GetNumber_of_Asterisk>:
void DISPLAY_GetNumber_of_Asterisk(uint8_t* AsterisksNumVal)
{
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <DISPLAY_GetNumber_of_Asterisk+0x6>
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	9a 83       	std	Y+2, r25	; 0x02
    20d8:	89 83       	std	Y+1, r24	; 0x01
	*AsterisksNumVal = Number_of_Asteriks;
    20da:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <Number_of_Asteriks>
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	fc 01       	movw	r30, r24
    20e4:	20 83       	st	Z, r18
}
    20e6:	00 00       	nop
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <DISPLAY_SetState>:
void DISPLAY_SetState(uint8_t StateVal)
{
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	1f 92       	push	r1
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	89 83       	std	Y+1, r24	; 0x01
	State = StateVal;
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <State>
}
    2104:	00 00       	nop
    2106:	0f 90       	pop	r0
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	08 95       	ret

0000210e <main>:
		vTaskDelay(2);
	}
}*/

int main(void)
{
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	00 d0       	rcall	.+0      	; 0x2114 <main+0x6>
    2114:	00 d0       	rcall	.+0      	; 0x2116 <main+0x8>
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
	//DIO_SetPinDirection(PORT_D,PIN0,PIN_OUTPUT);
	//EEPROM_Write('A',5);
	//uint8_t iterator = 0;
	while(LCD_Init()!= OperationSuccess);
    211a:	00 00       	nop
    211c:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_Init>
    2120:	88 23       	and	r24, r24
    2122:	e1 f7       	brne	.-8      	; 0x211c <main+0xe>
	DISPLAY_SetState(WrongPassword);
    2124:	87 e0       	ldi	r24, 0x07	; 7
    2126:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DISPLAY_SetState>
	//EEPROM_write(5, 'A');
	//x=EEPROM_read(5);
	while (1) 
    {
		//DISPLAY_ShiftAndDisplay(5,(uint8_t*)"AHMED");
		DISPLAY_MainFunction();
    212a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DISPLAY_MainFunction>
		//iterator ++;
		//if(x=='A')
		//DIO_WritePin(PORT_D,PIN0,PIN_HIGH);
		//LCD_SendCommand(0x1C);
		for(volatile uint32_t i = 0; i<25000;i++);
    212e:	19 82       	std	Y+1, r1	; 0x01
    2130:	1a 82       	std	Y+2, r1	; 0x02
    2132:	1b 82       	std	Y+3, r1	; 0x03
    2134:	1c 82       	std	Y+4, r1	; 0x04
    2136:	0b c0       	rjmp	.+22     	; 0x214e <main+0x40>
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	9a 81       	ldd	r25, Y+2	; 0x02
    213c:	ab 81       	ldd	r26, Y+3	; 0x03
    213e:	bc 81       	ldd	r27, Y+4	; 0x04
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	a1 1d       	adc	r26, r1
    2144:	b1 1d       	adc	r27, r1
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	9a 83       	std	Y+2, r25	; 0x02
    214a:	ab 83       	std	Y+3, r26	; 0x03
    214c:	bc 83       	std	Y+4, r27	; 0x04
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	9a 81       	ldd	r25, Y+2	; 0x02
    2152:	ab 81       	ldd	r26, Y+3	; 0x03
    2154:	bc 81       	ldd	r27, Y+4	; 0x04
    2156:	88 3a       	cpi	r24, 0xA8	; 168
    2158:	91 46       	sbci	r25, 0x61	; 97
    215a:	a1 05       	cpc	r26, r1
    215c:	b1 05       	cpc	r27, r1
    215e:	60 f3       	brcs	.-40     	; 0x2138 <main+0x2a>
			//State = PassEntering;
		//DISPLAY_ShiftAndDisplay(5,(uint8_t*)"ADEL");
		//for(volatile uint32_t i = 0; i<100000;i++);
		//LCD_ReadDispLoc(LCD_CURS_Position0,&x);
		
    }
    2160:	e4 cf       	rjmp	.-56     	; 0x212a <main+0x1c>

00002162 <__cmpsf2>:
    2162:	0e 94 94 11 	call	0x2328	; 0x2328 <__fp_cmp>
    2166:	08 f4       	brcc	.+2      	; 0x216a <__cmpsf2+0x8>
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	08 95       	ret

0000216c <__divsf3>:
    216c:	0e 94 ca 10 	call	0x2194	; 0x2194 <__divsf3x>
    2170:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__fp_round>
    2174:	0e 94 c8 11 	call	0x2390	; 0x2390 <__fp_pscB>
    2178:	58 f0       	brcs	.+22     	; 0x2190 <__divsf3+0x24>
    217a:	0e 94 c1 11 	call	0x2382	; 0x2382 <__fp_pscA>
    217e:	40 f0       	brcs	.+16     	; 0x2190 <__divsf3+0x24>
    2180:	29 f4       	brne	.+10     	; 0x218c <__divsf3+0x20>
    2182:	5f 3f       	cpi	r21, 0xFF	; 255
    2184:	29 f0       	breq	.+10     	; 0x2190 <__divsf3+0x24>
    2186:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__fp_inf>
    218a:	51 11       	cpse	r21, r1
    218c:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__fp_szero>
    2190:	0c 94 be 11 	jmp	0x237c	; 0x237c <__fp_nan>

00002194 <__divsf3x>:
    2194:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__fp_split3>
    2198:	68 f3       	brcs	.-38     	; 0x2174 <__divsf3+0x8>

0000219a <__divsf3_pse>:
    219a:	99 23       	and	r25, r25
    219c:	b1 f3       	breq	.-20     	; 0x218a <__divsf3+0x1e>
    219e:	55 23       	and	r21, r21
    21a0:	91 f3       	breq	.-28     	; 0x2186 <__divsf3+0x1a>
    21a2:	95 1b       	sub	r25, r21
    21a4:	55 0b       	sbc	r21, r21
    21a6:	bb 27       	eor	r27, r27
    21a8:	aa 27       	eor	r26, r26
    21aa:	62 17       	cp	r22, r18
    21ac:	73 07       	cpc	r23, r19
    21ae:	84 07       	cpc	r24, r20
    21b0:	38 f0       	brcs	.+14     	; 0x21c0 <__divsf3_pse+0x26>
    21b2:	9f 5f       	subi	r25, 0xFF	; 255
    21b4:	5f 4f       	sbci	r21, 0xFF	; 255
    21b6:	22 0f       	add	r18, r18
    21b8:	33 1f       	adc	r19, r19
    21ba:	44 1f       	adc	r20, r20
    21bc:	aa 1f       	adc	r26, r26
    21be:	a9 f3       	breq	.-22     	; 0x21aa <__divsf3_pse+0x10>
    21c0:	35 d0       	rcall	.+106    	; 0x222c <__divsf3_pse+0x92>
    21c2:	0e 2e       	mov	r0, r30
    21c4:	3a f0       	brmi	.+14     	; 0x21d4 <__divsf3_pse+0x3a>
    21c6:	e0 e8       	ldi	r30, 0x80	; 128
    21c8:	32 d0       	rcall	.+100    	; 0x222e <__divsf3_pse+0x94>
    21ca:	91 50       	subi	r25, 0x01	; 1
    21cc:	50 40       	sbci	r21, 0x00	; 0
    21ce:	e6 95       	lsr	r30
    21d0:	00 1c       	adc	r0, r0
    21d2:	ca f7       	brpl	.-14     	; 0x21c6 <__divsf3_pse+0x2c>
    21d4:	2b d0       	rcall	.+86     	; 0x222c <__divsf3_pse+0x92>
    21d6:	fe 2f       	mov	r31, r30
    21d8:	29 d0       	rcall	.+82     	; 0x222c <__divsf3_pse+0x92>
    21da:	66 0f       	add	r22, r22
    21dc:	77 1f       	adc	r23, r23
    21de:	88 1f       	adc	r24, r24
    21e0:	bb 1f       	adc	r27, r27
    21e2:	26 17       	cp	r18, r22
    21e4:	37 07       	cpc	r19, r23
    21e6:	48 07       	cpc	r20, r24
    21e8:	ab 07       	cpc	r26, r27
    21ea:	b0 e8       	ldi	r27, 0x80	; 128
    21ec:	09 f0       	breq	.+2      	; 0x21f0 <__divsf3_pse+0x56>
    21ee:	bb 0b       	sbc	r27, r27
    21f0:	80 2d       	mov	r24, r0
    21f2:	bf 01       	movw	r22, r30
    21f4:	ff 27       	eor	r31, r31
    21f6:	93 58       	subi	r25, 0x83	; 131
    21f8:	5f 4f       	sbci	r21, 0xFF	; 255
    21fa:	3a f0       	brmi	.+14     	; 0x220a <__divsf3_pse+0x70>
    21fc:	9e 3f       	cpi	r25, 0xFE	; 254
    21fe:	51 05       	cpc	r21, r1
    2200:	78 f0       	brcs	.+30     	; 0x2220 <__divsf3_pse+0x86>
    2202:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__fp_inf>
    2206:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__fp_szero>
    220a:	5f 3f       	cpi	r21, 0xFF	; 255
    220c:	e4 f3       	brlt	.-8      	; 0x2206 <__divsf3_pse+0x6c>
    220e:	98 3e       	cpi	r25, 0xE8	; 232
    2210:	d4 f3       	brlt	.-12     	; 0x2206 <__divsf3_pse+0x6c>
    2212:	86 95       	lsr	r24
    2214:	77 95       	ror	r23
    2216:	67 95       	ror	r22
    2218:	b7 95       	ror	r27
    221a:	f7 95       	ror	r31
    221c:	9f 5f       	subi	r25, 0xFF	; 255
    221e:	c9 f7       	brne	.-14     	; 0x2212 <__divsf3_pse+0x78>
    2220:	88 0f       	add	r24, r24
    2222:	91 1d       	adc	r25, r1
    2224:	96 95       	lsr	r25
    2226:	87 95       	ror	r24
    2228:	97 f9       	bld	r25, 7
    222a:	08 95       	ret
    222c:	e1 e0       	ldi	r30, 0x01	; 1
    222e:	66 0f       	add	r22, r22
    2230:	77 1f       	adc	r23, r23
    2232:	88 1f       	adc	r24, r24
    2234:	bb 1f       	adc	r27, r27
    2236:	62 17       	cp	r22, r18
    2238:	73 07       	cpc	r23, r19
    223a:	84 07       	cpc	r24, r20
    223c:	ba 07       	cpc	r27, r26
    223e:	20 f0       	brcs	.+8      	; 0x2248 <__divsf3_pse+0xae>
    2240:	62 1b       	sub	r22, r18
    2242:	73 0b       	sbc	r23, r19
    2244:	84 0b       	sbc	r24, r20
    2246:	ba 0b       	sbc	r27, r26
    2248:	ee 1f       	adc	r30, r30
    224a:	88 f7       	brcc	.-30     	; 0x222e <__divsf3_pse+0x94>
    224c:	e0 95       	com	r30
    224e:	08 95       	ret

00002250 <__fixunssfsi>:
    2250:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__fp_splitA>
    2254:	88 f0       	brcs	.+34     	; 0x2278 <__fixunssfsi+0x28>
    2256:	9f 57       	subi	r25, 0x7F	; 127
    2258:	98 f0       	brcs	.+38     	; 0x2280 <__fixunssfsi+0x30>
    225a:	b9 2f       	mov	r27, r25
    225c:	99 27       	eor	r25, r25
    225e:	b7 51       	subi	r27, 0x17	; 23
    2260:	b0 f0       	brcs	.+44     	; 0x228e <__fixunssfsi+0x3e>
    2262:	e1 f0       	breq	.+56     	; 0x229c <__fixunssfsi+0x4c>
    2264:	66 0f       	add	r22, r22
    2266:	77 1f       	adc	r23, r23
    2268:	88 1f       	adc	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	1a f0       	brmi	.+6      	; 0x2274 <__fixunssfsi+0x24>
    226e:	ba 95       	dec	r27
    2270:	c9 f7       	brne	.-14     	; 0x2264 <__fixunssfsi+0x14>
    2272:	14 c0       	rjmp	.+40     	; 0x229c <__fixunssfsi+0x4c>
    2274:	b1 30       	cpi	r27, 0x01	; 1
    2276:	91 f0       	breq	.+36     	; 0x229c <__fixunssfsi+0x4c>
    2278:	0e 94 02 12 	call	0x2404	; 0x2404 <__fp_zero>
    227c:	b1 e0       	ldi	r27, 0x01	; 1
    227e:	08 95       	ret
    2280:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__fp_zero>
    2284:	67 2f       	mov	r22, r23
    2286:	78 2f       	mov	r23, r24
    2288:	88 27       	eor	r24, r24
    228a:	b8 5f       	subi	r27, 0xF8	; 248
    228c:	39 f0       	breq	.+14     	; 0x229c <__fixunssfsi+0x4c>
    228e:	b9 3f       	cpi	r27, 0xF9	; 249
    2290:	cc f3       	brlt	.-14     	; 0x2284 <__fixunssfsi+0x34>
    2292:	86 95       	lsr	r24
    2294:	77 95       	ror	r23
    2296:	67 95       	ror	r22
    2298:	b3 95       	inc	r27
    229a:	d9 f7       	brne	.-10     	; 0x2292 <__fixunssfsi+0x42>
    229c:	3e f4       	brtc	.+14     	; 0x22ac <__fixunssfsi+0x5c>
    229e:	90 95       	com	r25
    22a0:	80 95       	com	r24
    22a2:	70 95       	com	r23
    22a4:	61 95       	neg	r22
    22a6:	7f 4f       	sbci	r23, 0xFF	; 255
    22a8:	8f 4f       	sbci	r24, 0xFF	; 255
    22aa:	9f 4f       	sbci	r25, 0xFF	; 255
    22ac:	08 95       	ret

000022ae <__floatunsisf>:
    22ae:	e8 94       	clt
    22b0:	09 c0       	rjmp	.+18     	; 0x22c4 <__floatsisf+0x12>

000022b2 <__floatsisf>:
    22b2:	97 fb       	bst	r25, 7
    22b4:	3e f4       	brtc	.+14     	; 0x22c4 <__floatsisf+0x12>
    22b6:	90 95       	com	r25
    22b8:	80 95       	com	r24
    22ba:	70 95       	com	r23
    22bc:	61 95       	neg	r22
    22be:	7f 4f       	sbci	r23, 0xFF	; 255
    22c0:	8f 4f       	sbci	r24, 0xFF	; 255
    22c2:	9f 4f       	sbci	r25, 0xFF	; 255
    22c4:	99 23       	and	r25, r25
    22c6:	a9 f0       	breq	.+42     	; 0x22f2 <__floatsisf+0x40>
    22c8:	f9 2f       	mov	r31, r25
    22ca:	96 e9       	ldi	r25, 0x96	; 150
    22cc:	bb 27       	eor	r27, r27
    22ce:	93 95       	inc	r25
    22d0:	f6 95       	lsr	r31
    22d2:	87 95       	ror	r24
    22d4:	77 95       	ror	r23
    22d6:	67 95       	ror	r22
    22d8:	b7 95       	ror	r27
    22da:	f1 11       	cpse	r31, r1
    22dc:	f8 cf       	rjmp	.-16     	; 0x22ce <__floatsisf+0x1c>
    22de:	fa f4       	brpl	.+62     	; 0x231e <__floatsisf+0x6c>
    22e0:	bb 0f       	add	r27, r27
    22e2:	11 f4       	brne	.+4      	; 0x22e8 <__floatsisf+0x36>
    22e4:	60 ff       	sbrs	r22, 0
    22e6:	1b c0       	rjmp	.+54     	; 0x231e <__floatsisf+0x6c>
    22e8:	6f 5f       	subi	r22, 0xFF	; 255
    22ea:	7f 4f       	sbci	r23, 0xFF	; 255
    22ec:	8f 4f       	sbci	r24, 0xFF	; 255
    22ee:	9f 4f       	sbci	r25, 0xFF	; 255
    22f0:	16 c0       	rjmp	.+44     	; 0x231e <__floatsisf+0x6c>
    22f2:	88 23       	and	r24, r24
    22f4:	11 f0       	breq	.+4      	; 0x22fa <__floatsisf+0x48>
    22f6:	96 e9       	ldi	r25, 0x96	; 150
    22f8:	11 c0       	rjmp	.+34     	; 0x231c <__floatsisf+0x6a>
    22fa:	77 23       	and	r23, r23
    22fc:	21 f0       	breq	.+8      	; 0x2306 <__floatsisf+0x54>
    22fe:	9e e8       	ldi	r25, 0x8E	; 142
    2300:	87 2f       	mov	r24, r23
    2302:	76 2f       	mov	r23, r22
    2304:	05 c0       	rjmp	.+10     	; 0x2310 <__floatsisf+0x5e>
    2306:	66 23       	and	r22, r22
    2308:	71 f0       	breq	.+28     	; 0x2326 <__floatsisf+0x74>
    230a:	96 e8       	ldi	r25, 0x86	; 134
    230c:	86 2f       	mov	r24, r22
    230e:	70 e0       	ldi	r23, 0x00	; 0
    2310:	60 e0       	ldi	r22, 0x00	; 0
    2312:	2a f0       	brmi	.+10     	; 0x231e <__floatsisf+0x6c>
    2314:	9a 95       	dec	r25
    2316:	66 0f       	add	r22, r22
    2318:	77 1f       	adc	r23, r23
    231a:	88 1f       	adc	r24, r24
    231c:	da f7       	brpl	.-10     	; 0x2314 <__floatsisf+0x62>
    231e:	88 0f       	add	r24, r24
    2320:	96 95       	lsr	r25
    2322:	87 95       	ror	r24
    2324:	97 f9       	bld	r25, 7
    2326:	08 95       	ret

00002328 <__fp_cmp>:
    2328:	99 0f       	add	r25, r25
    232a:	00 08       	sbc	r0, r0
    232c:	55 0f       	add	r21, r21
    232e:	aa 0b       	sbc	r26, r26
    2330:	e0 e8       	ldi	r30, 0x80	; 128
    2332:	fe ef       	ldi	r31, 0xFE	; 254
    2334:	16 16       	cp	r1, r22
    2336:	17 06       	cpc	r1, r23
    2338:	e8 07       	cpc	r30, r24
    233a:	f9 07       	cpc	r31, r25
    233c:	c0 f0       	brcs	.+48     	; 0x236e <__fp_cmp+0x46>
    233e:	12 16       	cp	r1, r18
    2340:	13 06       	cpc	r1, r19
    2342:	e4 07       	cpc	r30, r20
    2344:	f5 07       	cpc	r31, r21
    2346:	98 f0       	brcs	.+38     	; 0x236e <__fp_cmp+0x46>
    2348:	62 1b       	sub	r22, r18
    234a:	73 0b       	sbc	r23, r19
    234c:	84 0b       	sbc	r24, r20
    234e:	95 0b       	sbc	r25, r21
    2350:	39 f4       	brne	.+14     	; 0x2360 <__fp_cmp+0x38>
    2352:	0a 26       	eor	r0, r26
    2354:	61 f0       	breq	.+24     	; 0x236e <__fp_cmp+0x46>
    2356:	23 2b       	or	r18, r19
    2358:	24 2b       	or	r18, r20
    235a:	25 2b       	or	r18, r21
    235c:	21 f4       	brne	.+8      	; 0x2366 <__fp_cmp+0x3e>
    235e:	08 95       	ret
    2360:	0a 26       	eor	r0, r26
    2362:	09 f4       	brne	.+2      	; 0x2366 <__fp_cmp+0x3e>
    2364:	a1 40       	sbci	r26, 0x01	; 1
    2366:	a6 95       	lsr	r26
    2368:	8f ef       	ldi	r24, 0xFF	; 255
    236a:	81 1d       	adc	r24, r1
    236c:	81 1d       	adc	r24, r1
    236e:	08 95       	ret

00002370 <__fp_inf>:
    2370:	97 f9       	bld	r25, 7
    2372:	9f 67       	ori	r25, 0x7F	; 127
    2374:	80 e8       	ldi	r24, 0x80	; 128
    2376:	70 e0       	ldi	r23, 0x00	; 0
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	08 95       	ret

0000237c <__fp_nan>:
    237c:	9f ef       	ldi	r25, 0xFF	; 255
    237e:	80 ec       	ldi	r24, 0xC0	; 192
    2380:	08 95       	ret

00002382 <__fp_pscA>:
    2382:	00 24       	eor	r0, r0
    2384:	0a 94       	dec	r0
    2386:	16 16       	cp	r1, r22
    2388:	17 06       	cpc	r1, r23
    238a:	18 06       	cpc	r1, r24
    238c:	09 06       	cpc	r0, r25
    238e:	08 95       	ret

00002390 <__fp_pscB>:
    2390:	00 24       	eor	r0, r0
    2392:	0a 94       	dec	r0
    2394:	12 16       	cp	r1, r18
    2396:	13 06       	cpc	r1, r19
    2398:	14 06       	cpc	r1, r20
    239a:	05 06       	cpc	r0, r21
    239c:	08 95       	ret

0000239e <__fp_round>:
    239e:	09 2e       	mov	r0, r25
    23a0:	03 94       	inc	r0
    23a2:	00 0c       	add	r0, r0
    23a4:	11 f4       	brne	.+4      	; 0x23aa <__fp_round+0xc>
    23a6:	88 23       	and	r24, r24
    23a8:	52 f0       	brmi	.+20     	; 0x23be <__fp_round+0x20>
    23aa:	bb 0f       	add	r27, r27
    23ac:	40 f4       	brcc	.+16     	; 0x23be <__fp_round+0x20>
    23ae:	bf 2b       	or	r27, r31
    23b0:	11 f4       	brne	.+4      	; 0x23b6 <__fp_round+0x18>
    23b2:	60 ff       	sbrs	r22, 0
    23b4:	04 c0       	rjmp	.+8      	; 0x23be <__fp_round+0x20>
    23b6:	6f 5f       	subi	r22, 0xFF	; 255
    23b8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ba:	8f 4f       	sbci	r24, 0xFF	; 255
    23bc:	9f 4f       	sbci	r25, 0xFF	; 255
    23be:	08 95       	ret

000023c0 <__fp_split3>:
    23c0:	57 fd       	sbrc	r21, 7
    23c2:	90 58       	subi	r25, 0x80	; 128
    23c4:	44 0f       	add	r20, r20
    23c6:	55 1f       	adc	r21, r21
    23c8:	59 f0       	breq	.+22     	; 0x23e0 <__fp_splitA+0x10>
    23ca:	5f 3f       	cpi	r21, 0xFF	; 255
    23cc:	71 f0       	breq	.+28     	; 0x23ea <__fp_splitA+0x1a>
    23ce:	47 95       	ror	r20

000023d0 <__fp_splitA>:
    23d0:	88 0f       	add	r24, r24
    23d2:	97 fb       	bst	r25, 7
    23d4:	99 1f       	adc	r25, r25
    23d6:	61 f0       	breq	.+24     	; 0x23f0 <__fp_splitA+0x20>
    23d8:	9f 3f       	cpi	r25, 0xFF	; 255
    23da:	79 f0       	breq	.+30     	; 0x23fa <__fp_splitA+0x2a>
    23dc:	87 95       	ror	r24
    23de:	08 95       	ret
    23e0:	12 16       	cp	r1, r18
    23e2:	13 06       	cpc	r1, r19
    23e4:	14 06       	cpc	r1, r20
    23e6:	55 1f       	adc	r21, r21
    23e8:	f2 cf       	rjmp	.-28     	; 0x23ce <__fp_split3+0xe>
    23ea:	46 95       	lsr	r20
    23ec:	f1 df       	rcall	.-30     	; 0x23d0 <__fp_splitA>
    23ee:	08 c0       	rjmp	.+16     	; 0x2400 <__fp_splitA+0x30>
    23f0:	16 16       	cp	r1, r22
    23f2:	17 06       	cpc	r1, r23
    23f4:	18 06       	cpc	r1, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	f1 cf       	rjmp	.-30     	; 0x23dc <__fp_splitA+0xc>
    23fa:	86 95       	lsr	r24
    23fc:	71 05       	cpc	r23, r1
    23fe:	61 05       	cpc	r22, r1
    2400:	08 94       	sec
    2402:	08 95       	ret

00002404 <__fp_zero>:
    2404:	e8 94       	clt

00002406 <__fp_szero>:
    2406:	bb 27       	eor	r27, r27
    2408:	66 27       	eor	r22, r22
    240a:	77 27       	eor	r23, r23
    240c:	cb 01       	movw	r24, r22
    240e:	97 f9       	bld	r25, 7
    2410:	08 95       	ret

00002412 <__udivmodhi4>:
    2412:	aa 1b       	sub	r26, r26
    2414:	bb 1b       	sub	r27, r27
    2416:	51 e1       	ldi	r21, 0x11	; 17
    2418:	07 c0       	rjmp	.+14     	; 0x2428 <__udivmodhi4_ep>

0000241a <__udivmodhi4_loop>:
    241a:	aa 1f       	adc	r26, r26
    241c:	bb 1f       	adc	r27, r27
    241e:	a6 17       	cp	r26, r22
    2420:	b7 07       	cpc	r27, r23
    2422:	10 f0       	brcs	.+4      	; 0x2428 <__udivmodhi4_ep>
    2424:	a6 1b       	sub	r26, r22
    2426:	b7 0b       	sbc	r27, r23

00002428 <__udivmodhi4_ep>:
    2428:	88 1f       	adc	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	5a 95       	dec	r21
    242e:	a9 f7       	brne	.-22     	; 0x241a <__udivmodhi4_loop>
    2430:	80 95       	com	r24
    2432:	90 95       	com	r25
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	08 95       	ret

0000243a <__divmodhi4>:
    243a:	97 fb       	bst	r25, 7
    243c:	07 2e       	mov	r0, r23
    243e:	16 f4       	brtc	.+4      	; 0x2444 <__divmodhi4+0xa>
    2440:	00 94       	com	r0
    2442:	07 d0       	rcall	.+14     	; 0x2452 <__divmodhi4_neg1>
    2444:	77 fd       	sbrc	r23, 7
    2446:	09 d0       	rcall	.+18     	; 0x245a <__divmodhi4_neg2>
    2448:	0e 94 09 12 	call	0x2412	; 0x2412 <__udivmodhi4>
    244c:	07 fc       	sbrc	r0, 7
    244e:	05 d0       	rcall	.+10     	; 0x245a <__divmodhi4_neg2>
    2450:	3e f4       	brtc	.+14     	; 0x2460 <__divmodhi4_exit>

00002452 <__divmodhi4_neg1>:
    2452:	90 95       	com	r25
    2454:	81 95       	neg	r24
    2456:	9f 4f       	sbci	r25, 0xFF	; 255
    2458:	08 95       	ret

0000245a <__divmodhi4_neg2>:
    245a:	70 95       	com	r23
    245c:	61 95       	neg	r22
    245e:	7f 4f       	sbci	r23, 0xFF	; 255

00002460 <__divmodhi4_exit>:
    2460:	08 95       	ret

00002462 <__udivmodsi4>:
    2462:	a1 e2       	ldi	r26, 0x21	; 33
    2464:	1a 2e       	mov	r1, r26
    2466:	aa 1b       	sub	r26, r26
    2468:	bb 1b       	sub	r27, r27
    246a:	fd 01       	movw	r30, r26
    246c:	0d c0       	rjmp	.+26     	; 0x2488 <__udivmodsi4_ep>

0000246e <__udivmodsi4_loop>:
    246e:	aa 1f       	adc	r26, r26
    2470:	bb 1f       	adc	r27, r27
    2472:	ee 1f       	adc	r30, r30
    2474:	ff 1f       	adc	r31, r31
    2476:	a2 17       	cp	r26, r18
    2478:	b3 07       	cpc	r27, r19
    247a:	e4 07       	cpc	r30, r20
    247c:	f5 07       	cpc	r31, r21
    247e:	20 f0       	brcs	.+8      	; 0x2488 <__udivmodsi4_ep>
    2480:	a2 1b       	sub	r26, r18
    2482:	b3 0b       	sbc	r27, r19
    2484:	e4 0b       	sbc	r30, r20
    2486:	f5 0b       	sbc	r31, r21

00002488 <__udivmodsi4_ep>:
    2488:	66 1f       	adc	r22, r22
    248a:	77 1f       	adc	r23, r23
    248c:	88 1f       	adc	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	1a 94       	dec	r1
    2492:	69 f7       	brne	.-38     	; 0x246e <__udivmodsi4_loop>
    2494:	60 95       	com	r22
    2496:	70 95       	com	r23
    2498:	80 95       	com	r24
    249a:	90 95       	com	r25
    249c:	9b 01       	movw	r18, r22
    249e:	ac 01       	movw	r20, r24
    24a0:	bd 01       	movw	r22, r26
    24a2:	cf 01       	movw	r24, r30
    24a4:	08 95       	ret

000024a6 <__tablejump2__>:
    24a6:	ee 0f       	add	r30, r30
    24a8:	ff 1f       	adc	r31, r31
    24aa:	05 90       	lpm	r0, Z+
    24ac:	f4 91       	lpm	r31, Z
    24ae:	e0 2d       	mov	r30, r0
    24b0:	09 94       	ijmp

000024b2 <__muluhisi3>:
    24b2:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__umulhisi3>
    24b6:	a5 9f       	mul	r26, r21
    24b8:	90 0d       	add	r25, r0
    24ba:	b4 9f       	mul	r27, r20
    24bc:	90 0d       	add	r25, r0
    24be:	a4 9f       	mul	r26, r20
    24c0:	80 0d       	add	r24, r0
    24c2:	91 1d       	adc	r25, r1
    24c4:	11 24       	eor	r1, r1
    24c6:	08 95       	ret

000024c8 <__umulhisi3>:
    24c8:	a2 9f       	mul	r26, r18
    24ca:	b0 01       	movw	r22, r0
    24cc:	b3 9f       	mul	r27, r19
    24ce:	c0 01       	movw	r24, r0
    24d0:	a3 9f       	mul	r26, r19
    24d2:	70 0d       	add	r23, r0
    24d4:	81 1d       	adc	r24, r1
    24d6:	11 24       	eor	r1, r1
    24d8:	91 1d       	adc	r25, r1
    24da:	b2 9f       	mul	r27, r18
    24dc:	70 0d       	add	r23, r0
    24de:	81 1d       	adc	r24, r1
    24e0:	11 24       	eor	r1, r1
    24e2:	91 1d       	adc	r25, r1
    24e4:	08 95       	ret

000024e6 <_exit>:
    24e6:	f8 94       	cli

000024e8 <__stop_program>:
    24e8:	ff cf       	rjmp	.-2      	; 0x24e8 <__stop_program>
