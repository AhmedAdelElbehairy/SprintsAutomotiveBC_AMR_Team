
MCU_To_MCU_Bluetooth_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017e  00800060  000020f8  0000218c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000047  008001de  008001de  0000230a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000230a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000233c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00002378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000501b  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b6  00000000  00000000  00007733  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032cc  00000000  00000000  000088e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ad4  00000000  00000000  0000bbb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001712  00000000  00000000  0000c68c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e96  00000000  00000000  0000dd9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  00011c34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_7>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	72 08       	sbc	r7, r2
      56:	7d 08       	sbc	r7, r13
      58:	88 08       	sbc	r8, r8
      5a:	93 08       	sbc	r9, r3
      5c:	9e 08       	sbc	r9, r14
      5e:	a9 08       	sbc	r10, r9
      60:	b4 08       	sbc	r11, r4
      62:	b1 0b       	sbc	r27, r17
      64:	cd 0b       	sbc	r28, r29
      66:	e9 0b       	sbc	r30, r25
      68:	21 0c       	add	r2, r1
      6a:	4f 0c       	add	r4, r15
      6c:	86 0c       	add	r8, r6
      6e:	3e 0e       	add	r3, r30
      70:	5a 0e       	add	r5, r26

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	11 e0       	ldi	r17, 0x01	; 1
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e8 ef       	ldi	r30, 0xF8	; 248
      86:	f0 e2       	ldi	r31, 0x20	; 32
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	ae 3d       	cpi	r26, 0xDE	; 222
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	22 e0       	ldi	r18, 0x02	; 2
      96:	ae ed       	ldi	r26, 0xDE	; 222
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a5 32       	cpi	r26, 0x25	; 37
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <main>
      a8:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
      b0:	0f 92       	push	r0
      b2:	0f b6       	in	r0, 0x3f	; 63
      b4:	f8 94       	cli
      b6:	0f 92       	push	r0
      b8:	1f 92       	push	r1
      ba:	11 24       	eor	r1, r1
      bc:	2f 92       	push	r2
      be:	3f 92       	push	r3
      c0:	4f 92       	push	r4
      c2:	5f 92       	push	r5
      c4:	6f 92       	push	r6
      c6:	7f 92       	push	r7
      c8:	8f 92       	push	r8
      ca:	9f 92       	push	r9
      cc:	af 92       	push	r10
      ce:	bf 92       	push	r11
      d0:	cf 92       	push	r12
      d2:	df 92       	push	r13
      d4:	ef 92       	push	r14
      d6:	ff 92       	push	r15
      d8:	0f 93       	push	r16
      da:	1f 93       	push	r17
      dc:	2f 93       	push	r18
      de:	3f 93       	push	r19
      e0:	4f 93       	push	r20
      e2:	5f 93       	push	r21
      e4:	6f 93       	push	r22
      e6:	7f 93       	push	r23
      e8:	8f 93       	push	r24
      ea:	9f 93       	push	r25
      ec:	af 93       	push	r26
      ee:	bf 93       	push	r27
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	ef 93       	push	r30
      f6:	ff 93       	push	r31
      f8:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <pxCurrentTCB>
      fc:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <pxCurrentTCB+0x1>
     100:	0d b6       	in	r0, 0x3d	; 61
     102:	0d 92       	st	X+, r0
     104:	0e b6       	in	r0, 0x3e	; 62
     106:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     108:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <xTaskIncrementTick>
     10c:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     10e:	0e 94 ed 01 	call	0x3da	; 0x3da <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     112:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <pxCurrentTCB>
     116:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <pxCurrentTCB+0x1>
     11a:	cd 91       	ld	r28, X+
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	dd 91       	ld	r29, X+
     120:	de bf       	out	0x3e, r29	; 62
     122:	ff 91       	pop	r31
     124:	ef 91       	pop	r30
     126:	df 91       	pop	r29
     128:	cf 91       	pop	r28
     12a:	bf 91       	pop	r27
     12c:	af 91       	pop	r26
     12e:	9f 91       	pop	r25
     130:	8f 91       	pop	r24
     132:	7f 91       	pop	r23
     134:	6f 91       	pop	r22
     136:	5f 91       	pop	r21
     138:	4f 91       	pop	r20
     13a:	3f 91       	pop	r19
     13c:	2f 91       	pop	r18
     13e:	1f 91       	pop	r17
     140:	0f 91       	pop	r16
     142:	ff 90       	pop	r15
     144:	ef 90       	pop	r14
     146:	df 90       	pop	r13
     148:	cf 90       	pop	r12
     14a:	bf 90       	pop	r11
     14c:	af 90       	pop	r10
     14e:	9f 90       	pop	r9
     150:	8f 90       	pop	r8
     152:	7f 90       	pop	r7
     154:	6f 90       	pop	r6
     156:	5f 90       	pop	r5
     158:	4f 90       	pop	r4
     15a:	3f 90       	pop	r3
     15c:	2f 90       	pop	r2
     15e:	1f 90       	pop	r1
     160:	0f 90       	pop	r0
     162:	0f be       	out	0x3f, r0	; 63
     164:	0f 90       	pop	r0

	asm volatile ( "ret" );
     166:	08 95       	ret

00000168 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     168:	0e 94 58 00 	call	0xb0	; 0xb0 <vPortYieldFromTick>
		asm volatile ( "reti" );
     16c:	18 95       	reti

0000016e <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     16e:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <pxDelayedTaskList>
     172:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <pxDelayedTaskList+0x1>
     176:	80 81       	ld	r24, Z
     178:	81 11       	cpse	r24, r1
     17a:	07 c0       	rjmp	.+14     	; 0x18a <prvResetNextTaskUnblockTime+0x1c>
     17c:	8f ef       	ldi	r24, 0xFF	; 255
     17e:	9f ef       	ldi	r25, 0xFF	; 255
     180:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <xNextTaskUnblockTime+0x1>
     184:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <xNextTaskUnblockTime>
     188:	08 95       	ret
     18a:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <pxDelayedTaskList>
     18e:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <pxDelayedTaskList+0x1>
     192:	05 80       	ldd	r0, Z+5	; 0x05
     194:	f6 81       	ldd	r31, Z+6	; 0x06
     196:	e0 2d       	mov	r30, r0
     198:	80 81       	ld	r24, Z
     19a:	91 81       	ldd	r25, Z+1	; 0x01
     19c:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <xNextTaskUnblockTime+0x1>
     1a0:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <xNextTaskUnblockTime>
     1a4:	08 95       	ret

000001a6 <xTaskIncrementTick>:
     1a6:	0f 93       	push	r16
     1a8:	1f 93       	push	r17
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
     1b2:	81 11       	cpse	r24, r1
     1b4:	01 c1       	rjmp	.+514    	; 0x3b8 <xTaskIncrementTick+0x212>
     1b6:	c0 91 e6 01 	lds	r28, 0x01E6	; 0x8001e6 <xTickCount>
     1ba:	d0 91 e7 01 	lds	r29, 0x01E7	; 0x8001e7 <xTickCount+0x1>
     1be:	8e 01       	movw	r16, r28
     1c0:	0f 5f       	subi	r16, 0xFF	; 255
     1c2:	1f 4f       	sbci	r17, 0xFF	; 255
     1c4:	10 93 e7 01 	sts	0x01E7, r17	; 0x8001e7 <xTickCount+0x1>
     1c8:	00 93 e6 01 	sts	0x01E6, r16	; 0x8001e6 <xTickCount>
     1cc:	01 15       	cp	r16, r1
     1ce:	11 05       	cpc	r17, r1
     1d0:	b9 f4       	brne	.+46     	; 0x200 <xTaskIncrementTick+0x5a>
     1d2:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <pxDelayedTaskList>
     1d6:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <pxDelayedTaskList+0x1>
     1da:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <pxOverflowDelayedTaskList>
     1de:	30 91 e9 01 	lds	r19, 0x01E9	; 0x8001e9 <pxOverflowDelayedTaskList+0x1>
     1e2:	30 93 eb 01 	sts	0x01EB, r19	; 0x8001eb <pxDelayedTaskList+0x1>
     1e6:	20 93 ea 01 	sts	0x01EA, r18	; 0x8001ea <pxDelayedTaskList>
     1ea:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <pxOverflowDelayedTaskList+0x1>
     1ee:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <pxOverflowDelayedTaskList>
     1f2:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <xNumOfOverflows>
     1f6:	8f 5f       	subi	r24, 0xFF	; 255
     1f8:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <xNumOfOverflows>
     1fc:	0e 94 b7 00 	call	0x16e	; 0x16e <prvResetNextTaskUnblockTime>
     200:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <xNextTaskUnblockTime>
     204:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <xNextTaskUnblockTime+0x1>
     208:	08 17       	cp	r16, r24
     20a:	19 07       	cpc	r17, r25
     20c:	20 f4       	brcc	.+8      	; 0x216 <xTaskIncrementTick+0x70>
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	b8 c0       	rjmp	.+368    	; 0x382 <xTaskIncrementTick+0x1dc>
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	01 c0       	rjmp	.+2      	; 0x218 <xTaskIncrementTick+0x72>
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <pxDelayedTaskList>
     21c:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <pxDelayedTaskList+0x1>
     220:	90 81       	ld	r25, Z
     222:	91 11       	cpse	r25, r1
     224:	07 c0       	rjmp	.+14     	; 0x234 <xTaskIncrementTick+0x8e>
     226:	2f ef       	ldi	r18, 0xFF	; 255
     228:	3f ef       	ldi	r19, 0xFF	; 255
     22a:	30 93 e0 01 	sts	0x01E0, r19	; 0x8001e0 <xNextTaskUnblockTime+0x1>
     22e:	20 93 df 01 	sts	0x01DF, r18	; 0x8001df <xNextTaskUnblockTime>
     232:	a7 c0       	rjmp	.+334    	; 0x382 <xTaskIncrementTick+0x1dc>
     234:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <pxDelayedTaskList>
     238:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <pxDelayedTaskList+0x1>
     23c:	05 80       	ldd	r0, Z+5	; 0x05
     23e:	f6 81       	ldd	r31, Z+6	; 0x06
     240:	e0 2d       	mov	r30, r0
     242:	06 80       	ldd	r0, Z+6	; 0x06
     244:	f7 81       	ldd	r31, Z+7	; 0x07
     246:	e0 2d       	mov	r30, r0
     248:	22 81       	ldd	r18, Z+2	; 0x02
     24a:	33 81       	ldd	r19, Z+3	; 0x03
     24c:	02 17       	cp	r16, r18
     24e:	13 07       	cpc	r17, r19
     250:	28 f4       	brcc	.+10     	; 0x25c <xTaskIncrementTick+0xb6>
     252:	30 93 e0 01 	sts	0x01E0, r19	; 0x8001e0 <xNextTaskUnblockTime+0x1>
     256:	20 93 df 01 	sts	0x01DF, r18	; 0x8001df <xNextTaskUnblockTime>
     25a:	93 c0       	rjmp	.+294    	; 0x382 <xTaskIncrementTick+0x1dc>
     25c:	a2 85       	ldd	r26, Z+10	; 0x0a
     25e:	b3 85       	ldd	r27, Z+11	; 0x0b
     260:	24 81       	ldd	r18, Z+4	; 0x04
     262:	35 81       	ldd	r19, Z+5	; 0x05
     264:	46 81       	ldd	r20, Z+6	; 0x06
     266:	57 81       	ldd	r21, Z+7	; 0x07
     268:	e9 01       	movw	r28, r18
     26a:	5d 83       	std	Y+5, r21	; 0x05
     26c:	4c 83       	std	Y+4, r20	; 0x04
     26e:	26 81       	ldd	r18, Z+6	; 0x06
     270:	37 81       	ldd	r19, Z+7	; 0x07
     272:	44 81       	ldd	r20, Z+4	; 0x04
     274:	55 81       	ldd	r21, Z+5	; 0x05
     276:	e9 01       	movw	r28, r18
     278:	5b 83       	std	Y+3, r21	; 0x03
     27a:	4a 83       	std	Y+2, r20	; 0x02
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	2d 91       	ld	r18, X+
     280:	3c 91       	ld	r19, X
     282:	12 97       	sbiw	r26, 0x02	; 2
     284:	af 01       	movw	r20, r30
     286:	4e 5f       	subi	r20, 0xFE	; 254
     288:	5f 4f       	sbci	r21, 0xFF	; 255
     28a:	24 17       	cp	r18, r20
     28c:	35 07       	cpc	r19, r21
     28e:	31 f4       	brne	.+12     	; 0x29c <xTaskIncrementTick+0xf6>
     290:	26 81       	ldd	r18, Z+6	; 0x06
     292:	37 81       	ldd	r19, Z+7	; 0x07
     294:	12 96       	adiw	r26, 0x02	; 2
     296:	3c 93       	st	X, r19
     298:	2e 93       	st	-X, r18
     29a:	11 97       	sbiw	r26, 0x01	; 1
     29c:	13 86       	std	Z+11, r1	; 0x0b
     29e:	12 86       	std	Z+10, r1	; 0x0a
     2a0:	9c 91       	ld	r25, X
     2a2:	91 50       	subi	r25, 0x01	; 1
     2a4:	9c 93       	st	X, r25
     2a6:	a4 89       	ldd	r26, Z+20	; 0x14
     2a8:	b5 89       	ldd	r27, Z+21	; 0x15
     2aa:	10 97       	sbiw	r26, 0x00	; 0
     2ac:	19 f1       	breq	.+70     	; 0x2f4 <xTaskIncrementTick+0x14e>
     2ae:	26 85       	ldd	r18, Z+14	; 0x0e
     2b0:	37 85       	ldd	r19, Z+15	; 0x0f
     2b2:	60 89       	ldd	r22, Z+16	; 0x10
     2b4:	71 89       	ldd	r23, Z+17	; 0x11
     2b6:	e9 01       	movw	r28, r18
     2b8:	7d 83       	std	Y+5, r23	; 0x05
     2ba:	6c 83       	std	Y+4, r22	; 0x04
     2bc:	20 89       	ldd	r18, Z+16	; 0x10
     2be:	31 89       	ldd	r19, Z+17	; 0x11
     2c0:	66 85       	ldd	r22, Z+14	; 0x0e
     2c2:	77 85       	ldd	r23, Z+15	; 0x0f
     2c4:	e9 01       	movw	r28, r18
     2c6:	7b 83       	std	Y+3, r23	; 0x03
     2c8:	6a 83       	std	Y+2, r22	; 0x02
     2ca:	11 96       	adiw	r26, 0x01	; 1
     2cc:	6d 91       	ld	r22, X+
     2ce:	7c 91       	ld	r23, X
     2d0:	12 97       	sbiw	r26, 0x02	; 2
     2d2:	9f 01       	movw	r18, r30
     2d4:	24 5f       	subi	r18, 0xF4	; 244
     2d6:	3f 4f       	sbci	r19, 0xFF	; 255
     2d8:	62 17       	cp	r22, r18
     2da:	73 07       	cpc	r23, r19
     2dc:	31 f4       	brne	.+12     	; 0x2ea <xTaskIncrementTick+0x144>
     2de:	20 89       	ldd	r18, Z+16	; 0x10
     2e0:	31 89       	ldd	r19, Z+17	; 0x11
     2e2:	12 96       	adiw	r26, 0x02	; 2
     2e4:	3c 93       	st	X, r19
     2e6:	2e 93       	st	-X, r18
     2e8:	11 97       	sbiw	r26, 0x01	; 1
     2ea:	15 8a       	std	Z+21, r1	; 0x15
     2ec:	14 8a       	std	Z+20, r1	; 0x14
     2ee:	9c 91       	ld	r25, X
     2f0:	91 50       	subi	r25, 0x01	; 1
     2f2:	9c 93       	st	X, r25
     2f4:	26 89       	ldd	r18, Z+22	; 0x16
     2f6:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <uxTopReadyPriority>
     2fa:	92 17       	cp	r25, r18
     2fc:	10 f4       	brcc	.+4      	; 0x302 <xTaskIncrementTick+0x15c>
     2fe:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <uxTopReadyPriority>
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	d9 01       	movw	r26, r18
     306:	aa 0f       	add	r26, r26
     308:	bb 1f       	adc	r27, r27
     30a:	aa 0f       	add	r26, r26
     30c:	bb 1f       	adc	r27, r27
     30e:	aa 0f       	add	r26, r26
     310:	bb 1f       	adc	r27, r27
     312:	2a 0f       	add	r18, r26
     314:	3b 1f       	adc	r19, r27
     316:	d9 01       	movw	r26, r18
     318:	a4 51       	subi	r26, 0x14	; 20
     31a:	be 4f       	sbci	r27, 0xFE	; 254
     31c:	11 96       	adiw	r26, 0x01	; 1
     31e:	0d 90       	ld	r0, X+
     320:	bc 91       	ld	r27, X
     322:	a0 2d       	mov	r26, r0
     324:	b5 83       	std	Z+5, r27	; 0x05
     326:	a4 83       	std	Z+4, r26	; 0x04
     328:	14 96       	adiw	r26, 0x04	; 4
     32a:	2d 91       	ld	r18, X+
     32c:	3c 91       	ld	r19, X
     32e:	15 97       	sbiw	r26, 0x05	; 5
     330:	37 83       	std	Z+7, r19	; 0x07
     332:	26 83       	std	Z+6, r18	; 0x06
     334:	14 96       	adiw	r26, 0x04	; 4
     336:	2d 91       	ld	r18, X+
     338:	3c 91       	ld	r19, X
     33a:	15 97       	sbiw	r26, 0x05	; 5
     33c:	e9 01       	movw	r28, r18
     33e:	5b 83       	std	Y+3, r21	; 0x03
     340:	4a 83       	std	Y+2, r20	; 0x02
     342:	15 96       	adiw	r26, 0x05	; 5
     344:	5c 93       	st	X, r21
     346:	4e 93       	st	-X, r20
     348:	14 97       	sbiw	r26, 0x04	; 4
     34a:	a6 89       	ldd	r26, Z+22	; 0x16
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	9d 01       	movw	r18, r26
     350:	22 0f       	add	r18, r18
     352:	33 1f       	adc	r19, r19
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	22 0f       	add	r18, r18
     35a:	33 1f       	adc	r19, r19
     35c:	a2 0f       	add	r26, r18
     35e:	b3 1f       	adc	r27, r19
     360:	a4 51       	subi	r26, 0x14	; 20
     362:	be 4f       	sbci	r27, 0xFE	; 254
     364:	b3 87       	std	Z+11, r27	; 0x0b
     366:	a2 87       	std	Z+10, r26	; 0x0a
     368:	9c 91       	ld	r25, X
     36a:	9f 5f       	subi	r25, 0xFF	; 255
     36c:	9c 93       	st	X, r25
     36e:	26 89       	ldd	r18, Z+22	; 0x16
     370:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <pxCurrentTCB>
     374:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <pxCurrentTCB+0x1>
     378:	96 89       	ldd	r25, Z+22	; 0x16
     37a:	29 17       	cp	r18, r25
     37c:	08 f0       	brcs	.+2      	; 0x380 <xTaskIncrementTick+0x1da>
     37e:	49 cf       	rjmp	.-366    	; 0x212 <xTaskIncrementTick+0x6c>
     380:	4b cf       	rjmp	.-362    	; 0x218 <xTaskIncrementTick+0x72>
     382:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <pxCurrentTCB>
     386:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <pxCurrentTCB+0x1>
     38a:	26 89       	ldd	r18, Z+22	; 0x16
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	f9 01       	movw	r30, r18
     390:	ee 0f       	add	r30, r30
     392:	ff 1f       	adc	r31, r31
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	2e 0f       	add	r18, r30
     39e:	3f 1f       	adc	r19, r31
     3a0:	f9 01       	movw	r30, r18
     3a2:	e4 51       	subi	r30, 0x14	; 20
     3a4:	fe 4f       	sbci	r31, 0xFE	; 254
     3a6:	90 81       	ld	r25, Z
     3a8:	92 30       	cpi	r25, 0x02	; 2
     3aa:	08 f0       	brcs	.+2      	; 0x3ae <xTaskIncrementTick+0x208>
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <xYieldPending>
     3b2:	91 11       	cpse	r25, r1
     3b4:	0c c0       	rjmp	.+24     	; 0x3ce <xTaskIncrementTick+0x228>
     3b6:	0c c0       	rjmp	.+24     	; 0x3d0 <xTaskIncrementTick+0x22a>
     3b8:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <xPendedTicks>
     3bc:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <xPendedTicks+0x1>
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <xPendedTicks+0x1>
     3c6:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <xPendedTicks>
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <xTaskIncrementTick+0x22a>
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	08 95       	ret

000003da <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     3da:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
     3de:	88 23       	and	r24, r24
     3e0:	21 f0       	breq	.+8      	; 0x3ea <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <xYieldPending>
     3e8:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     3ea:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     3ee:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <uxTopReadyPriority>
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <vTaskSwitchContext+0x1c>
     3f4:	21 50       	subi	r18, 0x01	; 1
     3f6:	82 2f       	mov	r24, r18
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	fc 01       	movw	r30, r24
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	ee 0f       	add	r30, r30
     402:	ff 1f       	adc	r31, r31
     404:	ee 0f       	add	r30, r30
     406:	ff 1f       	adc	r31, r31
     408:	e8 0f       	add	r30, r24
     40a:	f9 1f       	adc	r31, r25
     40c:	e4 51       	subi	r30, 0x14	; 20
     40e:	fe 4f       	sbci	r31, 0xFE	; 254
     410:	30 81       	ld	r19, Z
     412:	33 23       	and	r19, r19
     414:	79 f3       	breq	.-34     	; 0x3f4 <vTaskSwitchContext+0x1a>
     416:	ac 01       	movw	r20, r24
     418:	44 0f       	add	r20, r20
     41a:	55 1f       	adc	r21, r21
     41c:	44 0f       	add	r20, r20
     41e:	55 1f       	adc	r21, r21
     420:	44 0f       	add	r20, r20
     422:	55 1f       	adc	r21, r21
     424:	48 0f       	add	r20, r24
     426:	59 1f       	adc	r21, r25
     428:	df 01       	movw	r26, r30
     42a:	01 80       	ldd	r0, Z+1	; 0x01
     42c:	f2 81       	ldd	r31, Z+2	; 0x02
     42e:	e0 2d       	mov	r30, r0
     430:	02 80       	ldd	r0, Z+2	; 0x02
     432:	f3 81       	ldd	r31, Z+3	; 0x03
     434:	e0 2d       	mov	r30, r0
     436:	12 96       	adiw	r26, 0x02	; 2
     438:	fc 93       	st	X, r31
     43a:	ee 93       	st	-X, r30
     43c:	11 97       	sbiw	r26, 0x01	; 1
     43e:	41 51       	subi	r20, 0x11	; 17
     440:	5e 4f       	sbci	r21, 0xFE	; 254
     442:	e4 17       	cp	r30, r20
     444:	f5 07       	cpc	r31, r21
     446:	29 f4       	brne	.+10     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     448:	42 81       	ldd	r20, Z+2	; 0x02
     44a:	53 81       	ldd	r21, Z+3	; 0x03
     44c:	fd 01       	movw	r30, r26
     44e:	52 83       	std	Z+2, r21	; 0x02
     450:	41 83       	std	Z+1, r20	; 0x01
     452:	fc 01       	movw	r30, r24
     454:	ee 0f       	add	r30, r30
     456:	ff 1f       	adc	r31, r31
     458:	ee 0f       	add	r30, r30
     45a:	ff 1f       	adc	r31, r31
     45c:	ee 0f       	add	r30, r30
     45e:	ff 1f       	adc	r31, r31
     460:	8e 0f       	add	r24, r30
     462:	9f 1f       	adc	r25, r31
     464:	fc 01       	movw	r30, r24
     466:	e4 51       	subi	r30, 0x14	; 20
     468:	fe 4f       	sbci	r31, 0xFE	; 254
     46a:	01 80       	ldd	r0, Z+1	; 0x01
     46c:	f2 81       	ldd	r31, Z+2	; 0x02
     46e:	e0 2d       	mov	r30, r0
     470:	86 81       	ldd	r24, Z+6	; 0x06
     472:	97 81       	ldd	r25, Z+7	; 0x07
     474:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <pxCurrentTCB+0x1>
     478:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <pxCurrentTCB>
     47c:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <uxTopReadyPriority>
     480:	08 95       	ret

00000482 <LCD_SendCommand>:
				DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
				*Data = Character;
			}
	}
	return ErrRetVal;
}
     482:	df 92       	push	r13
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	c8 2f       	mov	r28, r24
     492:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <State.1734>
     496:	85 31       	cpi	r24, 0x15	; 21
     498:	09 f4       	brne	.+2      	; 0x49c <LCD_SendCommand+0x1a>
     49a:	b0 c0       	rjmp	.+352    	; 0x5fc <LCD_SendCommand+0x17a>
     49c:	8f 3f       	cpi	r24, 0xFF	; 255
     49e:	21 f0       	breq	.+8      	; 0x4a8 <LCD_SendCommand+0x26>
     4a0:	84 31       	cpi	r24, 0x14	; 20
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <LCD_SendCommand+0x24>
     4a4:	c3 c0       	rjmp	.+390    	; 0x62c <LCD_SendCommand+0x1aa>
     4a6:	87 c0       	rjmp	.+270    	; 0x5b6 <LCD_SendCommand+0x134>
     4a8:	0f 2e       	mov	r0, r31
     4aa:	f4 e7       	ldi	r31, 0x74	; 116
     4ac:	ef 2e       	mov	r14, r31
     4ae:	f1 e0       	ldi	r31, 0x01	; 1
     4b0:	ff 2e       	mov	r15, r31
     4b2:	f0 2d       	mov	r31, r0
     4b4:	f7 01       	movw	r30, r14
     4b6:	d0 80       	ld	r13, Z
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	61 81       	ldd	r22, Z+1	; 0x01
     4bc:	8d 2d       	mov	r24, r13
     4be:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	f7 01       	movw	r30, r14
     4c6:	62 81       	ldd	r22, Z+2	; 0x02
     4c8:	8d 2d       	mov	r24, r13
     4ca:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
     4ce:	07 e6       	ldi	r16, 0x67	; 103
     4d0:	11 e0       	ldi	r17, 0x01	; 1
     4d2:	f8 01       	movw	r30, r16
     4d4:	d1 81       	ldd	r29, Z+1	; 0x01
     4d6:	4c 2f       	mov	r20, r28
     4d8:	41 70       	andi	r20, 0x01	; 1
     4da:	64 85       	ldd	r22, Z+12	; 0x0c
     4dc:	8d 2f       	mov	r24, r29
     4de:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
     4e2:	4c 2f       	mov	r20, r28
     4e4:	42 70       	andi	r20, 0x02	; 2
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	55 95       	asr	r21
     4ea:	47 95       	ror	r20
     4ec:	f8 01       	movw	r30, r16
     4ee:	63 85       	ldd	r22, Z+11	; 0x0b
     4f0:	8d 2f       	mov	r24, r29
     4f2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
     4f6:	4c 2f       	mov	r20, r28
     4f8:	44 70       	andi	r20, 0x04	; 4
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	55 95       	asr	r21
     4fe:	47 95       	ror	r20
     500:	55 95       	asr	r21
     502:	47 95       	ror	r20
     504:	f8 01       	movw	r30, r16
     506:	62 85       	ldd	r22, Z+10	; 0x0a
     508:	8d 2f       	mov	r24, r29
     50a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
     50e:	4c 2f       	mov	r20, r28
     510:	48 70       	andi	r20, 0x08	; 8
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	55 95       	asr	r21
     516:	47 95       	ror	r20
     518:	55 95       	asr	r21
     51a:	47 95       	ror	r20
     51c:	55 95       	asr	r21
     51e:	47 95       	ror	r20
     520:	f8 01       	movw	r30, r16
     522:	61 85       	ldd	r22, Z+9	; 0x09
     524:	8d 2f       	mov	r24, r29
     526:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
     52a:	4c 2f       	mov	r20, r28
     52c:	40 71       	andi	r20, 0x10	; 16
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	55 95       	asr	r21
     532:	47 95       	ror	r20
     534:	55 95       	asr	r21
     536:	47 95       	ror	r20
     538:	55 95       	asr	r21
     53a:	47 95       	ror	r20
     53c:	55 95       	asr	r21
     53e:	47 95       	ror	r20
     540:	f8 01       	movw	r30, r16
     542:	60 85       	ldd	r22, Z+8	; 0x08
     544:	8d 2f       	mov	r24, r29
     546:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
     54a:	4c 2f       	mov	r20, r28
     54c:	40 72       	andi	r20, 0x20	; 32
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	55 95       	asr	r21
     552:	47 95       	ror	r20
     554:	55 95       	asr	r21
     556:	47 95       	ror	r20
     558:	55 95       	asr	r21
     55a:	47 95       	ror	r20
     55c:	55 95       	asr	r21
     55e:	47 95       	ror	r20
     560:	55 95       	asr	r21
     562:	47 95       	ror	r20
     564:	f8 01       	movw	r30, r16
     566:	67 81       	ldd	r22, Z+7	; 0x07
     568:	8d 2f       	mov	r24, r29
     56a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
     56e:	4c 2f       	mov	r20, r28
     570:	40 74       	andi	r20, 0x40	; 64
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	04 2e       	mov	r0, r20
     576:	45 2f       	mov	r20, r21
     578:	00 0c       	add	r0, r0
     57a:	44 1f       	adc	r20, r20
     57c:	55 0b       	sbc	r21, r21
     57e:	00 0c       	add	r0, r0
     580:	44 1f       	adc	r20, r20
     582:	55 1f       	adc	r21, r21
     584:	f8 01       	movw	r30, r16
     586:	66 81       	ldd	r22, Z+6	; 0x06
     588:	8d 2f       	mov	r24, r29
     58a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
     58e:	4c 2f       	mov	r20, r28
     590:	44 1f       	adc	r20, r20
     592:	44 27       	eor	r20, r20
     594:	44 1f       	adc	r20, r20
     596:	f8 01       	movw	r30, r16
     598:	65 81       	ldd	r22, Z+5	; 0x05
     59a:	8d 2f       	mov	r24, r29
     59c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
     5a0:	41 e0       	ldi	r20, 0x01	; 1
     5a2:	f7 01       	movw	r30, r14
     5a4:	63 81       	ldd	r22, Z+3	; 0x03
     5a6:	8d 2d       	mov	r24, r13
     5a8:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
     5ac:	84 e1       	ldi	r24, 0x14	; 20
     5ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1734>
     5b2:	8f ef       	ldi	r24, 0xFF	; 255
     5b4:	40 c0       	rjmp	.+128    	; 0x636 <LCD_SendCommand+0x1b4>
     5b6:	61 e4       	ldi	r22, 0x41	; 65
     5b8:	72 e0       	ldi	r23, 0x02	; 2
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     5c0:	8b 3f       	cpi	r24, 0xFB	; 251
     5c2:	b1 f5       	brne	.+108    	; 0x630 <LCD_SendCommand+0x1ae>
     5c4:	21 e4       	ldi	r18, 0x41	; 65
     5c6:	32 e0       	ldi	r19, 0x02	; 2
     5c8:	41 e0       	ldi	r20, 0x01	; 1
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	0e 94 cc 09 	call	0x1398	; 0x1398 <TIM_DelayUs>
     5d6:	61 e4       	ldi	r22, 0x41	; 65
     5d8:	72 e0       	ldi	r23, 0x02	; 2
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     5e0:	81 11       	cpse	r24, r1
     5e2:	f9 cf       	rjmp	.-14     	; 0x5d6 <LCD_SendCommand+0x154>
     5e4:	e4 e7       	ldi	r30, 0x74	; 116
     5e6:	f1 e0       	ldi	r31, 0x01	; 1
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	63 81       	ldd	r22, Z+3	; 0x03
     5ec:	80 81       	ld	r24, Z
     5ee:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
     5f2:	85 e1       	ldi	r24, 0x15	; 21
     5f4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1734>
     5f8:	8f ef       	ldi	r24, 0xFF	; 255
     5fa:	1d c0       	rjmp	.+58     	; 0x636 <LCD_SendCommand+0x1b4>
     5fc:	61 e4       	ldi	r22, 0x41	; 65
     5fe:	72 e0       	ldi	r23, 0x02	; 2
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     606:	c8 2f       	mov	r28, r24
     608:	8b 3f       	cpi	r24, 0xFB	; 251
     60a:	49 f4       	brne	.+18     	; 0x61e <LCD_SendCommand+0x19c>
     60c:	21 e4       	ldi	r18, 0x41	; 65
     60e:	32 e0       	ldi	r19, 0x02	; 2
     610:	42 e0       	ldi	r20, 0x02	; 2
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <TIM_DelayMs>
     61e:	c1 11       	cpse	r28, r1
     620:	09 c0       	rjmp	.+18     	; 0x634 <LCD_SendCommand+0x1b2>
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1734>
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	05 c0       	rjmp	.+10     	; 0x636 <LCD_SendCommand+0x1b4>
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	03 c0       	rjmp	.+6      	; 0x636 <LCD_SendCommand+0x1b4>
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	01 c0       	rjmp	.+2      	; 0x636 <LCD_SendCommand+0x1b4>
     634:	8f ef       	ldi	r24, 0xFF	; 255
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	df 90       	pop	r13
     644:	08 95       	ret

00000646 <LCD_SendData>:
}



ERROR_STATE_t LCD_SendData(uint8_t Character)
{
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	c8 2f       	mov	r28, r24
	}
	/************************************************************************/
	/*                     8_Bit Mode send data Function                    */
	/************************************************************************/
	#else
	switch (State)
     650:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <State.1753>
     654:	84 31       	cpi	r24, 0x14	; 20
     656:	09 f4       	brne	.+2      	; 0x65a <LCD_SendData+0x14>
     658:	85 c0       	rjmp	.+266    	; 0x764 <LCD_SendData+0x11e>
     65a:	8f 3f       	cpi	r24, 0xFF	; 255
     65c:	09 f0       	breq	.+2      	; 0x660 <LCD_SendData+0x1a>
     65e:	a5 c0       	rjmp	.+330    	; 0x7aa <LCD_SendData+0x164>
	{
		case OperationStarted:
			/*sending control signals with configurations of selection of control reg. and write process*/
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     660:	07 e6       	ldi	r16, 0x67	; 103
     662:	11 e0       	ldi	r17, 0x01	; 1
     664:	f8 01       	movw	r30, r16
     666:	d0 81       	ld	r29, Z
     668:	41 e0       	ldi	r20, 0x01	; 1
     66a:	62 81       	ldd	r22, Z+2	; 0x02
     66c:	8d 2f       	mov	r24, r29
     66e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	f8 01       	movw	r30, r16
     676:	63 81       	ldd	r22, Z+3	; 0x03
     678:	8d 2f       	mov	r24, r29
     67a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
			/*Setting the lcd pins*/
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0,READ_BIT(Character,BIT_0));
     67e:	f8 01       	movw	r30, r16
     680:	d1 81       	ldd	r29, Z+1	; 0x01
     682:	4c 2f       	mov	r20, r28
     684:	41 70       	andi	r20, 0x01	; 1
     686:	64 85       	ldd	r22, Z+12	; 0x0c
     688:	8d 2f       	mov	r24, r29
     68a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1,READ_BIT(Character,BIT_1));
     68e:	4c 2f       	mov	r20, r28
     690:	42 70       	andi	r20, 0x02	; 2
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	55 95       	asr	r21
     696:	47 95       	ror	r20
     698:	f8 01       	movw	r30, r16
     69a:	63 85       	ldd	r22, Z+11	; 0x0b
     69c:	8d 2f       	mov	r24, r29
     69e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2,READ_BIT(Character,BIT_2));
     6a2:	4c 2f       	mov	r20, r28
     6a4:	44 70       	andi	r20, 0x04	; 4
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	55 95       	asr	r21
     6aa:	47 95       	ror	r20
     6ac:	55 95       	asr	r21
     6ae:	47 95       	ror	r20
     6b0:	f8 01       	movw	r30, r16
     6b2:	62 85       	ldd	r22, Z+10	; 0x0a
     6b4:	8d 2f       	mov	r24, r29
     6b6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3,READ_BIT(Character,BIT_3));
     6ba:	4c 2f       	mov	r20, r28
     6bc:	48 70       	andi	r20, 0x08	; 8
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	55 95       	asr	r21
     6c2:	47 95       	ror	r20
     6c4:	55 95       	asr	r21
     6c6:	47 95       	ror	r20
     6c8:	55 95       	asr	r21
     6ca:	47 95       	ror	r20
     6cc:	f8 01       	movw	r30, r16
     6ce:	61 85       	ldd	r22, Z+9	; 0x09
     6d0:	8d 2f       	mov	r24, r29
     6d2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(Character,BIT_4));
     6d6:	4c 2f       	mov	r20, r28
     6d8:	40 71       	andi	r20, 0x10	; 16
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	55 95       	asr	r21
     6de:	47 95       	ror	r20
     6e0:	55 95       	asr	r21
     6e2:	47 95       	ror	r20
     6e4:	55 95       	asr	r21
     6e6:	47 95       	ror	r20
     6e8:	55 95       	asr	r21
     6ea:	47 95       	ror	r20
     6ec:	f8 01       	movw	r30, r16
     6ee:	60 85       	ldd	r22, Z+8	; 0x08
     6f0:	8d 2f       	mov	r24, r29
     6f2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(Character,BIT_5));
     6f6:	4c 2f       	mov	r20, r28
     6f8:	40 72       	andi	r20, 0x20	; 32
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	55 95       	asr	r21
     6fe:	47 95       	ror	r20
     700:	55 95       	asr	r21
     702:	47 95       	ror	r20
     704:	55 95       	asr	r21
     706:	47 95       	ror	r20
     708:	55 95       	asr	r21
     70a:	47 95       	ror	r20
     70c:	55 95       	asr	r21
     70e:	47 95       	ror	r20
     710:	f8 01       	movw	r30, r16
     712:	67 81       	ldd	r22, Z+7	; 0x07
     714:	8d 2f       	mov	r24, r29
     716:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(Character,BIT_6));
     71a:	4c 2f       	mov	r20, r28
     71c:	40 74       	andi	r20, 0x40	; 64
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	04 2e       	mov	r0, r20
     722:	45 2f       	mov	r20, r21
     724:	00 0c       	add	r0, r0
     726:	44 1f       	adc	r20, r20
     728:	55 0b       	sbc	r21, r21
     72a:	00 0c       	add	r0, r0
     72c:	44 1f       	adc	r20, r20
     72e:	55 1f       	adc	r21, r21
     730:	f8 01       	movw	r30, r16
     732:	66 81       	ldd	r22, Z+6	; 0x06
     734:	8d 2f       	mov	r24, r29
     736:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(Character,BIT_7));
     73a:	4c 2f       	mov	r20, r28
     73c:	44 1f       	adc	r20, r20
     73e:	44 27       	eor	r20, r20
     740:	44 1f       	adc	r20, r20
     742:	f8 01       	movw	r30, r16
     744:	65 81       	ldd	r22, Z+5	; 0x05
     746:	8d 2f       	mov	r24, r29
     748:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
			/*writing data to the register by pulling the enable pin high for 1 Us*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     74c:	e4 e7       	ldi	r30, 0x74	; 116
     74e:	f1 e0       	ldi	r31, 0x01	; 1
     750:	41 e0       	ldi	r20, 0x01	; 1
     752:	63 81       	ldd	r22, Z+3	; 0x03
     754:	80 81       	ld	r24, Z
     756:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
			State = CMD_Sending;
     75a:	84 e1       	ldi	r24, 0x14	; 20
     75c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1753>


ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     760:	8f ef       	ldi	r24, 0xFF	; 255
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(Character,BIT_6));
			DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port,gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(Character,BIT_7));
			/*writing data to the register by pulling the enable pin high for 1 Us*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
			State = CMD_Sending;
			break;
     762:	26 c0       	rjmp	.+76     	; 0x7b0 <LCD_SendData+0x16a>
		case CMD_Sending:
			/*start timer delay in background*/
			if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     764:	61 e4       	ldi	r22, 0x41	; 65
     766:	72 e0       	ldi	r23, 0x02	; 2
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     76e:	8b 3f       	cpi	r24, 0xFB	; 251
     770:	f1 f4       	brne	.+60     	; 0x7ae <LCD_SendData+0x168>
			{
				TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendCommand);
     772:	21 e4       	ldi	r18, 0x41	; 65
     774:	32 e0       	ldi	r19, 0x02	; 2
     776:	41 e0       	ldi	r20, 0x01	; 1
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	0e 94 cc 09 	call	0x1398	; 0x1398 <TIM_DelayUs>
				while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     784:	61 e4       	ldi	r22, 0x41	; 65
     786:	72 e0       	ldi	r23, 0x02	; 2
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     78e:	81 11       	cpse	r24, r1
     790:	f9 cf       	rjmp	.-14     	; 0x784 <LCD_SendData+0x13e>
				/*if timer delay function finished correctly pull enable pin low*/
				DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     792:	e4 e7       	ldi	r30, 0x74	; 116
     794:	f1 e0       	ldi	r31, 0x01	; 1
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	63 81       	ldd	r22, Z+3	; 0x03
     79a:	80 81       	ld	r24, Z
     79c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
				/*reset the function's state*/
				State = OperationStarted;
     7a0:	8f ef       	ldi	r24, 0xFF	; 255
     7a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1753>
				/*process finished successfully*/
				ErrRetVal = OperationSuccess;
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <LCD_SendData+0x16a>
			}
			break;
		default:
		ErrRetVal = OperationFail;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <LCD_SendData+0x16a>


ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	}
	#endif
	/*return from function*/
	return ErrRetVal;
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	08 95       	ret

000007ba <LCD_Init>:




ERROR_STATE_t LCD_Init()
{
     7ba:	8f 92       	push	r8
     7bc:	9f 92       	push	r9
     7be:	af 92       	push	r10
     7c0:	bf 92       	push	r11
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
	/************************************************************************/
	/*                 8_Bit Mode initialization Function                   */
	/************************************************************************/
	#else
	/*Starting the initialization sequence*/
	switch(State)
     7d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7d6:	8b 30       	cpi	r24, 0x0B	; 11
     7d8:	09 f4       	brne	.+2      	; 0x7dc <LCD_Init+0x22>
     7da:	d5 c0       	rjmp	.+426    	; 0x986 <__stack+0x127>
     7dc:	90 f4       	brcc	.+36     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7de:	88 30       	cpi	r24, 0x08	; 8
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <LCD_Init+0x2a>
     7e2:	b3 c0       	rjmp	.+358    	; 0x94a <__stack+0xeb>
     7e4:	38 f4       	brcc	.+14     	; 0x7f4 <LCD_Init+0x3a>
     7e6:	85 30       	cpi	r24, 0x05	; 5
     7e8:	09 f4       	brne	.+2      	; 0x7ec <LCD_Init+0x32>
     7ea:	8d c0       	rjmp	.+282    	; 0x906 <__stack+0xa7>
     7ec:	86 30       	cpi	r24, 0x06	; 6
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <LCD_Init+0x38>
     7f0:	a2 c0       	rjmp	.+324    	; 0x936 <__stack+0xd7>
     7f2:	fb c0       	rjmp	.+502    	; 0x9ea <__stack+0x18b>
     7f4:	89 30       	cpi	r24, 0x09	; 9
     7f6:	09 f4       	brne	.+2      	; 0x7fa <LCD_Init+0x40>
     7f8:	b2 c0       	rjmp	.+356    	; 0x95e <__stack+0xff>
     7fa:	8a 30       	cpi	r24, 0x0A	; 10
     7fc:	09 f4       	brne	.+2      	; 0x800 <__DATA_REGION_LENGTH__>
     7fe:	b9 c0       	rjmp	.+370    	; 0x972 <__stack+0x113>
     800:	f4 c0       	rjmp	.+488    	; 0x9ea <__stack+0x18b>
     802:	8e 30       	cpi	r24, 0x0E	; 14
     804:	09 f4       	brne	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     806:	dd c0       	rjmp	.+442    	; 0x9c2 <__stack+0x163>
     808:	38 f4       	brcc	.+14     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     80a:	8c 30       	cpi	r24, 0x0C	; 12
     80c:	09 f4       	brne	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80e:	c5 c0       	rjmp	.+394    	; 0x99a <__stack+0x13b>
     810:	8d 30       	cpi	r24, 0x0D	; 13
     812:	09 f4       	brne	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     814:	cc c0       	rjmp	.+408    	; 0x9ae <__stack+0x14f>
     816:	e9 c0       	rjmp	.+466    	; 0x9ea <__stack+0x18b>
     818:	8f 30       	cpi	r24, 0x0F	; 15
     81a:	09 f4       	brne	.+2      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     81c:	dc c0       	rjmp	.+440    	; 0x9d6 <__stack+0x177>
     81e:	8f 3f       	cpi	r24, 0xFF	; 255
     820:	09 f0       	breq	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     822:	e3 c0       	rjmp	.+454    	; 0x9ea <__stack+0x18b>
	{
		case OperationStarted:
		/*Initialize timer2*/
		TIM_Init(TIMER_2);
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	0e 94 c5 08 	call	0x118a	; 0x118a <TIM_Init>
		/*Initializing the LCD Data Pins*/
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     82a:	c7 e6       	ldi	r28, 0x67	; 103
     82c:	d1 e0       	ldi	r29, 0x01	; 1
     82e:	8d 80       	ldd	r8, Y+5	; 0x05
     830:	09 81       	ldd	r16, Y+1	; 0x01
     832:	41 e0       	ldi	r20, 0x01	; 1
     834:	68 2d       	mov	r22, r8
     836:	80 2f       	mov	r24, r16
     838:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     83c:	9e 80       	ldd	r9, Y+6	; 0x06
     83e:	41 e0       	ldi	r20, 0x01	; 1
     840:	69 2d       	mov	r22, r9
     842:	80 2f       	mov	r24, r16
     844:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     848:	af 80       	ldd	r10, Y+7	; 0x07
     84a:	41 e0       	ldi	r20, 0x01	; 1
     84c:	6a 2d       	mov	r22, r10
     84e:	80 2f       	mov	r24, r16
     850:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     854:	b8 84       	ldd	r11, Y+8	; 0x08
     856:	41 e0       	ldi	r20, 0x01	; 1
     858:	6b 2d       	mov	r22, r11
     85a:	80 2f       	mov	r24, r16
     85c:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3, PIN_OUTPUT);
     860:	c9 84       	ldd	r12, Y+9	; 0x09
     862:	41 e0       	ldi	r20, 0x01	; 1
     864:	6c 2d       	mov	r22, r12
     866:	80 2f       	mov	r24, r16
     868:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2, PIN_OUTPUT);
     86c:	da 84       	ldd	r13, Y+10	; 0x0a
     86e:	41 e0       	ldi	r20, 0x01	; 1
     870:	6d 2d       	mov	r22, r13
     872:	80 2f       	mov	r24, r16
     874:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1, PIN_OUTPUT);
     878:	eb 84       	ldd	r14, Y+11	; 0x0b
     87a:	41 e0       	ldi	r20, 0x01	; 1
     87c:	6e 2d       	mov	r22, r14
     87e:	80 2f       	mov	r24, r16
     880:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0, PIN_OUTPUT);
     884:	fc 84       	ldd	r15, Y+12	; 0x0c
     886:	41 e0       	ldi	r20, 0x01	; 1
     888:	6f 2d       	mov	r22, r15
     88a:	80 2f       	mov	r24, r16
     88c:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_SetPinDirection>
		/*Initializing the LCD CTRL Pins*/
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     890:	18 81       	ld	r17, Y
     892:	41 e0       	ldi	r20, 0x01	; 1
     894:	6a 81       	ldd	r22, Y+2	; 0x02
     896:	81 2f       	mov	r24, r17
     898:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     89c:	41 e0       	ldi	r20, 0x01	; 1
     89e:	6b 81       	ldd	r22, Y+3	; 0x03
     8a0:	81 2f       	mov	r24, r17
     8a2:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_CTRL_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     8a6:	41 e0       	ldi	r20, 0x01	; 1
     8a8:	6c 81       	ldd	r22, Y+4	; 0x04
     8aa:	81 2f       	mov	r24, r17
     8ac:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	68 2d       	mov	r22, r8
     8b4:	80 2f       	mov	r24, r16
     8b6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	69 2d       	mov	r22, r9
     8be:	80 2f       	mov	r24, r16
     8c0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	6a 2d       	mov	r22, r10
     8c8:	80 2f       	mov	r24, r16
     8ca:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	6b 2d       	mov	r22, r11
     8d2:	80 2f       	mov	r24, r16
     8d4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D3, PIN_LOW);
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	6c 2d       	mov	r22, r12
     8dc:	80 2f       	mov	r24, r16
     8de:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D2, PIN_LOW);
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	6d 2d       	mov	r22, r13
     8e6:	80 2f       	mov	r24, r16
     8e8:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D1, PIN_LOW);
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	6e 2d       	mov	r22, r14
     8f0:	80 2f       	mov	r24, r16
     8f2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
		DIO_WritePin(gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_DATA_Port, gastr_LCD_8_Config[LCD_Channel_0].u8_LCD_D0, PIN_LOW);
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	6f 2d       	mov	r22, r15
     8fa:	80 2f       	mov	r24, r16
     8fc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_WritePin>
		State = LCD_Pin_Initializing;
     900:	85 e0       	ldi	r24, 0x05	; 5
     902:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
     906:	61 e4       	ldi	r22, 0x41	; 65
     908:	72 e0       	ldi	r23, 0x02	; 2
     90a:	82 e0       	ldi	r24, 0x02	; 2
     90c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     910:	c8 2f       	mov	r28, r24
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     912:	8b 3f       	cpi	r24, 0xFB	; 251
     914:	49 f4       	brne	.+18     	; 0x928 <__stack+0xc9>
		{
			TIM_DelayMs(TIMER_2,15, (void (*)(void))LCD_SendCommand);
     916:	21 e4       	ldi	r18, 0x41	; 65
     918:	32 e0       	ldi	r19, 0x02	; 2
     91a:	4f e0       	ldi	r20, 0x0F	; 15
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	82 e0       	ldi	r24, 0x02	; 2
     924:	0e 94 4a 0a 	call	0x1494	; 0x1494 <TIM_DelayMs>
		}
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     928:	c1 11       	cpse	r28, r1
     92a:	61 c0       	rjmp	.+194    	; 0x9ee <__stack+0x18f>
		{
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
     92c:	86 e0       	ldi	r24, 0x06	; 6
     92e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     932:	8f ef       	ldi	r24, 0xFF	; 255
     934:	6f c0       	rjmp	.+222    	; 0xa14 <__stack+0x1b5>
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
		case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     936:	80 e3       	ldi	r24, 0x30	; 48
     938:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     93c:	81 11       	cpse	r24, r1
     93e:	59 c0       	rjmp	.+178    	; 0x9f2 <__stack+0x193>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     940:	88 e0       	ldi	r24, 0x08	; 8
     942:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     946:	8f ef       	ldi	r24, 0xFF	; 255
     948:	65 c0       	rjmp	.+202    	; 0xa14 <__stack+0x1b5>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     94a:	80 e3       	ldi	r24, 0x30	; 48
     94c:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     950:	81 11       	cpse	r24, r1
     952:	51 c0       	rjmp	.+162    	; 0x9f6 <__stack+0x197>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     954:	89 e0       	ldi	r24, 0x09	; 9
     956:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     95a:	8f ef       	ldi	r24, 0xFF	; 255
     95c:	5b c0       	rjmp	.+182    	; 0xa14 <__stack+0x1b5>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_8_BIT);
     95e:	80 e3       	ldi	r24, 0x30	; 48
     960:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     964:	81 11       	cpse	r24, r1
     966:	49 c0       	rjmp	.+146    	; 0x9fa <__stack+0x19b>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     968:	8a e0       	ldi	r24, 0x0A	; 10
     96a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	51 c0       	rjmp	.+162    	; 0xa14 <__stack+0x1b5>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_3);
     972:	88 e3       	ldi	r24, 0x38	; 56
     974:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     978:	81 11       	cpse	r24, r1
     97a:	41 c0       	rjmp	.+130    	; 0x9fe <__stack+0x19f>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     97c:	8b e0       	ldi	r24, 0x0B	; 11
     97e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	47 c0       	rjmp	.+142    	; 0xa14 <__stack+0x1b5>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
     986:	8c e0       	ldi	r24, 0x0C	; 12
     988:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     98c:	81 11       	cpse	r24, r1
     98e:	39 c0       	rjmp	.+114    	; 0xa02 <__stack+0x1a3>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     990:	8c e0       	ldi	r24, 0x0C	; 12
     992:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	3d c0       	rjmp	.+122    	; 0xa14 <__stack+0x1b5>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     9a0:	81 11       	cpse	r24, r1
     9a2:	31 c0       	rjmp	.+98     	; 0xa06 <__stack+0x1a7>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     9a4:	8d e0       	ldi	r24, 0x0D	; 13
     9a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9aa:	8f ef       	ldi	r24, 0xFF	; 255
     9ac:	33 c0       	rjmp	.+102    	; 0xa14 <__stack+0x1b5>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);
     9ae:	86 e0       	ldi	r24, 0x06	; 6
     9b0:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     9b4:	81 11       	cpse	r24, r1
     9b6:	29 c0       	rjmp	.+82     	; 0xa0a <__stack+0x1ab>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     9b8:	8e e0       	ldi	r24, 0x0E	; 14
     9ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9be:	8f ef       	ldi	r24, 0xFF	; 255
     9c0:	29 c0       	rjmp	.+82     	; 0xa14 <__stack+0x1b5>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     9c2:	80 e8       	ldi	r24, 0x80	; 128
     9c4:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     9c8:	81 11       	cpse	r24, r1
     9ca:	21 c0       	rjmp	.+66     	; 0xa0e <__stack+0x1af>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     9cc:	8f e0       	ldi	r24, 0x0F	; 15
     9ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9d2:	8f ef       	ldi	r24, 0xFF	; 255
     9d4:	1f c0       	rjmp	.+62     	; 0xa14 <__stack+0x1b5>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
		case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     9dc:	81 11       	cpse	r24, r1
     9de:	19 c0       	rjmp	.+50     	; 0xa12 <__stack+0x1b3>
		{
			State = OperationStarted;
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			ErrRetVal = OperationSuccess;
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	15 c0       	rjmp	.+42     	; 0xa14 <__stack+0x1b5>
		}
		break;
		default:
		ErrRetVal = OperationFail;
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	13 c0       	rjmp	.+38     	; 0xa14 <__stack+0x1b5>


ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	11 c0       	rjmp	.+34     	; 0xa14 <__stack+0x1b5>
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	0f c0       	rjmp	.+30     	; 0xa14 <__stack+0x1b5>
     9f6:	8f ef       	ldi	r24, 0xFF	; 255
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__stack+0x1b5>
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	0b c0       	rjmp	.+22     	; 0xa14 <__stack+0x1b5>
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	09 c0       	rjmp	.+18     	; 0xa14 <__stack+0x1b5>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	07 c0       	rjmp	.+14     	; 0xa14 <__stack+0x1b5>
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	05 c0       	rjmp	.+10     	; 0xa14 <__stack+0x1b5>
     a0a:	8f ef       	ldi	r24, 0xFF	; 255
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <__stack+0x1b5>
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <__stack+0x1b5>
     a12:	8f ef       	ldi	r24, 0xFF	; 255
		ErrRetVal = OperationFail;
		break;
	}
	#endif
	return ErrRetVal;
}
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	bf 90       	pop	r11
     a26:	af 90       	pop	r10
     a28:	9f 90       	pop	r9
     a2a:	8f 90       	pop	r8
     a2c:	08 95       	ret

00000a2e <LCD_SendString>:
ERROR_STATE_t LCD_SendString(const uint8_t* String)
{
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
     a2e:	00 97       	sbiw	r24, 0x00	; 0
     a30:	b9 f0       	breq	.+46     	; 0xa60 <LCD_SendString+0x32>
		if (String[Number] != NULL_TERMINATOR ) {
     a32:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <Number.1790>
     a36:	fc 01       	movw	r30, r24
     a38:	e2 0f       	add	r30, r18
     a3a:	f1 1d       	adc	r31, r1
     a3c:	80 81       	ld	r24, Z
     a3e:	88 23       	and	r24, r24
     a40:	59 f0       	breq	.+22     	; 0xa58 <LCD_SendString+0x2a>
			ErrRetVal = OperationRunning;
			LCD_SendDataRetVal = LCD_SendData(String[Number]);
     a42:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
			if(LCD_SendDataRetVal == OperationSuccess)
     a46:	81 11       	cpse	r24, r1
     a48:	0d c0       	rjmp	.+26     	; 0xa64 <LCD_SendString+0x36>
			{
				Number++;
     a4a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <Number.1790>
     a4e:	8f 5f       	subi	r24, 0xFF	; 255
     a50:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <Number.1790>
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	08 95       	ret
				Number++;
			}
		}
		else
		{
			Number = 0;
     a58:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <Number.1790>
			ErrRetVal = OperationSuccess;
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	08 95       	ret
		}
	} else {
		ErrRetVal = OperationFail;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	08 95       	ret
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     a64:	82 e0       	ldi	r24, 0x02	; 2
		}
	} else {
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     a66:	08 95       	ret

00000a68 <LCD_SendNumber>:




ERROR_STATE_t LCD_SendNumber(uint32_t Number)
{
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	2a 97       	sbiw	r28, 0x0a	; 10
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
	/*urgent a blocking function*/
	uint8_t ErrRetVal = OperationStarted;
	uint8_t FunRetVal = OperationStarted;
	uint8_t String[10];
	STR_Number2String((uint32_t)Number,String);
     a7c:	ae 01       	movw	r20, r28
     a7e:	4f 5f       	subi	r20, 0xFF	; 255
     a80:	5f 4f       	sbci	r21, 0xFF	; 255
     a82:	0e 94 81 05 	call	0xb02	; 0xb02 <STR_Number2String>

ERROR_STATE_t LCD_SendNumber(uint32_t Number)
{
	/*urgent a blocking function*/
	uint8_t ErrRetVal = OperationStarted;
	uint8_t FunRetVal = OperationStarted;
     a86:	8f ef       	ldi	r24, 0xFF	; 255


ERROR_STATE_t LCD_SendNumber(uint32_t Number)
{
	/*urgent a blocking function*/
	uint8_t ErrRetVal = OperationStarted;
     a88:	9f ef       	ldi	r25, 0xFF	; 255
	uint8_t FunRetVal = OperationStarted;
	uint8_t String[10];
	STR_Number2String((uint32_t)Number,String);
	while(FunRetVal != OperationSuccess)
     a8a:	09 c0       	rjmp	.+18     	; 0xa9e <LCD_SendNumber+0x36>
   {
      FunRetVal = LCD_SendString((uint8_t*)String);
     a8c:	ce 01       	movw	r24, r28
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
      if(FunRetVal == OperationSuccess)
     a94:	81 11       	cpse	r24, r1
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <LCD_SendNumber+0x34>
      {
         ErrRetVal = OperationSuccess;
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <LCD_SendNumber+0x36>
      }
      else
      {
         ErrRetVal = OperationFail;
     a9c:	91 e0       	ldi	r25, 0x01	; 1
	/*urgent a blocking function*/
	uint8_t ErrRetVal = OperationStarted;
	uint8_t FunRetVal = OperationStarted;
	uint8_t String[10];
	STR_Number2String((uint32_t)Number,String);
	while(FunRetVal != OperationSuccess)
     a9e:	81 11       	cpse	r24, r1
     aa0:	f5 cf       	rjmp	.-22     	; 0xa8c <LCD_SendNumber+0x24>
      {
         ErrRetVal = OperationFail;
      }
   }
	return ErrRetVal;
}
     aa2:	89 2f       	mov	r24, r25
     aa4:	2a 96       	adiw	r28, 0x0a	; 10
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	cd bf       	out	0x3d, r28	; 61
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <STR_Length>:
	STRING[StrLength] = (uint8_t)(Window_16_Element>>8);
	STRING[StrLength+1] = (uint8_t)(Window_16_Element&0x000000FF);
	STRING[StrLength+2] = NULL_TERMINATOR;
	/*return zero*/
	return OperationSuccess;
}
     ab6:	fc 01       	movw	r30, r24
     ab8:	db 01       	movw	r26, r22
     aba:	11 96       	adiw	r26, 0x01	; 1
     abc:	1c 92       	st	X, r1
     abe:	1e 92       	st	-X, r1
     ac0:	09 c0       	rjmp	.+18     	; 0xad4 <STR_Length+0x1e>
     ac2:	2d 91       	ld	r18, X+
     ac4:	3c 91       	ld	r19, X
     ac6:	11 97       	sbiw	r26, 0x01	; 1
     ac8:	2f 5f       	subi	r18, 0xFF	; 255
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	11 96       	adiw	r26, 0x01	; 1
     ace:	3c 93       	st	X, r19
     ad0:	2e 93       	st	-X, r18
     ad2:	31 96       	adiw	r30, 0x01	; 1
     ad4:	80 81       	ld	r24, Z
     ad6:	81 11       	cpse	r24, r1
     ad8:	f4 cf       	rjmp	.-24     	; 0xac2 <STR_Length+0xc>
     ada:	08 95       	ret

00000adc <STR_StringReverse>:
     adc:	dc 01       	movw	r26, r24
     ade:	fc 01       	movw	r30, r24
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <STR_StringReverse+0x8>
     ae2:	31 96       	adiw	r30, 0x01	; 1
     ae4:	80 81       	ld	r24, Z
     ae6:	81 11       	cpse	r24, r1
     ae8:	fc cf       	rjmp	.-8      	; 0xae2 <STR_StringReverse+0x6>
     aea:	31 97       	sbiw	r30, 0x01	; 1
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <STR_StringReverse+0x1c>
     aee:	8c 91       	ld	r24, X
     af0:	90 81       	ld	r25, Z
     af2:	9d 93       	st	X+, r25
     af4:	80 83       	st	Z, r24
     af6:	31 97       	sbiw	r30, 0x01	; 1
     af8:	ae 17       	cp	r26, r30
     afa:	bf 07       	cpc	r27, r31
     afc:	c0 f3       	brcs	.-16     	; 0xaee <STR_StringReverse+0x12>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	08 95       	ret

00000b02 <STR_Number2String>:
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	8a 01       	movw	r16, r20
     b0c:	61 15       	cp	r22, r1
     b0e:	71 05       	cpc	r23, r1
     b10:	81 05       	cpc	r24, r1
     b12:	91 05       	cpc	r25, r1
     b14:	29 f4       	brne	.+10     	; 0xb20 <STR_Number2String+0x1e>
     b16:	80 e3       	ldi	r24, 0x30	; 48
     b18:	fa 01       	movw	r30, r20
     b1a:	80 83       	st	Z, r24
     b1c:	11 82       	std	Z+1, r1	; 0x01
     b1e:	13 c0       	rjmp	.+38     	; 0xb46 <STR_Number2String+0x44>
     b20:	ea 01       	movw	r28, r20
     b22:	2a e0       	ldi	r18, 0x0A	; 10
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
     b2e:	60 5d       	subi	r22, 0xD0	; 208
     b30:	69 93       	st	Y+, r22
     b32:	62 2f       	mov	r22, r18
     b34:	73 2f       	mov	r23, r19
     b36:	84 2f       	mov	r24, r20
     b38:	95 2f       	mov	r25, r21
     b3a:	61 15       	cp	r22, r1
     b3c:	71 05       	cpc	r23, r1
     b3e:	81 05       	cpc	r24, r1
     b40:	91 05       	cpc	r25, r1
     b42:	79 f7       	brne	.-34     	; 0xb22 <STR_Number2String+0x20>
     b44:	18 82       	st	Y, r1
     b46:	c8 01       	movw	r24, r16
     b48:	0e 94 6e 05 	call	0xadc	; 0xadc <STR_StringReverse>
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	08 95       	ret

00000b58 <CRC_16_Chk>:

uint8_t CRC_16_Chk (uint8_t* STRING)
{
     b58:	cf 92       	push	r12
     b5a:	df 92       	push	r13
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	c5 50       	subi	r28, 0x05	; 5
     b6a:	d1 40       	sbci	r29, 0x01	; 1
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	7c 01       	movw	r14, r24
	/*change array of character to array of bits*/
	/*initialize the array of bits*/
	uint8_t BitArr[255] = {0};
     b78:	fe 01       	movw	r30, r28
     b7a:	31 96       	adiw	r30, 0x01	; 1
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	df 01       	movw	r26, r30
     b80:	1d 92       	st	X+, r1
     b82:	8a 95       	dec	r24
     b84:	e9 f7       	brne	.-6      	; 0xb80 <CRC_16_Chk+0x28>
	/*Error Return value*/
	uint8_t ErrRetVal = ERROR_OK;
	/*the value of the used polynomial for CRC_16*/
	const uint32_t polynomial = 0b00000000000000011000000000000101;
	/*variable that holds the value to be XORED and SHIFTED*/
	uint32_t volatile Window_16_Element =0;
     b86:	c0 50       	subi	r28, 0x00	; 0
     b88:	df 4f       	sbci	r29, 0xFF	; 255
     b8a:	18 82       	st	Y, r1
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	1a 82       	std	Y+2, r1	; 0x02
     b90:	1b 82       	std	Y+3, r1	; 0x03
     b92:	c0 50       	subi	r28, 0x00	; 0
     b94:	d1 40       	sbci	r29, 0x01	; 1
	/*initialize the variable that holds the number of characters to which CRC is calculated*/
	/*number of characters in the inserted string*/
	uint16_t StrLength =0;
     b96:	cc 5f       	subi	r28, 0xFC	; 252
     b98:	de 4f       	sbci	r29, 0xFE	; 254
     b9a:	19 82       	std	Y+1, r1	; 0x01
     b9c:	18 82       	st	Y, r1
     b9e:	c4 50       	subi	r28, 0x04	; 4
     ba0:	d1 40       	sbci	r29, 0x01	; 1
	/*initialize the variable that holds the number of bits in the inserted string*/
	uint8_t BitArr_Size = 0;
	/*using STR_Length() function to calculate Number of characters in the inserted String*/
	STR_Length(STRING, &StrLength);
     ba2:	be 01       	movw	r22, r28
     ba4:	6c 5f       	subi	r22, 0xFC	; 252
     ba6:	7e 4f       	sbci	r23, 0xFE	; 254
     ba8:	c7 01       	movw	r24, r14
     baa:	0e 94 5b 05 	call	0xab6	; 0xab6 <STR_Length>
	uint8_t iterator_of_BitArr = 0;
	/*initializing the iterator for the array of the inserted Characters in the string*/
	uint8_t iterator_of_characters = 0;
	/*assigning the bits of the character in the passed string to the array of bits*/
	/*bits are arranged in the array the form of an extra long number"Index 0:MSB,..,..,..,. . .,Index N:LSB"*/
	for(iterator_of_characters = 0; iterator_of_characters < StrLength; iterator_of_characters++)
     bae:	40 e0       	ldi	r20, 0x00	; 0
	/*initialize the variable that holds the number of bits in the inserted string*/
	uint8_t BitArr_Size = 0;
	/*using STR_Length() function to calculate Number of characters in the inserted String*/
	STR_Length(STRING, &StrLength);
	/*initializing the iterator for the array of bits of the inserted Character string*/
	uint8_t iterator_of_BitArr = 0;
     bb0:	90 e0       	ldi	r25, 0x00	; 0
	/*initializing the iterator for the array of the inserted Characters in the string*/
	uint8_t iterator_of_characters = 0;
	/*assigning the bits of the character in the passed string to the array of bits*/
	/*bits are arranged in the array the form of an extra long number"Index 0:MSB,..,..,..,. . .,Index N:LSB"*/
	for(iterator_of_characters = 0; iterator_of_characters < StrLength; iterator_of_characters++)
     bb2:	89 c0       	rjmp	.+274    	; 0xcc6 <CRC_16_Chk+0x16e>
	{
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_7);
     bb4:	f7 01       	movw	r30, r14
     bb6:	e2 0f       	add	r30, r18
     bb8:	f3 1f       	adc	r31, r19
     bba:	80 81       	ld	r24, Z
     bbc:	28 2f       	mov	r18, r24
     bbe:	22 1f       	adc	r18, r18
     bc0:	22 27       	eor	r18, r18
     bc2:	22 1f       	adc	r18, r18
     bc4:	e1 e0       	ldi	r30, 0x01	; 1
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	ec 0f       	add	r30, r28
     bca:	fd 1f       	adc	r31, r29
     bcc:	e9 0f       	add	r30, r25
     bce:	f1 1d       	adc	r31, r1
     bd0:	20 83       	st	Z, r18
		iterator_of_BitArr++;
     bd2:	51 e0       	ldi	r21, 0x01	; 1
     bd4:	59 0f       	add	r21, r25
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_6);
     bd6:	28 2f       	mov	r18, r24
     bd8:	20 74       	andi	r18, 0x40	; 64
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	02 2e       	mov	r0, r18
     bde:	23 2f       	mov	r18, r19
     be0:	00 0c       	add	r0, r0
     be2:	22 1f       	adc	r18, r18
     be4:	33 0b       	sbc	r19, r19
     be6:	00 0c       	add	r0, r0
     be8:	22 1f       	adc	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	ec 0f       	add	r30, r28
     bf2:	fd 1f       	adc	r31, r29
     bf4:	e5 0f       	add	r30, r21
     bf6:	f1 1d       	adc	r31, r1
     bf8:	20 83       	st	Z, r18
		iterator_of_BitArr++;
     bfa:	52 e0       	ldi	r21, 0x02	; 2
     bfc:	59 0f       	add	r21, r25
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_5);
     bfe:	28 2f       	mov	r18, r24
     c00:	20 72       	andi	r18, 0x20	; 32
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	35 95       	asr	r19
     c06:	27 95       	ror	r18
     c08:	35 95       	asr	r19
     c0a:	27 95       	ror	r18
     c0c:	35 95       	asr	r19
     c0e:	27 95       	ror	r18
     c10:	35 95       	asr	r19
     c12:	27 95       	ror	r18
     c14:	35 95       	asr	r19
     c16:	27 95       	ror	r18
     c18:	e1 e0       	ldi	r30, 0x01	; 1
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	ec 0f       	add	r30, r28
     c1e:	fd 1f       	adc	r31, r29
     c20:	e5 0f       	add	r30, r21
     c22:	f1 1d       	adc	r31, r1
     c24:	20 83       	st	Z, r18
		iterator_of_BitArr++;
     c26:	53 e0       	ldi	r21, 0x03	; 3
     c28:	59 0f       	add	r21, r25
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_4);
     c2a:	28 2f       	mov	r18, r24
     c2c:	20 71       	andi	r18, 0x10	; 16
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	35 95       	asr	r19
     c32:	27 95       	ror	r18
     c34:	35 95       	asr	r19
     c36:	27 95       	ror	r18
     c38:	35 95       	asr	r19
     c3a:	27 95       	ror	r18
     c3c:	35 95       	asr	r19
     c3e:	27 95       	ror	r18
     c40:	e1 e0       	ldi	r30, 0x01	; 1
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	ec 0f       	add	r30, r28
     c46:	fd 1f       	adc	r31, r29
     c48:	e5 0f       	add	r30, r21
     c4a:	f1 1d       	adc	r31, r1
     c4c:	20 83       	st	Z, r18
		iterator_of_BitArr++;
     c4e:	54 e0       	ldi	r21, 0x04	; 4
     c50:	59 0f       	add	r21, r25
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_3);
     c52:	28 2f       	mov	r18, r24
     c54:	28 70       	andi	r18, 0x08	; 8
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	35 95       	asr	r19
     c5a:	27 95       	ror	r18
     c5c:	35 95       	asr	r19
     c5e:	27 95       	ror	r18
     c60:	35 95       	asr	r19
     c62:	27 95       	ror	r18
     c64:	e1 e0       	ldi	r30, 0x01	; 1
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	ec 0f       	add	r30, r28
     c6a:	fd 1f       	adc	r31, r29
     c6c:	e5 0f       	add	r30, r21
     c6e:	f1 1d       	adc	r31, r1
     c70:	20 83       	st	Z, r18
		iterator_of_BitArr++;
     c72:	55 e0       	ldi	r21, 0x05	; 5
     c74:	59 0f       	add	r21, r25
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_2);
     c76:	28 2f       	mov	r18, r24
     c78:	24 70       	andi	r18, 0x04	; 4
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	35 95       	asr	r19
     c7e:	27 95       	ror	r18
     c80:	35 95       	asr	r19
     c82:	27 95       	ror	r18
     c84:	e1 e0       	ldi	r30, 0x01	; 1
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	ec 0f       	add	r30, r28
     c8a:	fd 1f       	adc	r31, r29
     c8c:	e5 0f       	add	r30, r21
     c8e:	f1 1d       	adc	r31, r1
     c90:	20 83       	st	Z, r18
		iterator_of_BitArr++;
     c92:	56 e0       	ldi	r21, 0x06	; 6
     c94:	59 0f       	add	r21, r25
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_1);
     c96:	28 2f       	mov	r18, r24
     c98:	22 70       	andi	r18, 0x02	; 2
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	35 95       	asr	r19
     c9e:	27 95       	ror	r18
     ca0:	e1 e0       	ldi	r30, 0x01	; 1
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	ec 0f       	add	r30, r28
     ca6:	fd 1f       	adc	r31, r29
     ca8:	e5 0f       	add	r30, r21
     caa:	f1 1d       	adc	r31, r1
     cac:	20 83       	st	Z, r18
		iterator_of_BitArr++;
     cae:	27 e0       	ldi	r18, 0x07	; 7
     cb0:	29 0f       	add	r18, r25
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_0);
     cb2:	e1 e0       	ldi	r30, 0x01	; 1
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	ec 0f       	add	r30, r28
     cb8:	fd 1f       	adc	r31, r29
     cba:	e2 0f       	add	r30, r18
     cbc:	f1 1d       	adc	r31, r1
     cbe:	81 70       	andi	r24, 0x01	; 1
     cc0:	80 83       	st	Z, r24
		iterator_of_BitArr++;
     cc2:	98 5f       	subi	r25, 0xF8	; 248
	uint8_t iterator_of_BitArr = 0;
	/*initializing the iterator for the array of the inserted Characters in the string*/
	uint8_t iterator_of_characters = 0;
	/*assigning the bits of the character in the passed string to the array of bits*/
	/*bits are arranged in the array the form of an extra long number"Index 0:MSB,..,..,..,. . .,Index N:LSB"*/
	for(iterator_of_characters = 0; iterator_of_characters < StrLength; iterator_of_characters++)
     cc4:	4f 5f       	subi	r20, 0xFF	; 255
     cc6:	24 2f       	mov	r18, r20
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	cc 5f       	subi	r28, 0xFC	; 252
     ccc:	de 4f       	sbci	r29, 0xFE	; 254
     cce:	68 81       	ld	r22, Y
     cd0:	79 81       	ldd	r23, Y+1	; 0x01
     cd2:	c4 50       	subi	r28, 0x04	; 4
     cd4:	d1 40       	sbci	r29, 0x01	; 1
     cd6:	26 17       	cp	r18, r22
     cd8:	37 07       	cpc	r19, r23
     cda:	08 f4       	brcc	.+2      	; 0xcde <CRC_16_Chk+0x186>
     cdc:	6b cf       	rjmp	.-298    	; 0xbb4 <CRC_16_Chk+0x5c>
		iterator_of_BitArr++;
		BitArr[iterator_of_BitArr] = READ_BIT(STRING[iterator_of_characters],BIT_0);
		iterator_of_BitArr++;
	}
	/*calculating the size of the array of bits taking into consideration the size of the 16 bits of CRC_16*/
	BitArr_Size = iterator_of_BitArr + 15;
     cde:	91 5f       	subi	r25, 0xF1	; 241
	/*reset the iterator of the Bits Array to zero to iterate through the array*/
	iterator_of_BitArr = 0;
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
	/*Moving to the first occurance of high bit to start our CRC calculation*/
	while(BitArr[iterator_of_BitArr]!=1)
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <CRC_16_Chk+0x18e>
	{
		/*increment the iterator to the first occurance of High bit*/
		iterator_of_BitArr++;
     ce4:	af 5f       	subi	r26, 0xFF	; 255
	/*calculating the size of the array of bits taking into consideration the size of the 16 bits of CRC_16*/
	BitArr_Size = iterator_of_BitArr + 15;
	/*reset the iterator of the Bits Array to zero to iterate through the array*/
	iterator_of_BitArr = 0;
	/*Moving to the first occurance of high bit to start our CRC calculation*/
	while(BitArr[iterator_of_BitArr]!=1)
     ce6:	2a 2f       	mov	r18, r26
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	e1 e0       	ldi	r30, 0x01	; 1
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	ec 0f       	add	r30, r28
     cf0:	fd 1f       	adc	r31, r29
     cf2:	e2 0f       	add	r30, r18
     cf4:	f3 1f       	adc	r31, r19
     cf6:	80 81       	ld	r24, Z
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	a1 f7       	brne	.-24     	; 0xce4 <CRC_16_Chk+0x18c>
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	2f c0       	rjmp	.+94     	; 0xd5e <CRC_16_Chk+0x206>
		/*increment the iterator to the first occurance of High bit*/
		iterator_of_BitArr++;
	}
	for (uint8_t i = 0; i<=16; i++)
	{
		Window_16_Element |= ((uint32_t)BitArr[iterator_of_BitArr+i]<<(16-i));
     d00:	e8 2e       	mov	r14, r24
     d02:	f1 2c       	mov	r15, r1
     d04:	f9 01       	movw	r30, r18
     d06:	ee 0d       	add	r30, r14
     d08:	ff 1d       	adc	r31, r15
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	4c 0f       	add	r20, r28
     d10:	5d 1f       	adc	r21, r29
     d12:	e4 0f       	add	r30, r20
     d14:	f5 1f       	adc	r31, r21
     d16:	40 81       	ld	r20, Z
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	e0 e1       	ldi	r30, 0x10	; 16
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	ee 19       	sub	r30, r14
     d24:	ff 09       	sbc	r31, r15
     d26:	04 c0       	rjmp	.+8      	; 0xd30 <CRC_16_Chk+0x1d8>
     d28:	44 0f       	add	r20, r20
     d2a:	55 1f       	adc	r21, r21
     d2c:	66 1f       	adc	r22, r22
     d2e:	77 1f       	adc	r23, r23
     d30:	ea 95       	dec	r30
     d32:	d2 f7       	brpl	.-12     	; 0xd28 <CRC_16_Chk+0x1d0>
     d34:	c0 50       	subi	r28, 0x00	; 0
     d36:	df 4f       	sbci	r29, 0xFF	; 255
     d38:	c8 80       	ld	r12, Y
     d3a:	d9 80       	ldd	r13, Y+1	; 0x01
     d3c:	ea 80       	ldd	r14, Y+2	; 0x02
     d3e:	fb 80       	ldd	r15, Y+3	; 0x03
     d40:	c0 50       	subi	r28, 0x00	; 0
     d42:	d1 40       	sbci	r29, 0x01	; 1
     d44:	4c 29       	or	r20, r12
     d46:	5d 29       	or	r21, r13
     d48:	6e 29       	or	r22, r14
     d4a:	7f 29       	or	r23, r15
     d4c:	c0 50       	subi	r28, 0x00	; 0
     d4e:	df 4f       	sbci	r29, 0xFF	; 255
     d50:	48 83       	st	Y, r20
     d52:	59 83       	std	Y+1, r21	; 0x01
     d54:	6a 83       	std	Y+2, r22	; 0x02
     d56:	7b 83       	std	Y+3, r23	; 0x03
     d58:	c0 50       	subi	r28, 0x00	; 0
     d5a:	d1 40       	sbci	r29, 0x01	; 1
	while(BitArr[iterator_of_BitArr]!=1)
	{
		/*increment the iterator to the first occurance of High bit*/
		iterator_of_BitArr++;
	}
	for (uint8_t i = 0; i<=16; i++)
     d5c:	8f 5f       	subi	r24, 0xFF	; 255
     d5e:	81 31       	cpi	r24, 0x11	; 17
     d60:	78 f2       	brcs	.-98     	; 0xd00 <CRC_16_Chk+0x1a8>
     d62:	5f c0       	rjmp	.+190    	; 0xe22 <CRC_16_Chk+0x2ca>
	}
	/*Start the modulo Operation continues until the polynomial doesn't fit into the reminder*/
	while(iterator_of_BitArr < BitArr_Size-16)
	{
		/*Xoring operation between the Window and the polynomial*/
		Window_16_Element ^= polynomial;
     d64:	c0 50       	subi	r28, 0x00	; 0
     d66:	df 4f       	sbci	r29, 0xFF	; 255
     d68:	48 81       	ld	r20, Y
     d6a:	59 81       	ldd	r21, Y+1	; 0x01
     d6c:	6a 81       	ldd	r22, Y+2	; 0x02
     d6e:	7b 81       	ldd	r23, Y+3	; 0x03
     d70:	c0 50       	subi	r28, 0x00	; 0
     d72:	d1 40       	sbci	r29, 0x01	; 1
     d74:	85 e0       	ldi	r24, 0x05	; 5
     d76:	48 27       	eor	r20, r24
     d78:	50 58       	subi	r21, 0x80	; 128
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	68 27       	eor	r22, r24
     d7e:	c0 50       	subi	r28, 0x00	; 0
     d80:	df 4f       	sbci	r29, 0xFF	; 255
     d82:	48 83       	st	Y, r20
     d84:	59 83       	std	Y+1, r21	; 0x01
     d86:	6a 83       	std	Y+2, r22	; 0x02
     d88:	7b 83       	std	Y+3, r23	; 0x03
     d8a:	c0 50       	subi	r28, 0x00	; 0
     d8c:	d1 40       	sbci	r29, 0x01	; 1
		if(!Window_16_Element)
     d8e:	c0 50       	subi	r28, 0x00	; 0
     d90:	df 4f       	sbci	r29, 0xFF	; 255
     d92:	48 81       	ld	r20, Y
     d94:	59 81       	ldd	r21, Y+1	; 0x01
     d96:	6a 81       	ldd	r22, Y+2	; 0x02
     d98:	7b 81       	ldd	r23, Y+3	; 0x03
     d9a:	c0 50       	subi	r28, 0x00	; 0
     d9c:	d1 40       	sbci	r29, 0x01	; 1
     d9e:	45 2b       	or	r20, r21
     da0:	46 2b       	or	r20, r22
     da2:	47 2b       	or	r20, r23
     da4:	09 f4       	brne	.+2      	; 0xda8 <CRC_16_Chk+0x250>
     da6:	47 c0       	rjmp	.+142    	; 0xe36 <CRC_16_Chk+0x2de>
			break;
		if((iterator_of_BitArr < BitArr_Size-16))
     da8:	e2 17       	cp	r30, r18
     daa:	f3 07       	cpc	r31, r19
     dac:	d4 f5       	brge	.+116    	; 0xe22 <CRC_16_Chk+0x2ca>
		{
			do
			{
				Window_16_Element <<= 1;
     dae:	c0 50       	subi	r28, 0x00	; 0
     db0:	df 4f       	sbci	r29, 0xFF	; 255
     db2:	48 81       	ld	r20, Y
     db4:	59 81       	ldd	r21, Y+1	; 0x01
     db6:	6a 81       	ldd	r22, Y+2	; 0x02
     db8:	7b 81       	ldd	r23, Y+3	; 0x03
     dba:	c0 50       	subi	r28, 0x00	; 0
     dbc:	d1 40       	sbci	r29, 0x01	; 1
     dbe:	44 0f       	add	r20, r20
     dc0:	55 1f       	adc	r21, r21
     dc2:	66 1f       	adc	r22, r22
     dc4:	77 1f       	adc	r23, r23
     dc6:	c0 50       	subi	r28, 0x00	; 0
     dc8:	df 4f       	sbci	r29, 0xFF	; 255
     dca:	48 83       	st	Y, r20
     dcc:	59 83       	std	Y+1, r21	; 0x01
     dce:	6a 83       	std	Y+2, r22	; 0x02
     dd0:	7b 83       	std	Y+3, r23	; 0x03
     dd2:	c0 50       	subi	r28, 0x00	; 0
     dd4:	d1 40       	sbci	r29, 0x01	; 1
				iterator_of_BitArr++;
     dd6:	af 5f       	subi	r26, 0xFF	; 255
				/*Adding new element from the array of bits to the window*/
				Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
     dd8:	ea 2f       	mov	r30, r26
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	70 96       	adiw	r30, 0x10	; 16
     dde:	21 e0       	ldi	r18, 0x01	; 1
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	2c 0f       	add	r18, r28
     de4:	3d 1f       	adc	r19, r29
     de6:	e2 0f       	add	r30, r18
     de8:	f3 1f       	adc	r31, r19
     dea:	80 81       	ld	r24, Z
     dec:	c0 50       	subi	r28, 0x00	; 0
     dee:	df 4f       	sbci	r29, 0xFF	; 255
     df0:	48 81       	ld	r20, Y
     df2:	59 81       	ldd	r21, Y+1	; 0x01
     df4:	6a 81       	ldd	r22, Y+2	; 0x02
     df6:	7b 81       	ldd	r23, Y+3	; 0x03
     df8:	c0 50       	subi	r28, 0x00	; 0
     dfa:	d1 40       	sbci	r29, 0x01	; 1
     dfc:	48 2b       	or	r20, r24
     dfe:	c0 50       	subi	r28, 0x00	; 0
     e00:	df 4f       	sbci	r29, 0xFF	; 255
     e02:	48 83       	st	Y, r20
     e04:	59 83       	std	Y+1, r21	; 0x01
     e06:	6a 83       	std	Y+2, r22	; 0x02
     e08:	7b 83       	std	Y+3, r23	; 0x03
     e0a:	c0 50       	subi	r28, 0x00	; 0
     e0c:	d1 40       	sbci	r29, 0x01	; 1
			} while ((Get_Bit(Window_16_Element,16) == 0));
     e0e:	c0 50       	subi	r28, 0x00	; 0
     e10:	df 4f       	sbci	r29, 0xFF	; 255
     e12:	48 81       	ld	r20, Y
     e14:	59 81       	ldd	r21, Y+1	; 0x01
     e16:	6a 81       	ldd	r22, Y+2	; 0x02
     e18:	7b 81       	ldd	r23, Y+3	; 0x03
     e1a:	c0 50       	subi	r28, 0x00	; 0
     e1c:	d1 40       	sbci	r29, 0x01	; 1
     e1e:	60 ff       	sbrs	r22, 0
     e20:	c6 cf       	rjmp	.-116    	; 0xdae <CRC_16_Chk+0x256>
	for (uint8_t i = 0; i<=16; i++)
	{
		Window_16_Element |= ((uint32_t)BitArr[iterator_of_BitArr+i]<<(16-i));
	}
	/*Start the modulo Operation continues until the polynomial doesn't fit into the reminder*/
	while(iterator_of_BitArr < BitArr_Size-16)
     e22:	ea 2f       	mov	r30, r26
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	29 2f       	mov	r18, r25
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	20 51       	subi	r18, 0x10	; 16
     e2c:	31 09       	sbc	r19, r1
     e2e:	e2 17       	cp	r30, r18
     e30:	f3 07       	cpc	r31, r19
     e32:	0c f4       	brge	.+2      	; 0xe36 <CRC_16_Chk+0x2de>
     e34:	97 cf       	rjmp	.-210    	; 0xd64 <CRC_16_Chk+0x20c>
				/*Adding new element from the array of bits to the window*/
				Window_16_Element |= (uint16_t)BitArr[iterator_of_BitArr+16];
			} while ((Get_Bit(Window_16_Element,16) == 0));
		}
	}
	if((uint16_t)Window_16_Element != 0)
     e36:	c0 50       	subi	r28, 0x00	; 0
     e38:	df 4f       	sbci	r29, 0xFF	; 255
     e3a:	88 81       	ld	r24, Y
     e3c:	99 81       	ldd	r25, Y+1	; 0x01
     e3e:	aa 81       	ldd	r26, Y+2	; 0x02
     e40:	bb 81       	ldd	r27, Y+3	; 0x03
     e42:	c0 50       	subi	r28, 0x00	; 0
     e44:	d1 40       	sbci	r29, 0x01	; 1
     e46:	89 2b       	or	r24, r25
     e48:	11 f0       	breq	.+4      	; 0xe4e <CRC_16_Chk+0x2f6>
		ErrRetVal = ERROR_NOK;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	01 c0       	rjmp	.+2      	; 0xe50 <CRC_16_Chk+0x2f8>
	else
		ErrRetVal = ERROR_OK;
     e4e:	80 e0       	ldi	r24, 0x00	; 0
	return ErrRetVal;
}
     e50:	cb 5f       	subi	r28, 0xFB	; 251
     e52:	de 4f       	sbci	r29, 0xFE	; 254
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	df 90       	pop	r13
     e68:	cf 90       	pop	r12
     e6a:	08 95       	ret

00000e6c <DIO_SetPinDirection>:
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
     e6c:	42 30       	cpi	r20, 0x02	; 2
     e6e:	08 f0       	brcs	.+2      	; 0xe72 <DIO_SetPinDirection+0x6>
     e70:	60 c0       	rjmp	.+192    	; 0xf32 <DIO_SetPinDirection+0xc6>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
     e72:	68 30       	cpi	r22, 0x08	; 8
     e74:	08 f0       	brcs	.+2      	; 0xe78 <DIO_SetPinDirection+0xc>
     e76:	5f c0       	rjmp	.+190    	; 0xf36 <DIO_SetPinDirection+0xca>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	e1 f0       	breq	.+56     	; 0xeb4 <DIO_SetPinDirection+0x48>
     e7c:	30 f0       	brcs	.+12     	; 0xe8a <DIO_SetPinDirection+0x1e>
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	71 f1       	breq	.+92     	; 0xede <DIO_SetPinDirection+0x72>
     e82:	83 30       	cpi	r24, 0x03	; 3
     e84:	09 f4       	brne	.+2      	; 0xe88 <DIO_SetPinDirection+0x1c>
     e86:	40 c0       	rjmp	.+128    	; 0xf08 <DIO_SetPinDirection+0x9c>
     e88:	58 c0       	rjmp	.+176    	; 0xf3a <DIO_SetPinDirection+0xce>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
     e8a:	2a b3       	in	r18, 0x1a	; 26
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	06 2e       	mov	r0, r22
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <DIO_SetPinDirection+0x2c>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <DIO_SetPinDirection+0x28>
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_SetPinDirection+0x38>
     ea0:	44 0f       	add	r20, r20
     ea2:	55 1f       	adc	r21, r21
     ea4:	6a 95       	dec	r22
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_SetPinDirection+0x34>
     ea8:	80 95       	com	r24
     eaa:	82 23       	and	r24, r18
     eac:	48 2b       	or	r20, r24
     eae:	4a bb       	out	0x1a, r20	; 26
				u8_ErrorState=ERROR_OK;
     eb0:	80 e0       	ldi	r24, 0x00	; 0
				break;
     eb2:	08 95       	ret
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
     eb4:	27 b3       	in	r18, 0x17	; 23
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	06 2e       	mov	r0, r22
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <DIO_SetPinDirection+0x56>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <DIO_SetPinDirection+0x52>
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_SetPinDirection+0x62>
     eca:	44 0f       	add	r20, r20
     ecc:	55 1f       	adc	r21, r21
     ece:	6a 95       	dec	r22
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_SetPinDirection+0x5e>
     ed2:	80 95       	com	r24
     ed4:	82 23       	and	r24, r18
     ed6:	48 2b       	or	r20, r24
     ed8:	47 bb       	out	0x17, r20	; 23
				u8_ErrorState=ERROR_OK;
     eda:	80 e0       	ldi	r24, 0x00	; 0
				break;
     edc:	08 95       	ret
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
     ede:	24 b3       	in	r18, 0x14	; 20
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	06 2e       	mov	r0, r22
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <DIO_SetPinDirection+0x80>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <DIO_SetPinDirection+0x7c>
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_SetPinDirection+0x8c>
     ef4:	44 0f       	add	r20, r20
     ef6:	55 1f       	adc	r21, r21
     ef8:	6a 95       	dec	r22
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_SetPinDirection+0x88>
     efc:	80 95       	com	r24
     efe:	82 23       	and	r24, r18
     f00:	48 2b       	or	r20, r24
     f02:	44 bb       	out	0x14, r20	; 20
				u8_ErrorState=ERROR_OK;
     f04:	80 e0       	ldi	r24, 0x00	; 0
				break;
     f06:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
     f08:	21 b3       	in	r18, 0x11	; 17
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	06 2e       	mov	r0, r22
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <DIO_SetPinDirection+0xaa>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <DIO_SetPinDirection+0xa6>
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_SetPinDirection+0xb6>
     f1e:	44 0f       	add	r20, r20
     f20:	55 1f       	adc	r21, r21
     f22:	6a 95       	dec	r22
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_SetPinDirection+0xb2>
     f26:	80 95       	com	r24
     f28:	82 23       	and	r24, r18
     f2a:	48 2b       	or	r20, r24
     f2c:	41 bb       	out	0x11, r20	; 17
				u8_ErrorState=ERROR_OK;
     f2e:	80 e0       	ldi	r24, 0x00	; 0
				break;
     f30:	08 95       	ret
ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
	{
		u8_ErrorState=ERROR_NOK;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}		
	}
	return u8_ErrorState;
}
     f3c:	08 95       	ret

00000f3e <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
     f3e:	42 30       	cpi	r20, 0x02	; 2
     f40:	08 f0       	brcs	.+2      	; 0xf44 <DIO_WritePin+0x6>
     f42:	60 c0       	rjmp	.+192    	; 0x1004 <DIO_WritePin+0xc6>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
     f44:	68 30       	cpi	r22, 0x08	; 8
     f46:	08 f0       	brcs	.+2      	; 0xf4a <DIO_WritePin+0xc>
     f48:	5f c0       	rjmp	.+190    	; 0x1008 <DIO_WritePin+0xca>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	e1 f0       	breq	.+56     	; 0xf86 <DIO_WritePin+0x48>
     f4e:	30 f0       	brcs	.+12     	; 0xf5c <DIO_WritePin+0x1e>
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	71 f1       	breq	.+92     	; 0xfb0 <DIO_WritePin+0x72>
     f54:	83 30       	cpi	r24, 0x03	; 3
     f56:	09 f4       	brne	.+2      	; 0xf5a <DIO_WritePin+0x1c>
     f58:	40 c0       	rjmp	.+128    	; 0xfda <DIO_WritePin+0x9c>
     f5a:	58 c0       	rjmp	.+176    	; 0x100c <DIO_WritePin+0xce>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
     f5c:	2b b3       	in	r18, 0x1b	; 27
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	06 2e       	mov	r0, r22
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <DIO_WritePin+0x2c>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <DIO_WritePin+0x28>
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <DIO_WritePin+0x38>
     f72:	44 0f       	add	r20, r20
     f74:	55 1f       	adc	r21, r21
     f76:	6a 95       	dec	r22
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <DIO_WritePin+0x34>
     f7a:	80 95       	com	r24
     f7c:	82 23       	and	r24, r18
     f7e:	48 2b       	or	r20, r24
     f80:	4b bb       	out	0x1b, r20	; 27
				u8_ErrorState=ERROR_OK;
     f82:	80 e0       	ldi	r24, 0x00	; 0
				break;
     f84:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
     f86:	28 b3       	in	r18, 0x18	; 24
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	06 2e       	mov	r0, r22
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_WritePin+0x56>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_WritePin+0x52>
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_WritePin+0x62>
     f9c:	44 0f       	add	r20, r20
     f9e:	55 1f       	adc	r21, r21
     fa0:	6a 95       	dec	r22
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_WritePin+0x5e>
     fa4:	80 95       	com	r24
     fa6:	82 23       	and	r24, r18
     fa8:	48 2b       	or	r20, r24
     faa:	48 bb       	out	0x18, r20	; 24
				u8_ErrorState=ERROR_OK;
     fac:	80 e0       	ldi	r24, 0x00	; 0
				break;
     fae:	08 95       	ret
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
     fb0:	25 b3       	in	r18, 0x15	; 21
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	06 2e       	mov	r0, r22
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_WritePin+0x80>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_WritePin+0x7c>
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_WritePin+0x8c>
     fc6:	44 0f       	add	r20, r20
     fc8:	55 1f       	adc	r21, r21
     fca:	6a 95       	dec	r22
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_WritePin+0x88>
     fce:	80 95       	com	r24
     fd0:	82 23       	and	r24, r18
     fd2:	48 2b       	or	r20, r24
     fd4:	45 bb       	out	0x15, r20	; 21
				u8_ErrorState=ERROR_OK;
     fd6:	80 e0       	ldi	r24, 0x00	; 0
				break;
     fd8:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
     fda:	22 b3       	in	r18, 0x12	; 18
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	06 2e       	mov	r0, r22
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_WritePin+0xaa>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_WritePin+0xa6>
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_WritePin+0xb6>
     ff0:	44 0f       	add	r20, r20
     ff2:	55 1f       	adc	r21, r21
     ff4:	6a 95       	dec	r22
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_WritePin+0xb2>
     ff8:	80 95       	com	r24
     ffa:	82 23       	and	r24, r18
     ffc:	48 2b       	or	r20, r24
     ffe:	42 bb       	out	0x12, r20	; 18
				u8_ErrorState=ERROR_OK;
    1000:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1002:	08 95       	ret
ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
	{
		u8_ErrorState=ERROR_NOK;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    100c:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
    100e:	08 95       	ret

00001010 <GetFreqPrescaleRatio>:
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
    1010:	82 30       	cpi	r24, 0x02	; 2
    1012:	08 f0       	brcs	.+2      	; 0x1016 <GetFreqPrescaleRatio+0x6>
    1014:	4e c0       	rjmp	.+156    	; 0x10b2 <GetFreqPrescaleRatio+0xa2>
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	fc 01       	movw	r30, r24
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	8e 0f       	add	r24, r30
    1020:	9f 1f       	adc	r25, r31
    1022:	fc 01       	movw	r30, r24
    1024:	e4 58       	subi	r30, 0x84	; 132
    1026:	fe 4f       	sbci	r31, 0xFE	; 254
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	09 f1       	breq	.+66     	; 0x1070 <GetFreqPrescaleRatio+0x60>
    102e:	28 f4       	brcc	.+10     	; 0x103a <GetFreqPrescaleRatio+0x2a>
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	41 f0       	breq	.+16     	; 0x1044 <GetFreqPrescaleRatio+0x34>
    1034:	82 30       	cpi	r24, 0x02	; 2
    1036:	89 f0       	breq	.+34     	; 0x105a <GetFreqPrescaleRatio+0x4a>
    1038:	a2 c0       	rjmp	.+324    	; 0x117e <GetFreqPrescaleRatio+0x16e>
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	21 f1       	breq	.+72     	; 0x1086 <GetFreqPrescaleRatio+0x76>
    103e:	85 30       	cpi	r24, 0x05	; 5
    1040:	69 f1       	breq	.+90     	; 0x109c <GetFreqPrescaleRatio+0x8c>
    1042:	9d c0       	rjmp	.+314    	; 0x117e <GetFreqPrescaleRatio+0x16e>
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	a0 e8       	ldi	r26, 0x80	; 128
    104a:	bd e3       	ldi	r27, 0x3D	; 61
    104c:	fb 01       	movw	r30, r22
    104e:	80 83       	st	Z, r24
    1050:	91 83       	std	Z+1, r25	; 0x01
    1052:	a2 83       	std	Z+2, r26	; 0x02
    1054:	b3 83       	std	Z+3, r27	; 0x03
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	08 95       	ret
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	a0 e0       	ldi	r26, 0x00	; 0
    1060:	bf e3       	ldi	r27, 0x3F	; 63
    1062:	fb 01       	movw	r30, r22
    1064:	80 83       	st	Z, r24
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	a2 83       	std	Z+2, r26	; 0x02
    106a:	b3 83       	std	Z+3, r27	; 0x03
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	08 95       	ret
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	a0 e8       	ldi	r26, 0x80	; 128
    1076:	b0 e4       	ldi	r27, 0x40	; 64
    1078:	fb 01       	movw	r30, r22
    107a:	80 83       	st	Z, r24
    107c:	91 83       	std	Z+1, r25	; 0x01
    107e:	a2 83       	std	Z+2, r26	; 0x02
    1080:	b3 83       	std	Z+3, r27	; 0x03
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	08 95       	ret
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a0 e8       	ldi	r26, 0x80	; 128
    108c:	b1 e4       	ldi	r27, 0x41	; 65
    108e:	fb 01       	movw	r30, r22
    1090:	80 83       	st	Z, r24
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	a2 83       	std	Z+2, r26	; 0x02
    1096:	b3 83       	std	Z+3, r27	; 0x03
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	08 95       	ret
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	a0 e8       	ldi	r26, 0x80	; 128
    10a2:	b2 e4       	ldi	r27, 0x42	; 66
    10a4:	fb 01       	movw	r30, r22
    10a6:	80 83       	st	Z, r24
    10a8:	91 83       	std	Z+1, r25	; 0x01
    10aa:	a2 83       	std	Z+2, r26	; 0x02
    10ac:	b3 83       	std	Z+3, r27	; 0x03
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	08 95       	ret
    10b2:	82 30       	cpi	r24, 0x02	; 2
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <GetFreqPrescaleRatio+0xa8>
    10b6:	65 c0       	rjmp	.+202    	; 0x1182 <GetFreqPrescaleRatio+0x172>
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	fc 01       	movw	r30, r24
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	8e 0f       	add	r24, r30
    10c2:	9f 1f       	adc	r25, r31
    10c4:	fc 01       	movw	r30, r24
    10c6:	e4 58       	subi	r30, 0x84	; 132
    10c8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ca:	e2 81       	ldd	r30, Z+2	; 0x02
    10cc:	8e 2f       	mov	r24, r30
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	fc 01       	movw	r30, r24
    10d2:	31 97       	sbiw	r30, 0x01	; 1
    10d4:	e7 30       	cpi	r30, 0x07	; 7
    10d6:	f1 05       	cpc	r31, r1
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <GetFreqPrescaleRatio+0xcc>
    10da:	55 c0       	rjmp	.+170    	; 0x1186 <GetFreqPrescaleRatio+0x176>
    10dc:	e6 5d       	subi	r30, 0xD6	; 214
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__tablejump2__>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a0 e8       	ldi	r26, 0x80	; 128
    10ea:	bd e3       	ldi	r27, 0x3D	; 61
    10ec:	fb 01       	movw	r30, r22
    10ee:	80 83       	st	Z, r24
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	a2 83       	std	Z+2, r26	; 0x02
    10f4:	b3 83       	std	Z+3, r27	; 0x03
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	08 95       	ret
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a0 e0       	ldi	r26, 0x00	; 0
    1100:	bf e3       	ldi	r27, 0x3F	; 63
    1102:	fb 01       	movw	r30, r22
    1104:	80 83       	st	Z, r24
    1106:	91 83       	std	Z+1, r25	; 0x01
    1108:	a2 83       	std	Z+2, r26	; 0x02
    110a:	b3 83       	std	Z+3, r27	; 0x03
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	08 95       	ret
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a0 e0       	ldi	r26, 0x00	; 0
    1116:	b0 e4       	ldi	r27, 0x40	; 64
    1118:	fb 01       	movw	r30, r22
    111a:	80 83       	st	Z, r24
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	a2 83       	std	Z+2, r26	; 0x02
    1120:	b3 83       	std	Z+3, r27	; 0x03
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	08 95       	ret
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a0 e8       	ldi	r26, 0x80	; 128
    112c:	b0 e4       	ldi	r27, 0x40	; 64
    112e:	fb 01       	movw	r30, r22
    1130:	80 83       	st	Z, r24
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	a2 83       	std	Z+2, r26	; 0x02
    1136:	b3 83       	std	Z+3, r27	; 0x03
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	08 95       	ret
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a0 e0       	ldi	r26, 0x00	; 0
    1142:	b1 e4       	ldi	r27, 0x41	; 65
    1144:	fb 01       	movw	r30, r22
    1146:	80 83       	st	Z, r24
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	a2 83       	std	Z+2, r26	; 0x02
    114c:	b3 83       	std	Z+3, r27	; 0x03
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	08 95       	ret
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 e8       	ldi	r26, 0x80	; 128
    1158:	b1 e4       	ldi	r27, 0x41	; 65
    115a:	fb 01       	movw	r30, r22
    115c:	80 83       	st	Z, r24
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	a2 83       	std	Z+2, r26	; 0x02
    1162:	b3 83       	std	Z+3, r27	; 0x03
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	08 95       	ret
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	a0 e8       	ldi	r26, 0x80	; 128
    116e:	b2 e4       	ldi	r27, 0x42	; 66
    1170:	fb 01       	movw	r30, r22
    1172:	80 83       	st	Z, r24
    1174:	91 83       	std	Z+1, r25	; 0x01
    1176:	a2 83       	std	Z+2, r26	; 0x02
    1178:	b3 83       	std	Z+3, r27	; 0x03
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	08 95       	ret
    117e:	8c ef       	ldi	r24, 0xFC	; 252
    1180:	08 95       	ret
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	08 95       	ret
    1186:	8c ef       	ldi	r24, 0xFC	; 252
    1188:	08 95       	ret

0000118a <TIM_Init>:
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	b1 f0       	breq	.+44     	; 0x11ba <TIM_Init+0x30>
    118e:	18 f0       	brcs	.+6      	; 0x1196 <TIM_Init+0xc>
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	71 f1       	breq	.+92     	; 0x11f0 <TIM_Init+0x66>
    1194:	44 c0       	rjmp	.+136    	; 0x121e <TIM_Init+0x94>
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	fc 01       	movw	r30, r24
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	8e 0f       	add	r24, r30
    11a0:	9f 1f       	adc	r25, r31
    11a2:	fc 01       	movw	r30, r24
    11a4:	e4 58       	subi	r30, 0x84	; 132
    11a6:	fe 4f       	sbci	r31, 0xFE	; 254
    11a8:	80 81       	ld	r24, Z
    11aa:	83 bf       	out	0x33, r24	; 51
    11ac:	89 b7       	in	r24, 0x39	; 57
    11ae:	8c 7f       	andi	r24, 0xFC	; 252
    11b0:	91 81       	ldd	r25, Z+1	; 0x01
    11b2:	89 2b       	or	r24, r25
    11b4:	89 bf       	out	0x39, r24	; 57
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	08 95       	ret
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	fc 01       	movw	r30, r24
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	8e 0f       	add	r24, r30
    11c4:	9f 1f       	adc	r25, r31
    11c6:	fc 01       	movw	r30, r24
    11c8:	e4 58       	subi	r30, 0x84	; 132
    11ca:	fe 4f       	sbci	r31, 0xFE	; 254
    11cc:	80 81       	ld	r24, Z
    11ce:	8e bd       	out	0x2e, r24	; 46
    11d0:	89 b7       	in	r24, 0x39	; 57
    11d2:	28 2f       	mov	r18, r24
    11d4:	27 7e       	andi	r18, 0xE7	; 231
    11d6:	91 81       	ldd	r25, Z+1	; 0x01
    11d8:	89 2f       	mov	r24, r25
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	82 2b       	or	r24, r18
    11ea:	89 bf       	out	0x39, r24	; 57
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	08 95       	ret
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	fc 01       	movw	r30, r24
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	8e 0f       	add	r24, r30
    11fa:	9f 1f       	adc	r25, r31
    11fc:	fc 01       	movw	r30, r24
    11fe:	e4 58       	subi	r30, 0x84	; 132
    1200:	fe 4f       	sbci	r31, 0xFE	; 254
    1202:	80 81       	ld	r24, Z
    1204:	85 bd       	out	0x25, r24	; 37
    1206:	89 b7       	in	r24, 0x39	; 57
    1208:	28 2f       	mov	r18, r24
    120a:	2f 73       	andi	r18, 0x3F	; 63
    120c:	91 81       	ldd	r25, Z+1	; 0x01
    120e:	30 e4       	ldi	r19, 0x40	; 64
    1210:	93 9f       	mul	r25, r19
    1212:	c0 01       	movw	r24, r0
    1214:	11 24       	eor	r1, r1
    1216:	82 2b       	or	r24, r18
    1218:	89 bf       	out	0x39, r24	; 57
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	08 95       	ret
    121e:	8e ef       	ldi	r24, 0xFE	; 254
    1220:	08 95       	ret

00001222 <TIM_Start>:
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	71 f0       	breq	.+28     	; 0x1242 <TIM_Start+0x20>
    1226:	18 f0       	brcs	.+6      	; 0x122e <TIM_Start+0xc>
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	31 f0       	breq	.+12     	; 0x1238 <TIM_Start+0x16>
    122c:	1f c0       	rjmp	.+62     	; 0x126c <TIM_Start+0x4a>
    122e:	e2 e5       	ldi	r30, 0x52	; 82
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	a3 e5       	ldi	r26, 0x53	; 83
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	09 c0       	rjmp	.+18     	; 0x124a <TIM_Start+0x28>
    1238:	e4 e4       	ldi	r30, 0x44	; 68
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	a5 e4       	ldi	r26, 0x45	; 69
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	04 c0       	rjmp	.+8      	; 0x124a <TIM_Start+0x28>
    1242:	ec e4       	ldi	r30, 0x4C	; 76
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	ae e4       	ldi	r26, 0x4E	; 78
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	71 83       	std	Z+1, r23	; 0x01
    124c:	60 83       	st	Z, r22
    124e:	2c 91       	ld	r18, X
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	fc 01       	movw	r30, r24
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	8e 0f       	add	r24, r30
    125a:	9f 1f       	adc	r25, r31
    125c:	fc 01       	movw	r30, r24
    125e:	e4 58       	subi	r30, 0x84	; 132
    1260:	fe 4f       	sbci	r31, 0xFE	; 254
    1262:	82 81       	ldd	r24, Z+2	; 0x02
    1264:	82 2b       	or	r24, r18
    1266:	8c 93       	st	X, r24
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	08 95       	ret
    126c:	8e ef       	ldi	r24, 0xFE	; 254
    126e:	08 95       	ret

00001270 <TIM_GetStatus>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
    1270:	61 15       	cp	r22, r1
    1272:	71 05       	cpc	r23, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <TIM_GetStatus+0x8>
    1276:	7a c0       	rjmp	.+244    	; 0x136c <TIM_GetStatus+0xfc>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	41 f1       	breq	.+80     	; 0x12cc <TIM_GetStatus+0x5c>
    127c:	20 f0       	brcs	.+8      	; 0x1286 <TIM_GetStatus+0x16>
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	09 f4       	brne	.+2      	; 0x1284 <TIM_GetStatus+0x14>
    1282:	52 c0       	rjmp	.+164    	; 0x1328 <TIM_GetStatus+0xb8>
    1284:	75 c0       	rjmp	.+234    	; 0x1370 <TIM_GetStatus+0x100>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	fc 01       	movw	r30, r24
    128a:	ee 0f       	add	r30, r30
    128c:	ff 1f       	adc	r31, r31
    128e:	8e 0f       	add	r24, r30
    1290:	9f 1f       	adc	r25, r31
    1292:	fc 01       	movw	r30, r24
    1294:	e4 58       	subi	r30, 0x84	; 132
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	80 81       	ld	r24, Z
    129a:	81 11       	cpse	r24, r1
    129c:	09 c0       	rjmp	.+18     	; 0x12b0 <TIM_GetStatus+0x40>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
    129e:	08 b6       	in	r0, 0x38	; 56
    12a0:	00 fe       	sbrs	r0, 0
    12a2:	68 c0       	rjmp	.+208    	; 0x1374 <TIM_GetStatus+0x104>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    12a4:	fb 01       	movw	r30, r22
    12a6:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
    12a8:	98 b7       	in	r25, 0x38	; 56
    12aa:	91 60       	ori	r25, 0x01	; 1
    12ac:	98 bf       	out	0x38, r25	; 56
    12ae:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    12b0:	88 30       	cpi	r24, 0x08	; 8
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <TIM_GetStatus+0x46>
    12b4:	61 c0       	rjmp	.+194    	; 0x1378 <TIM_GetStatus+0x108>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
    12b6:	08 b6       	in	r0, 0x38	; 56
    12b8:	01 fe       	sbrs	r0, 1
    12ba:	60 c0       	rjmp	.+192    	; 0x137c <TIM_GetStatus+0x10c>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	fb 01       	movw	r30, r22
    12c0:	80 83       	st	Z, r24
               TIFR |= TIMER_0_COMPARE_FLAG;
    12c2:	88 b7       	in	r24, 0x38	; 56
    12c4:	82 60       	ori	r24, 0x02	; 2
    12c6:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	fc 01       	movw	r30, r24
    12d0:	ee 0f       	add	r30, r30
    12d2:	ff 1f       	adc	r31, r31
    12d4:	8e 0f       	add	r24, r30
    12d6:	9f 1f       	adc	r25, r31
    12d8:	fc 01       	movw	r30, r24
    12da:	e4 58       	subi	r30, 0x84	; 132
    12dc:	fe 4f       	sbci	r31, 0xFE	; 254
    12de:	80 81       	ld	r24, Z
    12e0:	81 11       	cpse	r24, r1
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <TIM_GetStatus+0x86>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
    12e4:	08 b6       	in	r0, 0x38	; 56
    12e6:	02 fe       	sbrs	r0, 2
    12e8:	4b c0       	rjmp	.+150    	; 0x1380 <TIM_GetStatus+0x110>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    12ea:	fb 01       	movw	r30, r22
    12ec:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
    12ee:	98 b7       	in	r25, 0x38	; 56
    12f0:	94 60       	ori	r25, 0x04	; 4
    12f2:	98 bf       	out	0x38, r25	; 56
    12f4:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    12f6:	88 30       	cpi	r24, 0x08	; 8
    12f8:	09 f0       	breq	.+2      	; 0x12fc <TIM_GetStatus+0x8c>
    12fa:	44 c0       	rjmp	.+136    	; 0x1384 <TIM_GetStatus+0x114>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
    12fc:	98 b7       	in	r25, 0x38	; 56
    12fe:	89 2f       	mov	r24, r25
    1300:	80 71       	andi	r24, 0x10	; 16
    1302:	94 ff       	sbrs	r25, 4
    1304:	08 c0       	rjmp	.+16     	; 0x1316 <TIM_GetStatus+0xa6>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	fb 01       	movw	r30, r22
    130a:	80 83       	st	Z, r24
               TIFR |= TIMER_1A_COMPARE_FLAG;
    130c:	88 b7       	in	r24, 0x38	; 56
    130e:	80 61       	ori	r24, 0x10	; 16
    1310:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	08 95       	ret
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
    1316:	93 ff       	sbrs	r25, 3
    1318:	37 c0       	rjmp	.+110    	; 0x1388 <TIM_GetStatus+0x118>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	fb 01       	movw	r30, r22
    131e:	90 83       	st	Z, r25
               TIFR |= TIMER_1B_COMPARE_FLAG;
    1320:	98 b7       	in	r25, 0x38	; 56
    1322:	98 60       	ori	r25, 0x08	; 8
    1324:	98 bf       	out	0x38, r25	; 56
    1326:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	fc 01       	movw	r30, r24
    132c:	ee 0f       	add	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	8e 0f       	add	r24, r30
    1332:	9f 1f       	adc	r25, r31
    1334:	fc 01       	movw	r30, r24
    1336:	e4 58       	subi	r30, 0x84	; 132
    1338:	fe 4f       	sbci	r31, 0xFE	; 254
    133a:	80 81       	ld	r24, Z
    133c:	81 11       	cpse	r24, r1
    133e:	09 c0       	rjmp	.+18     	; 0x1352 <TIM_GetStatus+0xe2>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
    1340:	08 b6       	in	r0, 0x38	; 56
    1342:	06 fe       	sbrs	r0, 6
    1344:	23 c0       	rjmp	.+70     	; 0x138c <TIM_GetStatus+0x11c>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1346:	fb 01       	movw	r30, r22
    1348:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
    134a:	98 b7       	in	r25, 0x38	; 56
    134c:	90 64       	ori	r25, 0x40	; 64
    134e:	98 bf       	out	0x38, r25	; 56
    1350:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1352:	88 30       	cpi	r24, 0x08	; 8
    1354:	e9 f4       	brne	.+58     	; 0x1390 <TIM_GetStatus+0x120>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
    1356:	08 b6       	in	r0, 0x38	; 56
    1358:	07 fe       	sbrs	r0, 7
    135a:	1c c0       	rjmp	.+56     	; 0x1394 <TIM_GetStatus+0x124>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	fb 01       	movw	r30, r22
    1360:	80 83       	st	Z, r24
               TIFR |= TIMER_2_COMPARE_FLAG;
    1362:	88 b7       	in	r24, 0x38	; 56
    1364:	80 68       	ori	r24, 0x80	; 128
    1366:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	08 95       	ret
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
    136c:	8f ef       	ldi	r24, 0xFF	; 255
    136e:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    1370:	8e ef       	ldi	r24, 0xFE	; 254
    1372:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1374:	8d ef       	ldi	r24, 0xFD	; 253
    1376:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    137c:	8d ef       	ldi	r24, 0xFD	; 253
    137e:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1380:	8d ef       	ldi	r24, 0xFD	; 253
    1382:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1388:	8d ef       	ldi	r24, 0xFD	; 253
    138a:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    138c:	8d ef       	ldi	r24, 0xFD	; 253
    138e:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1394:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
}
    1396:	08 95       	ret

00001398 <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <TIM_DelayUs+0x18>
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <TIM_DelayUs+0x1a>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	18 2f       	mov	r17, r24
    13b8:	6a 01       	movw	r12, r20
    13ba:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    13bc:	83 30       	cpi	r24, 0x03	; 3
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <TIM_DelayUs+0x2a>
    13c0:	54 c0       	rjmp	.+168    	; 0x146a <TIM_DelayUs+0xd2>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    13c2:	21 15       	cp	r18, r1
    13c4:	31 05       	cpc	r19, r1
    13c6:	09 f4       	brne	.+2      	; 0x13ca <TIM_DelayUs+0x32>
    13c8:	52 c0       	rjmp	.+164    	; 0x146e <TIM_DelayUs+0xd6>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    13ca:	30 93 14 02 	sts	0x0214, r19	; 0x800214 <gptr_CallerFunc+0x1>
    13ce:	20 93 13 02 	sts	0x0213, r18	; 0x800213 <gptr_CallerFunc>
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    13d2:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <gEnu_State>
    13d6:	81 11       	cpse	r24, r1
    13d8:	4c c0       	rjmp	.+152    	; 0x1472 <TIM_DelayUs+0xda>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    13da:	be 01       	movw	r22, r28
    13dc:	6f 5f       	subi	r22, 0xFF	; 255
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	81 2f       	mov	r24, r17
    13e2:	0e 94 08 08 	call	0x1010	; 0x1010 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    13e6:	8c 3f       	cpi	r24, 0xFC	; 252
    13e8:	f1 f1       	breq	.+124    	; 0x1466 <TIM_DelayUs+0xce>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    13ea:	89 80       	ldd	r8, Y+1	; 0x01
    13ec:	9a 80       	ldd	r9, Y+2	; 0x02
    13ee:	ab 80       	ldd	r10, Y+3	; 0x03
    13f0:	bc 80       	ldd	r11, Y+4	; 0x04
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	a9 01       	movw	r20, r18
    13f8:	c5 01       	movw	r24, r10
    13fa:	b4 01       	movw	r22, r8
    13fc:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__cmpsf2>
    1400:	88 23       	and	r24, r24
    1402:	61 f0       	breq	.+24     	; 0x141c <TIM_DelayUs+0x84>
      {
         TIM_Delay /= f32_FreqRatio;
    1404:	c7 01       	movw	r24, r14
    1406:	b6 01       	movw	r22, r12
    1408:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <__floatunsisf>
    140c:	a5 01       	movw	r20, r10
    140e:	94 01       	movw	r18, r8
    1410:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__divsf3>
    1414:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__fixunssfsi>
    1418:	6b 01       	movw	r12, r22
    141a:	7c 01       	movw	r14, r24
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    141c:	bb 27       	eor	r27, r27
    141e:	af 2d       	mov	r26, r15
    1420:	9e 2d       	mov	r25, r14
    1422:	8d 2d       	mov	r24, r13
    1424:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <gu32_Overflows>
    1428:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <gu32_Overflows+0x1>
    142c:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <gu32_Overflows+0x2>
    1430:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    1434:	c0 92 16 02 	sts	0x0216, r12	; 0x800216 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    1438:	89 2b       	or	r24, r25
    143a:	8a 2b       	or	r24, r26
    143c:	8b 2b       	or	r24, r27
    143e:	49 f4       	brne	.+18     	; 0x1452 <TIM_DelayUs+0xba>
      {
         gu8_OverflowsComplete = HIGH;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    1446:	6c 2d       	mov	r22, r12
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	81 2f       	mov	r24, r17
    144c:	0e 94 11 09 	call	0x1222	; 0x1222 <TIM_Start>
    1450:	05 c0       	rjmp	.+10     	; 0x145c <TIM_DelayUs+0xc4>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1452:	6f ef       	ldi	r22, 0xFF	; 255
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	81 2f       	mov	r24, r17
    1458:	0e 94 11 09 	call	0x1222	; 0x1222 <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <gEnu_State>
      return TIMER_E_PENDING;
    1462:	8d ef       	ldi	r24, 0xFD	; 253
    1464:	07 c0       	rjmp	.+14     	; 0x1474 <TIM_DelayUs+0xdc>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1466:	8c ef       	ldi	r24, 0xFC	; 252
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <TIM_DelayUs+0xdc>
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    146a:	8e ef       	ldi	r24, 0xFE	; 254
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <TIM_DelayUs+0xdc>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <TIM_DelayUs+0xdc>
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
    1472:	81 e0       	ldi	r24, 0x01	; 1
}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	ff 90       	pop	r15
    1484:	ef 90       	pop	r14
    1486:	df 90       	pop	r13
    1488:	cf 90       	pop	r12
    148a:	bf 90       	pop	r11
    148c:	af 90       	pop	r10
    148e:	9f 90       	pop	r9
    1490:	8f 90       	pop	r8
    1492:	08 95       	ret

00001494 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1494:	8f 92       	push	r8
    1496:	9f 92       	push	r9
    1498:	af 92       	push	r10
    149a:	bf 92       	push	r11
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <TIM_DelayMs+0x18>
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <TIM_DelayMs+0x1a>
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	18 2f       	mov	r17, r24
    14b4:	04 2f       	mov	r16, r20
    14b6:	d5 2e       	mov	r13, r21
    14b8:	e6 2e       	mov	r14, r22
    14ba:	f7 2e       	mov	r15, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    14bc:	83 30       	cpi	r24, 0x03	; 3
    14be:	08 f0       	brcs	.+2      	; 0x14c2 <TIM_DelayMs+0x2e>
    14c0:	65 c0       	rjmp	.+202    	; 0x158c <TIM_DelayMs+0xf8>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    14c2:	21 15       	cp	r18, r1
    14c4:	31 05       	cpc	r19, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <TIM_DelayMs+0x36>
    14c8:	63 c0       	rjmp	.+198    	; 0x1590 <TIM_DelayMs+0xfc>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    14ca:	30 93 14 02 	sts	0x0214, r19	; 0x800214 <gptr_CallerFunc+0x1>
    14ce:	20 93 13 02 	sts	0x0213, r18	; 0x800213 <gptr_CallerFunc>
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    14d2:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <gEnu_State>
    14d6:	81 11       	cpse	r24, r1
    14d8:	5d c0       	rjmp	.+186    	; 0x1594 <TIM_DelayMs+0x100>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    14da:	be 01       	movw	r22, r28
    14dc:	6f 5f       	subi	r22, 0xFF	; 255
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	81 2f       	mov	r24, r17
    14e2:	0e 94 08 08 	call	0x1010	; 0x1010 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    14e6:	8c 3f       	cpi	r24, 0xFC	; 252
    14e8:	09 f4       	brne	.+2      	; 0x14ec <TIM_DelayMs+0x58>
    14ea:	4e c0       	rjmp	.+156    	; 0x1588 <TIM_DelayMs+0xf4>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    14ec:	89 80       	ldd	r8, Y+1	; 0x01
    14ee:	9a 80       	ldd	r9, Y+2	; 0x02
    14f0:	ab 80       	ldd	r10, Y+3	; 0x03
    14f2:	bc 80       	ldd	r11, Y+4	; 0x04
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	a9 01       	movw	r20, r18
    14fa:	c5 01       	movw	r24, r10
    14fc:	b4 01       	movw	r22, r8
    14fe:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__cmpsf2>
    1502:	88 23       	and	r24, r24
    1504:	81 f0       	breq	.+32     	; 0x1526 <TIM_DelayMs+0x92>
      {
         TIM_Delay /= f32_FreqRatio;
    1506:	60 2f       	mov	r22, r16
    1508:	7d 2d       	mov	r23, r13
    150a:	8e 2d       	mov	r24, r14
    150c:	9f 2d       	mov	r25, r15
    150e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <__floatunsisf>
    1512:	a5 01       	movw	r20, r10
    1514:	94 01       	movw	r18, r8
    1516:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__divsf3>
    151a:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__fixunssfsi>
    151e:	06 2f       	mov	r16, r22
    1520:	d7 2e       	mov	r13, r23
    1522:	e8 2e       	mov	r14, r24
    1524:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    1526:	a8 ee       	ldi	r26, 0xE8	; 232
    1528:	b3 e0       	ldi	r27, 0x03	; 3
    152a:	20 2f       	mov	r18, r16
    152c:	3d 2d       	mov	r19, r13
    152e:	4e 2d       	mov	r20, r14
    1530:	5f 2d       	mov	r21, r15
    1532:	0e 94 6f 10 	call	0x20de	; 0x20de <__muluhisi3>
    1536:	bb 27       	eor	r27, r27
    1538:	a9 2f       	mov	r26, r25
    153a:	98 2f       	mov	r25, r24
    153c:	87 2f       	mov	r24, r23
    153e:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <gu32_Overflows>
    1542:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <gu32_Overflows+0x1>
    1546:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <gu32_Overflows+0x2>
    154a:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    154e:	28 ee       	ldi	r18, 0xE8	; 232
    1550:	02 9f       	mul	r16, r18
    1552:	00 2d       	mov	r16, r0
    1554:	11 24       	eor	r1, r1
    1556:	00 93 16 02 	sts	0x0216, r16	; 0x800216 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    155a:	89 2b       	or	r24, r25
    155c:	8a 2b       	or	r24, r26
    155e:	8b 2b       	or	r24, r27
    1560:	49 f4       	brne	.+18     	; 0x1574 <TIM_DelayMs+0xe0>
      {
         gu8_OverflowsComplete = HIGH;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    1568:	60 2f       	mov	r22, r16
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	81 2f       	mov	r24, r17
    156e:	0e 94 11 09 	call	0x1222	; 0x1222 <TIM_Start>
    1572:	05 c0       	rjmp	.+10     	; 0x157e <TIM_DelayMs+0xea>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1574:	6f ef       	ldi	r22, 0xFF	; 255
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	81 2f       	mov	r24, r17
    157a:	0e 94 11 09 	call	0x1222	; 0x1222 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <gEnu_State>
      return TIMER_E_PENDING;
    1584:	8d ef       	ldi	r24, 0xFD	; 253
    1586:	07 c0       	rjmp	.+14     	; 0x1596 <TIM_DelayMs+0x102>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1588:	8c ef       	ldi	r24, 0xFC	; 252
    158a:	05 c0       	rjmp	.+10     	; 0x1596 <TIM_DelayMs+0x102>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    158c:	8e ef       	ldi	r24, 0xFE	; 254
    158e:	03 c0       	rjmp	.+6      	; 0x1596 <TIM_DelayMs+0x102>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	01 c0       	rjmp	.+2      	; 0x1596 <TIM_DelayMs+0x102>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
    1594:	81 e0       	ldi	r24, 0x01	; 1
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	ff 90       	pop	r15
    15a8:	ef 90       	pop	r14
    15aa:	df 90       	pop	r13
    15ac:	bf 90       	pop	r11
    15ae:	af 90       	pop	r10
    15b0:	9f 90       	pop	r9
    15b2:	8f 90       	pop	r8
    15b4:	08 95       	ret

000015b6 <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	1f 92       	push	r1
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
   if(DelayReady == gEnu_State)
    15c2:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <gEnu_State>
    15c6:	99 23       	and	r25, r25
    15c8:	09 f4       	brne	.+2      	; 0x15cc <TIM_DelayStatus+0x16>
    15ca:	4c c0       	rjmp	.+152    	; 0x1664 <TIM_DelayStatus+0xae>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
    15cc:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <gptr_CallerFunc>
    15d0:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <gptr_CallerFunc+0x1>
    15d4:	26 17       	cp	r18, r22
    15d6:	37 07       	cpc	r19, r23
    15d8:	09 f0       	breq	.+2      	; 0x15dc <TIM_DelayStatus+0x26>
    15da:	46 c0       	rjmp	.+140    	; 0x1668 <TIM_DelayStatus+0xb2>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    15dc:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <gEnu_State>
    15e0:	91 30       	cpi	r25, 0x01	; 1
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <TIM_DelayStatus+0x30>
    15e4:	43 c0       	rjmp	.+134    	; 0x166c <TIM_DelayStatus+0xb6>
    15e6:	18 2f       	mov	r17, r24
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    15e8:	be 01       	movw	r22, r28
    15ea:	6f 5f       	subi	r22, 0xFF	; 255
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	0e 94 38 09 	call	0x1270	; 0x1270 <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    15f2:	81 11       	cpse	r24, r1
    15f4:	35 c0       	rjmp	.+106    	; 0x1660 <TIM_DelayStatus+0xaa>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    15f6:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <gu8_OverflowsComplete>
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	41 f4       	brne	.+16     	; 0x160e <TIM_DelayStatus+0x58>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    15fe:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <gEnu_State>
            gu8_OverflowsComplete = LOW;
    1602:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <gu8_OverflowsComplete>
            gu8_Remindar = 0;
    1606:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <gu8_Remindar>
            /* return success message. */
            return ERROR_OK;
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	30 c0       	rjmp	.+96     	; 0x166e <TIM_DelayStatus+0xb8>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    160e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <gu32_Overflows>
    1612:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <gu32_Overflows+0x1>
    1616:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <gu32_Overflows+0x2>
    161a:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <gu32_Overflows+0x3>
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	a1 09       	sbc	r26, r1
    1622:	b1 09       	sbc	r27, r1
    1624:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <gu32_Overflows>
    1628:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <gu32_Overflows+0x1>
    162c:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <gu32_Overflows+0x2>
    1630:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <gu32_Overflows+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    1634:	89 2b       	or	r24, r25
    1636:	8a 2b       	or	r24, r26
    1638:	8b 2b       	or	r24, r27
    163a:	59 f4       	brne	.+22     	; 0x1652 <TIM_DelayStatus+0x9c>
         {
            gu8_OverflowsComplete = HIGH;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <gu8_OverflowsComplete>
            TIM_Start(TIM_channel, gu8_Remindar);
    1642:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <gu8_Remindar>
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	81 2f       	mov	r24, r17
    164a:	0e 94 11 09 	call	0x1222	; 0x1222 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
    164e:	8d ef       	ldi	r24, 0xFD	; 253
    1650:	0e c0       	rjmp	.+28     	; 0x166e <TIM_DelayStatus+0xb8>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    1652:	6f ef       	ldi	r22, 0xFF	; 255
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	81 2f       	mov	r24, r17
    1658:	0e 94 11 09 	call	0x1222	; 0x1222 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    165c:	8d ef       	ldi	r24, 0xFD	; 253
    165e:	07 c0       	rjmp	.+14     	; 0x166e <TIM_DelayStatus+0xb8>
   }
   else
   {
      return ERROR_NOK;
   }
   return 0;
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	05 c0       	rjmp	.+10     	; 0x166e <TIM_DelayStatus+0xb8>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
    1664:	8b ef       	ldi	r24, 0xFB	; 251
    1666:	03 c0       	rjmp	.+6      	; 0x166e <TIM_DelayStatus+0xb8>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	01 c0       	rjmp	.+2      	; 0x166e <TIM_DelayStatus+0xb8>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
    166c:	81 e0       	ldi	r24, 0x01	; 1
   }
   return 0;
    166e:	0f 90       	pop	r0
    1670:	df 91       	pop	r29
    1672:	cf 91       	pop	r28
    1674:	1f 91       	pop	r17
    1676:	08 95       	ret

00001678 <DISPLAY_START_SHIFTING>:
	}
	Last_state = State;
}

void DISPLAY_START_SHIFTING(uint8_t stringLength, uint8_t passWordLength)
{
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	1f 92       	push	r1
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
	uint8_t volatile StringMotionRange = DISPLAY_WIDTH - stringLength;
    1682:	90 e1       	ldi	r25, 0x10	; 16
    1684:	98 1b       	sub	r25, r24
    1686:	99 83       	std	Y+1, r25	; 0x01
	switch (Shifting_State)
    1688:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Shifting_State>
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	19 f0       	breq	.+6      	; 0x1696 <DISPLAY_START_SHIFTING+0x1e>
    1690:	82 30       	cpi	r24, 0x02	; 2
    1692:	c1 f0       	breq	.+48     	; 0x16c4 <DISPLAY_START_SHIFTING+0x4c>
    1694:	38 c0       	rjmp	.+112    	; 0x1706 <DISPLAY_START_SHIFTING+0x8e>
	{
		case ShiftingLeft:
			if(passWordLength!=0)
    1696:	66 23       	and	r22, r22
    1698:	29 f0       	breq	.+10     	; 0x16a4 <DISPLAY_START_SHIFTING+0x2c>
			{
				while(LCD_SendData('*')!= OperationSuccess);
    169a:	8a e2       	ldi	r24, 0x2A	; 42
    169c:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    16a0:	81 11       	cpse	r24, r1
    16a2:	fb cf       	rjmp	.-10     	; 0x169a <DISPLAY_START_SHIFTING+0x22>
			}
			while(LCD_SendCommand(LCD_SHIFTDISPLEFT)!= OperationSuccess);
    16a4:	88 e1       	ldi	r24, 0x18	; 24
    16a6:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    16aa:	81 11       	cpse	r24, r1
    16ac:	fb cf       	rjmp	.-10     	; 0x16a4 <DISPLAY_START_SHIFTING+0x2c>
			Position--;
    16ae:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <Position>
    16b2:	81 50       	subi	r24, 0x01	; 1
    16b4:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <Position>
			if (Position == 0)
    16b8:	81 11       	cpse	r24, r1
    16ba:	25 c0       	rjmp	.+74     	; 0x1706 <DISPLAY_START_SHIFTING+0x8e>
			{
				Shifting_State = ShiftingRight;
    16bc:	82 e0       	ldi	r24, 0x02	; 2
    16be:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Shifting_State>
    16c2:	21 c0       	rjmp	.+66     	; 0x1706 <DISPLAY_START_SHIFTING+0x8e>
			}
			break;
		case ShiftingRight:
			if(passWordLength!=0)
    16c4:	66 23       	and	r22, r22
    16c6:	79 f0       	breq	.+30     	; 0x16e6 <DISPLAY_START_SHIFTING+0x6e>
			{
				while (LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    16c8:	80 e1       	ldi	r24, 0x10	; 16
    16ca:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    16ce:	81 11       	cpse	r24, r1
    16d0:	fb cf       	rjmp	.-10     	; 0x16c8 <DISPLAY_START_SHIFTING+0x50>
				while(LCD_SendData(' ')!= OperationSuccess);
    16d2:	80 e2       	ldi	r24, 0x20	; 32
    16d4:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    16d8:	81 11       	cpse	r24, r1
    16da:	fb cf       	rjmp	.-10     	; 0x16d2 <DISPLAY_START_SHIFTING+0x5a>
				while (LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    16dc:	80 e1       	ldi	r24, 0x10	; 16
    16de:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    16e2:	81 11       	cpse	r24, r1
    16e4:	fb cf       	rjmp	.-10     	; 0x16dc <DISPLAY_START_SHIFTING+0x64>
			}
			while(LCD_SendCommand(LCD_SHIFTDISPRIGHT)!= OperationSuccess);
    16e6:	8c e1       	ldi	r24, 0x1C	; 28
    16e8:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    16ec:	81 11       	cpse	r24, r1
    16ee:	fb cf       	rjmp	.-10     	; 0x16e6 <DISPLAY_START_SHIFTING+0x6e>
			Position++;
    16f0:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <Position>
    16f4:	8f 5f       	subi	r24, 0xFF	; 255
    16f6:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <Position>
			if (Position >= StringMotionRange)
    16fa:	99 81       	ldd	r25, Y+1	; 0x01
    16fc:	89 17       	cp	r24, r25
    16fe:	18 f0       	brcs	.+6      	; 0x1706 <DISPLAY_START_SHIFTING+0x8e>
			{
				Shifting_State = ShiftingLeft;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Shifting_State>
			}
			break;
	}
}
    1706:	0f 90       	pop	r0
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	08 95       	ret

0000170e <DISPLAY_MainFunction>:
uint8_t LastShiftingState = OperationStarted;
uint8_t WrongPassEntries = 0;
uint32_t RemainingSeconds = 0;

void DISPLAY_MainFunction(void)
{
    170e:	cf 92       	push	r12
    1710:	df 92       	push	r13
    1712:	ef 92       	push	r14
    1714:	ff 92       	push	r15
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	1f 92       	push	r1
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
	uint8_t static Last_state = OperationStarted;
	uint8_t static Counter = 0;
	uint8_t State =0;
    1722:	19 82       	std	Y+1, r1	; 0x01
	DISPLAY_GetNumber_of_Asterisk(&Number_of_Asteriks);
    1724:	82 e2       	ldi	r24, 0x22	; 34
    1726:	92 e0       	ldi	r25, 0x02	; 2
    1728:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <DISPLAY_GetNumber_of_Asterisk>
	DISPLAY_GetState(&State);
    172c:	ce 01       	movw	r24, r28
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DISPLAY_GetState>
	if((Last_state == CorrectPassword || Last_state == WrongPassword || Last_state == Waiting)&&(Counter!=0))
    1734:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <Last_state.1753>
    1738:	8a ef       	ldi	r24, 0xFA	; 250
    173a:	82 0f       	add	r24, r18
    173c:	83 30       	cpi	r24, 0x03	; 3
    173e:	20 f4       	brcc	.+8      	; 0x1748 <DISPLAY_MainFunction+0x3a>
    1740:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <Counter.1754>
    1744:	81 11       	cpse	r24, r1
	{
		State = Last_state;
    1746:	29 83       	std	Y+1, r18	; 0x01
	}
	switch(State)
    1748:	39 81       	ldd	r19, Y+1	; 0x01
    174a:	83 2f       	mov	r24, r19
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	fc 01       	movw	r30, r24
    1750:	33 97       	sbiw	r30, 0x03	; 3
    1752:	e8 30       	cpi	r30, 0x08	; 8
    1754:	f1 05       	cpc	r31, r1
    1756:	08 f0       	brcs	.+2      	; 0x175a <DISPLAY_MainFunction+0x4c>
    1758:	e0 c2       	rjmp	.+1472   	; 0x1d1a <DISPLAY_MainFunction+0x60c>
    175a:	ef 5c       	subi	r30, 0xCF	; 207
    175c:	ff 4f       	sbci	r31, 0xFF	; 255
    175e:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__tablejump2__>
	{
		case SystemLoading:
			if(Last_state != State)
    1762:	23 17       	cp	r18, r19
    1764:	a9 f0       	breq	.+42     	; 0x1790 <DISPLAY_MainFunction+0x82>
			{
				Position = 0;
    1766:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <Position>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1770:	81 11       	cpse	r24, r1
    1772:	fb cf       	rjmp	.-10     	; 0x176a <DISPLAY_MainFunction+0x5c>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    1774:	82 e0       	ldi	r24, 0x02	; 2
    1776:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    177a:	81 11       	cpse	r24, r1
    177c:	fb cf       	rjmp	.-10     	; 0x1774 <DISPLAY_MainFunction+0x66>
				while(LCD_SendString((uint8_t*)"System Loading") != OperationSuccess);
    177e:	85 e8       	ldi	r24, 0x85	; 133
    1780:	91 e0       	ldi	r25, 0x01	; 1
    1782:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    1786:	81 11       	cpse	r24, r1
    1788:	fa cf       	rjmp	.-12     	; 0x177e <DISPLAY_MainFunction+0x70>
				Shifting_State = ShiftingRight;
    178a:	82 e0       	ldi	r24, 0x02	; 2
    178c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Shifting_State>
			}
			DISPLAY_START_SHIFTING(SystemLoading_StringWidth,0);
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	8e e0       	ldi	r24, 0x0E	; 14
    1794:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DISPLAY_START_SHIFTING>
			break;
    1798:	c5 c2       	rjmp	.+1418   	; 0x1d24 <DISPLAY_MainFunction+0x616>
		case Welcome:
			if(Last_state != State)
    179a:	23 17       	cp	r18, r19
    179c:	a9 f0       	breq	.+42     	; 0x17c8 <DISPLAY_MainFunction+0xba>
			{
				Position = 0;
    179e:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <Position>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    17a8:	81 11       	cpse	r24, r1
    17aa:	fb cf       	rjmp	.-10     	; 0x17a2 <DISPLAY_MainFunction+0x94>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    17ac:	82 e0       	ldi	r24, 0x02	; 2
    17ae:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    17b2:	81 11       	cpse	r24, r1
    17b4:	fb cf       	rjmp	.-10     	; 0x17ac <DISPLAY_MainFunction+0x9e>
				while(LCD_SendString((uint8_t*)"WELCOME") != OperationSuccess);
    17b6:	84 e9       	ldi	r24, 0x94	; 148
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    17be:	81 11       	cpse	r24, r1
    17c0:	fa cf       	rjmp	.-12     	; 0x17b6 <DISPLAY_MainFunction+0xa8>
				Shifting_State = ShiftingRight;
    17c2:	82 e0       	ldi	r24, 0x02	; 2
    17c4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Shifting_State>
			}
			DISPLAY_START_SHIFTING(Welcome_StringWidth,0);
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	87 e0       	ldi	r24, 0x07	; 7
    17cc:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DISPLAY_START_SHIFTING>
			break;
    17d0:	a9 c2       	rjmp	.+1362   	; 0x1d24 <DISPLAY_MainFunction+0x616>
		case PassEntering:
			if(Last_state != State)
    17d2:	23 17       	cp	r18, r19
    17d4:	81 f1       	breq	.+96     	; 0x1836 <DISPLAY_MainFunction+0x128>
			{
				Position = DISPLAY_WIDTH-EnterPass_StringWidth;
    17d6:	86 e0       	ldi	r24, 0x06	; 6
    17d8:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <Position>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    17e2:	81 11       	cpse	r24, r1
    17e4:	fb cf       	rjmp	.-10     	; 0x17dc <DISPLAY_MainFunction+0xce>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    17e6:	82 e0       	ldi	r24, 0x02	; 2
    17e8:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    17ec:	81 11       	cpse	r24, r1
    17ee:	fb cf       	rjmp	.-10     	; 0x17e6 <DISPLAY_MainFunction+0xd8>
				while (LCD_SendCommand(LCD_CURS_Position0|Position)!=OperationSuccess);
    17f0:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <Position>
    17f4:	80 68       	ori	r24, 0x80	; 128
    17f6:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    17fa:	81 11       	cpse	r24, r1
    17fc:	f9 cf       	rjmp	.-14     	; 0x17f0 <DISPLAY_MainFunction+0xe2>
				while (LCD_SendString((uint8_t*)"Enter Pass") != OperationSuccess);
    17fe:	8c e9       	ldi	r24, 0x9C	; 156
    1800:	91 e0       	ldi	r25, 0x01	; 1
    1802:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    1806:	81 11       	cpse	r24, r1
    1808:	fa cf       	rjmp	.-12     	; 0x17fe <DISPLAY_MainFunction+0xf0>
				Shifting_State = ShiftingLeft;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Shifting_State>
				while (LCD_SendCommand(LCD_CURS_LINE2)!=OperationSuccess);
    1810:	80 ec       	ldi	r24, 0xC0	; 192
    1812:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1816:	81 11       	cpse	r24, r1
    1818:	fb cf       	rjmp	.-10     	; 0x1810 <DISPLAY_MainFunction+0x102>
    181a:	10 e0       	ldi	r17, 0x00	; 0
    181c:	08 c0       	rjmp	.+16     	; 0x182e <DISPLAY_MainFunction+0x120>
				for(uint8_t i = 0; i < Number_of_Asteriks; i++)
				{
					while(LCD_SendData('*')!= OperationSuccess);
    181e:	8a e2       	ldi	r24, 0x2A	; 42
    1820:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1824:	81 11       	cpse	r24, r1
    1826:	fb cf       	rjmp	.-10     	; 0x181e <DISPLAY_MainFunction+0x110>
					if (i>5)
    1828:	16 30       	cpi	r17, 0x06	; 6
    182a:	28 f4       	brcc	.+10     	; 0x1836 <DISPLAY_MainFunction+0x128>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
				while (LCD_SendCommand(LCD_CURS_Position0|Position)!=OperationSuccess);
				while (LCD_SendString((uint8_t*)"Enter Pass") != OperationSuccess);
				Shifting_State = ShiftingLeft;
				while (LCD_SendCommand(LCD_CURS_LINE2)!=OperationSuccess);
				for(uint8_t i = 0; i < Number_of_Asteriks; i++)
    182c:	1f 5f       	subi	r17, 0xFF	; 255
    182e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Number_of_Asteriks>
    1832:	18 17       	cp	r17, r24
    1834:	a0 f3       	brcs	.-24     	; 0x181e <DISPLAY_MainFunction+0x110>
					{
						break;
					}
				}
			}
			DISPLAY_START_SHIFTING(EnterPass_StringWidth,Number_of_Asteriks);
    1836:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <Number_of_Asteriks>
    183a:	8a e0       	ldi	r24, 0x0A	; 10
    183c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DISPLAY_START_SHIFTING>
			break;
    1840:	71 c2       	rjmp	.+1250   	; 0x1d24 <DISPLAY_MainFunction+0x616>
		case CorrectPassword:
			if(Last_state != State)
    1842:	23 17       	cp	r18, r19
    1844:	c1 f0       	breq	.+48     	; 0x1876 <DISPLAY_MainFunction+0x168>
			{
				Position = 0;
    1846:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <Position>
				DISPLAY_SetNumber_of_Asterisk(0);
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DISPLAY_SetNumber_of_Asterisk>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1856:	81 11       	cpse	r24, r1
    1858:	fb cf       	rjmp	.-10     	; 0x1850 <DISPLAY_MainFunction+0x142>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    185a:	82 e0       	ldi	r24, 0x02	; 2
    185c:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1860:	81 11       	cpse	r24, r1
    1862:	fb cf       	rjmp	.-10     	; 0x185a <DISPLAY_MainFunction+0x14c>
				while (LCD_SendString((uint8_t*)"Pass OK") != OperationSuccess);
    1864:	87 ea       	ldi	r24, 0xA7	; 167
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    186c:	81 11       	cpse	r24, r1
    186e:	fa cf       	rjmp	.-12     	; 0x1864 <DISPLAY_MainFunction+0x156>
				Shifting_State = ShiftingRight;
    1870:	82 e0       	ldi	r24, 0x02	; 2
    1872:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Shifting_State>
			}
			DISPLAY_START_SHIFTING(CorrectPass_StringWidth,0);
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	87 e0       	ldi	r24, 0x07	; 7
    187a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DISPLAY_START_SHIFTING>
			Counter ++;
    187e:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <Counter.1754>
    1882:	8f 5f       	subi	r24, 0xFF	; 255
    1884:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <Counter.1754>
			if(Counter == (uint8_t)(TwoSeconds/MainFunction_Periodicity))
    1888:	88 32       	cpi	r24, 0x28	; 40
    188a:	09 f0       	breq	.+2      	; 0x188e <DISPLAY_MainFunction+0x180>
    188c:	4b c2       	rjmp	.+1174   	; 0x1d24 <DISPLAY_MainFunction+0x616>
			{
				WrongPassEntries = 0;
    188e:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <WrongPassEntries>
				Counter = 0;
    1892:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <Counter.1754>
				DISPLAY_SetState(SevenSegments);
    1896:	89 e0       	ldi	r24, 0x09	; 9
    1898:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <DISPLAY_SetState>
    189c:	43 c2       	rjmp	.+1158   	; 0x1d24 <DISPLAY_MainFunction+0x616>
			}
			break;
		/*Counter*/
		case WrongPassword:
			if(Last_state != State)
    189e:	23 17       	cp	r18, r19
    18a0:	c1 f0       	breq	.+48     	; 0x18d2 <DISPLAY_MainFunction+0x1c4>
			{
				Position = 0;
    18a2:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <Position>
				DISPLAY_SetNumber_of_Asterisk(0);
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DISPLAY_SetNumber_of_Asterisk>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    18b2:	81 11       	cpse	r24, r1
    18b4:	fb cf       	rjmp	.-10     	; 0x18ac <DISPLAY_MainFunction+0x19e>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    18bc:	81 11       	cpse	r24, r1
    18be:	fb cf       	rjmp	.-10     	; 0x18b6 <DISPLAY_MainFunction+0x1a8>
				while (LCD_SendString((uint8_t*)"Wrong Pass") != OperationSuccess);
    18c0:	8f ea       	ldi	r24, 0xAF	; 175
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    18c8:	81 11       	cpse	r24, r1
    18ca:	fa cf       	rjmp	.-12     	; 0x18c0 <DISPLAY_MainFunction+0x1b2>
				Shifting_State = ShiftingRight;
    18cc:	82 e0       	ldi	r24, 0x02	; 2
    18ce:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Shifting_State>
			}
			DISPLAY_START_SHIFTING(WrongPass_StringWidth,0);
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	8a e0       	ldi	r24, 0x0A	; 10
    18d6:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DISPLAY_START_SHIFTING>
			Counter ++;
    18da:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <Counter.1754>
    18de:	8f 5f       	subi	r24, 0xFF	; 255
    18e0:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <Counter.1754>
			if(Counter == (uint8_t)(TwoSeconds/MainFunction_Periodicity))
    18e4:	88 32       	cpi	r24, 0x28	; 40
    18e6:	09 f0       	breq	.+2      	; 0x18ea <DISPLAY_MainFunction+0x1dc>
    18e8:	1d c2       	rjmp	.+1082   	; 0x1d24 <DISPLAY_MainFunction+0x616>
			{
				Counter = 0;
    18ea:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <Counter.1754>
				WrongPassEntries++;
    18ee:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <WrongPassEntries>
    18f2:	8f 5f       	subi	r24, 0xFF	; 255
    18f4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <WrongPassEntries>
				if(WrongPassEntries==3)
    18f8:	83 30       	cpi	r24, 0x03	; 3
    18fa:	21 f4       	brne	.+8      	; 0x1904 <DISPLAY_MainFunction+0x1f6>
					DISPLAY_SetState(Waiting);
    18fc:	88 e0       	ldi	r24, 0x08	; 8
    18fe:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <DISPLAY_SetState>
    1902:	10 c2       	rjmp	.+1056   	; 0x1d24 <DISPLAY_MainFunction+0x616>
				else
					DISPLAY_SetState(PassEntering);
    1904:	85 e0       	ldi	r24, 0x05	; 5
    1906:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <DISPLAY_SetState>
    190a:	0c c2       	rjmp	.+1048   	; 0x1d24 <DISPLAY_MainFunction+0x616>
			}
			break;
		case Waiting:
			if(Last_state != State)
    190c:	23 17       	cp	r18, r19
    190e:	39 f1       	breq	.+78     	; 0x195e <DISPLAY_MainFunction+0x250>
			{
				Position = DISPLAY_WIDTH - Waiting_StringWidth;
    1910:	89 e0       	ldi	r24, 0x09	; 9
    1912:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <Position>
				DISPLAY_SetNumber_of_Asterisk(0);
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DISPLAY_SetNumber_of_Asterisk>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1922:	81 11       	cpse	r24, r1
    1924:	fb cf       	rjmp	.-10     	; 0x191c <DISPLAY_MainFunction+0x20e>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    192c:	81 11       	cpse	r24, r1
    192e:	fb cf       	rjmp	.-10     	; 0x1926 <DISPLAY_MainFunction+0x218>
				while (LCD_SendCommand(LCD_CURS_Position0|Position)!=OperationSuccess);
    1930:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <Position>
    1934:	80 68       	ori	r24, 0x80	; 128
    1936:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    193a:	81 11       	cpse	r24, r1
    193c:	f9 cf       	rjmp	.-14     	; 0x1930 <DISPLAY_MainFunction+0x222>
				while (LCD_SendString((uint8_t*)"Waiting") != OperationSuccess);
    193e:	8a eb       	ldi	r24, 0xBA	; 186
    1940:	91 e0       	ldi	r25, 0x01	; 1
    1942:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    1946:	81 11       	cpse	r24, r1
    1948:	fa cf       	rjmp	.-12     	; 0x193e <DISPLAY_MainFunction+0x230>
				Shifting_State = ShiftingLeft;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Shifting_State>
				LastShiftingState = Shifting_State;
    1950:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <LastShiftingState>
				while (LCD_SendCommand(LCD_CURS_LINE2)!=OperationSuccess);
    1954:	80 ec       	ldi	r24, 0xC0	; 192
    1956:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    195a:	81 11       	cpse	r24, r1
    195c:	fb cf       	rjmp	.-10     	; 0x1954 <DISPLAY_MainFunction+0x246>
			}
			RemainingSeconds = ((TenSeconds-(Counter*MainFunction_Periodicity))/1000);
    195e:	10 91 1c 02 	lds	r17, 0x021C	; 0x80021c <Counter.1754>
    1962:	21 2f       	mov	r18, r17
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	a2 e3       	ldi	r26, 0x32	; 50
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__umulhisi3>
    196e:	0f 2e       	mov	r0, r31
    1970:	f0 e1       	ldi	r31, 0x10	; 16
    1972:	cf 2e       	mov	r12, r31
    1974:	f7 e2       	ldi	r31, 0x27	; 39
    1976:	df 2e       	mov	r13, r31
    1978:	e1 2c       	mov	r14, r1
    197a:	f1 2c       	mov	r15, r1
    197c:	f0 2d       	mov	r31, r0
    197e:	a7 01       	movw	r20, r14
    1980:	96 01       	movw	r18, r12
    1982:	26 1b       	sub	r18, r22
    1984:	37 0b       	sbc	r19, r23
    1986:	48 0b       	sbc	r20, r24
    1988:	59 0b       	sbc	r21, r25
    198a:	ca 01       	movw	r24, r20
    198c:	b9 01       	movw	r22, r18
    198e:	28 ee       	ldi	r18, 0xE8	; 232
    1990:	33 e0       	ldi	r19, 0x03	; 3
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    199a:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <RemainingSeconds>
    199e:	30 93 1e 02 	sts	0x021E, r19	; 0x80021e <RemainingSeconds+0x1>
    19a2:	40 93 1f 02 	sts	0x021F, r20	; 0x80021f <RemainingSeconds+0x2>
    19a6:	50 93 20 02 	sts	0x0220, r21	; 0x800220 <RemainingSeconds+0x3>
			Counter ++;
    19aa:	1f 5f       	subi	r17, 0xFF	; 255
    19ac:	10 93 1c 02 	sts	0x021C, r17	; 0x80021c <Counter.1754>
			DISPLAY_START_SHIFTING(Waiting_StringWidth,0);
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	87 e0       	ldi	r24, 0x07	; 7
    19b4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DISPLAY_START_SHIFTING>
			if((Shifting_State == ShiftingLeft) && (LastShiftingState == ShiftingLeft))
    19b8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Shifting_State>
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	09 f0       	breq	.+2      	; 0x19c2 <DISPLAY_MainFunction+0x2b4>
    19c0:	4f c0       	rjmp	.+158    	; 0x1a60 <DISPLAY_MainFunction+0x352>
    19c2:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <LastShiftingState>
    19c6:	91 30       	cpi	r25, 0x01	; 1
    19c8:	09 f0       	breq	.+2      	; 0x19cc <DISPLAY_MainFunction+0x2be>
    19ca:	4a c0       	rjmp	.+148    	; 0x1a60 <DISPLAY_MainFunction+0x352>
			{
				while(LCD_SendCommand(LCD_SHIFTCURSRIGHT)!=OperationSuccess);
    19cc:	84 e1       	ldi	r24, 0x14	; 20
    19ce:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    19d2:	81 11       	cpse	r24, r1
    19d4:	fb cf       	rjmp	.-10     	; 0x19cc <DISPLAY_MainFunction+0x2be>
				LCD_SendNumber(RemainingSeconds);
    19d6:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <RemainingSeconds>
    19da:	70 91 1e 02 	lds	r23, 0x021E	; 0x80021e <RemainingSeconds+0x1>
    19de:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RemainingSeconds+0x2>
    19e2:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <RemainingSeconds+0x3>
    19e6:	0e 94 34 05 	call	0xa68	; 0xa68 <LCD_SendNumber>
				if(RemainingSeconds/10)
    19ea:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <RemainingSeconds>
    19ee:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <RemainingSeconds+0x1>
    19f2:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <RemainingSeconds+0x2>
    19f6:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <RemainingSeconds+0x3>
    19fa:	0a 97       	sbiw	r24, 0x0a	; 10
    19fc:	a1 05       	cpc	r26, r1
    19fe:	b1 05       	cpc	r27, r1
    1a00:	a8 f0       	brcs	.+42     	; 0x1a2c <DISPLAY_MainFunction+0x31e>
				{
					while(LCD_SendData(' ')!=OperationSuccess);/**/
    1a02:	80 e2       	ldi	r24, 0x20	; 32
    1a04:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1a08:	81 11       	cpse	r24, r1
    1a0a:	fb cf       	rjmp	.-10     	; 0x1a02 <DISPLAY_MainFunction+0x2f4>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1a0c:	80 e1       	ldi	r24, 0x10	; 16
    1a0e:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1a12:	81 11       	cpse	r24, r1
    1a14:	fb cf       	rjmp	.-10     	; 0x1a0c <DISPLAY_MainFunction+0x2fe>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1a16:	80 e1       	ldi	r24, 0x10	; 16
    1a18:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1a1c:	81 11       	cpse	r24, r1
    1a1e:	fb cf       	rjmp	.-10     	; 0x1a16 <DISPLAY_MainFunction+0x308>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1a20:	80 e1       	ldi	r24, 0x10	; 16
    1a22:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1a26:	81 11       	cpse	r24, r1
    1a28:	fb cf       	rjmp	.-10     	; 0x1a20 <DISPLAY_MainFunction+0x312>
    1a2a:	0f c1       	rjmp	.+542    	; 0x1c4a <DISPLAY_MainFunction+0x53c>
				}
				else
				{
					while(LCD_SendData(' ')!=OperationSuccess);/**/
    1a2c:	80 e2       	ldi	r24, 0x20	; 32
    1a2e:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1a32:	81 11       	cpse	r24, r1
    1a34:	fb cf       	rjmp	.-10     	; 0x1a2c <DISPLAY_MainFunction+0x31e>
					while(LCD_SendData(' ')!=OperationSuccess);/**/
    1a36:	80 e2       	ldi	r24, 0x20	; 32
    1a38:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1a3c:	81 11       	cpse	r24, r1
    1a3e:	fb cf       	rjmp	.-10     	; 0x1a36 <DISPLAY_MainFunction+0x328>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1a40:	80 e1       	ldi	r24, 0x10	; 16
    1a42:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1a46:	81 11       	cpse	r24, r1
    1a48:	fb cf       	rjmp	.-10     	; 0x1a40 <DISPLAY_MainFunction+0x332>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1a4a:	80 e1       	ldi	r24, 0x10	; 16
    1a4c:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1a50:	81 11       	cpse	r24, r1
    1a52:	fb cf       	rjmp	.-10     	; 0x1a4a <DISPLAY_MainFunction+0x33c>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1a54:	80 e1       	ldi	r24, 0x10	; 16
    1a56:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1a5a:	81 11       	cpse	r24, r1
    1a5c:	fb cf       	rjmp	.-10     	; 0x1a54 <DISPLAY_MainFunction+0x346>
    1a5e:	f5 c0       	rjmp	.+490    	; 0x1c4a <DISPLAY_MainFunction+0x53c>
				}
			}
			else if ((Shifting_State == ShiftingRight) && (LastShiftingState == ShiftingRight))
    1a60:	82 30       	cpi	r24, 0x02	; 2
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <DISPLAY_MainFunction+0x358>
    1a64:	4f c0       	rjmp	.+158    	; 0x1b04 <DISPLAY_MainFunction+0x3f6>
    1a66:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <LastShiftingState>
    1a6a:	92 30       	cpi	r25, 0x02	; 2
    1a6c:	09 f0       	breq	.+2      	; 0x1a70 <DISPLAY_MainFunction+0x362>
    1a6e:	4a c0       	rjmp	.+148    	; 0x1b04 <DISPLAY_MainFunction+0x3f6>
			{
				while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1a70:	80 e1       	ldi	r24, 0x10	; 16
    1a72:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1a76:	81 11       	cpse	r24, r1
    1a78:	fb cf       	rjmp	.-10     	; 0x1a70 <DISPLAY_MainFunction+0x362>
				LCD_SendNumber(RemainingSeconds);
    1a7a:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <RemainingSeconds>
    1a7e:	70 91 1e 02 	lds	r23, 0x021E	; 0x80021e <RemainingSeconds+0x1>
    1a82:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RemainingSeconds+0x2>
    1a86:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <RemainingSeconds+0x3>
    1a8a:	0e 94 34 05 	call	0xa68	; 0xa68 <LCD_SendNumber>
				if(RemainingSeconds/10)
    1a8e:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <RemainingSeconds>
    1a92:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <RemainingSeconds+0x1>
    1a96:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <RemainingSeconds+0x2>
    1a9a:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <RemainingSeconds+0x3>
    1a9e:	0a 97       	sbiw	r24, 0x0a	; 10
    1aa0:	a1 05       	cpc	r26, r1
    1aa2:	b1 05       	cpc	r27, r1
    1aa4:	a8 f0       	brcs	.+42     	; 0x1ad0 <DISPLAY_MainFunction+0x3c2>
				{
					while(LCD_SendData(' ')!=OperationSuccess);
    1aa6:	80 e2       	ldi	r24, 0x20	; 32
    1aa8:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1aac:	81 11       	cpse	r24, r1
    1aae:	fb cf       	rjmp	.-10     	; 0x1aa6 <DISPLAY_MainFunction+0x398>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1ab0:	80 e1       	ldi	r24, 0x10	; 16
    1ab2:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1ab6:	81 11       	cpse	r24, r1
    1ab8:	fb cf       	rjmp	.-10     	; 0x1ab0 <DISPLAY_MainFunction+0x3a2>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1aba:	80 e1       	ldi	r24, 0x10	; 16
    1abc:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1ac0:	81 11       	cpse	r24, r1
    1ac2:	fb cf       	rjmp	.-10     	; 0x1aba <DISPLAY_MainFunction+0x3ac>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1ac4:	80 e1       	ldi	r24, 0x10	; 16
    1ac6:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1aca:	81 11       	cpse	r24, r1
    1acc:	fb cf       	rjmp	.-10     	; 0x1ac4 <DISPLAY_MainFunction+0x3b6>
    1ace:	bd c0       	rjmp	.+378    	; 0x1c4a <DISPLAY_MainFunction+0x53c>
				}
				else
				{
					while(LCD_SendData(' ')!=OperationSuccess);
    1ad0:	80 e2       	ldi	r24, 0x20	; 32
    1ad2:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1ad6:	81 11       	cpse	r24, r1
    1ad8:	fb cf       	rjmp	.-10     	; 0x1ad0 <DISPLAY_MainFunction+0x3c2>
					while(LCD_SendData(' ')!=OperationSuccess);
    1ada:	80 e2       	ldi	r24, 0x20	; 32
    1adc:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1ae0:	81 11       	cpse	r24, r1
    1ae2:	fb cf       	rjmp	.-10     	; 0x1ada <DISPLAY_MainFunction+0x3cc>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1ae4:	80 e1       	ldi	r24, 0x10	; 16
    1ae6:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1aea:	81 11       	cpse	r24, r1
    1aec:	fb cf       	rjmp	.-10     	; 0x1ae4 <DISPLAY_MainFunction+0x3d6>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1aee:	80 e1       	ldi	r24, 0x10	; 16
    1af0:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1af4:	81 11       	cpse	r24, r1
    1af6:	fb cf       	rjmp	.-10     	; 0x1aee <DISPLAY_MainFunction+0x3e0>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1af8:	80 e1       	ldi	r24, 0x10	; 16
    1afa:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1afe:	81 11       	cpse	r24, r1
    1b00:	fb cf       	rjmp	.-10     	; 0x1af8 <DISPLAY_MainFunction+0x3ea>
    1b02:	a3 c0       	rjmp	.+326    	; 0x1c4a <DISPLAY_MainFunction+0x53c>
				}
			}
			else if ((Shifting_State == ShiftingRight) && (LastShiftingState == ShiftingLeft))
    1b04:	82 30       	cpi	r24, 0x02	; 2
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <DISPLAY_MainFunction+0x3fc>
    1b08:	4f c0       	rjmp	.+158    	; 0x1ba8 <DISPLAY_MainFunction+0x49a>
    1b0a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <LastShiftingState>
    1b0e:	91 30       	cpi	r25, 0x01	; 1
    1b10:	09 f0       	breq	.+2      	; 0x1b14 <DISPLAY_MainFunction+0x406>
    1b12:	4a c0       	rjmp	.+148    	; 0x1ba8 <DISPLAY_MainFunction+0x49a>
			{
				while(LCD_SendCommand(LCD_SHIFTCURSRIGHT)!=OperationSuccess);
    1b14:	84 e1       	ldi	r24, 0x14	; 20
    1b16:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1b1a:	81 11       	cpse	r24, r1
    1b1c:	fb cf       	rjmp	.-10     	; 0x1b14 <DISPLAY_MainFunction+0x406>
				LCD_SendNumber(RemainingSeconds);
    1b1e:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <RemainingSeconds>
    1b22:	70 91 1e 02 	lds	r23, 0x021E	; 0x80021e <RemainingSeconds+0x1>
    1b26:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RemainingSeconds+0x2>
    1b2a:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <RemainingSeconds+0x3>
    1b2e:	0e 94 34 05 	call	0xa68	; 0xa68 <LCD_SendNumber>
				if(RemainingSeconds/10)
    1b32:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <RemainingSeconds>
    1b36:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <RemainingSeconds+0x1>
    1b3a:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <RemainingSeconds+0x2>
    1b3e:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <RemainingSeconds+0x3>
    1b42:	0a 97       	sbiw	r24, 0x0a	; 10
    1b44:	a1 05       	cpc	r26, r1
    1b46:	b1 05       	cpc	r27, r1
    1b48:	a8 f0       	brcs	.+42     	; 0x1b74 <DISPLAY_MainFunction+0x466>
				{
					while(LCD_SendData(' ')!=OperationSuccess);
    1b4a:	80 e2       	ldi	r24, 0x20	; 32
    1b4c:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1b50:	81 11       	cpse	r24, r1
    1b52:	fb cf       	rjmp	.-10     	; 0x1b4a <DISPLAY_MainFunction+0x43c>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1b54:	80 e1       	ldi	r24, 0x10	; 16
    1b56:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1b5a:	81 11       	cpse	r24, r1
    1b5c:	fb cf       	rjmp	.-10     	; 0x1b54 <DISPLAY_MainFunction+0x446>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1b5e:	80 e1       	ldi	r24, 0x10	; 16
    1b60:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1b64:	81 11       	cpse	r24, r1
    1b66:	fb cf       	rjmp	.-10     	; 0x1b5e <DISPLAY_MainFunction+0x450>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1b68:	80 e1       	ldi	r24, 0x10	; 16
    1b6a:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1b6e:	81 11       	cpse	r24, r1
    1b70:	fb cf       	rjmp	.-10     	; 0x1b68 <DISPLAY_MainFunction+0x45a>
    1b72:	6b c0       	rjmp	.+214    	; 0x1c4a <DISPLAY_MainFunction+0x53c>
				}
				else
				{
					while(LCD_SendData(' ')!=OperationSuccess);
    1b74:	80 e2       	ldi	r24, 0x20	; 32
    1b76:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1b7a:	81 11       	cpse	r24, r1
    1b7c:	fb cf       	rjmp	.-10     	; 0x1b74 <DISPLAY_MainFunction+0x466>
					while(LCD_SendData(' ')!=OperationSuccess);
    1b7e:	80 e2       	ldi	r24, 0x20	; 32
    1b80:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1b84:	81 11       	cpse	r24, r1
    1b86:	fb cf       	rjmp	.-10     	; 0x1b7e <DISPLAY_MainFunction+0x470>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1b88:	80 e1       	ldi	r24, 0x10	; 16
    1b8a:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1b8e:	81 11       	cpse	r24, r1
    1b90:	fb cf       	rjmp	.-10     	; 0x1b88 <DISPLAY_MainFunction+0x47a>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1b92:	80 e1       	ldi	r24, 0x10	; 16
    1b94:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1b98:	81 11       	cpse	r24, r1
    1b9a:	fb cf       	rjmp	.-10     	; 0x1b92 <DISPLAY_MainFunction+0x484>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1b9c:	80 e1       	ldi	r24, 0x10	; 16
    1b9e:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1ba2:	81 11       	cpse	r24, r1
    1ba4:	fb cf       	rjmp	.-10     	; 0x1b9c <DISPLAY_MainFunction+0x48e>
    1ba6:	51 c0       	rjmp	.+162    	; 0x1c4a <DISPLAY_MainFunction+0x53c>
				}
			}
			else if ((Shifting_State == ShiftingLeft) && (LastShiftingState == ShiftingRight))
    1ba8:	81 30       	cpi	r24, 0x01	; 1
    1baa:	09 f0       	breq	.+2      	; 0x1bae <DISPLAY_MainFunction+0x4a0>
    1bac:	4e c0       	rjmp	.+156    	; 0x1c4a <DISPLAY_MainFunction+0x53c>
    1bae:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <LastShiftingState>
    1bb2:	82 30       	cpi	r24, 0x02	; 2
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <DISPLAY_MainFunction+0x4aa>
    1bb6:	49 c0       	rjmp	.+146    	; 0x1c4a <DISPLAY_MainFunction+0x53c>
			{
				while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1bb8:	80 e1       	ldi	r24, 0x10	; 16
    1bba:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1bbe:	81 11       	cpse	r24, r1
    1bc0:	fb cf       	rjmp	.-10     	; 0x1bb8 <DISPLAY_MainFunction+0x4aa>
				LCD_SendNumber(RemainingSeconds);
    1bc2:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <RemainingSeconds>
    1bc6:	70 91 1e 02 	lds	r23, 0x021E	; 0x80021e <RemainingSeconds+0x1>
    1bca:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RemainingSeconds+0x2>
    1bce:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <RemainingSeconds+0x3>
    1bd2:	0e 94 34 05 	call	0xa68	; 0xa68 <LCD_SendNumber>
				if(RemainingSeconds/10)
    1bd6:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <RemainingSeconds>
    1bda:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <RemainingSeconds+0x1>
    1bde:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <RemainingSeconds+0x2>
    1be2:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <RemainingSeconds+0x3>
    1be6:	0a 97       	sbiw	r24, 0x0a	; 10
    1be8:	a1 05       	cpc	r26, r1
    1bea:	b1 05       	cpc	r27, r1
    1bec:	a8 f0       	brcs	.+42     	; 0x1c18 <DISPLAY_MainFunction+0x50a>
				{
					while(LCD_SendData(' ')!=OperationSuccess);/**/
    1bee:	80 e2       	ldi	r24, 0x20	; 32
    1bf0:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1bf4:	81 11       	cpse	r24, r1
    1bf6:	fb cf       	rjmp	.-10     	; 0x1bee <DISPLAY_MainFunction+0x4e0>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1bf8:	80 e1       	ldi	r24, 0x10	; 16
    1bfa:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1bfe:	81 11       	cpse	r24, r1
    1c00:	fb cf       	rjmp	.-10     	; 0x1bf8 <DISPLAY_MainFunction+0x4ea>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1c02:	80 e1       	ldi	r24, 0x10	; 16
    1c04:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1c08:	81 11       	cpse	r24, r1
    1c0a:	fb cf       	rjmp	.-10     	; 0x1c02 <DISPLAY_MainFunction+0x4f4>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1c0c:	80 e1       	ldi	r24, 0x10	; 16
    1c0e:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1c12:	81 11       	cpse	r24, r1
    1c14:	fb cf       	rjmp	.-10     	; 0x1c0c <DISPLAY_MainFunction+0x4fe>
    1c16:	19 c0       	rjmp	.+50     	; 0x1c4a <DISPLAY_MainFunction+0x53c>
				}
				else
				{
					while(LCD_SendData(' ')!=OperationSuccess);/**/
    1c18:	80 e2       	ldi	r24, 0x20	; 32
    1c1a:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1c1e:	81 11       	cpse	r24, r1
    1c20:	fb cf       	rjmp	.-10     	; 0x1c18 <DISPLAY_MainFunction+0x50a>
					while(LCD_SendData(' ')!=OperationSuccess);/**/
    1c22:	80 e2       	ldi	r24, 0x20	; 32
    1c24:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1c28:	81 11       	cpse	r24, r1
    1c2a:	fb cf       	rjmp	.-10     	; 0x1c22 <DISPLAY_MainFunction+0x514>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1c2c:	80 e1       	ldi	r24, 0x10	; 16
    1c2e:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1c32:	81 11       	cpse	r24, r1
    1c34:	fb cf       	rjmp	.-10     	; 0x1c2c <DISPLAY_MainFunction+0x51e>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1c36:	80 e1       	ldi	r24, 0x10	; 16
    1c38:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1c3c:	81 11       	cpse	r24, r1
    1c3e:	fb cf       	rjmp	.-10     	; 0x1c36 <DISPLAY_MainFunction+0x528>
					while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
    1c40:	80 e1       	ldi	r24, 0x10	; 16
    1c42:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1c46:	81 11       	cpse	r24, r1
    1c48:	fb cf       	rjmp	.-10     	; 0x1c40 <DISPLAY_MainFunction+0x532>
				}
			}
			LastShiftingState = Shifting_State;
    1c4a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Shifting_State>
    1c4e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <LastShiftingState>
			//if(Counter == (uint8_t)((TenSeconds/MainFunction_Periodicity)-1))
			if(RemainingSeconds == 0)
    1c52:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <RemainingSeconds>
    1c56:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <RemainingSeconds+0x1>
    1c5a:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <RemainingSeconds+0x2>
    1c5e:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <RemainingSeconds+0x3>
    1c62:	89 2b       	or	r24, r25
    1c64:	8a 2b       	or	r24, r26
    1c66:	8b 2b       	or	r24, r27
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <DISPLAY_MainFunction+0x55e>
    1c6a:	5c c0       	rjmp	.+184    	; 0x1d24 <DISPLAY_MainFunction+0x616>
			{
				WrongPassEntries = 0;
    1c6c:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <WrongPassEntries>
				Counter = 0;
    1c70:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <Counter.1754>
				DISPLAY_SetState(PassEntering);
    1c74:	85 e0       	ldi	r24, 0x05	; 5
    1c76:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <DISPLAY_SetState>
    1c7a:	54 c0       	rjmp	.+168    	; 0x1d24 <DISPLAY_MainFunction+0x616>
			}
			break;
		case SevenSegments:
			if(Last_state != State)
    1c7c:	23 17       	cp	r18, r19
    1c7e:	a9 f0       	breq	.+42     	; 0x1caa <DISPLAY_MainFunction+0x59c>
			{
				Position = 0;
    1c80:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <Position>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1c8a:	81 11       	cpse	r24, r1
    1c8c:	fb cf       	rjmp	.-10     	; 0x1c84 <DISPLAY_MainFunction+0x576>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    1c8e:	82 e0       	ldi	r24, 0x02	; 2
    1c90:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1c94:	81 11       	cpse	r24, r1
    1c96:	fb cf       	rjmp	.-10     	; 0x1c8e <DISPLAY_MainFunction+0x580>
				while (LCD_SendString((uint8_t*)"System is ON") != OperationSuccess);
    1c98:	82 ec       	ldi	r24, 0xC2	; 194
    1c9a:	91 e0       	ldi	r25, 0x01	; 1
    1c9c:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    1ca0:	81 11       	cpse	r24, r1
    1ca2:	fa cf       	rjmp	.-12     	; 0x1c98 <DISPLAY_MainFunction+0x58a>
				Shifting_State = ShiftingRight;
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Shifting_State>
			}
			DISPLAY_START_SHIFTING(SystemOn_StringWidth,0);
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	8c e0       	ldi	r24, 0x0C	; 12
    1cae:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DISPLAY_START_SHIFTING>
			break;
    1cb2:	38 c0       	rjmp	.+112    	; 0x1d24 <DISPLAY_MainFunction+0x616>
		case ChangePassword:
			if(Last_state != State)
    1cb4:	23 17       	cp	r18, r19
    1cb6:	b1 f1       	breq	.+108    	; 0x1d24 <DISPLAY_MainFunction+0x616>
			{
				Position = DISPLAY_WIDTH-ChangePassword_StringWidth;
    1cb8:	83 e0       	ldi	r24, 0x03	; 3
    1cba:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <Position>
				while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1cc4:	81 11       	cpse	r24, r1
    1cc6:	fb cf       	rjmp	.-10     	; 0x1cbe <DISPLAY_MainFunction+0x5b0>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1cce:	81 11       	cpse	r24, r1
    1cd0:	fb cf       	rjmp	.-10     	; 0x1cc8 <DISPLAY_MainFunction+0x5ba>
				while (LCD_SendCommand(LCD_CURS_Position0|Position)!=OperationSuccess);
    1cd2:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <Position>
    1cd6:	80 68       	ori	r24, 0x80	; 128
    1cd8:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1cdc:	81 11       	cpse	r24, r1
    1cde:	f9 cf       	rjmp	.-14     	; 0x1cd2 <DISPLAY_MainFunction+0x5c4>
				while (LCD_SendString((uint8_t*)"Changing Pass") != OperationSuccess);
    1ce0:	8f ec       	ldi	r24, 0xCF	; 207
    1ce2:	91 e0       	ldi	r25, 0x01	; 1
    1ce4:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_SendString>
    1ce8:	81 11       	cpse	r24, r1
    1cea:	fa cf       	rjmp	.-12     	; 0x1ce0 <DISPLAY_MainFunction+0x5d2>
				Shifting_State = ShiftingLeft;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Shifting_State>
				while (LCD_SendCommand(0xc0)!=OperationSuccess);
    1cf2:	80 ec       	ldi	r24, 0xC0	; 192
    1cf4:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1cf8:	81 11       	cpse	r24, r1
    1cfa:	fb cf       	rjmp	.-10     	; 0x1cf2 <DISPLAY_MainFunction+0x5e4>
    1cfc:	10 e0       	ldi	r17, 0x00	; 0
    1cfe:	08 c0       	rjmp	.+16     	; 0x1d10 <DISPLAY_MainFunction+0x602>
				for(uint8_t i = 0; i < Number_of_Asteriks; i++)
				{
					while(LCD_SendData('*')!= OperationSuccess);
    1d00:	8a e2       	ldi	r24, 0x2A	; 42
    1d02:	0e 94 23 03 	call	0x646	; 0x646 <LCD_SendData>
    1d06:	81 11       	cpse	r24, r1
    1d08:	fb cf       	rjmp	.-10     	; 0x1d00 <DISPLAY_MainFunction+0x5f2>
					if (i>5)
    1d0a:	16 30       	cpi	r17, 0x06	; 6
    1d0c:	58 f4       	brcc	.+22     	; 0x1d24 <DISPLAY_MainFunction+0x616>
				while (LCD_SendCommand(LCD_HOME)!=OperationSuccess);
				while (LCD_SendCommand(LCD_CURS_Position0|Position)!=OperationSuccess);
				while (LCD_SendString((uint8_t*)"Changing Pass") != OperationSuccess);
				Shifting_State = ShiftingLeft;
				while (LCD_SendCommand(0xc0)!=OperationSuccess);
				for(uint8_t i = 0; i < Number_of_Asteriks; i++)
    1d0e:	1f 5f       	subi	r17, 0xFF	; 255
    1d10:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Number_of_Asteriks>
    1d14:	18 17       	cp	r17, r24
    1d16:	a0 f3       	brcs	.-24     	; 0x1d00 <DISPLAY_MainFunction+0x5f2>
    1d18:	05 c0       	rjmp	.+10     	; 0x1d24 <DISPLAY_MainFunction+0x616>
					}
				}
			}
			break;
		default:
			while (LCD_SendCommand(LCD_CLR)!=OperationSuccess);
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	0e 94 41 02 	call	0x482	; 0x482 <LCD_SendCommand>
    1d20:	81 11       	cpse	r24, r1
    1d22:	fb cf       	rjmp	.-10     	; 0x1d1a <DISPLAY_MainFunction+0x60c>
			break;
	}
	Last_state = State;
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Last_state.1753>
}
    1d2a:	0f 90       	pop	r0
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	1f 91       	pop	r17
    1d32:	ff 90       	pop	r15
    1d34:	ef 90       	pop	r14
    1d36:	df 90       	pop	r13
    1d38:	cf 90       	pop	r12
    1d3a:	08 95       	ret

00001d3c <DISPLAY_GetState>:
uint8_t static State = OperationStarted;
uint8_t static Number_of_Asteriks = 0;

void DISPLAY_GetState(uint8_t* StateVal)
{
	*StateVal = State;
    1d3c:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <State>
    1d40:	fc 01       	movw	r30, r24
    1d42:	20 83       	st	Z, r18
    1d44:	08 95       	ret

00001d46 <DISPLAY_GetNumber_of_Asterisk>:
}
void DISPLAY_GetNumber_of_Asterisk(uint8_t* AsterisksNumVal)
{
	*AsterisksNumVal = Number_of_Asteriks;
    1d46:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <Number_of_Asteriks>
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	20 83       	st	Z, r18
    1d4e:	08 95       	ret

00001d50 <DISPLAY_SetState>:
}
void DISPLAY_SetState(uint8_t StateVal)
{
	State = StateVal;
    1d50:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <State>
    1d54:	08 95       	ret

00001d56 <DISPLAY_SetNumber_of_Asterisk>:
}
void DISPLAY_SetNumber_of_Asterisk(uint8_t AsterisksNumVal)
{
	Number_of_Asteriks = AsterisksNumVal;
    1d56:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <Number_of_Asteriks>
    1d5a:	08 95       	ret

00001d5c <main>:
#include "STORAGE.h"

uint8_t Name[255] = "ALI";
uint8_t retValofChk = 1;
int main(void)
{
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <main+0x6>
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <main+0x8>
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
	*/
	//while( != OperationSuccess);
	//uint8_t passworLength = 4;
	//uint8_t const wordLength = 9;
	//uint8_t positionaftefirstlineword = 0xc0;
	while(LCD_Init() != OperationSuccess);//<===forLCDInitialization
    1d68:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_Init>
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	fc cf       	rjmp	.-8      	; 0x1d68 <main+0xc>
	//{
		//while(LCD_SendData('*')!= OperationSuccess);
	//}
	//uint8_t l = (passworLength+(16-wordLength));
	
	DISPLAY_SetNumber_of_Asterisk(6);//<======setsNumberofasteriks
    1d70:	86 e0       	ldi	r24, 0x06	; 6
    1d72:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DISPLAY_SetNumber_of_Asterisk>
	DISPLAY_SetState(Waiting);//<====setsthestate of the system
    1d76:	88 e0       	ldi	r24, 0x08	; 8
    1d78:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <DISPLAY_SetState>
	//CRC_16_Calc(Name);
	retValofChk = CRC_16_Chk(Name);
    1d7c:	88 e6       	ldi	r24, 0x68	; 104
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0e 94 ac 05 	call	0xb58	; 0xb58 <CRC_16_Chk>
    1d84:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <retValofChk>
			//while(LCD_SendCommand((0xc0|l)-1)!= OperationSuccess);
			//for(uint32_t volatile x = 0; x < 50000; x++);
			//l--;
		//}
		//l = (passworLength+(16-wordLength));
		DISPLAY_MainFunction();//<=====main function of Display module
    1d88:	0e 94 87 0b 	call	0x170e	; 0x170e <DISPLAY_MainFunction>
				while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
				while(LCD_SendCommand(LCD_SHIFTCURSLEFT)!=OperationSuccess);
			}
		}
		LastShiftingState = shifting_State;*/
		for(uint32_t volatile x = 0; x < 50000; x++);//<=====Dummydelay function
    1d8c:	19 82       	std	Y+1, r1	; 0x01
    1d8e:	1a 82       	std	Y+2, r1	; 0x02
    1d90:	1b 82       	std	Y+3, r1	; 0x03
    1d92:	1c 82       	std	Y+4, r1	; 0x04
    1d94:	0b c0       	rjmp	.+22     	; 0x1dac <main+0x50>
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	ab 81       	ldd	r26, Y+3	; 0x03
    1d9c:	bc 81       	ldd	r27, Y+4	; 0x04
    1d9e:	01 96       	adiw	r24, 0x01	; 1
    1da0:	a1 1d       	adc	r26, r1
    1da2:	b1 1d       	adc	r27, r1
    1da4:	89 83       	std	Y+1, r24	; 0x01
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	ab 83       	std	Y+3, r26	; 0x03
    1daa:	bc 83       	std	Y+4, r27	; 0x04
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	ab 81       	ldd	r26, Y+3	; 0x03
    1db2:	bc 81       	ldd	r27, Y+4	; 0x04
    1db4:	80 35       	cpi	r24, 0x50	; 80
    1db6:	93 4c       	sbci	r25, 0xC3	; 195
    1db8:	a1 05       	cpc	r26, r1
    1dba:	b1 05       	cpc	r27, r1
    1dbc:	60 f3       	brcs	.-40     	; 0x1d96 <main+0x3a>
    1dbe:	e4 cf       	rjmp	.-56     	; 0x1d88 <main+0x2c>

00001dc0 <__cmpsf2>:
    1dc0:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__fp_cmp>
    1dc4:	08 f4       	brcc	.+2      	; 0x1dc8 <__cmpsf2+0x8>
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	08 95       	ret

00001dca <__divsf3>:
    1dca:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__divsf3x>
    1dce:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__fp_round>
    1dd2:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__fp_pscB>
    1dd6:	58 f0       	brcs	.+22     	; 0x1dee <__divsf3+0x24>
    1dd8:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__fp_pscA>
    1ddc:	40 f0       	brcs	.+16     	; 0x1dee <__divsf3+0x24>
    1dde:	29 f4       	brne	.+10     	; 0x1dea <__divsf3+0x20>
    1de0:	5f 3f       	cpi	r21, 0xFF	; 255
    1de2:	29 f0       	breq	.+10     	; 0x1dee <__divsf3+0x24>
    1de4:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__fp_inf>
    1de8:	51 11       	cpse	r21, r1
    1dea:	0c 94 32 10 	jmp	0x2064	; 0x2064 <__fp_szero>
    1dee:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__fp_nan>

00001df2 <__divsf3x>:
    1df2:	0e 94 0f 10 	call	0x201e	; 0x201e <__fp_split3>
    1df6:	68 f3       	brcs	.-38     	; 0x1dd2 <__divsf3+0x8>

00001df8 <__divsf3_pse>:
    1df8:	99 23       	and	r25, r25
    1dfa:	b1 f3       	breq	.-20     	; 0x1de8 <__divsf3+0x1e>
    1dfc:	55 23       	and	r21, r21
    1dfe:	91 f3       	breq	.-28     	; 0x1de4 <__divsf3+0x1a>
    1e00:	95 1b       	sub	r25, r21
    1e02:	55 0b       	sbc	r21, r21
    1e04:	bb 27       	eor	r27, r27
    1e06:	aa 27       	eor	r26, r26
    1e08:	62 17       	cp	r22, r18
    1e0a:	73 07       	cpc	r23, r19
    1e0c:	84 07       	cpc	r24, r20
    1e0e:	38 f0       	brcs	.+14     	; 0x1e1e <__divsf3_pse+0x26>
    1e10:	9f 5f       	subi	r25, 0xFF	; 255
    1e12:	5f 4f       	sbci	r21, 0xFF	; 255
    1e14:	22 0f       	add	r18, r18
    1e16:	33 1f       	adc	r19, r19
    1e18:	44 1f       	adc	r20, r20
    1e1a:	aa 1f       	adc	r26, r26
    1e1c:	a9 f3       	breq	.-22     	; 0x1e08 <__divsf3_pse+0x10>
    1e1e:	35 d0       	rcall	.+106    	; 0x1e8a <__divsf3_pse+0x92>
    1e20:	0e 2e       	mov	r0, r30
    1e22:	3a f0       	brmi	.+14     	; 0x1e32 <__divsf3_pse+0x3a>
    1e24:	e0 e8       	ldi	r30, 0x80	; 128
    1e26:	32 d0       	rcall	.+100    	; 0x1e8c <__divsf3_pse+0x94>
    1e28:	91 50       	subi	r25, 0x01	; 1
    1e2a:	50 40       	sbci	r21, 0x00	; 0
    1e2c:	e6 95       	lsr	r30
    1e2e:	00 1c       	adc	r0, r0
    1e30:	ca f7       	brpl	.-14     	; 0x1e24 <__divsf3_pse+0x2c>
    1e32:	2b d0       	rcall	.+86     	; 0x1e8a <__divsf3_pse+0x92>
    1e34:	fe 2f       	mov	r31, r30
    1e36:	29 d0       	rcall	.+82     	; 0x1e8a <__divsf3_pse+0x92>
    1e38:	66 0f       	add	r22, r22
    1e3a:	77 1f       	adc	r23, r23
    1e3c:	88 1f       	adc	r24, r24
    1e3e:	bb 1f       	adc	r27, r27
    1e40:	26 17       	cp	r18, r22
    1e42:	37 07       	cpc	r19, r23
    1e44:	48 07       	cpc	r20, r24
    1e46:	ab 07       	cpc	r26, r27
    1e48:	b0 e8       	ldi	r27, 0x80	; 128
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <__divsf3_pse+0x56>
    1e4c:	bb 0b       	sbc	r27, r27
    1e4e:	80 2d       	mov	r24, r0
    1e50:	bf 01       	movw	r22, r30
    1e52:	ff 27       	eor	r31, r31
    1e54:	93 58       	subi	r25, 0x83	; 131
    1e56:	5f 4f       	sbci	r21, 0xFF	; 255
    1e58:	3a f0       	brmi	.+14     	; 0x1e68 <__divsf3_pse+0x70>
    1e5a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e5c:	51 05       	cpc	r21, r1
    1e5e:	78 f0       	brcs	.+30     	; 0x1e7e <__divsf3_pse+0x86>
    1e60:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__fp_inf>
    1e64:	0c 94 32 10 	jmp	0x2064	; 0x2064 <__fp_szero>
    1e68:	5f 3f       	cpi	r21, 0xFF	; 255
    1e6a:	e4 f3       	brlt	.-8      	; 0x1e64 <__divsf3_pse+0x6c>
    1e6c:	98 3e       	cpi	r25, 0xE8	; 232
    1e6e:	d4 f3       	brlt	.-12     	; 0x1e64 <__divsf3_pse+0x6c>
    1e70:	86 95       	lsr	r24
    1e72:	77 95       	ror	r23
    1e74:	67 95       	ror	r22
    1e76:	b7 95       	ror	r27
    1e78:	f7 95       	ror	r31
    1e7a:	9f 5f       	subi	r25, 0xFF	; 255
    1e7c:	c9 f7       	brne	.-14     	; 0x1e70 <__divsf3_pse+0x78>
    1e7e:	88 0f       	add	r24, r24
    1e80:	91 1d       	adc	r25, r1
    1e82:	96 95       	lsr	r25
    1e84:	87 95       	ror	r24
    1e86:	97 f9       	bld	r25, 7
    1e88:	08 95       	ret
    1e8a:	e1 e0       	ldi	r30, 0x01	; 1
    1e8c:	66 0f       	add	r22, r22
    1e8e:	77 1f       	adc	r23, r23
    1e90:	88 1f       	adc	r24, r24
    1e92:	bb 1f       	adc	r27, r27
    1e94:	62 17       	cp	r22, r18
    1e96:	73 07       	cpc	r23, r19
    1e98:	84 07       	cpc	r24, r20
    1e9a:	ba 07       	cpc	r27, r26
    1e9c:	20 f0       	brcs	.+8      	; 0x1ea6 <__divsf3_pse+0xae>
    1e9e:	62 1b       	sub	r22, r18
    1ea0:	73 0b       	sbc	r23, r19
    1ea2:	84 0b       	sbc	r24, r20
    1ea4:	ba 0b       	sbc	r27, r26
    1ea6:	ee 1f       	adc	r30, r30
    1ea8:	88 f7       	brcc	.-30     	; 0x1e8c <__divsf3_pse+0x94>
    1eaa:	e0 95       	com	r30
    1eac:	08 95       	ret

00001eae <__fixunssfsi>:
    1eae:	0e 94 17 10 	call	0x202e	; 0x202e <__fp_splitA>
    1eb2:	88 f0       	brcs	.+34     	; 0x1ed6 <__fixunssfsi+0x28>
    1eb4:	9f 57       	subi	r25, 0x7F	; 127
    1eb6:	98 f0       	brcs	.+38     	; 0x1ede <__fixunssfsi+0x30>
    1eb8:	b9 2f       	mov	r27, r25
    1eba:	99 27       	eor	r25, r25
    1ebc:	b7 51       	subi	r27, 0x17	; 23
    1ebe:	b0 f0       	brcs	.+44     	; 0x1eec <__fixunssfsi+0x3e>
    1ec0:	e1 f0       	breq	.+56     	; 0x1efa <__fixunssfsi+0x4c>
    1ec2:	66 0f       	add	r22, r22
    1ec4:	77 1f       	adc	r23, r23
    1ec6:	88 1f       	adc	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	1a f0       	brmi	.+6      	; 0x1ed2 <__fixunssfsi+0x24>
    1ecc:	ba 95       	dec	r27
    1ece:	c9 f7       	brne	.-14     	; 0x1ec2 <__fixunssfsi+0x14>
    1ed0:	14 c0       	rjmp	.+40     	; 0x1efa <__fixunssfsi+0x4c>
    1ed2:	b1 30       	cpi	r27, 0x01	; 1
    1ed4:	91 f0       	breq	.+36     	; 0x1efa <__fixunssfsi+0x4c>
    1ed6:	0e 94 31 10 	call	0x2062	; 0x2062 <__fp_zero>
    1eda:	b1 e0       	ldi	r27, 0x01	; 1
    1edc:	08 95       	ret
    1ede:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__fp_zero>
    1ee2:	67 2f       	mov	r22, r23
    1ee4:	78 2f       	mov	r23, r24
    1ee6:	88 27       	eor	r24, r24
    1ee8:	b8 5f       	subi	r27, 0xF8	; 248
    1eea:	39 f0       	breq	.+14     	; 0x1efa <__fixunssfsi+0x4c>
    1eec:	b9 3f       	cpi	r27, 0xF9	; 249
    1eee:	cc f3       	brlt	.-14     	; 0x1ee2 <__fixunssfsi+0x34>
    1ef0:	86 95       	lsr	r24
    1ef2:	77 95       	ror	r23
    1ef4:	67 95       	ror	r22
    1ef6:	b3 95       	inc	r27
    1ef8:	d9 f7       	brne	.-10     	; 0x1ef0 <__fixunssfsi+0x42>
    1efa:	3e f4       	brtc	.+14     	; 0x1f0a <__fixunssfsi+0x5c>
    1efc:	90 95       	com	r25
    1efe:	80 95       	com	r24
    1f00:	70 95       	com	r23
    1f02:	61 95       	neg	r22
    1f04:	7f 4f       	sbci	r23, 0xFF	; 255
    1f06:	8f 4f       	sbci	r24, 0xFF	; 255
    1f08:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0a:	08 95       	ret

00001f0c <__floatunsisf>:
    1f0c:	e8 94       	clt
    1f0e:	09 c0       	rjmp	.+18     	; 0x1f22 <__floatsisf+0x12>

00001f10 <__floatsisf>:
    1f10:	97 fb       	bst	r25, 7
    1f12:	3e f4       	brtc	.+14     	; 0x1f22 <__floatsisf+0x12>
    1f14:	90 95       	com	r25
    1f16:	80 95       	com	r24
    1f18:	70 95       	com	r23
    1f1a:	61 95       	neg	r22
    1f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f20:	9f 4f       	sbci	r25, 0xFF	; 255
    1f22:	99 23       	and	r25, r25
    1f24:	a9 f0       	breq	.+42     	; 0x1f50 <__floatsisf+0x40>
    1f26:	f9 2f       	mov	r31, r25
    1f28:	96 e9       	ldi	r25, 0x96	; 150
    1f2a:	bb 27       	eor	r27, r27
    1f2c:	93 95       	inc	r25
    1f2e:	f6 95       	lsr	r31
    1f30:	87 95       	ror	r24
    1f32:	77 95       	ror	r23
    1f34:	67 95       	ror	r22
    1f36:	b7 95       	ror	r27
    1f38:	f1 11       	cpse	r31, r1
    1f3a:	f8 cf       	rjmp	.-16     	; 0x1f2c <__floatsisf+0x1c>
    1f3c:	fa f4       	brpl	.+62     	; 0x1f7c <__floatsisf+0x6c>
    1f3e:	bb 0f       	add	r27, r27
    1f40:	11 f4       	brne	.+4      	; 0x1f46 <__floatsisf+0x36>
    1f42:	60 ff       	sbrs	r22, 0
    1f44:	1b c0       	rjmp	.+54     	; 0x1f7c <__floatsisf+0x6c>
    1f46:	6f 5f       	subi	r22, 0xFF	; 255
    1f48:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4e:	16 c0       	rjmp	.+44     	; 0x1f7c <__floatsisf+0x6c>
    1f50:	88 23       	and	r24, r24
    1f52:	11 f0       	breq	.+4      	; 0x1f58 <__floatsisf+0x48>
    1f54:	96 e9       	ldi	r25, 0x96	; 150
    1f56:	11 c0       	rjmp	.+34     	; 0x1f7a <__floatsisf+0x6a>
    1f58:	77 23       	and	r23, r23
    1f5a:	21 f0       	breq	.+8      	; 0x1f64 <__floatsisf+0x54>
    1f5c:	9e e8       	ldi	r25, 0x8E	; 142
    1f5e:	87 2f       	mov	r24, r23
    1f60:	76 2f       	mov	r23, r22
    1f62:	05 c0       	rjmp	.+10     	; 0x1f6e <__floatsisf+0x5e>
    1f64:	66 23       	and	r22, r22
    1f66:	71 f0       	breq	.+28     	; 0x1f84 <__floatsisf+0x74>
    1f68:	96 e8       	ldi	r25, 0x86	; 134
    1f6a:	86 2f       	mov	r24, r22
    1f6c:	70 e0       	ldi	r23, 0x00	; 0
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	2a f0       	brmi	.+10     	; 0x1f7c <__floatsisf+0x6c>
    1f72:	9a 95       	dec	r25
    1f74:	66 0f       	add	r22, r22
    1f76:	77 1f       	adc	r23, r23
    1f78:	88 1f       	adc	r24, r24
    1f7a:	da f7       	brpl	.-10     	; 0x1f72 <__floatsisf+0x62>
    1f7c:	88 0f       	add	r24, r24
    1f7e:	96 95       	lsr	r25
    1f80:	87 95       	ror	r24
    1f82:	97 f9       	bld	r25, 7
    1f84:	08 95       	ret

00001f86 <__fp_cmp>:
    1f86:	99 0f       	add	r25, r25
    1f88:	00 08       	sbc	r0, r0
    1f8a:	55 0f       	add	r21, r21
    1f8c:	aa 0b       	sbc	r26, r26
    1f8e:	e0 e8       	ldi	r30, 0x80	; 128
    1f90:	fe ef       	ldi	r31, 0xFE	; 254
    1f92:	16 16       	cp	r1, r22
    1f94:	17 06       	cpc	r1, r23
    1f96:	e8 07       	cpc	r30, r24
    1f98:	f9 07       	cpc	r31, r25
    1f9a:	c0 f0       	brcs	.+48     	; 0x1fcc <__fp_cmp+0x46>
    1f9c:	12 16       	cp	r1, r18
    1f9e:	13 06       	cpc	r1, r19
    1fa0:	e4 07       	cpc	r30, r20
    1fa2:	f5 07       	cpc	r31, r21
    1fa4:	98 f0       	brcs	.+38     	; 0x1fcc <__fp_cmp+0x46>
    1fa6:	62 1b       	sub	r22, r18
    1fa8:	73 0b       	sbc	r23, r19
    1faa:	84 0b       	sbc	r24, r20
    1fac:	95 0b       	sbc	r25, r21
    1fae:	39 f4       	brne	.+14     	; 0x1fbe <__fp_cmp+0x38>
    1fb0:	0a 26       	eor	r0, r26
    1fb2:	61 f0       	breq	.+24     	; 0x1fcc <__fp_cmp+0x46>
    1fb4:	23 2b       	or	r18, r19
    1fb6:	24 2b       	or	r18, r20
    1fb8:	25 2b       	or	r18, r21
    1fba:	21 f4       	brne	.+8      	; 0x1fc4 <__fp_cmp+0x3e>
    1fbc:	08 95       	ret
    1fbe:	0a 26       	eor	r0, r26
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <__fp_cmp+0x3e>
    1fc2:	a1 40       	sbci	r26, 0x01	; 1
    1fc4:	a6 95       	lsr	r26
    1fc6:	8f ef       	ldi	r24, 0xFF	; 255
    1fc8:	81 1d       	adc	r24, r1
    1fca:	81 1d       	adc	r24, r1
    1fcc:	08 95       	ret

00001fce <__fp_inf>:
    1fce:	97 f9       	bld	r25, 7
    1fd0:	9f 67       	ori	r25, 0x7F	; 127
    1fd2:	80 e8       	ldi	r24, 0x80	; 128
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	08 95       	ret

00001fda <__fp_nan>:
    1fda:	9f ef       	ldi	r25, 0xFF	; 255
    1fdc:	80 ec       	ldi	r24, 0xC0	; 192
    1fde:	08 95       	ret

00001fe0 <__fp_pscA>:
    1fe0:	00 24       	eor	r0, r0
    1fe2:	0a 94       	dec	r0
    1fe4:	16 16       	cp	r1, r22
    1fe6:	17 06       	cpc	r1, r23
    1fe8:	18 06       	cpc	r1, r24
    1fea:	09 06       	cpc	r0, r25
    1fec:	08 95       	ret

00001fee <__fp_pscB>:
    1fee:	00 24       	eor	r0, r0
    1ff0:	0a 94       	dec	r0
    1ff2:	12 16       	cp	r1, r18
    1ff4:	13 06       	cpc	r1, r19
    1ff6:	14 06       	cpc	r1, r20
    1ff8:	05 06       	cpc	r0, r21
    1ffa:	08 95       	ret

00001ffc <__fp_round>:
    1ffc:	09 2e       	mov	r0, r25
    1ffe:	03 94       	inc	r0
    2000:	00 0c       	add	r0, r0
    2002:	11 f4       	brne	.+4      	; 0x2008 <__fp_round+0xc>
    2004:	88 23       	and	r24, r24
    2006:	52 f0       	brmi	.+20     	; 0x201c <__fp_round+0x20>
    2008:	bb 0f       	add	r27, r27
    200a:	40 f4       	brcc	.+16     	; 0x201c <__fp_round+0x20>
    200c:	bf 2b       	or	r27, r31
    200e:	11 f4       	brne	.+4      	; 0x2014 <__fp_round+0x18>
    2010:	60 ff       	sbrs	r22, 0
    2012:	04 c0       	rjmp	.+8      	; 0x201c <__fp_round+0x20>
    2014:	6f 5f       	subi	r22, 0xFF	; 255
    2016:	7f 4f       	sbci	r23, 0xFF	; 255
    2018:	8f 4f       	sbci	r24, 0xFF	; 255
    201a:	9f 4f       	sbci	r25, 0xFF	; 255
    201c:	08 95       	ret

0000201e <__fp_split3>:
    201e:	57 fd       	sbrc	r21, 7
    2020:	90 58       	subi	r25, 0x80	; 128
    2022:	44 0f       	add	r20, r20
    2024:	55 1f       	adc	r21, r21
    2026:	59 f0       	breq	.+22     	; 0x203e <__fp_splitA+0x10>
    2028:	5f 3f       	cpi	r21, 0xFF	; 255
    202a:	71 f0       	breq	.+28     	; 0x2048 <__fp_splitA+0x1a>
    202c:	47 95       	ror	r20

0000202e <__fp_splitA>:
    202e:	88 0f       	add	r24, r24
    2030:	97 fb       	bst	r25, 7
    2032:	99 1f       	adc	r25, r25
    2034:	61 f0       	breq	.+24     	; 0x204e <__fp_splitA+0x20>
    2036:	9f 3f       	cpi	r25, 0xFF	; 255
    2038:	79 f0       	breq	.+30     	; 0x2058 <__fp_splitA+0x2a>
    203a:	87 95       	ror	r24
    203c:	08 95       	ret
    203e:	12 16       	cp	r1, r18
    2040:	13 06       	cpc	r1, r19
    2042:	14 06       	cpc	r1, r20
    2044:	55 1f       	adc	r21, r21
    2046:	f2 cf       	rjmp	.-28     	; 0x202c <__fp_split3+0xe>
    2048:	46 95       	lsr	r20
    204a:	f1 df       	rcall	.-30     	; 0x202e <__fp_splitA>
    204c:	08 c0       	rjmp	.+16     	; 0x205e <__fp_splitA+0x30>
    204e:	16 16       	cp	r1, r22
    2050:	17 06       	cpc	r1, r23
    2052:	18 06       	cpc	r1, r24
    2054:	99 1f       	adc	r25, r25
    2056:	f1 cf       	rjmp	.-30     	; 0x203a <__fp_splitA+0xc>
    2058:	86 95       	lsr	r24
    205a:	71 05       	cpc	r23, r1
    205c:	61 05       	cpc	r22, r1
    205e:	08 94       	sec
    2060:	08 95       	ret

00002062 <__fp_zero>:
    2062:	e8 94       	clt

00002064 <__fp_szero>:
    2064:	bb 27       	eor	r27, r27
    2066:	66 27       	eor	r22, r22
    2068:	77 27       	eor	r23, r23
    206a:	cb 01       	movw	r24, r22
    206c:	97 f9       	bld	r25, 7
    206e:	08 95       	ret

00002070 <__udivmodsi4>:
    2070:	a1 e2       	ldi	r26, 0x21	; 33
    2072:	1a 2e       	mov	r1, r26
    2074:	aa 1b       	sub	r26, r26
    2076:	bb 1b       	sub	r27, r27
    2078:	fd 01       	movw	r30, r26
    207a:	0d c0       	rjmp	.+26     	; 0x2096 <__udivmodsi4_ep>

0000207c <__udivmodsi4_loop>:
    207c:	aa 1f       	adc	r26, r26
    207e:	bb 1f       	adc	r27, r27
    2080:	ee 1f       	adc	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	a2 17       	cp	r26, r18
    2086:	b3 07       	cpc	r27, r19
    2088:	e4 07       	cpc	r30, r20
    208a:	f5 07       	cpc	r31, r21
    208c:	20 f0       	brcs	.+8      	; 0x2096 <__udivmodsi4_ep>
    208e:	a2 1b       	sub	r26, r18
    2090:	b3 0b       	sbc	r27, r19
    2092:	e4 0b       	sbc	r30, r20
    2094:	f5 0b       	sbc	r31, r21

00002096 <__udivmodsi4_ep>:
    2096:	66 1f       	adc	r22, r22
    2098:	77 1f       	adc	r23, r23
    209a:	88 1f       	adc	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	1a 94       	dec	r1
    20a0:	69 f7       	brne	.-38     	; 0x207c <__udivmodsi4_loop>
    20a2:	60 95       	com	r22
    20a4:	70 95       	com	r23
    20a6:	80 95       	com	r24
    20a8:	90 95       	com	r25
    20aa:	9b 01       	movw	r18, r22
    20ac:	ac 01       	movw	r20, r24
    20ae:	bd 01       	movw	r22, r26
    20b0:	cf 01       	movw	r24, r30
    20b2:	08 95       	ret

000020b4 <__tablejump2__>:
    20b4:	ee 0f       	add	r30, r30
    20b6:	ff 1f       	adc	r31, r31
    20b8:	05 90       	lpm	r0, Z+
    20ba:	f4 91       	lpm	r31, Z
    20bc:	e0 2d       	mov	r30, r0
    20be:	09 94       	ijmp

000020c0 <__umulhisi3>:
    20c0:	a2 9f       	mul	r26, r18
    20c2:	b0 01       	movw	r22, r0
    20c4:	b3 9f       	mul	r27, r19
    20c6:	c0 01       	movw	r24, r0
    20c8:	a3 9f       	mul	r26, r19
    20ca:	70 0d       	add	r23, r0
    20cc:	81 1d       	adc	r24, r1
    20ce:	11 24       	eor	r1, r1
    20d0:	91 1d       	adc	r25, r1
    20d2:	b2 9f       	mul	r27, r18
    20d4:	70 0d       	add	r23, r0
    20d6:	81 1d       	adc	r24, r1
    20d8:	11 24       	eor	r1, r1
    20da:	91 1d       	adc	r25, r1
    20dc:	08 95       	ret

000020de <__muluhisi3>:
    20de:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__umulhisi3>
    20e2:	a5 9f       	mul	r26, r21
    20e4:	90 0d       	add	r25, r0
    20e6:	b4 9f       	mul	r27, r20
    20e8:	90 0d       	add	r25, r0
    20ea:	a4 9f       	mul	r26, r20
    20ec:	80 0d       	add	r24, r0
    20ee:	91 1d       	adc	r25, r1
    20f0:	11 24       	eor	r1, r1
    20f2:	08 95       	ret

000020f4 <_exit>:
    20f4:	f8 94       	cli

000020f6 <__stop_program>:
    20f6:	ff cf       	rjmp	.-2      	; 0x20f6 <__stop_program>
