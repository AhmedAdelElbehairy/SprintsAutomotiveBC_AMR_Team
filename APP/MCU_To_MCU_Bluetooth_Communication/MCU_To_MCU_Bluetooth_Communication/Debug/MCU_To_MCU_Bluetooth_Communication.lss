
MCU_To_MCU_Bluetooth_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001994  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00001994  00001a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  00800076  00800076  00001a3e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e44  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e47  00000000  00000000  00005bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002585  00000000  00000000  00006a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000870  00000000  00000000  00008f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013ae  00000000  00000000  000097fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033b8  00000000  00000000  0000abaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000df62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_7>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	72 08       	sbc	r7, r2
      56:	7d 08       	sbc	r7, r13
      58:	88 08       	sbc	r8, r8
      5a:	93 08       	sbc	r9, r3
      5c:	9e 08       	sbc	r9, r14
      5e:	a9 08       	sbc	r10, r9
      60:	b4 08       	sbc	r11, r4

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e4 e9       	ldi	r30, 0x94	; 148
      76:	f9 e1       	ldi	r31, 0x19	; 25
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a6 37       	cpi	r26, 0x76	; 118
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	a6 e7       	ldi	r26, 0x76	; 118
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a4 3b       	cpi	r26, 0xB4	; 180
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 3a 0b 	call	0x1674	; 0x1674 <main>
      98:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
      a0:	0f 92       	push	r0
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	0f 92       	push	r0
      a8:	1f 92       	push	r1
      aa:	11 24       	eor	r1, r1
      ac:	2f 92       	push	r2
      ae:	3f 92       	push	r3
      b0:	4f 92       	push	r4
      b2:	5f 92       	push	r5
      b4:	6f 92       	push	r6
      b6:	7f 92       	push	r7
      b8:	8f 92       	push	r8
      ba:	9f 92       	push	r9
      bc:	af 92       	push	r10
      be:	bf 92       	push	r11
      c0:	cf 92       	push	r12
      c2:	df 92       	push	r13
      c4:	ef 92       	push	r14
      c6:	ff 92       	push	r15
      c8:	0f 93       	push	r16
      ca:	1f 93       	push	r17
      cc:	2f 93       	push	r18
      ce:	3f 93       	push	r19
      d0:	4f 93       	push	r20
      d2:	5f 93       	push	r21
      d4:	6f 93       	push	r22
      d6:	7f 93       	push	r23
      d8:	8f 93       	push	r24
      da:	9f 93       	push	r25
      dc:	af 93       	push	r26
      de:	bf 93       	push	r27
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	ef 93       	push	r30
      e6:	ff 93       	push	r31
      e8:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <pxCurrentTCB>
      ec:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <pxCurrentTCB+0x1>
      f0:	0d b6       	in	r0, 0x3d	; 61
      f2:	0d 92       	st	X+, r0
      f4:	0e b6       	in	r0, 0x3e	; 62
      f6:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
      f8:	0e 94 cb 00 	call	0x196	; 0x196 <xTaskIncrementTick>
      fc:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
      fe:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     102:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <pxCurrentTCB>
     106:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <pxCurrentTCB+0x1>
     10a:	cd 91       	ld	r28, X+
     10c:	cd bf       	out	0x3d, r28	; 61
     10e:	dd 91       	ld	r29, X+
     110:	de bf       	out	0x3e, r29	; 62
     112:	ff 91       	pop	r31
     114:	ef 91       	pop	r30
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	bf 91       	pop	r27
     11c:	af 91       	pop	r26
     11e:	9f 91       	pop	r25
     120:	8f 91       	pop	r24
     122:	7f 91       	pop	r23
     124:	6f 91       	pop	r22
     126:	5f 91       	pop	r21
     128:	4f 91       	pop	r20
     12a:	3f 91       	pop	r19
     12c:	2f 91       	pop	r18
     12e:	1f 91       	pop	r17
     130:	0f 91       	pop	r16
     132:	ff 90       	pop	r15
     134:	ef 90       	pop	r14
     136:	df 90       	pop	r13
     138:	cf 90       	pop	r12
     13a:	bf 90       	pop	r11
     13c:	af 90       	pop	r10
     13e:	9f 90       	pop	r9
     140:	8f 90       	pop	r8
     142:	7f 90       	pop	r7
     144:	6f 90       	pop	r6
     146:	5f 90       	pop	r5
     148:	4f 90       	pop	r4
     14a:	3f 90       	pop	r3
     14c:	2f 90       	pop	r2
     14e:	1f 90       	pop	r1
     150:	0f 90       	pop	r0
     152:	0f be       	out	0x3f, r0	; 63
     154:	0f 90       	pop	r0

	asm volatile ( "ret" );
     156:	08 95       	ret

00000158 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     158:	0e 94 50 00 	call	0xa0	; 0xa0 <vPortYieldFromTick>
		asm volatile ( "reti" );
     15c:	18 95       	reti

0000015e <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     15e:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <pxDelayedTaskList>
     162:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <pxDelayedTaskList+0x1>
     166:	80 81       	ld	r24, Z
     168:	81 11       	cpse	r24, r1
     16a:	07 c0       	rjmp	.+14     	; 0x17a <prvResetNextTaskUnblockTime+0x1c>
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	9f ef       	ldi	r25, 0xFF	; 255
     170:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <xNextTaskUnblockTime+0x1>
     174:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <xNextTaskUnblockTime>
     178:	08 95       	ret
     17a:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <pxDelayedTaskList>
     17e:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <pxDelayedTaskList+0x1>
     182:	05 80       	ldd	r0, Z+5	; 0x05
     184:	f6 81       	ldd	r31, Z+6	; 0x06
     186:	e0 2d       	mov	r30, r0
     188:	80 81       	ld	r24, Z
     18a:	91 81       	ldd	r25, Z+1	; 0x01
     18c:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <xNextTaskUnblockTime+0x1>
     190:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <xNextTaskUnblockTime>
     194:	08 95       	ret

00000196 <xTaskIncrementTick>:
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     1a2:	81 11       	cpse	r24, r1
     1a4:	01 c1       	rjmp	.+514    	; 0x3a8 <xTaskIncrementTick+0x212>
     1a6:	c0 91 7e 00 	lds	r28, 0x007E	; 0x80007e <xTickCount>
     1aa:	d0 91 7f 00 	lds	r29, 0x007F	; 0x80007f <xTickCount+0x1>
     1ae:	8e 01       	movw	r16, r28
     1b0:	0f 5f       	subi	r16, 0xFF	; 255
     1b2:	1f 4f       	sbci	r17, 0xFF	; 255
     1b4:	10 93 7f 00 	sts	0x007F, r17	; 0x80007f <xTickCount+0x1>
     1b8:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <xTickCount>
     1bc:	01 15       	cp	r16, r1
     1be:	11 05       	cpc	r17, r1
     1c0:	b9 f4       	brne	.+46     	; 0x1f0 <xTaskIncrementTick+0x5a>
     1c2:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <pxDelayedTaskList>
     1c6:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <pxDelayedTaskList+0x1>
     1ca:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <pxOverflowDelayedTaskList>
     1ce:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <pxOverflowDelayedTaskList+0x1>
     1d2:	30 93 83 00 	sts	0x0083, r19	; 0x800083 <pxDelayedTaskList+0x1>
     1d6:	20 93 82 00 	sts	0x0082, r18	; 0x800082 <pxDelayedTaskList>
     1da:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <pxOverflowDelayedTaskList+0x1>
     1de:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <pxOverflowDelayedTaskList>
     1e2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <xNumOfOverflows>
     1e6:	8f 5f       	subi	r24, 0xFF	; 255
     1e8:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <xNumOfOverflows>
     1ec:	0e 94 af 00 	call	0x15e	; 0x15e <prvResetNextTaskUnblockTime>
     1f0:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <xNextTaskUnblockTime>
     1f4:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <xNextTaskUnblockTime+0x1>
     1f8:	08 17       	cp	r16, r24
     1fa:	19 07       	cpc	r17, r25
     1fc:	20 f4       	brcc	.+8      	; 0x206 <xTaskIncrementTick+0x70>
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	b8 c0       	rjmp	.+368    	; 0x372 <xTaskIncrementTick+0x1dc>
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	01 c0       	rjmp	.+2      	; 0x208 <xTaskIncrementTick+0x72>
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <pxDelayedTaskList>
     20c:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <pxDelayedTaskList+0x1>
     210:	90 81       	ld	r25, Z
     212:	91 11       	cpse	r25, r1
     214:	07 c0       	rjmp	.+14     	; 0x224 <xTaskIncrementTick+0x8e>
     216:	2f ef       	ldi	r18, 0xFF	; 255
     218:	3f ef       	ldi	r19, 0xFF	; 255
     21a:	30 93 78 00 	sts	0x0078, r19	; 0x800078 <xNextTaskUnblockTime+0x1>
     21e:	20 93 77 00 	sts	0x0077, r18	; 0x800077 <xNextTaskUnblockTime>
     222:	a7 c0       	rjmp	.+334    	; 0x372 <xTaskIncrementTick+0x1dc>
     224:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <pxDelayedTaskList>
     228:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <pxDelayedTaskList+0x1>
     22c:	05 80       	ldd	r0, Z+5	; 0x05
     22e:	f6 81       	ldd	r31, Z+6	; 0x06
     230:	e0 2d       	mov	r30, r0
     232:	06 80       	ldd	r0, Z+6	; 0x06
     234:	f7 81       	ldd	r31, Z+7	; 0x07
     236:	e0 2d       	mov	r30, r0
     238:	22 81       	ldd	r18, Z+2	; 0x02
     23a:	33 81       	ldd	r19, Z+3	; 0x03
     23c:	02 17       	cp	r16, r18
     23e:	13 07       	cpc	r17, r19
     240:	28 f4       	brcc	.+10     	; 0x24c <xTaskIncrementTick+0xb6>
     242:	30 93 78 00 	sts	0x0078, r19	; 0x800078 <xNextTaskUnblockTime+0x1>
     246:	20 93 77 00 	sts	0x0077, r18	; 0x800077 <xNextTaskUnblockTime>
     24a:	93 c0       	rjmp	.+294    	; 0x372 <xTaskIncrementTick+0x1dc>
     24c:	a2 85       	ldd	r26, Z+10	; 0x0a
     24e:	b3 85       	ldd	r27, Z+11	; 0x0b
     250:	24 81       	ldd	r18, Z+4	; 0x04
     252:	35 81       	ldd	r19, Z+5	; 0x05
     254:	46 81       	ldd	r20, Z+6	; 0x06
     256:	57 81       	ldd	r21, Z+7	; 0x07
     258:	e9 01       	movw	r28, r18
     25a:	5d 83       	std	Y+5, r21	; 0x05
     25c:	4c 83       	std	Y+4, r20	; 0x04
     25e:	26 81       	ldd	r18, Z+6	; 0x06
     260:	37 81       	ldd	r19, Z+7	; 0x07
     262:	44 81       	ldd	r20, Z+4	; 0x04
     264:	55 81       	ldd	r21, Z+5	; 0x05
     266:	e9 01       	movw	r28, r18
     268:	5b 83       	std	Y+3, r21	; 0x03
     26a:	4a 83       	std	Y+2, r20	; 0x02
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	2d 91       	ld	r18, X+
     270:	3c 91       	ld	r19, X
     272:	12 97       	sbiw	r26, 0x02	; 2
     274:	af 01       	movw	r20, r30
     276:	4e 5f       	subi	r20, 0xFE	; 254
     278:	5f 4f       	sbci	r21, 0xFF	; 255
     27a:	24 17       	cp	r18, r20
     27c:	35 07       	cpc	r19, r21
     27e:	31 f4       	brne	.+12     	; 0x28c <xTaskIncrementTick+0xf6>
     280:	26 81       	ldd	r18, Z+6	; 0x06
     282:	37 81       	ldd	r19, Z+7	; 0x07
     284:	12 96       	adiw	r26, 0x02	; 2
     286:	3c 93       	st	X, r19
     288:	2e 93       	st	-X, r18
     28a:	11 97       	sbiw	r26, 0x01	; 1
     28c:	13 86       	std	Z+11, r1	; 0x0b
     28e:	12 86       	std	Z+10, r1	; 0x0a
     290:	9c 91       	ld	r25, X
     292:	91 50       	subi	r25, 0x01	; 1
     294:	9c 93       	st	X, r25
     296:	a4 89       	ldd	r26, Z+20	; 0x14
     298:	b5 89       	ldd	r27, Z+21	; 0x15
     29a:	10 97       	sbiw	r26, 0x00	; 0
     29c:	19 f1       	breq	.+70     	; 0x2e4 <xTaskIncrementTick+0x14e>
     29e:	26 85       	ldd	r18, Z+14	; 0x0e
     2a0:	37 85       	ldd	r19, Z+15	; 0x0f
     2a2:	60 89       	ldd	r22, Z+16	; 0x10
     2a4:	71 89       	ldd	r23, Z+17	; 0x11
     2a6:	e9 01       	movw	r28, r18
     2a8:	7d 83       	std	Y+5, r23	; 0x05
     2aa:	6c 83       	std	Y+4, r22	; 0x04
     2ac:	20 89       	ldd	r18, Z+16	; 0x10
     2ae:	31 89       	ldd	r19, Z+17	; 0x11
     2b0:	66 85       	ldd	r22, Z+14	; 0x0e
     2b2:	77 85       	ldd	r23, Z+15	; 0x0f
     2b4:	e9 01       	movw	r28, r18
     2b6:	7b 83       	std	Y+3, r23	; 0x03
     2b8:	6a 83       	std	Y+2, r22	; 0x02
     2ba:	11 96       	adiw	r26, 0x01	; 1
     2bc:	6d 91       	ld	r22, X+
     2be:	7c 91       	ld	r23, X
     2c0:	12 97       	sbiw	r26, 0x02	; 2
     2c2:	9f 01       	movw	r18, r30
     2c4:	24 5f       	subi	r18, 0xF4	; 244
     2c6:	3f 4f       	sbci	r19, 0xFF	; 255
     2c8:	62 17       	cp	r22, r18
     2ca:	73 07       	cpc	r23, r19
     2cc:	31 f4       	brne	.+12     	; 0x2da <xTaskIncrementTick+0x144>
     2ce:	20 89       	ldd	r18, Z+16	; 0x10
     2d0:	31 89       	ldd	r19, Z+17	; 0x11
     2d2:	12 96       	adiw	r26, 0x02	; 2
     2d4:	3c 93       	st	X, r19
     2d6:	2e 93       	st	-X, r18
     2d8:	11 97       	sbiw	r26, 0x01	; 1
     2da:	15 8a       	std	Z+21, r1	; 0x15
     2dc:	14 8a       	std	Z+20, r1	; 0x14
     2de:	9c 91       	ld	r25, X
     2e0:	91 50       	subi	r25, 0x01	; 1
     2e2:	9c 93       	st	X, r25
     2e4:	26 89       	ldd	r18, Z+22	; 0x16
     2e6:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <uxTopReadyPriority>
     2ea:	92 17       	cp	r25, r18
     2ec:	10 f4       	brcc	.+4      	; 0x2f2 <xTaskIncrementTick+0x15c>
     2ee:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <uxTopReadyPriority>
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	d9 01       	movw	r26, r18
     2f6:	aa 0f       	add	r26, r26
     2f8:	bb 1f       	adc	r27, r27
     2fa:	aa 0f       	add	r26, r26
     2fc:	bb 1f       	adc	r27, r27
     2fe:	aa 0f       	add	r26, r26
     300:	bb 1f       	adc	r27, r27
     302:	2a 0f       	add	r18, r26
     304:	3b 1f       	adc	r19, r27
     306:	d9 01       	movw	r26, r18
     308:	ac 57       	subi	r26, 0x7C	; 124
     30a:	bf 4f       	sbci	r27, 0xFF	; 255
     30c:	11 96       	adiw	r26, 0x01	; 1
     30e:	0d 90       	ld	r0, X+
     310:	bc 91       	ld	r27, X
     312:	a0 2d       	mov	r26, r0
     314:	b5 83       	std	Z+5, r27	; 0x05
     316:	a4 83       	std	Z+4, r26	; 0x04
     318:	14 96       	adiw	r26, 0x04	; 4
     31a:	2d 91       	ld	r18, X+
     31c:	3c 91       	ld	r19, X
     31e:	15 97       	sbiw	r26, 0x05	; 5
     320:	37 83       	std	Z+7, r19	; 0x07
     322:	26 83       	std	Z+6, r18	; 0x06
     324:	14 96       	adiw	r26, 0x04	; 4
     326:	2d 91       	ld	r18, X+
     328:	3c 91       	ld	r19, X
     32a:	15 97       	sbiw	r26, 0x05	; 5
     32c:	e9 01       	movw	r28, r18
     32e:	5b 83       	std	Y+3, r21	; 0x03
     330:	4a 83       	std	Y+2, r20	; 0x02
     332:	15 96       	adiw	r26, 0x05	; 5
     334:	5c 93       	st	X, r21
     336:	4e 93       	st	-X, r20
     338:	14 97       	sbiw	r26, 0x04	; 4
     33a:	a6 89       	ldd	r26, Z+22	; 0x16
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	9d 01       	movw	r18, r26
     340:	22 0f       	add	r18, r18
     342:	33 1f       	adc	r19, r19
     344:	22 0f       	add	r18, r18
     346:	33 1f       	adc	r19, r19
     348:	22 0f       	add	r18, r18
     34a:	33 1f       	adc	r19, r19
     34c:	a2 0f       	add	r26, r18
     34e:	b3 1f       	adc	r27, r19
     350:	ac 57       	subi	r26, 0x7C	; 124
     352:	bf 4f       	sbci	r27, 0xFF	; 255
     354:	b3 87       	std	Z+11, r27	; 0x0b
     356:	a2 87       	std	Z+10, r26	; 0x0a
     358:	9c 91       	ld	r25, X
     35a:	9f 5f       	subi	r25, 0xFF	; 255
     35c:	9c 93       	st	X, r25
     35e:	26 89       	ldd	r18, Z+22	; 0x16
     360:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <pxCurrentTCB>
     364:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <pxCurrentTCB+0x1>
     368:	96 89       	ldd	r25, Z+22	; 0x16
     36a:	29 17       	cp	r18, r25
     36c:	08 f0       	brcs	.+2      	; 0x370 <xTaskIncrementTick+0x1da>
     36e:	49 cf       	rjmp	.-366    	; 0x202 <xTaskIncrementTick+0x6c>
     370:	4b cf       	rjmp	.-362    	; 0x208 <xTaskIncrementTick+0x72>
     372:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <pxCurrentTCB>
     376:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <pxCurrentTCB+0x1>
     37a:	26 89       	ldd	r18, Z+22	; 0x16
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	f9 01       	movw	r30, r18
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	ee 0f       	add	r30, r30
     386:	ff 1f       	adc	r31, r31
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	2e 0f       	add	r18, r30
     38e:	3f 1f       	adc	r19, r31
     390:	f9 01       	movw	r30, r18
     392:	ec 57       	subi	r30, 0x7C	; 124
     394:	ff 4f       	sbci	r31, 0xFF	; 255
     396:	90 81       	ld	r25, Z
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	08 f0       	brcs	.+2      	; 0x39e <xTaskIncrementTick+0x208>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <xYieldPending>
     3a2:	91 11       	cpse	r25, r1
     3a4:	0c c0       	rjmp	.+24     	; 0x3be <xTaskIncrementTick+0x228>
     3a6:	0c c0       	rjmp	.+24     	; 0x3c0 <xTaskIncrementTick+0x22a>
     3a8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <xPendedTicks>
     3ac:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <xPendedTicks+0x1>
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <xPendedTicks+0x1>
     3b6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <xPendedTicks>
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <xTaskIncrementTick+0x22a>
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     3ca:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     3ce:	88 23       	and	r24, r24
     3d0:	21 f0       	breq	.+8      	; 0x3da <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <xYieldPending>
     3d8:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     3da:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     3de:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <uxTopReadyPriority>
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <vTaskSwitchContext+0x1c>
     3e4:	21 50       	subi	r18, 0x01	; 1
     3e6:	82 2f       	mov	r24, r18
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	fc 01       	movw	r30, r24
     3ec:	ee 0f       	add	r30, r30
     3ee:	ff 1f       	adc	r31, r31
     3f0:	ee 0f       	add	r30, r30
     3f2:	ff 1f       	adc	r31, r31
     3f4:	ee 0f       	add	r30, r30
     3f6:	ff 1f       	adc	r31, r31
     3f8:	e8 0f       	add	r30, r24
     3fa:	f9 1f       	adc	r31, r25
     3fc:	ec 57       	subi	r30, 0x7C	; 124
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	30 81       	ld	r19, Z
     402:	33 23       	and	r19, r19
     404:	79 f3       	breq	.-34     	; 0x3e4 <vTaskSwitchContext+0x1a>
     406:	ac 01       	movw	r20, r24
     408:	44 0f       	add	r20, r20
     40a:	55 1f       	adc	r21, r21
     40c:	44 0f       	add	r20, r20
     40e:	55 1f       	adc	r21, r21
     410:	44 0f       	add	r20, r20
     412:	55 1f       	adc	r21, r21
     414:	48 0f       	add	r20, r24
     416:	59 1f       	adc	r21, r25
     418:	df 01       	movw	r26, r30
     41a:	01 80       	ldd	r0, Z+1	; 0x01
     41c:	f2 81       	ldd	r31, Z+2	; 0x02
     41e:	e0 2d       	mov	r30, r0
     420:	02 80       	ldd	r0, Z+2	; 0x02
     422:	f3 81       	ldd	r31, Z+3	; 0x03
     424:	e0 2d       	mov	r30, r0
     426:	12 96       	adiw	r26, 0x02	; 2
     428:	fc 93       	st	X, r31
     42a:	ee 93       	st	-X, r30
     42c:	11 97       	sbiw	r26, 0x01	; 1
     42e:	49 57       	subi	r20, 0x79	; 121
     430:	5f 4f       	sbci	r21, 0xFF	; 255
     432:	e4 17       	cp	r30, r20
     434:	f5 07       	cpc	r31, r21
     436:	29 f4       	brne	.+10     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     438:	42 81       	ldd	r20, Z+2	; 0x02
     43a:	53 81       	ldd	r21, Z+3	; 0x03
     43c:	fd 01       	movw	r30, r26
     43e:	52 83       	std	Z+2, r21	; 0x02
     440:	41 83       	std	Z+1, r20	; 0x01
     442:	fc 01       	movw	r30, r24
     444:	ee 0f       	add	r30, r30
     446:	ff 1f       	adc	r31, r31
     448:	ee 0f       	add	r30, r30
     44a:	ff 1f       	adc	r31, r31
     44c:	ee 0f       	add	r30, r30
     44e:	ff 1f       	adc	r31, r31
     450:	8e 0f       	add	r24, r30
     452:	9f 1f       	adc	r25, r31
     454:	fc 01       	movw	r30, r24
     456:	ec 57       	subi	r30, 0x7C	; 124
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	01 80       	ldd	r0, Z+1	; 0x01
     45c:	f2 81       	ldd	r31, Z+2	; 0x02
     45e:	e0 2d       	mov	r30, r0
     460:	86 81       	ldd	r24, Z+6	; 0x06
     462:	97 81       	ldd	r25, Z+7	; 0x07
     464:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <pxCurrentTCB+0x1>
     468:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <pxCurrentTCB>
     46c:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <uxTopReadyPriority>
     470:	08 95       	ret

00000472 <LCD_SendCommand>:

/*Externed global variables*/
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	c8 2f       	mov	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	switch(State)
     47c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <State.1714>
     480:	83 30       	cpi	r24, 0x03	; 3
     482:	09 f4       	brne	.+2      	; 0x486 <LCD_SendCommand+0x14>
     484:	cc c0       	rjmp	.+408    	; 0x61e <LCD_SendCommand+0x1ac>
     486:	38 f4       	brcc	.+14     	; 0x496 <LCD_SendCommand+0x24>
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	09 f4       	brne	.+2      	; 0x48e <LCD_SendCommand+0x1c>
     48c:	5f c0       	rjmp	.+190    	; 0x54c <LCD_SendCommand+0xda>
     48e:	82 30       	cpi	r24, 0x02	; 2
     490:	09 f4       	brne	.+2      	; 0x494 <LCD_SendCommand+0x22>
     492:	80 c0       	rjmp	.+256    	; 0x594 <LCD_SendCommand+0x122>
     494:	ff c0       	rjmp	.+510    	; 0x694 <LCD_SendCommand+0x222>
     496:	84 30       	cpi	r24, 0x04	; 4
     498:	09 f4       	brne	.+2      	; 0x49c <LCD_SendCommand+0x2a>
     49a:	e4 c0       	rjmp	.+456    	; 0x664 <LCD_SendCommand+0x1f2>
     49c:	8f 3f       	cpi	r24, 0xFF	; 255
     49e:	09 f0       	breq	.+2      	; 0x4a2 <LCD_SendCommand+0x30>
     4a0:	f9 c0       	rjmp	.+498    	; 0x694 <LCD_SendCommand+0x222>
	{
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     4a2:	04 e6       	ldi	r16, 0x64	; 100
     4a4:	10 e0       	ldi	r17, 0x00	; 0
     4a6:	f8 01       	movw	r30, r16
     4a8:	d0 81       	ld	r29, Z
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	61 81       	ldd	r22, Z+1	; 0x01
     4ae:	8d 2f       	mov	r24, r29
     4b0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     4b4:	40 e0       	ldi	r20, 0x00	; 0
     4b6:	f8 01       	movw	r30, r16
     4b8:	62 81       	ldd	r22, Z+2	; 0x02
     4ba:	8d 2f       	mov	r24, r29
     4bc:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(CMD, BIT_4));
     4c0:	4c 2f       	mov	r20, r28
     4c2:	40 71       	andi	r20, 0x10	; 16
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	55 95       	asr	r21
     4c8:	47 95       	ror	r20
     4ca:	55 95       	asr	r21
     4cc:	47 95       	ror	r20
     4ce:	55 95       	asr	r21
     4d0:	47 95       	ror	r20
     4d2:	55 95       	asr	r21
     4d4:	47 95       	ror	r20
     4d6:	f8 01       	movw	r30, r16
     4d8:	67 81       	ldd	r22, Z+7	; 0x07
     4da:	8d 2f       	mov	r24, r29
     4dc:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(CMD, BIT_5));
     4e0:	4c 2f       	mov	r20, r28
     4e2:	40 72       	andi	r20, 0x20	; 32
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	55 95       	asr	r21
     4e8:	47 95       	ror	r20
     4ea:	55 95       	asr	r21
     4ec:	47 95       	ror	r20
     4ee:	55 95       	asr	r21
     4f0:	47 95       	ror	r20
     4f2:	55 95       	asr	r21
     4f4:	47 95       	ror	r20
     4f6:	55 95       	asr	r21
     4f8:	47 95       	ror	r20
     4fa:	f8 01       	movw	r30, r16
     4fc:	66 81       	ldd	r22, Z+6	; 0x06
     4fe:	8d 2f       	mov	r24, r29
     500:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(CMD, BIT_6));
     504:	4c 2f       	mov	r20, r28
     506:	40 74       	andi	r20, 0x40	; 64
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	04 2e       	mov	r0, r20
     50c:	45 2f       	mov	r20, r21
     50e:	00 0c       	add	r0, r0
     510:	44 1f       	adc	r20, r20
     512:	55 0b       	sbc	r21, r21
     514:	00 0c       	add	r0, r0
     516:	44 1f       	adc	r20, r20
     518:	55 1f       	adc	r21, r21
     51a:	f8 01       	movw	r30, r16
     51c:	65 81       	ldd	r22, Z+5	; 0x05
     51e:	8d 2f       	mov	r24, r29
     520:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(CMD, BIT_7));
     524:	4c 2f       	mov	r20, r28
     526:	44 1f       	adc	r20, r20
     528:	44 27       	eor	r20, r20
     52a:	44 1f       	adc	r20, r20
     52c:	f8 01       	movw	r30, r16
     52e:	64 81       	ldd	r22, Z+4	; 0x04
     530:	8d 2f       	mov	r24, r29
     532:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     536:	41 e0       	ldi	r20, 0x01	; 1
     538:	f8 01       	movw	r30, r16
     53a:	63 81       	ldd	r22, Z+3	; 0x03
     53c:	8d 2f       	mov	r24, r29
     53e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1714>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     548:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(CMD, BIT_7));
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     54a:	ab c0       	rjmp	.+342    	; 0x6a2 <LCD_SendCommand+0x230>
	case Sending_First_Nibble:
		/*start timer delay in background*/
		if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     54c:	69 e3       	ldi	r22, 0x39	; 57
     54e:	72 e0       	ldi	r23, 0x02	; 2
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     556:	8b 3f       	cpi	r24, 0xFB	; 251
     558:	09 f0       	breq	.+2      	; 0x55c <LCD_SendCommand+0xea>
     55a:	9e c0       	rjmp	.+316    	; 0x698 <LCD_SendCommand+0x226>
		{
   		TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendCommand);
     55c:	29 e3       	ldi	r18, 0x39	; 57
     55e:	32 e0       	ldi	r19, 0x02	; 2
     560:	41 e0       	ldi	r20, 0x01	; 1
     562:	50 e0       	ldi	r21, 0x00	; 0
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	0e 94 cc 09 	call	0x1398	; 0x1398 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     56e:	69 e3       	ldi	r22, 0x39	; 57
     570:	72 e0       	ldi	r23, 0x02	; 2
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     578:	81 11       	cpse	r24, r1
     57a:	f9 cf       	rjmp	.-14     	; 0x56e <LCD_SendCommand+0xfc>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     57c:	e4 e6       	ldi	r30, 0x64	; 100
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	63 81       	ldd	r22, Z+3	; 0x03
     584:	80 81       	ld	r24, Z
     586:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1714>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     590:	8f ef       	ldi	r24, 0xFF	; 255
     592:	87 c0       	rjmp	.+270    	; 0x6a2 <LCD_SendCommand+0x230>
         State = First_Nibble_Sent;
		}
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs,PIN_LOW);
     594:	04 e6       	ldi	r16, 0x64	; 100
     596:	10 e0       	ldi	r17, 0x00	; 0
     598:	f8 01       	movw	r30, r16
     59a:	d0 81       	ld	r29, Z
     59c:	40 e0       	ldi	r20, 0x00	; 0
     59e:	61 81       	ldd	r22, Z+1	; 0x01
     5a0:	8d 2f       	mov	r24, r29
     5a2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw,PIN_LOW);
     5a6:	40 e0       	ldi	r20, 0x00	; 0
     5a8:	f8 01       	movw	r30, r16
     5aa:	62 81       	ldd	r22, Z+2	; 0x02
     5ac:	8d 2f       	mov	r24, r29
     5ae:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		/*copying lower nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(CMD,BIT_0));
     5b2:	4c 2f       	mov	r20, r28
     5b4:	41 70       	andi	r20, 0x01	; 1
     5b6:	f8 01       	movw	r30, r16
     5b8:	67 81       	ldd	r22, Z+7	; 0x07
     5ba:	8d 2f       	mov	r24, r29
     5bc:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(CMD,BIT_1));
     5c0:	4c 2f       	mov	r20, r28
     5c2:	42 70       	andi	r20, 0x02	; 2
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	55 95       	asr	r21
     5c8:	47 95       	ror	r20
     5ca:	f8 01       	movw	r30, r16
     5cc:	66 81       	ldd	r22, Z+6	; 0x06
     5ce:	8d 2f       	mov	r24, r29
     5d0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(CMD,BIT_2));
     5d4:	4c 2f       	mov	r20, r28
     5d6:	44 70       	andi	r20, 0x04	; 4
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	55 95       	asr	r21
     5dc:	47 95       	ror	r20
     5de:	55 95       	asr	r21
     5e0:	47 95       	ror	r20
     5e2:	f8 01       	movw	r30, r16
     5e4:	65 81       	ldd	r22, Z+5	; 0x05
     5e6:	8d 2f       	mov	r24, r29
     5e8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_3));
     5ec:	c8 70       	andi	r28, 0x08	; 8
     5ee:	4c 2f       	mov	r20, r28
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	55 95       	asr	r21
     5f4:	47 95       	ror	r20
     5f6:	55 95       	asr	r21
     5f8:	47 95       	ror	r20
     5fa:	55 95       	asr	r21
     5fc:	47 95       	ror	r20
     5fe:	f8 01       	movw	r30, r16
     600:	64 81       	ldd	r22, Z+4	; 0x04
     602:	8d 2f       	mov	r24, r29
     604:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
     608:	41 e0       	ldi	r20, 0x01	; 1
     60a:	f8 01       	movw	r30, r16
     60c:	63 81       	ldd	r22, Z+3	; 0x03
     60e:	8d 2f       	mov	r24, r29
     610:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1714>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_3));
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     61c:	42 c0       	rjmp	.+132    	; 0x6a2 <LCD_SendCommand+0x230>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     61e:	69 e3       	ldi	r22, 0x39	; 57
     620:	72 e0       	ldi	r23, 0x02	; 2
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     628:	8b 3f       	cpi	r24, 0xFB	; 251
     62a:	c1 f5       	brne	.+112    	; 0x69c <LCD_SendCommand+0x22a>
      {
         TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendCommand);
     62c:	29 e3       	ldi	r18, 0x39	; 57
     62e:	32 e0       	ldi	r19, 0x02	; 2
     630:	41 e0       	ldi	r20, 0x01	; 1
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	0e 94 cc 09 	call	0x1398	; 0x1398 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     63e:	69 e3       	ldi	r22, 0x39	; 57
     640:	72 e0       	ldi	r23, 0x02	; 2
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     648:	81 11       	cpse	r24, r1
     64a:	f9 cf       	rjmp	.-14     	; 0x63e <LCD_SendCommand+0x1cc>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_LOW);
     64c:	e4 e6       	ldi	r30, 0x64	; 100
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	63 81       	ldd	r22, Z+3	; 0x03
     654:	80 81       	ld	r24, Z
     656:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
         /*reset the function's state*/
         State = Second_Nibble_Sent;
     65a:	84 e0       	ldi	r24, 0x04	; 4
     65c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1714>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     660:	8f ef       	ldi	r24, 0xFF	; 255
     662:	1f c0       	rjmp	.+62     	; 0x6a2 <LCD_SendCommand+0x230>
         State = Second_Nibble_Sent;
      }
		break;
	case Second_Nibble_Sent:
		/*start timer delay in background*/
      TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
     664:	69 e3       	ldi	r22, 0x39	; 57
     666:	72 e0       	ldi	r23, 0x02	; 2
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     66e:	c8 2f       	mov	r28, r24
      if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     670:	8b 3f       	cpi	r24, 0xFB	; 251
     672:	49 f4       	brne	.+18     	; 0x686 <LCD_SendCommand+0x214>
      {
         TIM_DelayMs(TIMER_2,2, (void (*)(void))LCD_SendCommand);
     674:	29 e3       	ldi	r18, 0x39	; 57
     676:	32 e0       	ldi	r19, 0x02	; 2
     678:	42 e0       	ldi	r20, 0x02	; 2
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	0e 94 4a 0a 	call	0x1494	; 0x1494 <TIM_DelayMs>
      }         
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     686:	c1 11       	cpse	r28, r1
     688:	0b c0       	rjmp	.+22     	; 0x6a0 <LCD_SendCommand+0x22e>
		{
			/*reset the function's state*/
			State = OperationStarted;
     68a:	8f ef       	ldi	r24, 0xFF	; 255
     68c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1714>
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	07 c0       	rjmp	.+14     	; 0x6a2 <LCD_SendCommand+0x230>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	05 c0       	rjmp	.+10     	; 0x6a2 <LCD_SendCommand+0x230>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <LCD_SendCommand+0x230>
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <LCD_SendCommand+0x230>
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
	default:
		ErrRetVal = OperationFail;
	}
	/*return from function*/
return ErrRetVal;
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	08 95       	ret

000006ac <LCD_ReadDispLoc>:
      }
   }
	return ErrRetVal;
}
ERROR_STATE_t LCD_ReadDispLoc(uint8_t Location, uint8_t* Data)
{
     6ac:	9f 92       	push	r9
     6ae:	af 92       	push	r10
     6b0:	bf 92       	push	r11
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	1f 92       	push	r1
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	6b 01       	movw	r12, r22
	uint8_t ErrRetVal = OperationStarted;
	uint8_t BitVal = 0;
     6ca:	19 82       	std	Y+1, r1	; 0x01
	uint8_t static State = Sending_Character_Location;
	uint8_t static Character = 0;
	switch(State)
     6cc:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6d0:	95 30       	cpi	r25, 0x05	; 5
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <LCD_ReadDispLoc+0x2a>
     6d4:	10 c1       	rjmp	.+544    	; 0x8f6 <__stack+0x97>
     6d6:	38 f4       	brcc	.+14     	; 0x6e6 <LCD_ReadDispLoc+0x3a>
     6d8:	93 30       	cpi	r25, 0x03	; 3
     6da:	09 f4       	brne	.+2      	; 0x6de <LCD_ReadDispLoc+0x32>
     6dc:	95 c0       	rjmp	.+298    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     6de:	94 30       	cpi	r25, 0x04	; 4
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <LCD_ReadDispLoc+0x38>
     6e2:	b6 c0       	rjmp	.+364    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     6e4:	4a c1       	rjmp	.+660    	; 0x97a <__stack+0x11b>
     6e6:	96 30       	cpi	r25, 0x06	; 6
     6e8:	19 f0       	breq	.+6      	; 0x6f0 <LCD_ReadDispLoc+0x44>
     6ea:	9f 3f       	cpi	r25, 0xFF	; 255
     6ec:	49 f0       	breq	.+18     	; 0x700 <LCD_ReadDispLoc+0x54>
     6ee:	45 c1       	rjmp	.+650    	; 0x97a <__stack+0x11b>
	{
		case Sending_Character_Location:
		if(LCD_SendCommand(Location) == OperationSuccess)
     6f0:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
     6f4:	81 11       	cpse	r24, r1
     6f6:	43 c1       	rjmp	.+646    	; 0x97e <__stack+0x11f>
		{
			State = OperationStarted;
     6f8:	8f ef       	ldi	r24, 0xFF	; 255
     6fa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     6fe:	44 c1       	rjmp	.+648    	; 0x988 <__stack+0x129>
		}
		break;
		case OperationStarted:
			Character = 0;
     700:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <Character.1803>
			/*Dio Initialize for the*/
			DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_INPUT);
     704:	0f 2e       	mov	r0, r31
     706:	f4 e6       	ldi	r31, 0x64	; 100
     708:	ef 2e       	mov	r14, r31
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	ff 2e       	mov	r15, r31
     70e:	f0 2d       	mov	r31, r0
     710:	f7 01       	movw	r30, r14
     712:	b4 80       	ldd	r11, Z+4	; 0x04
     714:	10 81       	ld	r17, Z
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	6b 2d       	mov	r22, r11
     71a:	81 2f       	mov	r24, r17
     71c:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
			DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_INPUT);
     720:	f7 01       	movw	r30, r14
     722:	c5 80       	ldd	r12, Z+5	; 0x05
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	6c 2d       	mov	r22, r12
     728:	81 2f       	mov	r24, r17
     72a:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
			DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_INPUT);
     72e:	f7 01       	movw	r30, r14
     730:	d6 80       	ldd	r13, Z+6	; 0x06
     732:	40 e0       	ldi	r20, 0x00	; 0
     734:	6d 2d       	mov	r22, r13
     736:	81 2f       	mov	r24, r17
     738:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
			DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_INPUT);
     73c:	f7 01       	movw	r30, r14
     73e:	07 81       	ldd	r16, Z+7	; 0x07
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	60 2f       	mov	r22, r16
     744:	81 2f       	mov	r24, r17
     746:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
			DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     74a:	f7 01       	movw	r30, r14
     74c:	91 80       	ldd	r9, Z+1	; 0x01
     74e:	41 e0       	ldi	r20, 0x01	; 1
     750:	69 2d       	mov	r22, r9
     752:	81 2f       	mov	r24, r17
     754:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
			DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     758:	f7 01       	movw	r30, r14
     75a:	a2 80       	ldd	r10, Z+2	; 0x02
     75c:	41 e0       	ldi	r20, 0x01	; 1
     75e:	6a 2d       	mov	r22, r10
     760:	81 2f       	mov	r24, r17
     762:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
			DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     766:	f7 01       	movw	r30, r14
     768:	f3 80       	ldd	r15, Z+3	; 0x03
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	6f 2d       	mov	r22, r15
     76e:	81 2f       	mov	r24, r17
     770:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
			/*sending control signals with configurations of selection of control reg. and write process*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	69 2d       	mov	r22, r9
     778:	81 2f       	mov	r24, r17
     77a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_HIGH);
     77e:	41 e0       	ldi	r20, 0x01	; 1
     780:	6a 2d       	mov	r22, r10
     782:	81 2f       	mov	r24, r17
     784:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
			/*writing data to the register by pulling the enable pin high for 1 Us*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	6f 2d       	mov	r22, r15
     78c:	81 2f       	mov	r24, r17
     78e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
			/*getting first nibble*/
			DIO_ReadPin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, &BitVal);
     792:	ae 01       	movw	r20, r28
     794:	4f 5f       	subi	r20, 0xFF	; 255
     796:	5f 4f       	sbci	r21, 0xFF	; 255
     798:	6b 2d       	mov	r22, r11
     79a:	81 2f       	mov	r24, r17
     79c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DIO_ReadPin>
			(Character) |= BitVal;
     7a0:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Character.1803>
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	89 2b       	or	r24, r25
			(Character) <<= 1;
     7a8:	88 0f       	add	r24, r24
     7aa:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Character.1803>
			DIO_ReadPin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, &BitVal);
     7ae:	ae 01       	movw	r20, r28
     7b0:	4f 5f       	subi	r20, 0xFF	; 255
     7b2:	5f 4f       	sbci	r21, 0xFF	; 255
     7b4:	6c 2d       	mov	r22, r12
     7b6:	81 2f       	mov	r24, r17
     7b8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DIO_ReadPin>
			(Character) |= BitVal;
     7bc:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Character.1803>
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	89 2b       	or	r24, r25
			(Character) <<= 1;
     7c4:	88 0f       	add	r24, r24
     7c6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Character.1803>
			DIO_ReadPin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, &BitVal);
     7ca:	ae 01       	movw	r20, r28
     7cc:	4f 5f       	subi	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	6d 2d       	mov	r22, r13
     7d2:	81 2f       	mov	r24, r17
     7d4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DIO_ReadPin>
			(Character) |= BitVal;
     7d8:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Character.1803>
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	89 2b       	or	r24, r25
			(Character) <<= 1;
     7e0:	88 0f       	add	r24, r24
     7e2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Character.1803>
			DIO_ReadPin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, &BitVal);
     7e6:	ae 01       	movw	r20, r28
     7e8:	4f 5f       	subi	r20, 0xFF	; 255
     7ea:	5f 4f       	sbci	r21, 0xFF	; 255
     7ec:	60 2f       	mov	r22, r16
     7ee:	81 2f       	mov	r24, r17
     7f0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DIO_ReadPin>
			(Character) |= BitVal;
     7f4:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Character.1803>
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	89 2b       	or	r24, r25
			(Character) <<= 1;
     7fc:	88 0f       	add	r24, r24
     7fe:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Character.1803>
			/*set status of the function*/
			State = Reading_First_Nibble;
     802:	83 e0       	ldi	r24, 0x03	; 3
     804:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		case Reading_First_Nibble:
		/*start timer delay in background*/
			if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_ReadDispLoc))
     808:	66 e5       	ldi	r22, 0x56	; 86
     80a:	73 e0       	ldi	r23, 0x03	; 3
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     812:	8b 3f       	cpi	r24, 0xFB	; 251
     814:	09 f0       	breq	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     816:	b5 c0       	rjmp	.+362    	; 0x982 <__stack+0x123>
			{
				TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_ReadDispLoc);
     818:	26 e5       	ldi	r18, 0x56	; 86
     81a:	33 e0       	ldi	r19, 0x03	; 3
     81c:	41 e0       	ldi	r20, 0x01	; 1
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	0e 94 cc 09 	call	0x1398	; 0x1398 <TIM_DelayUs>
				while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_ReadDispLoc));
     82a:	66 e5       	ldi	r22, 0x56	; 86
     82c:	73 e0       	ldi	r23, 0x03	; 3
     82e:	82 e0       	ldi	r24, 0x02	; 2
     830:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     834:	81 11       	cpse	r24, r1
     836:	f9 cf       	rjmp	.-14     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
				/*if timer delay function finished correctly pull enable pin low*/
				DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     838:	e4 e6       	ldi	r30, 0x64	; 100
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	63 81       	ldd	r22, Z+3	; 0x03
     840:	80 81       	ld	r24, Z
     842:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
				State = Reading_Second_Nibble;
     846:	84 e0       	ldi	r24, 0x04	; 4
     848:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
   }
	return ErrRetVal;
}
ERROR_STATE_t LCD_ReadDispLoc(uint8_t Location, uint8_t* Data)
{
	uint8_t ErrRetVal = OperationStarted;
     84c:	8f ef       	ldi	r24, 0xFF	; 255
     84e:	9c c0       	rjmp	.+312    	; 0x988 <__stack+0x129>
				State = Reading_Second_Nibble;
			}
		break;
		case Reading_Second_Nibble:
			/*sending control signals with configurations of selection of control reg. and write process*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     850:	04 e6       	ldi	r16, 0x64	; 100
     852:	10 e0       	ldi	r17, 0x00	; 0
     854:	f8 01       	movw	r30, r16
     856:	f0 80       	ld	r15, Z
     858:	41 e0       	ldi	r20, 0x01	; 1
     85a:	61 81       	ldd	r22, Z+1	; 0x01
     85c:	8f 2d       	mov	r24, r15
     85e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_HIGH);
     862:	41 e0       	ldi	r20, 0x01	; 1
     864:	f8 01       	movw	r30, r16
     866:	62 81       	ldd	r22, Z+2	; 0x02
     868:	8f 2d       	mov	r24, r15
     86a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
			/*writing data to the register by pulling the enable pin high for 1 Us*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     86e:	41 e0       	ldi	r20, 0x01	; 1
     870:	f8 01       	movw	r30, r16
     872:	63 81       	ldd	r22, Z+3	; 0x03
     874:	8f 2d       	mov	r24, r15
     876:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
			/*getting first nibble*/
			DIO_ReadPin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, &BitVal);
     87a:	ae 01       	movw	r20, r28
     87c:	4f 5f       	subi	r20, 0xFF	; 255
     87e:	5f 4f       	sbci	r21, 0xFF	; 255
     880:	f8 01       	movw	r30, r16
     882:	64 81       	ldd	r22, Z+4	; 0x04
     884:	8f 2d       	mov	r24, r15
     886:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DIO_ReadPin>
			(Character) |= BitVal;
     88a:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Character.1803>
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	89 2b       	or	r24, r25
			(Character) <<= 1;
     892:	88 0f       	add	r24, r24
     894:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Character.1803>
			DIO_ReadPin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, &BitVal);
     898:	ae 01       	movw	r20, r28
     89a:	4f 5f       	subi	r20, 0xFF	; 255
     89c:	5f 4f       	sbci	r21, 0xFF	; 255
     89e:	f8 01       	movw	r30, r16
     8a0:	65 81       	ldd	r22, Z+5	; 0x05
     8a2:	8f 2d       	mov	r24, r15
     8a4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DIO_ReadPin>
			(Character) |= BitVal;
     8a8:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Character.1803>
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	89 2b       	or	r24, r25
			(Character) <<= 1;
     8b0:	88 0f       	add	r24, r24
     8b2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Character.1803>
			DIO_ReadPin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, &BitVal);
     8b6:	ae 01       	movw	r20, r28
     8b8:	4f 5f       	subi	r20, 0xFF	; 255
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	f8 01       	movw	r30, r16
     8be:	66 81       	ldd	r22, Z+6	; 0x06
     8c0:	8f 2d       	mov	r24, r15
     8c2:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DIO_ReadPin>
			(Character) |= BitVal;
     8c6:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Character.1803>
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	89 2b       	or	r24, r25
			(Character) <<= 1;
     8ce:	88 0f       	add	r24, r24
     8d0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Character.1803>
			DIO_ReadPin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, &BitVal);
     8d4:	ae 01       	movw	r20, r28
     8d6:	4f 5f       	subi	r20, 0xFF	; 255
     8d8:	5f 4f       	sbci	r21, 0xFF	; 255
     8da:	f8 01       	movw	r30, r16
     8dc:	67 81       	ldd	r22, Z+7	; 0x07
     8de:	8f 2d       	mov	r24, r15
     8e0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DIO_ReadPin>
			(Character) |= BitVal;
     8e4:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Character.1803>
     8e8:	89 81       	ldd	r24, Y+1	; 0x01
     8ea:	89 2b       	or	r24, r25
     8ec:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Character.1803>
			/*set status of the function*/
			State = Reading_Second_Nibble_Done;
     8f0:	85 e0       	ldi	r24, 0x05	; 5
     8f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			case Reading_Second_Nibble_Done:
			/*start timer delay in background*/
			if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_ReadDispLoc))
     8f6:	66 e5       	ldi	r22, 0x56	; 86
     8f8:	73 e0       	ldi	r23, 0x03	; 3
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     900:	8b 3f       	cpi	r24, 0xFB	; 251
     902:	09 f0       	breq	.+2      	; 0x906 <__stack+0xa7>
     904:	40 c0       	rjmp	.+128    	; 0x986 <__stack+0x127>
			{
				TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_ReadDispLoc);
     906:	26 e5       	ldi	r18, 0x56	; 86
     908:	33 e0       	ldi	r19, 0x03	; 3
     90a:	41 e0       	ldi	r20, 0x01	; 1
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	82 e0       	ldi	r24, 0x02	; 2
     914:	0e 94 cc 09 	call	0x1398	; 0x1398 <TIM_DelayUs>
				while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_ReadDispLoc));
     918:	66 e5       	ldi	r22, 0x56	; 86
     91a:	73 e0       	ldi	r23, 0x03	; 3
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     922:	81 11       	cpse	r24, r1
     924:	f9 cf       	rjmp	.-14     	; 0x918 <__stack+0xb9>
				/*if timer delay function finished correctly pull enable pin low*/
				DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     926:	04 e6       	ldi	r16, 0x64	; 100
     928:	10 e0       	ldi	r17, 0x00	; 0
     92a:	f8 01       	movw	r30, r16
     92c:	f0 80       	ld	r15, Z
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	63 81       	ldd	r22, Z+3	; 0x03
     932:	8f 2d       	mov	r24, r15
     934:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
				/*reset the function's state*/
				State = Sending_Character_Location;
     938:	86 e0       	ldi	r24, 0x06	; 6
     93a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				/*process finished successfully*/
				ErrRetVal = OperationSuccess;
				DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	f8 01       	movw	r30, r16
     942:	64 81       	ldd	r22, Z+4	; 0x04
     944:	8f 2d       	mov	r24, r15
     946:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
				DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     94a:	41 e0       	ldi	r20, 0x01	; 1
     94c:	f8 01       	movw	r30, r16
     94e:	65 81       	ldd	r22, Z+5	; 0x05
     950:	8f 2d       	mov	r24, r15
     952:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
				DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     956:	41 e0       	ldi	r20, 0x01	; 1
     958:	f8 01       	movw	r30, r16
     95a:	66 81       	ldd	r22, Z+6	; 0x06
     95c:	8f 2d       	mov	r24, r15
     95e:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
				DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     962:	41 e0       	ldi	r20, 0x01	; 1
     964:	f8 01       	movw	r30, r16
     966:	67 81       	ldd	r22, Z+7	; 0x07
     968:	8f 2d       	mov	r24, r15
     96a:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
				*Data = Character;
     96e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Character.1803>
     972:	f6 01       	movw	r30, r12
     974:	80 83       	st	Z, r24
				/*if timer delay function finished correctly pull enable pin low*/
				DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
				/*reset the function's state*/
				State = Sending_Character_Location;
				/*process finished successfully*/
				ErrRetVal = OperationSuccess;
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	07 c0       	rjmp	.+14     	; 0x988 <__stack+0x129>
   }
	return ErrRetVal;
}
ERROR_STATE_t LCD_ReadDispLoc(uint8_t Location, uint8_t* Data)
{
	uint8_t ErrRetVal = OperationStarted;
     97a:	8f ef       	ldi	r24, 0xFF	; 255
     97c:	05 c0       	rjmp	.+10     	; 0x988 <__stack+0x129>
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	03 c0       	rjmp	.+6      	; 0x988 <__stack+0x129>
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	01 c0       	rjmp	.+2      	; 0x988 <__stack+0x129>
     986:	8f ef       	ldi	r24, 0xFF	; 255
				DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
				*Data = Character;
			}
	}
	return ErrRetVal;
     988:	0f 90       	pop	r0
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	bf 90       	pop	r11
     99c:	af 90       	pop	r10
     99e:	9f 90       	pop	r9
     9a0:	08 95       	ret

000009a2 <LCD_SendData>:
	}
	/*return from function*/
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	c8 2f       	mov	r28, r24
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	switch (State) {
     9ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <State.1741>
     9b0:	82 30       	cpi	r24, 0x02	; 2
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <LCD_SendData+0x14>
     9b4:	84 c0       	rjmp	.+264    	; 0xabe <LCD_SendData+0x11c>
     9b6:	20 f4       	brcc	.+8      	; 0x9c0 <LCD_SendData+0x1e>
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	09 f4       	brne	.+2      	; 0x9be <LCD_SendData+0x1c>
     9bc:	5c c0       	rjmp	.+184    	; 0xa76 <LCD_SendData+0xd4>
     9be:	e7 c0       	rjmp	.+462    	; 0xb8e <LCD_SendData+0x1ec>
     9c0:	83 30       	cpi	r24, 0x03	; 3
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <LCD_SendData+0x24>
     9c4:	c1 c0       	rjmp	.+386    	; 0xb48 <LCD_SendData+0x1a6>
     9c6:	8f 3f       	cpi	r24, 0xFF	; 255
     9c8:	09 f0       	breq	.+2      	; 0x9cc <LCD_SendData+0x2a>
     9ca:	e1 c0       	rjmp	.+450    	; 0xb8e <LCD_SendData+0x1ec>
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     9cc:	04 e6       	ldi	r16, 0x64	; 100
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	f8 01       	movw	r30, r16
     9d2:	d0 81       	ld	r29, Z
     9d4:	41 e0       	ldi	r20, 0x01	; 1
     9d6:	61 81       	ldd	r22, Z+1	; 0x01
     9d8:	8d 2f       	mov	r24, r29
     9da:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	f8 01       	movw	r30, r16
     9e2:	62 81       	ldd	r22, Z+2	; 0x02
     9e4:	8d 2f       	mov	r24, r29
     9e6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_7));
     9ea:	4c 2f       	mov	r20, r28
     9ec:	44 1f       	adc	r20, r20
     9ee:	44 27       	eor	r20, r20
     9f0:	44 1f       	adc	r20, r20
     9f2:	f8 01       	movw	r30, r16
     9f4:	64 81       	ldd	r22, Z+4	; 0x04
     9f6:	8d 2f       	mov	r24, r29
     9f8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_6));
     9fc:	4c 2f       	mov	r20, r28
     9fe:	40 74       	andi	r20, 0x40	; 64
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	04 2e       	mov	r0, r20
     a04:	45 2f       	mov	r20, r21
     a06:	00 0c       	add	r0, r0
     a08:	44 1f       	adc	r20, r20
     a0a:	55 0b       	sbc	r21, r21
     a0c:	00 0c       	add	r0, r0
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	f8 01       	movw	r30, r16
     a14:	65 81       	ldd	r22, Z+5	; 0x05
     a16:	8d 2f       	mov	r24, r29
     a18:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_5));
     a1c:	4c 2f       	mov	r20, r28
     a1e:	40 72       	andi	r20, 0x20	; 32
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	55 95       	asr	r21
     a24:	47 95       	ror	r20
     a26:	55 95       	asr	r21
     a28:	47 95       	ror	r20
     a2a:	55 95       	asr	r21
     a2c:	47 95       	ror	r20
     a2e:	55 95       	asr	r21
     a30:	47 95       	ror	r20
     a32:	55 95       	asr	r21
     a34:	47 95       	ror	r20
     a36:	f8 01       	movw	r30, r16
     a38:	66 81       	ldd	r22, Z+6	; 0x06
     a3a:	8d 2f       	mov	r24, r29
     a3c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_4));
     a40:	c0 71       	andi	r28, 0x10	; 16
     a42:	4c 2f       	mov	r20, r28
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	55 95       	asr	r21
     a48:	47 95       	ror	r20
     a4a:	55 95       	asr	r21
     a4c:	47 95       	ror	r20
     a4e:	55 95       	asr	r21
     a50:	47 95       	ror	r20
     a52:	55 95       	asr	r21
     a54:	47 95       	ror	r20
     a56:	f8 01       	movw	r30, r16
     a58:	67 81       	ldd	r22, Z+7	; 0x07
     a5a:	8d 2f       	mov	r24, r29
     a5c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     a60:	41 e0       	ldi	r20, 0x01	; 1
     a62:	f8 01       	movw	r30, r16
     a64:	63 81       	ldd	r22, Z+3	; 0x03
     a66:	8d 2f       	mov	r24, r29
     a68:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1741>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a72:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     a74:	91 c0       	rjmp	.+290    	; 0xb98 <LCD_SendData+0x1f6>
	case Sending_First_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     a76:	69 e3       	ldi	r22, 0x39	; 57
     a78:	72 e0       	ldi	r23, 0x02	; 2
     a7a:	82 e0       	ldi	r24, 0x02	; 2
     a7c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     a80:	8b 3f       	cpi	r24, 0xFB	; 251
     a82:	09 f0       	breq	.+2      	; 0xa86 <LCD_SendData+0xe4>
     a84:	86 c0       	rjmp	.+268    	; 0xb92 <LCD_SendData+0x1f0>
      {
         TIM_DelayUs(TIMER_2, 1,(void (*)(void)) LCD_SendCommand);
     a86:	29 e3       	ldi	r18, 0x39	; 57
     a88:	32 e0       	ldi	r19, 0x02	; 2
     a8a:	41 e0       	ldi	r20, 0x01	; 1
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	0e 94 cc 09 	call	0x1398	; 0x1398 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     a98:	69 e3       	ldi	r22, 0x39	; 57
     a9a:	72 e0       	ldi	r23, 0x02	; 2
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     aa2:	81 11       	cpse	r24, r1
     aa4:	f9 cf       	rjmp	.-14     	; 0xa98 <LCD_SendData+0xf6>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     aa6:	e4 e6       	ldi	r30, 0x64	; 100
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	63 81       	ldd	r22, Z+3	; 0x03
     aae:	80 81       	ld	r24, Z
     ab0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1741>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	6d c0       	rjmp	.+218    	; 0xb98 <LCD_SendData+0x1f6>
         State = First_Nibble_Sent;
      }
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     abe:	04 e6       	ldi	r16, 0x64	; 100
     ac0:	10 e0       	ldi	r17, 0x00	; 0
     ac2:	f8 01       	movw	r30, r16
     ac4:	d0 81       	ld	r29, Z
     ac6:	41 e0       	ldi	r20, 0x01	; 1
     ac8:	61 81       	ldd	r22, Z+1	; 0x01
     aca:	8d 2f       	mov	r24, r29
     acc:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	f8 01       	movw	r30, r16
     ad4:	62 81       	ldd	r22, Z+2	; 0x02
     ad6:	8d 2f       	mov	r24, r29
     ad8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		/*copying lower nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_3));
     adc:	4c 2f       	mov	r20, r28
     ade:	48 70       	andi	r20, 0x08	; 8
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	55 95       	asr	r21
     ae4:	47 95       	ror	r20
     ae6:	55 95       	asr	r21
     ae8:	47 95       	ror	r20
     aea:	55 95       	asr	r21
     aec:	47 95       	ror	r20
     aee:	f8 01       	movw	r30, r16
     af0:	64 81       	ldd	r22, Z+4	; 0x04
     af2:	8d 2f       	mov	r24, r29
     af4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_2));
     af8:	4c 2f       	mov	r20, r28
     afa:	44 70       	andi	r20, 0x04	; 4
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	55 95       	asr	r21
     b00:	47 95       	ror	r20
     b02:	55 95       	asr	r21
     b04:	47 95       	ror	r20
     b06:	f8 01       	movw	r30, r16
     b08:	65 81       	ldd	r22, Z+5	; 0x05
     b0a:	8d 2f       	mov	r24, r29
     b0c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_1));
     b10:	4c 2f       	mov	r20, r28
     b12:	42 70       	andi	r20, 0x02	; 2
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	55 95       	asr	r21
     b18:	47 95       	ror	r20
     b1a:	f8 01       	movw	r30, r16
     b1c:	66 81       	ldd	r22, Z+6	; 0x06
     b1e:	8d 2f       	mov	r24, r29
     b20:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_0));
     b24:	4c 2f       	mov	r20, r28
     b26:	41 70       	andi	r20, 0x01	; 1
     b28:	f8 01       	movw	r30, r16
     b2a:	67 81       	ldd	r22, Z+7	; 0x07
     b2c:	8d 2f       	mov	r24, r29
     b2e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     b32:	41 e0       	ldi	r20, 0x01	; 1
     b34:	f8 01       	movw	r30, r16
     b36:	63 81       	ldd	r22, Z+3	; 0x03
     b38:	8d 2f       	mov	r24, r29
     b3a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1741>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     b44:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     b46:	28 c0       	rjmp	.+80     	; 0xb98 <LCD_SendData+0x1f6>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand))
     b48:	69 e3       	ldi	r22, 0x39	; 57
     b4a:	72 e0       	ldi	r23, 0x02	; 2
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     b52:	8b 3f       	cpi	r24, 0xFB	; 251
     b54:	01 f5       	brne	.+64     	; 0xb96 <LCD_SendData+0x1f4>
      {
         TIM_DelayUs(TIMER_2, 1, (void (*)(void))LCD_SendCommand);
     b56:	29 e3       	ldi	r18, 0x39	; 57
     b58:	32 e0       	ldi	r19, 0x02	; 2
     b5a:	41 e0       	ldi	r20, 0x01	; 1
     b5c:	50 e0       	ldi	r21, 0x00	; 0
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	0e 94 cc 09 	call	0x1398	; 0x1398 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand));
     b68:	69 e3       	ldi	r22, 0x39	; 57
     b6a:	72 e0       	ldi	r23, 0x02	; 2
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     b72:	81 11       	cpse	r24, r1
     b74:	f9 cf       	rjmp	.-14     	; 0xb68 <LCD_SendData+0x1c6>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     b76:	e4 e6       	ldi	r30, 0x64	; 100
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	63 81       	ldd	r22, Z+3	; 0x03
     b7e:	80 81       	ld	r24, Z
     b80:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
         /*reset the function's state*/
         State = OperationStarted;
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1741>
         /*process finished successfully*/
         ErrRetVal = OperationSuccess;
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	05 c0       	rjmp	.+10     	; 0xb98 <LCD_SendData+0x1f6>
      }
		break;
	default:
		ErrRetVal = OperationFail;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <LCD_SendData+0x1f6>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <LCD_SendData+0x1f6>
     b96:	8f ef       	ldi	r24, 0xFF	; 255
		ErrRetVal = OperationFail;
	}
	/*return from function*/
	return ErrRetVal;

}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	08 95       	ret

00000ba2 <LCD_Init>:
ERROR_STATE_t LCD_Init()
{
     ba2:	bf 92       	push	r11
     ba4:	cf 92       	push	r12
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	uint8_t LCD_SendCommandRetVal = OperationStarted;
	switch (State) {
     bb4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <State.1763>
     bb8:	8b 30       	cpi	r24, 0x0B	; 11
     bba:	09 f4       	brne	.+2      	; 0xbbe <LCD_Init+0x1c>
     bbc:	c3 c0       	rjmp	.+390    	; 0xd44 <LCD_Init+0x1a2>
     bbe:	90 f4       	brcc	.+36     	; 0xbe4 <LCD_Init+0x42>
     bc0:	88 30       	cpi	r24, 0x08	; 8
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <LCD_Init+0x24>
     bc4:	a1 c0       	rjmp	.+322    	; 0xd08 <LCD_Init+0x166>
     bc6:	38 f4       	brcc	.+14     	; 0xbd6 <LCD_Init+0x34>
     bc8:	85 30       	cpi	r24, 0x05	; 5
     bca:	09 f4       	brne	.+2      	; 0xbce <LCD_Init+0x2c>
     bcc:	7b c0       	rjmp	.+246    	; 0xcc4 <LCD_Init+0x122>
     bce:	86 30       	cpi	r24, 0x06	; 6
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <LCD_Init+0x32>
     bd2:	90 c0       	rjmp	.+288    	; 0xcf4 <LCD_Init+0x152>
     bd4:	e9 c0       	rjmp	.+466    	; 0xda8 <LCD_Init+0x206>
     bd6:	89 30       	cpi	r24, 0x09	; 9
     bd8:	09 f4       	brne	.+2      	; 0xbdc <LCD_Init+0x3a>
     bda:	a0 c0       	rjmp	.+320    	; 0xd1c <LCD_Init+0x17a>
     bdc:	8a 30       	cpi	r24, 0x0A	; 10
     bde:	09 f4       	brne	.+2      	; 0xbe2 <LCD_Init+0x40>
     be0:	a7 c0       	rjmp	.+334    	; 0xd30 <LCD_Init+0x18e>
     be2:	e2 c0       	rjmp	.+452    	; 0xda8 <LCD_Init+0x206>
     be4:	8e 30       	cpi	r24, 0x0E	; 14
     be6:	09 f4       	brne	.+2      	; 0xbea <LCD_Init+0x48>
     be8:	cb c0       	rjmp	.+406    	; 0xd80 <LCD_Init+0x1de>
     bea:	38 f4       	brcc	.+14     	; 0xbfa <LCD_Init+0x58>
     bec:	8c 30       	cpi	r24, 0x0C	; 12
     bee:	09 f4       	brne	.+2      	; 0xbf2 <LCD_Init+0x50>
     bf0:	b3 c0       	rjmp	.+358    	; 0xd58 <LCD_Init+0x1b6>
     bf2:	8d 30       	cpi	r24, 0x0D	; 13
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <LCD_Init+0x56>
     bf6:	ba c0       	rjmp	.+372    	; 0xd6c <LCD_Init+0x1ca>
     bf8:	d7 c0       	rjmp	.+430    	; 0xda8 <LCD_Init+0x206>
     bfa:	8f 30       	cpi	r24, 0x0F	; 15
     bfc:	09 f4       	brne	.+2      	; 0xc00 <LCD_Init+0x5e>
     bfe:	ca c0       	rjmp	.+404    	; 0xd94 <LCD_Init+0x1f2>
     c00:	8f 3f       	cpi	r24, 0xFF	; 255
     c02:	09 f0       	breq	.+2      	; 0xc06 <LCD_Init+0x64>
     c04:	d1 c0       	rjmp	.+418    	; 0xda8 <LCD_Init+0x206>
	case OperationStarted:
		/*Dio and Timer Initialize for the*/
		TIM_Init(TIMER_2);
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	0e 94 c5 08 	call	0x118a	; 0x118a <TIM_Init>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     c0c:	04 e6       	ldi	r16, 0x64	; 100
     c0e:	10 e0       	ldi	r17, 0x00	; 0
     c10:	f8 01       	movw	r30, r16
     c12:	b4 80       	ldd	r11, Z+4	; 0x04
     c14:	c0 81       	ld	r28, Z
     c16:	41 e0       	ldi	r20, 0x01	; 1
     c18:	6b 2d       	mov	r22, r11
     c1a:	8c 2f       	mov	r24, r28
     c1c:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     c20:	f8 01       	movw	r30, r16
     c22:	c5 80       	ldd	r12, Z+5	; 0x05
     c24:	41 e0       	ldi	r20, 0x01	; 1
     c26:	6c 2d       	mov	r22, r12
     c28:	8c 2f       	mov	r24, r28
     c2a:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     c2e:	f8 01       	movw	r30, r16
     c30:	d6 80       	ldd	r13, Z+6	; 0x06
     c32:	41 e0       	ldi	r20, 0x01	; 1
     c34:	6d 2d       	mov	r22, r13
     c36:	8c 2f       	mov	r24, r28
     c38:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     c3c:	f8 01       	movw	r30, r16
     c3e:	e7 80       	ldd	r14, Z+7	; 0x07
     c40:	41 e0       	ldi	r20, 0x01	; 1
     c42:	6e 2d       	mov	r22, r14
     c44:	8c 2f       	mov	r24, r28
     c46:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     c4a:	f8 01       	movw	r30, r16
     c4c:	f1 80       	ldd	r15, Z+1	; 0x01
     c4e:	41 e0       	ldi	r20, 0x01	; 1
     c50:	6f 2d       	mov	r22, r15
     c52:	8c 2f       	mov	r24, r28
     c54:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     c58:	f8 01       	movw	r30, r16
     c5a:	d2 81       	ldd	r29, Z+2	; 0x02
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	6d 2f       	mov	r22, r29
     c60:	8c 2f       	mov	r24, r28
     c62:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     c66:	f8 01       	movw	r30, r16
     c68:	13 81       	ldd	r17, Z+3	; 0x03
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	61 2f       	mov	r22, r17
     c6e:	8c 2f       	mov	r24, r28
     c70:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	6b 2d       	mov	r22, r11
     c78:	8c 2f       	mov	r24, r28
     c7a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	6c 2d       	mov	r22, r12
     c82:	8c 2f       	mov	r24, r28
     c84:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	6d 2d       	mov	r22, r13
     c8c:	8c 2f       	mov	r24, r28
     c8e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	6e 2d       	mov	r22, r14
     c96:	8c 2f       	mov	r24, r28
     c98:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	6f 2d       	mov	r22, r15
     ca0:	8c 2f       	mov	r24, r28
     ca2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	6d 2f       	mov	r22, r29
     caa:	8c 2f       	mov	r24, r28
     cac:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	61 2f       	mov	r22, r17
     cb4:	8c 2f       	mov	r24, r28
     cb6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_WritePin>
		/*set status of the function*/
		State = LCD_Pin_Initializing;
     cba:	85 e0       	ldi	r24, 0x05	; 5
     cbc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
		/*set status of the function*/
		State = LCD_Pin_Initializing;
		break;
     cc2:	87 c0       	rjmp	.+270    	; 0xdd2 <LCD_Init+0x230>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayStatus(TIMER_2, (void (*)(void))LCD_SendCommand);
     cc4:	69 e3       	ldi	r22, 0x39	; 57
     cc6:	72 e0       	ldi	r23, 0x02	; 2
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIM_DelayStatus>
     cce:	c8 2f       	mov	r28, r24
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     cd0:	8b 3f       	cpi	r24, 0xFB	; 251
     cd2:	49 f4       	brne	.+18     	; 0xce6 <LCD_Init+0x144>
		{
   		TIM_DelayMs(TIMER_2,15, (void (*)(void))LCD_SendCommand);
     cd4:	29 e3       	ldi	r18, 0x39	; 57
     cd6:	32 e0       	ldi	r19, 0x02	; 2
     cd8:	4f e0       	ldi	r20, 0x0F	; 15
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <TIM_DelayMs>
		}
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     ce6:	c1 11       	cpse	r28, r1
     ce8:	61 c0       	rjmp	.+194    	; 0xdac <LCD_Init+0x20a>
		{
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
     cea:	86 e0       	ldi	r24, 0x06	; 6
     cec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	6f c0       	rjmp	.+222    	; 0xdd2 <LCD_Init+0x230>
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
	case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     cfa:	81 11       	cpse	r24, r1
     cfc:	59 c0       	rjmp	.+178    	; 0xdb0 <LCD_Init+0x20e>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     cfe:	88 e0       	ldi	r24, 0x08	; 8
     d00:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     d04:	8f ef       	ldi	r24, 0xFF	; 255
     d06:	65 c0       	rjmp	.+202    	; 0xdd2 <LCD_Init+0x230>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     d08:	83 e0       	ldi	r24, 0x03	; 3
     d0a:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     d0e:	81 11       	cpse	r24, r1
     d10:	51 c0       	rjmp	.+162    	; 0xdb4 <LCD_Init+0x212>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     d12:	89 e0       	ldi	r24, 0x09	; 9
     d14:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	5b c0       	rjmp	.+182    	; 0xdd2 <LCD_Init+0x230>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     d22:	81 11       	cpse	r24, r1
     d24:	49 c0       	rjmp	.+146    	; 0xdb8 <LCD_Init+0x216>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     d26:	8a e0       	ldi	r24, 0x0A	; 10
     d28:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	51 c0       	rjmp	.+162    	; 0xdd2 <LCD_Init+0x230>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     d36:	81 11       	cpse	r24, r1
     d38:	41 c0       	rjmp	.+130    	; 0xdbc <LCD_Init+0x21a>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     d3a:	8b e0       	ldi	r24, 0x0B	; 11
     d3c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <LCD_Init+0x230>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_6);
     d44:	88 e2       	ldi	r24, 0x28	; 40
     d46:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     d4a:	81 11       	cpse	r24, r1
     d4c:	39 c0       	rjmp	.+114    	; 0xdc0 <LCD_Init+0x21e>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     d4e:	8c e0       	ldi	r24, 0x0C	; 12
     d50:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     d54:	8f ef       	ldi	r24, 0xFF	; 255
     d56:	3d c0       	rjmp	.+122    	; 0xdd2 <LCD_Init+0x230>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
     d58:	8c e0       	ldi	r24, 0x0C	; 12
     d5a:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     d5e:	81 11       	cpse	r24, r1
     d60:	31 c0       	rjmp	.+98     	; 0xdc4 <LCD_Init+0x222>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     d62:	8d e0       	ldi	r24, 0x0D	; 13
     d64:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	33 c0       	rjmp	.+102    	; 0xdd2 <LCD_Init+0x230>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);//LCD_INCREMENTENTRYMODE/LCD_SHIFTINCREMENTENTRYMODE
     d6c:	86 e0       	ldi	r24, 0x06	; 6
     d6e:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     d72:	81 11       	cpse	r24, r1
     d74:	29 c0       	rjmp	.+82     	; 0xdc8 <LCD_Init+0x226>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     d76:	8e e0       	ldi	r24, 0x0E	; 14
     d78:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	29 c0       	rjmp	.+82     	; 0xdd2 <LCD_Init+0x230>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     d86:	81 11       	cpse	r24, r1
     d88:	21 c0       	rjmp	.+66     	; 0xdcc <LCD_Init+0x22a>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     d8a:	8f e0       	ldi	r24, 0x0F	; 15
     d8c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	1f c0       	rjmp	.+62     	; 0xdd2 <LCD_Init+0x230>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     d94:	80 e8       	ldi	r24, 0x80	; 128
     d96:	0e 94 39 02 	call	0x472	; 0x472 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     d9a:	81 11       	cpse	r24, r1
     d9c:	19 c0       	rjmp	.+50     	; 0xdd0 <LCD_Init+0x22e>
		{
			State = OperationStarted;
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1763>
			ErrRetVal = OperationSuccess;
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	15 c0       	rjmp	.+42     	; 0xdd2 <LCD_Init+0x230>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	13 c0       	rjmp	.+38     	; 0xdd2 <LCD_Init+0x230>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	11 c0       	rjmp	.+34     	; 0xdd2 <LCD_Init+0x230>
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	0f c0       	rjmp	.+30     	; 0xdd2 <LCD_Init+0x230>
     db4:	8f ef       	ldi	r24, 0xFF	; 255
     db6:	0d c0       	rjmp	.+26     	; 0xdd2 <LCD_Init+0x230>
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	0b c0       	rjmp	.+22     	; 0xdd2 <LCD_Init+0x230>
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <LCD_Init+0x230>
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
     dc2:	07 c0       	rjmp	.+14     	; 0xdd2 <LCD_Init+0x230>
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
     dc6:	05 c0       	rjmp	.+10     	; 0xdd2 <LCD_Init+0x230>
     dc8:	8f ef       	ldi	r24, 0xFF	; 255
     dca:	03 c0       	rjmp	.+6      	; 0xdd2 <LCD_Init+0x230>
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <LCD_Init+0x230>
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	default:
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	df 90       	pop	r13
     de0:	cf 90       	pop	r12
     de2:	bf 90       	pop	r11
     de4:	08 95       	ret

00000de6 <DIO_SetPinDirection>:
				u8_ErrorState=ERROR_NOK;
				break;	
		}	
	}	
	return u8_ErrorState;
}
     de6:	42 30       	cpi	r20, 0x02	; 2
     de8:	08 f0       	brcs	.+2      	; 0xdec <DIO_SetPinDirection+0x6>
     dea:	60 c0       	rjmp	.+192    	; 0xeac <DIO_SetPinDirection+0xc6>
     dec:	68 30       	cpi	r22, 0x08	; 8
     dee:	08 f0       	brcs	.+2      	; 0xdf2 <DIO_SetPinDirection+0xc>
     df0:	5f c0       	rjmp	.+190    	; 0xeb0 <DIO_SetPinDirection+0xca>
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	e1 f0       	breq	.+56     	; 0xe2e <DIO_SetPinDirection+0x48>
     df6:	30 f0       	brcs	.+12     	; 0xe04 <DIO_SetPinDirection+0x1e>
     df8:	82 30       	cpi	r24, 0x02	; 2
     dfa:	71 f1       	breq	.+92     	; 0xe58 <DIO_SetPinDirection+0x72>
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	09 f4       	brne	.+2      	; 0xe02 <DIO_SetPinDirection+0x1c>
     e00:	40 c0       	rjmp	.+128    	; 0xe82 <DIO_SetPinDirection+0x9c>
     e02:	58 c0       	rjmp	.+176    	; 0xeb4 <DIO_SetPinDirection+0xce>
     e04:	2a b3       	in	r18, 0x1a	; 26
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	06 2e       	mov	r0, r22
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_SetPinDirection+0x2c>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_SetPinDirection+0x28>
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_SetPinDirection+0x38>
     e1a:	44 0f       	add	r20, r20
     e1c:	55 1f       	adc	r21, r21
     e1e:	6a 95       	dec	r22
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_SetPinDirection+0x34>
     e22:	80 95       	com	r24
     e24:	82 23       	and	r24, r18
     e26:	48 2b       	or	r20, r24
     e28:	4a bb       	out	0x1a, r20	; 26
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	08 95       	ret
     e2e:	27 b3       	in	r18, 0x17	; 23
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	06 2e       	mov	r0, r22
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_SetPinDirection+0x56>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_SetPinDirection+0x52>
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <DIO_SetPinDirection+0x62>
     e44:	44 0f       	add	r20, r20
     e46:	55 1f       	adc	r21, r21
     e48:	6a 95       	dec	r22
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <DIO_SetPinDirection+0x5e>
     e4c:	80 95       	com	r24
     e4e:	82 23       	and	r24, r18
     e50:	48 2b       	or	r20, r24
     e52:	47 bb       	out	0x17, r20	; 23
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	08 95       	ret
     e58:	24 b3       	in	r18, 0x14	; 20
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	06 2e       	mov	r0, r22
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_SetPinDirection+0x80>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_SetPinDirection+0x7c>
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_SetPinDirection+0x8c>
     e6e:	44 0f       	add	r20, r20
     e70:	55 1f       	adc	r21, r21
     e72:	6a 95       	dec	r22
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_SetPinDirection+0x88>
     e76:	80 95       	com	r24
     e78:	82 23       	and	r24, r18
     e7a:	48 2b       	or	r20, r24
     e7c:	44 bb       	out	0x14, r20	; 20
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 95       	ret
     e82:	21 b3       	in	r18, 0x11	; 17
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	06 2e       	mov	r0, r22
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <DIO_SetPinDirection+0xaa>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <DIO_SetPinDirection+0xa6>
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_SetPinDirection+0xb6>
     e98:	44 0f       	add	r20, r20
     e9a:	55 1f       	adc	r21, r21
     e9c:	6a 95       	dec	r22
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_SetPinDirection+0xb2>
     ea0:	80 95       	com	r24
     ea2:	82 23       	and	r24, r18
     ea4:	48 2b       	or	r20, r24
     ea6:	41 bb       	out	0x11, r20	; 17
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	08 95       	ret
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	08 95       	ret
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	08 95       	ret
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	08 95       	ret

00000eb8 <DIO_WritePin>:
     eb8:	42 30       	cpi	r20, 0x02	; 2
     eba:	08 f0       	brcs	.+2      	; 0xebe <DIO_WritePin+0x6>
     ebc:	60 c0       	rjmp	.+192    	; 0xf7e <DIO_WritePin+0xc6>
     ebe:	68 30       	cpi	r22, 0x08	; 8
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <DIO_WritePin+0xc>
     ec2:	5f c0       	rjmp	.+190    	; 0xf82 <DIO_WritePin+0xca>
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	e1 f0       	breq	.+56     	; 0xf00 <DIO_WritePin+0x48>
     ec8:	30 f0       	brcs	.+12     	; 0xed6 <DIO_WritePin+0x1e>
     eca:	82 30       	cpi	r24, 0x02	; 2
     ecc:	71 f1       	breq	.+92     	; 0xf2a <DIO_WritePin+0x72>
     ece:	83 30       	cpi	r24, 0x03	; 3
     ed0:	09 f4       	brne	.+2      	; 0xed4 <DIO_WritePin+0x1c>
     ed2:	40 c0       	rjmp	.+128    	; 0xf54 <DIO_WritePin+0x9c>
     ed4:	58 c0       	rjmp	.+176    	; 0xf86 <DIO_WritePin+0xce>
     ed6:	2b b3       	in	r18, 0x1b	; 27
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	06 2e       	mov	r0, r22
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_WritePin+0x2c>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_WritePin+0x28>
     ee8:	50 e0       	ldi	r21, 0x00	; 0
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_WritePin+0x38>
     eec:	44 0f       	add	r20, r20
     eee:	55 1f       	adc	r21, r21
     ef0:	6a 95       	dec	r22
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_WritePin+0x34>
     ef4:	80 95       	com	r24
     ef6:	82 23       	and	r24, r18
     ef8:	48 2b       	or	r20, r24
     efa:	4b bb       	out	0x1b, r20	; 27
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	08 95       	ret
     f00:	28 b3       	in	r18, 0x18	; 24
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	06 2e       	mov	r0, r22
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_WritePin+0x56>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <DIO_WritePin+0x52>
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_WritePin+0x62>
     f16:	44 0f       	add	r20, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	6a 95       	dec	r22
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_WritePin+0x5e>
     f1e:	80 95       	com	r24
     f20:	82 23       	and	r24, r18
     f22:	48 2b       	or	r20, r24
     f24:	48 bb       	out	0x18, r20	; 24
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	08 95       	ret
     f2a:	25 b3       	in	r18, 0x15	; 21
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	06 2e       	mov	r0, r22
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <DIO_WritePin+0x80>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <DIO_WritePin+0x7c>
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_WritePin+0x8c>
     f40:	44 0f       	add	r20, r20
     f42:	55 1f       	adc	r21, r21
     f44:	6a 95       	dec	r22
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_WritePin+0x88>
     f48:	80 95       	com	r24
     f4a:	82 23       	and	r24, r18
     f4c:	48 2b       	or	r20, r24
     f4e:	45 bb       	out	0x15, r20	; 21
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	08 95       	ret
     f54:	22 b3       	in	r18, 0x12	; 18
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	06 2e       	mov	r0, r22
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_WritePin+0xaa>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_WritePin+0xa6>
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_WritePin+0xb6>
     f6a:	44 0f       	add	r20, r20
     f6c:	55 1f       	adc	r21, r21
     f6e:	6a 95       	dec	r22
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_WritePin+0xb2>
     f72:	80 95       	com	r24
     f74:	82 23       	and	r24, r18
     f76:	48 2b       	or	r20, r24
     f78:	42 bb       	out	0x12, r20	; 18
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	08 95       	ret
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	08 95       	ret
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	08 95       	ret
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	08 95       	ret

00000f8a <DIO_ReadPin>:
ERROR_STATE_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
     f8a:	68 30       	cpi	r22, 0x08	; 8
     f8c:	d8 f5       	brcc	.+118    	; 0x1004 <DIO_ReadPin+0x7a>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(NULL_PTR==PinData)
     f8e:	41 15       	cp	r20, r1
     f90:	51 05       	cpc	r21, r1
     f92:	d1 f1       	breq	.+116    	; 0x1008 <DIO_ReadPin+0x7e>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	91 f0       	breq	.+36     	; 0xfbc <DIO_ReadPin+0x32>
     f98:	28 f0       	brcs	.+10     	; 0xfa4 <DIO_ReadPin+0x1a>
     f9a:	82 30       	cpi	r24, 0x02	; 2
     f9c:	d9 f0       	breq	.+54     	; 0xfd4 <DIO_ReadPin+0x4a>
     f9e:	83 30       	cpi	r24, 0x03	; 3
     fa0:	29 f1       	breq	.+74     	; 0xfec <DIO_ReadPin+0x62>
     fa2:	34 c0       	rjmp	.+104    	; 0x100c <DIO_ReadPin+0x82>
		{
			case PORT_A:
				* PinData=BIT_GET(PINA,PinNo);
     fa4:	89 b3       	in	r24, 0x19	; 25
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_ReadPin+0x24>
     faa:	95 95       	asr	r25
     fac:	87 95       	ror	r24
     fae:	6a 95       	dec	r22
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_ReadPin+0x20>
     fb2:	81 70       	andi	r24, 0x01	; 1
     fb4:	fa 01       	movw	r30, r20
     fb6:	80 83       	st	Z, r24
				u8_ErrorState=ERROR_OK;
     fb8:	80 e0       	ldi	r24, 0x00	; 0
				break;
     fba:	08 95       	ret
			case PORT_B:
				* PinData=BIT_GET(PINB,PinNo);
     fbc:	86 b3       	in	r24, 0x16	; 22
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_ReadPin+0x3c>
     fc2:	95 95       	asr	r25
     fc4:	87 95       	ror	r24
     fc6:	6a 95       	dec	r22
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_ReadPin+0x38>
     fca:	81 70       	andi	r24, 0x01	; 1
     fcc:	fa 01       	movw	r30, r20
     fce:	80 83       	st	Z, r24
				u8_ErrorState=ERROR_OK;
     fd0:	80 e0       	ldi	r24, 0x00	; 0
				break;
     fd2:	08 95       	ret
			case PORT_C:
				* PinData=BIT_GET(PINC,PinNo);
     fd4:	83 b3       	in	r24, 0x13	; 19
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_ReadPin+0x54>
     fda:	95 95       	asr	r25
     fdc:	87 95       	ror	r24
     fde:	6a 95       	dec	r22
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_ReadPin+0x50>
     fe2:	81 70       	andi	r24, 0x01	; 1
     fe4:	fa 01       	movw	r30, r20
     fe6:	80 83       	st	Z, r24
				u8_ErrorState=ERROR_OK;
     fe8:	80 e0       	ldi	r24, 0x00	; 0
				break;
     fea:	08 95       	ret
			case PORT_D:
				* PinData=BIT_GET(PIND,PinNo);
     fec:	80 b3       	in	r24, 0x10	; 16
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_ReadPin+0x6c>
     ff2:	95 95       	asr	r25
     ff4:	87 95       	ror	r24
     ff6:	6a 95       	dec	r22
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_ReadPin+0x68>
     ffa:	81 70       	andi	r24, 0x01	; 1
     ffc:	fa 01       	movw	r30, r20
     ffe:	80 83       	st	Z, r24
				u8_ErrorState=ERROR_OK;
    1000:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1002:	08 95       	ret
ERROR_STATE_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	08 95       	ret
	}
	else if(NULL_PTR==PinData)
	{
		u8_ErrorState=ERROR_NOK;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	08 95       	ret
			case PORT_D:
				* PinData=BIT_GET(PIND,PinNo);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    100c:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
    100e:	08 95       	ret

00001010 <GetFreqPrescaleRatio>:
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
    1010:	82 30       	cpi	r24, 0x02	; 2
    1012:	08 f0       	brcs	.+2      	; 0x1016 <GetFreqPrescaleRatio+0x6>
    1014:	4e c0       	rjmp	.+156    	; 0x10b2 <GetFreqPrescaleRatio+0xa2>
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	fc 01       	movw	r30, r24
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	8e 0f       	add	r24, r30
    1020:	9f 1f       	adc	r25, r31
    1022:	fc 01       	movw	r30, r24
    1024:	e4 59       	subi	r30, 0x94	; 148
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	09 f1       	breq	.+66     	; 0x1070 <GetFreqPrescaleRatio+0x60>
    102e:	28 f4       	brcc	.+10     	; 0x103a <GetFreqPrescaleRatio+0x2a>
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	41 f0       	breq	.+16     	; 0x1044 <GetFreqPrescaleRatio+0x34>
    1034:	82 30       	cpi	r24, 0x02	; 2
    1036:	89 f0       	breq	.+34     	; 0x105a <GetFreqPrescaleRatio+0x4a>
    1038:	a2 c0       	rjmp	.+324    	; 0x117e <GetFreqPrescaleRatio+0x16e>
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	21 f1       	breq	.+72     	; 0x1086 <GetFreqPrescaleRatio+0x76>
    103e:	85 30       	cpi	r24, 0x05	; 5
    1040:	69 f1       	breq	.+90     	; 0x109c <GetFreqPrescaleRatio+0x8c>
    1042:	9d c0       	rjmp	.+314    	; 0x117e <GetFreqPrescaleRatio+0x16e>
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	be e3       	ldi	r27, 0x3E	; 62
    104c:	fb 01       	movw	r30, r22
    104e:	80 83       	st	Z, r24
    1050:	91 83       	std	Z+1, r25	; 0x01
    1052:	a2 83       	std	Z+2, r26	; 0x02
    1054:	b3 83       	std	Z+3, r27	; 0x03
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	08 95       	ret
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	a0 e8       	ldi	r26, 0x80	; 128
    1060:	bf e3       	ldi	r27, 0x3F	; 63
    1062:	fb 01       	movw	r30, r22
    1064:	80 83       	st	Z, r24
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	a2 83       	std	Z+2, r26	; 0x02
    106a:	b3 83       	std	Z+3, r27	; 0x03
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	08 95       	ret
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	a0 e0       	ldi	r26, 0x00	; 0
    1076:	b1 e4       	ldi	r27, 0x41	; 65
    1078:	fb 01       	movw	r30, r22
    107a:	80 83       	st	Z, r24
    107c:	91 83       	std	Z+1, r25	; 0x01
    107e:	a2 83       	std	Z+2, r26	; 0x02
    1080:	b3 83       	std	Z+3, r27	; 0x03
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	08 95       	ret
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a0 e0       	ldi	r26, 0x00	; 0
    108c:	b2 e4       	ldi	r27, 0x42	; 66
    108e:	fb 01       	movw	r30, r22
    1090:	80 83       	st	Z, r24
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	a2 83       	std	Z+2, r26	; 0x02
    1096:	b3 83       	std	Z+3, r27	; 0x03
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	08 95       	ret
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	a0 e0       	ldi	r26, 0x00	; 0
    10a2:	b3 e4       	ldi	r27, 0x43	; 67
    10a4:	fb 01       	movw	r30, r22
    10a6:	80 83       	st	Z, r24
    10a8:	91 83       	std	Z+1, r25	; 0x01
    10aa:	a2 83       	std	Z+2, r26	; 0x02
    10ac:	b3 83       	std	Z+3, r27	; 0x03
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	08 95       	ret
    10b2:	82 30       	cpi	r24, 0x02	; 2
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <GetFreqPrescaleRatio+0xa8>
    10b6:	65 c0       	rjmp	.+202    	; 0x1182 <GetFreqPrescaleRatio+0x172>
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	fc 01       	movw	r30, r24
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	8e 0f       	add	r24, r30
    10c2:	9f 1f       	adc	r25, r31
    10c4:	fc 01       	movw	r30, r24
    10c6:	e4 59       	subi	r30, 0x94	; 148
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	e2 81       	ldd	r30, Z+2	; 0x02
    10cc:	8e 2f       	mov	r24, r30
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	fc 01       	movw	r30, r24
    10d2:	31 97       	sbiw	r30, 0x01	; 1
    10d4:	e7 30       	cpi	r30, 0x07	; 7
    10d6:	f1 05       	cpc	r31, r1
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <GetFreqPrescaleRatio+0xcc>
    10da:	55 c0       	rjmp	.+170    	; 0x1186 <GetFreqPrescaleRatio+0x176>
    10dc:	e6 5d       	subi	r30, 0xD6	; 214
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__tablejump2__>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a0 e0       	ldi	r26, 0x00	; 0
    10ea:	be e3       	ldi	r27, 0x3E	; 62
    10ec:	fb 01       	movw	r30, r22
    10ee:	80 83       	st	Z, r24
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	a2 83       	std	Z+2, r26	; 0x02
    10f4:	b3 83       	std	Z+3, r27	; 0x03
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	08 95       	ret
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a0 e8       	ldi	r26, 0x80	; 128
    1100:	bf e3       	ldi	r27, 0x3F	; 63
    1102:	fb 01       	movw	r30, r22
    1104:	80 83       	st	Z, r24
    1106:	91 83       	std	Z+1, r25	; 0x01
    1108:	a2 83       	std	Z+2, r26	; 0x02
    110a:	b3 83       	std	Z+3, r27	; 0x03
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	08 95       	ret
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a0 e8       	ldi	r26, 0x80	; 128
    1116:	b0 e4       	ldi	r27, 0x40	; 64
    1118:	fb 01       	movw	r30, r22
    111a:	80 83       	st	Z, r24
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	a2 83       	std	Z+2, r26	; 0x02
    1120:	b3 83       	std	Z+3, r27	; 0x03
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	08 95       	ret
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a0 e0       	ldi	r26, 0x00	; 0
    112c:	b1 e4       	ldi	r27, 0x41	; 65
    112e:	fb 01       	movw	r30, r22
    1130:	80 83       	st	Z, r24
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	a2 83       	std	Z+2, r26	; 0x02
    1136:	b3 83       	std	Z+3, r27	; 0x03
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	08 95       	ret
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a0 e8       	ldi	r26, 0x80	; 128
    1142:	b1 e4       	ldi	r27, 0x41	; 65
    1144:	fb 01       	movw	r30, r22
    1146:	80 83       	st	Z, r24
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	a2 83       	std	Z+2, r26	; 0x02
    114c:	b3 83       	std	Z+3, r27	; 0x03
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	08 95       	ret
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	b2 e4       	ldi	r27, 0x42	; 66
    115a:	fb 01       	movw	r30, r22
    115c:	80 83       	st	Z, r24
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	a2 83       	std	Z+2, r26	; 0x02
    1162:	b3 83       	std	Z+3, r27	; 0x03
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	08 95       	ret
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	a0 e0       	ldi	r26, 0x00	; 0
    116e:	b3 e4       	ldi	r27, 0x43	; 67
    1170:	fb 01       	movw	r30, r22
    1172:	80 83       	st	Z, r24
    1174:	91 83       	std	Z+1, r25	; 0x01
    1176:	a2 83       	std	Z+2, r26	; 0x02
    1178:	b3 83       	std	Z+3, r27	; 0x03
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	08 95       	ret
    117e:	8c ef       	ldi	r24, 0xFC	; 252
    1180:	08 95       	ret
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	08 95       	ret
    1186:	8c ef       	ldi	r24, 0xFC	; 252
    1188:	08 95       	ret

0000118a <TIM_Init>:
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	b1 f0       	breq	.+44     	; 0x11ba <TIM_Init+0x30>
    118e:	18 f0       	brcs	.+6      	; 0x1196 <TIM_Init+0xc>
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	71 f1       	breq	.+92     	; 0x11f0 <TIM_Init+0x66>
    1194:	44 c0       	rjmp	.+136    	; 0x121e <TIM_Init+0x94>
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	fc 01       	movw	r30, r24
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	8e 0f       	add	r24, r30
    11a0:	9f 1f       	adc	r25, r31
    11a2:	fc 01       	movw	r30, r24
    11a4:	e4 59       	subi	r30, 0x94	; 148
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	80 81       	ld	r24, Z
    11aa:	83 bf       	out	0x33, r24	; 51
    11ac:	89 b7       	in	r24, 0x39	; 57
    11ae:	8c 7f       	andi	r24, 0xFC	; 252
    11b0:	91 81       	ldd	r25, Z+1	; 0x01
    11b2:	89 2b       	or	r24, r25
    11b4:	89 bf       	out	0x39, r24	; 57
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	08 95       	ret
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	fc 01       	movw	r30, r24
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	8e 0f       	add	r24, r30
    11c4:	9f 1f       	adc	r25, r31
    11c6:	fc 01       	movw	r30, r24
    11c8:	e4 59       	subi	r30, 0x94	; 148
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 81       	ld	r24, Z
    11ce:	8e bd       	out	0x2e, r24	; 46
    11d0:	89 b7       	in	r24, 0x39	; 57
    11d2:	28 2f       	mov	r18, r24
    11d4:	27 7e       	andi	r18, 0xE7	; 231
    11d6:	91 81       	ldd	r25, Z+1	; 0x01
    11d8:	89 2f       	mov	r24, r25
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	82 2b       	or	r24, r18
    11ea:	89 bf       	out	0x39, r24	; 57
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	08 95       	ret
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	fc 01       	movw	r30, r24
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	8e 0f       	add	r24, r30
    11fa:	9f 1f       	adc	r25, r31
    11fc:	fc 01       	movw	r30, r24
    11fe:	e4 59       	subi	r30, 0x94	; 148
    1200:	ff 4f       	sbci	r31, 0xFF	; 255
    1202:	80 81       	ld	r24, Z
    1204:	85 bd       	out	0x25, r24	; 37
    1206:	89 b7       	in	r24, 0x39	; 57
    1208:	28 2f       	mov	r18, r24
    120a:	2f 73       	andi	r18, 0x3F	; 63
    120c:	91 81       	ldd	r25, Z+1	; 0x01
    120e:	30 e4       	ldi	r19, 0x40	; 64
    1210:	93 9f       	mul	r25, r19
    1212:	c0 01       	movw	r24, r0
    1214:	11 24       	eor	r1, r1
    1216:	82 2b       	or	r24, r18
    1218:	89 bf       	out	0x39, r24	; 57
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	08 95       	ret
    121e:	8e ef       	ldi	r24, 0xFE	; 254
    1220:	08 95       	ret

00001222 <TIM_Start>:
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	71 f0       	breq	.+28     	; 0x1242 <TIM_Start+0x20>
    1226:	18 f0       	brcs	.+6      	; 0x122e <TIM_Start+0xc>
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	31 f0       	breq	.+12     	; 0x1238 <TIM_Start+0x16>
    122c:	1f c0       	rjmp	.+62     	; 0x126c <TIM_Start+0x4a>
    122e:	e2 e5       	ldi	r30, 0x52	; 82
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	a3 e5       	ldi	r26, 0x53	; 83
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	09 c0       	rjmp	.+18     	; 0x124a <TIM_Start+0x28>
    1238:	e4 e4       	ldi	r30, 0x44	; 68
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	a5 e4       	ldi	r26, 0x45	; 69
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	04 c0       	rjmp	.+8      	; 0x124a <TIM_Start+0x28>
    1242:	ec e4       	ldi	r30, 0x4C	; 76
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	ae e4       	ldi	r26, 0x4E	; 78
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	71 83       	std	Z+1, r23	; 0x01
    124c:	60 83       	st	Z, r22
    124e:	2c 91       	ld	r18, X
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	fc 01       	movw	r30, r24
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	8e 0f       	add	r24, r30
    125a:	9f 1f       	adc	r25, r31
    125c:	fc 01       	movw	r30, r24
    125e:	e4 59       	subi	r30, 0x94	; 148
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	82 81       	ldd	r24, Z+2	; 0x02
    1264:	82 2b       	or	r24, r18
    1266:	8c 93       	st	X, r24
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	08 95       	ret
    126c:	8e ef       	ldi	r24, 0xFE	; 254
    126e:	08 95       	ret

00001270 <TIM_GetStatus>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
    1270:	61 15       	cp	r22, r1
    1272:	71 05       	cpc	r23, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <TIM_GetStatus+0x8>
    1276:	7a c0       	rjmp	.+244    	; 0x136c <TIM_GetStatus+0xfc>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	41 f1       	breq	.+80     	; 0x12cc <TIM_GetStatus+0x5c>
    127c:	20 f0       	brcs	.+8      	; 0x1286 <TIM_GetStatus+0x16>
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	09 f4       	brne	.+2      	; 0x1284 <TIM_GetStatus+0x14>
    1282:	52 c0       	rjmp	.+164    	; 0x1328 <TIM_GetStatus+0xb8>
    1284:	75 c0       	rjmp	.+234    	; 0x1370 <TIM_GetStatus+0x100>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	fc 01       	movw	r30, r24
    128a:	ee 0f       	add	r30, r30
    128c:	ff 1f       	adc	r31, r31
    128e:	8e 0f       	add	r24, r30
    1290:	9f 1f       	adc	r25, r31
    1292:	fc 01       	movw	r30, r24
    1294:	e4 59       	subi	r30, 0x94	; 148
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	80 81       	ld	r24, Z
    129a:	81 11       	cpse	r24, r1
    129c:	09 c0       	rjmp	.+18     	; 0x12b0 <TIM_GetStatus+0x40>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
    129e:	08 b6       	in	r0, 0x38	; 56
    12a0:	00 fe       	sbrs	r0, 0
    12a2:	68 c0       	rjmp	.+208    	; 0x1374 <TIM_GetStatus+0x104>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    12a4:	fb 01       	movw	r30, r22
    12a6:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
    12a8:	98 b7       	in	r25, 0x38	; 56
    12aa:	91 60       	ori	r25, 0x01	; 1
    12ac:	98 bf       	out	0x38, r25	; 56
    12ae:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    12b0:	88 30       	cpi	r24, 0x08	; 8
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <TIM_GetStatus+0x46>
    12b4:	61 c0       	rjmp	.+194    	; 0x1378 <TIM_GetStatus+0x108>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
    12b6:	08 b6       	in	r0, 0x38	; 56
    12b8:	01 fe       	sbrs	r0, 1
    12ba:	60 c0       	rjmp	.+192    	; 0x137c <TIM_GetStatus+0x10c>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	fb 01       	movw	r30, r22
    12c0:	80 83       	st	Z, r24
               TIFR |= TIMER_0_COMPARE_FLAG;
    12c2:	88 b7       	in	r24, 0x38	; 56
    12c4:	82 60       	ori	r24, 0x02	; 2
    12c6:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	fc 01       	movw	r30, r24
    12d0:	ee 0f       	add	r30, r30
    12d2:	ff 1f       	adc	r31, r31
    12d4:	8e 0f       	add	r24, r30
    12d6:	9f 1f       	adc	r25, r31
    12d8:	fc 01       	movw	r30, r24
    12da:	e4 59       	subi	r30, 0x94	; 148
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	80 81       	ld	r24, Z
    12e0:	81 11       	cpse	r24, r1
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <TIM_GetStatus+0x86>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
    12e4:	08 b6       	in	r0, 0x38	; 56
    12e6:	02 fe       	sbrs	r0, 2
    12e8:	4b c0       	rjmp	.+150    	; 0x1380 <TIM_GetStatus+0x110>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    12ea:	fb 01       	movw	r30, r22
    12ec:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
    12ee:	98 b7       	in	r25, 0x38	; 56
    12f0:	94 60       	ori	r25, 0x04	; 4
    12f2:	98 bf       	out	0x38, r25	; 56
    12f4:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    12f6:	88 30       	cpi	r24, 0x08	; 8
    12f8:	09 f0       	breq	.+2      	; 0x12fc <TIM_GetStatus+0x8c>
    12fa:	44 c0       	rjmp	.+136    	; 0x1384 <TIM_GetStatus+0x114>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
    12fc:	98 b7       	in	r25, 0x38	; 56
    12fe:	89 2f       	mov	r24, r25
    1300:	80 71       	andi	r24, 0x10	; 16
    1302:	94 ff       	sbrs	r25, 4
    1304:	08 c0       	rjmp	.+16     	; 0x1316 <TIM_GetStatus+0xa6>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	fb 01       	movw	r30, r22
    130a:	80 83       	st	Z, r24
               TIFR |= TIMER_1A_COMPARE_FLAG;
    130c:	88 b7       	in	r24, 0x38	; 56
    130e:	80 61       	ori	r24, 0x10	; 16
    1310:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	08 95       	ret
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
    1316:	93 ff       	sbrs	r25, 3
    1318:	37 c0       	rjmp	.+110    	; 0x1388 <TIM_GetStatus+0x118>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	fb 01       	movw	r30, r22
    131e:	90 83       	st	Z, r25
               TIFR |= TIMER_1B_COMPARE_FLAG;
    1320:	98 b7       	in	r25, 0x38	; 56
    1322:	98 60       	ori	r25, 0x08	; 8
    1324:	98 bf       	out	0x38, r25	; 56
    1326:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	fc 01       	movw	r30, r24
    132c:	ee 0f       	add	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	8e 0f       	add	r24, r30
    1332:	9f 1f       	adc	r25, r31
    1334:	fc 01       	movw	r30, r24
    1336:	e4 59       	subi	r30, 0x94	; 148
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	80 81       	ld	r24, Z
    133c:	81 11       	cpse	r24, r1
    133e:	09 c0       	rjmp	.+18     	; 0x1352 <TIM_GetStatus+0xe2>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
    1340:	08 b6       	in	r0, 0x38	; 56
    1342:	06 fe       	sbrs	r0, 6
    1344:	23 c0       	rjmp	.+70     	; 0x138c <TIM_GetStatus+0x11c>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1346:	fb 01       	movw	r30, r22
    1348:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
    134a:	98 b7       	in	r25, 0x38	; 56
    134c:	90 64       	ori	r25, 0x40	; 64
    134e:	98 bf       	out	0x38, r25	; 56
    1350:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1352:	88 30       	cpi	r24, 0x08	; 8
    1354:	e9 f4       	brne	.+58     	; 0x1390 <TIM_GetStatus+0x120>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
    1356:	08 b6       	in	r0, 0x38	; 56
    1358:	07 fe       	sbrs	r0, 7
    135a:	1c c0       	rjmp	.+56     	; 0x1394 <TIM_GetStatus+0x124>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	fb 01       	movw	r30, r22
    1360:	80 83       	st	Z, r24
               TIFR |= TIMER_2_COMPARE_FLAG;
    1362:	88 b7       	in	r24, 0x38	; 56
    1364:	80 68       	ori	r24, 0x80	; 128
    1366:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	08 95       	ret
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
    136c:	8f ef       	ldi	r24, 0xFF	; 255
    136e:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    1370:	8e ef       	ldi	r24, 0xFE	; 254
    1372:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1374:	8d ef       	ldi	r24, 0xFD	; 253
    1376:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    137c:	8d ef       	ldi	r24, 0xFD	; 253
    137e:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1380:	8d ef       	ldi	r24, 0xFD	; 253
    1382:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1388:	8d ef       	ldi	r24, 0xFD	; 253
    138a:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    138c:	8d ef       	ldi	r24, 0xFD	; 253
    138e:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1394:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
}
    1396:	08 95       	ret

00001398 <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <TIM_DelayUs+0x18>
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <TIM_DelayUs+0x1a>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	18 2f       	mov	r17, r24
    13b8:	6a 01       	movw	r12, r20
    13ba:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    13bc:	83 30       	cpi	r24, 0x03	; 3
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <TIM_DelayUs+0x2a>
    13c0:	54 c0       	rjmp	.+168    	; 0x146a <TIM_DelayUs+0xd2>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    13c2:	21 15       	cp	r18, r1
    13c4:	31 05       	cpc	r19, r1
    13c6:	09 f4       	brne	.+2      	; 0x13ca <TIM_DelayUs+0x32>
    13c8:	52 c0       	rjmp	.+164    	; 0x146e <TIM_DelayUs+0xd6>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    13ca:	30 93 ac 00 	sts	0x00AC, r19	; 0x8000ac <gptr_CallerFunc+0x1>
    13ce:	20 93 ab 00 	sts	0x00AB, r18	; 0x8000ab <gptr_CallerFunc>
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    13d2:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <gEnu_State>
    13d6:	81 11       	cpse	r24, r1
    13d8:	4c c0       	rjmp	.+152    	; 0x1472 <TIM_DelayUs+0xda>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    13da:	be 01       	movw	r22, r28
    13dc:	6f 5f       	subi	r22, 0xFF	; 255
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	81 2f       	mov	r24, r17
    13e2:	0e 94 08 08 	call	0x1010	; 0x1010 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    13e6:	8c 3f       	cpi	r24, 0xFC	; 252
    13e8:	f1 f1       	breq	.+124    	; 0x1466 <TIM_DelayUs+0xce>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    13ea:	89 80       	ldd	r8, Y+1	; 0x01
    13ec:	9a 80       	ldd	r9, Y+2	; 0x02
    13ee:	ab 80       	ldd	r10, Y+3	; 0x03
    13f0:	bc 80       	ldd	r11, Y+4	; 0x04
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	a9 01       	movw	r20, r18
    13f8:	c5 01       	movw	r24, r10
    13fa:	b4 01       	movw	r22, r8
    13fc:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__cmpsf2>
    1400:	88 23       	and	r24, r24
    1402:	61 f0       	breq	.+24     	; 0x141c <TIM_DelayUs+0x84>
      {
         TIM_Delay /= f32_FreqRatio;
    1404:	c7 01       	movw	r24, r14
    1406:	b6 01       	movw	r22, r12
    1408:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__floatunsisf>
    140c:	a5 01       	movw	r20, r10
    140e:	94 01       	movw	r18, r8
    1410:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__divsf3>
    1414:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fixunssfsi>
    1418:	6b 01       	movw	r12, r22
    141a:	7c 01       	movw	r14, r24
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    141c:	bb 27       	eor	r27, r27
    141e:	af 2d       	mov	r26, r15
    1420:	9e 2d       	mov	r25, r14
    1422:	8d 2d       	mov	r24, r13
    1424:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <gu32_Overflows>
    1428:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <gu32_Overflows+0x1>
    142c:	a0 93 b2 00 	sts	0x00B2, r26	; 0x8000b2 <gu32_Overflows+0x2>
    1430:	b0 93 b3 00 	sts	0x00B3, r27	; 0x8000b3 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    1434:	c0 92 ae 00 	sts	0x00AE, r12	; 0x8000ae <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    1438:	89 2b       	or	r24, r25
    143a:	8a 2b       	or	r24, r26
    143c:	8b 2b       	or	r24, r27
    143e:	49 f4       	brne	.+18     	; 0x1452 <TIM_DelayUs+0xba>
      {
         gu8_OverflowsComplete = HIGH;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    1446:	6c 2d       	mov	r22, r12
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	81 2f       	mov	r24, r17
    144c:	0e 94 11 09 	call	0x1222	; 0x1222 <TIM_Start>
    1450:	05 c0       	rjmp	.+10     	; 0x145c <TIM_DelayUs+0xc4>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1452:	6f ef       	ldi	r22, 0xFF	; 255
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	81 2f       	mov	r24, r17
    1458:	0e 94 11 09 	call	0x1222	; 0x1222 <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <gEnu_State>
      return TIMER_E_PENDING;
    1462:	8d ef       	ldi	r24, 0xFD	; 253
    1464:	07 c0       	rjmp	.+14     	; 0x1474 <TIM_DelayUs+0xdc>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1466:	8c ef       	ldi	r24, 0xFC	; 252
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <TIM_DelayUs+0xdc>
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    146a:	8e ef       	ldi	r24, 0xFE	; 254
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <TIM_DelayUs+0xdc>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <TIM_DelayUs+0xdc>
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
    1472:	81 e0       	ldi	r24, 0x01	; 1
}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	ff 90       	pop	r15
    1484:	ef 90       	pop	r14
    1486:	df 90       	pop	r13
    1488:	cf 90       	pop	r12
    148a:	bf 90       	pop	r11
    148c:	af 90       	pop	r10
    148e:	9f 90       	pop	r9
    1490:	8f 90       	pop	r8
    1492:	08 95       	ret

00001494 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1494:	8f 92       	push	r8
    1496:	9f 92       	push	r9
    1498:	af 92       	push	r10
    149a:	bf 92       	push	r11
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <TIM_DelayMs+0x18>
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <TIM_DelayMs+0x1a>
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	18 2f       	mov	r17, r24
    14b4:	04 2f       	mov	r16, r20
    14b6:	d5 2e       	mov	r13, r21
    14b8:	e6 2e       	mov	r14, r22
    14ba:	f7 2e       	mov	r15, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    14bc:	83 30       	cpi	r24, 0x03	; 3
    14be:	08 f0       	brcs	.+2      	; 0x14c2 <TIM_DelayMs+0x2e>
    14c0:	65 c0       	rjmp	.+202    	; 0x158c <TIM_DelayMs+0xf8>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    14c2:	21 15       	cp	r18, r1
    14c4:	31 05       	cpc	r19, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <TIM_DelayMs+0x36>
    14c8:	63 c0       	rjmp	.+198    	; 0x1590 <TIM_DelayMs+0xfc>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    14ca:	30 93 ac 00 	sts	0x00AC, r19	; 0x8000ac <gptr_CallerFunc+0x1>
    14ce:	20 93 ab 00 	sts	0x00AB, r18	; 0x8000ab <gptr_CallerFunc>
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    14d2:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <gEnu_State>
    14d6:	81 11       	cpse	r24, r1
    14d8:	5d c0       	rjmp	.+186    	; 0x1594 <TIM_DelayMs+0x100>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    14da:	be 01       	movw	r22, r28
    14dc:	6f 5f       	subi	r22, 0xFF	; 255
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	81 2f       	mov	r24, r17
    14e2:	0e 94 08 08 	call	0x1010	; 0x1010 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    14e6:	8c 3f       	cpi	r24, 0xFC	; 252
    14e8:	09 f4       	brne	.+2      	; 0x14ec <TIM_DelayMs+0x58>
    14ea:	4e c0       	rjmp	.+156    	; 0x1588 <TIM_DelayMs+0xf4>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    14ec:	89 80       	ldd	r8, Y+1	; 0x01
    14ee:	9a 80       	ldd	r9, Y+2	; 0x02
    14f0:	ab 80       	ldd	r10, Y+3	; 0x03
    14f2:	bc 80       	ldd	r11, Y+4	; 0x04
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	a9 01       	movw	r20, r18
    14fa:	c5 01       	movw	r24, r10
    14fc:	b4 01       	movw	r22, r8
    14fe:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__cmpsf2>
    1502:	88 23       	and	r24, r24
    1504:	81 f0       	breq	.+32     	; 0x1526 <TIM_DelayMs+0x92>
      {
         TIM_Delay /= f32_FreqRatio;
    1506:	60 2f       	mov	r22, r16
    1508:	7d 2d       	mov	r23, r13
    150a:	8e 2d       	mov	r24, r14
    150c:	9f 2d       	mov	r25, r15
    150e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__floatunsisf>
    1512:	a5 01       	movw	r20, r10
    1514:	94 01       	movw	r18, r8
    1516:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__divsf3>
    151a:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fixunssfsi>
    151e:	06 2f       	mov	r16, r22
    1520:	d7 2e       	mov	r13, r23
    1522:	e8 2e       	mov	r14, r24
    1524:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    1526:	a8 ee       	ldi	r26, 0xE8	; 232
    1528:	b3 e0       	ldi	r27, 0x03	; 3
    152a:	20 2f       	mov	r18, r16
    152c:	3d 2d       	mov	r19, r13
    152e:	4e 2d       	mov	r20, r14
    1530:	5f 2d       	mov	r21, r15
    1532:	0e 94 ae 0c 	call	0x195c	; 0x195c <__muluhisi3>
    1536:	bb 27       	eor	r27, r27
    1538:	a9 2f       	mov	r26, r25
    153a:	98 2f       	mov	r25, r24
    153c:	87 2f       	mov	r24, r23
    153e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <gu32_Overflows>
    1542:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <gu32_Overflows+0x1>
    1546:	a0 93 b2 00 	sts	0x00B2, r26	; 0x8000b2 <gu32_Overflows+0x2>
    154a:	b0 93 b3 00 	sts	0x00B3, r27	; 0x8000b3 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    154e:	28 ee       	ldi	r18, 0xE8	; 232
    1550:	02 9f       	mul	r16, r18
    1552:	00 2d       	mov	r16, r0
    1554:	11 24       	eor	r1, r1
    1556:	00 93 ae 00 	sts	0x00AE, r16	; 0x8000ae <gu8_Remindar>
      
      if(gu32_Overflows == 0)
    155a:	89 2b       	or	r24, r25
    155c:	8a 2b       	or	r24, r26
    155e:	8b 2b       	or	r24, r27
    1560:	49 f4       	brne	.+18     	; 0x1574 <TIM_DelayMs+0xe0>
      {
         gu8_OverflowsComplete = HIGH;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
    1568:	60 2f       	mov	r22, r16
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	81 2f       	mov	r24, r17
    156e:	0e 94 11 09 	call	0x1222	; 0x1222 <TIM_Start>
    1572:	05 c0       	rjmp	.+10     	; 0x157e <TIM_DelayMs+0xea>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1574:	6f ef       	ldi	r22, 0xFF	; 255
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	81 2f       	mov	r24, r17
    157a:	0e 94 11 09 	call	0x1222	; 0x1222 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <gEnu_State>
      return TIMER_E_PENDING;
    1584:	8d ef       	ldi	r24, 0xFD	; 253
    1586:	07 c0       	rjmp	.+14     	; 0x1596 <TIM_DelayMs+0x102>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1588:	8c ef       	ldi	r24, 0xFC	; 252
    158a:	05 c0       	rjmp	.+10     	; 0x1596 <TIM_DelayMs+0x102>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    158c:	8e ef       	ldi	r24, 0xFE	; 254
    158e:	03 c0       	rjmp	.+6      	; 0x1596 <TIM_DelayMs+0x102>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	01 c0       	rjmp	.+2      	; 0x1596 <TIM_DelayMs+0x102>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
    1594:	81 e0       	ldi	r24, 0x01	; 1
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	ff 90       	pop	r15
    15a8:	ef 90       	pop	r14
    15aa:	df 90       	pop	r13
    15ac:	bf 90       	pop	r11
    15ae:	af 90       	pop	r10
    15b0:	9f 90       	pop	r9
    15b2:	8f 90       	pop	r8
    15b4:	08 95       	ret

000015b6 <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	1f 92       	push	r1
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
   if(DelayReady == gEnu_State)
    15c2:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <gEnu_State>
    15c6:	99 23       	and	r25, r25
    15c8:	09 f4       	brne	.+2      	; 0x15cc <TIM_DelayStatus+0x16>
    15ca:	4a c0       	rjmp	.+148    	; 0x1660 <TIM_DelayStatus+0xaa>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
    15cc:	20 91 ab 00 	lds	r18, 0x00AB	; 0x8000ab <gptr_CallerFunc>
    15d0:	30 91 ac 00 	lds	r19, 0x00AC	; 0x8000ac <gptr_CallerFunc+0x1>
    15d4:	26 17       	cp	r18, r22
    15d6:	37 07       	cpc	r19, r23
    15d8:	09 f0       	breq	.+2      	; 0x15dc <TIM_DelayStatus+0x26>
    15da:	44 c0       	rjmp	.+136    	; 0x1664 <TIM_DelayStatus+0xae>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    15dc:	91 30       	cpi	r25, 0x01	; 1
    15de:	09 f0       	breq	.+2      	; 0x15e2 <TIM_DelayStatus+0x2c>
    15e0:	43 c0       	rjmp	.+134    	; 0x1668 <TIM_DelayStatus+0xb2>
    15e2:	18 2f       	mov	r17, r24
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    15e4:	be 01       	movw	r22, r28
    15e6:	6f 5f       	subi	r22, 0xFF	; 255
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	0e 94 38 09 	call	0x1270	; 0x1270 <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    15ee:	81 11       	cpse	r24, r1
    15f0:	35 c0       	rjmp	.+106    	; 0x165c <TIM_DelayStatus+0xa6>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    15f2:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <gu8_OverflowsComplete>
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	41 f4       	brne	.+16     	; 0x160a <TIM_DelayStatus+0x54>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    15fa:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <gEnu_State>
            gu8_OverflowsComplete = LOW;
    15fe:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <gu8_OverflowsComplete>
            gu8_Remindar = 0;
    1602:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <gu8_Remindar>
            /* return success message. */
            return ERROR_OK;
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	30 c0       	rjmp	.+96     	; 0x166a <TIM_DelayStatus+0xb4>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    160a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <gu32_Overflows>
    160e:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <gu32_Overflows+0x1>
    1612:	a0 91 b2 00 	lds	r26, 0x00B2	; 0x8000b2 <gu32_Overflows+0x2>
    1616:	b0 91 b3 00 	lds	r27, 0x00B3	; 0x8000b3 <gu32_Overflows+0x3>
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	a1 09       	sbc	r26, r1
    161e:	b1 09       	sbc	r27, r1
    1620:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <gu32_Overflows>
    1624:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <gu32_Overflows+0x1>
    1628:	a0 93 b2 00 	sts	0x00B2, r26	; 0x8000b2 <gu32_Overflows+0x2>
    162c:	b0 93 b3 00 	sts	0x00B3, r27	; 0x8000b3 <gu32_Overflows+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    1630:	89 2b       	or	r24, r25
    1632:	8a 2b       	or	r24, r26
    1634:	8b 2b       	or	r24, r27
    1636:	59 f4       	brne	.+22     	; 0x164e <TIM_DelayStatus+0x98>
         {
            gu8_OverflowsComplete = HIGH;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <gu8_OverflowsComplete>
            TIM_Start(TIM_channel, gu8_Remindar);
    163e:	60 91 ae 00 	lds	r22, 0x00AE	; 0x8000ae <gu8_Remindar>
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	81 2f       	mov	r24, r17
    1646:	0e 94 11 09 	call	0x1222	; 0x1222 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
    164a:	8d ef       	ldi	r24, 0xFD	; 253
    164c:	0e c0       	rjmp	.+28     	; 0x166a <TIM_DelayStatus+0xb4>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    164e:	6f ef       	ldi	r22, 0xFF	; 255
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	81 2f       	mov	r24, r17
    1654:	0e 94 11 09 	call	0x1222	; 0x1222 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    1658:	8d ef       	ldi	r24, 0xFD	; 253
    165a:	07 c0       	rjmp	.+14     	; 0x166a <TIM_DelayStatus+0xb4>
   }
   else
   {
      return ERROR_NOK;
   }
   return 0;
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	05 c0       	rjmp	.+10     	; 0x166a <TIM_DelayStatus+0xb4>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
    1660:	8b ef       	ldi	r24, 0xFB	; 251
    1662:	03 c0       	rjmp	.+6      	; 0x166a <TIM_DelayStatus+0xb4>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	01 c0       	rjmp	.+2      	; 0x166a <TIM_DelayStatus+0xb4>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
    1668:	81 e0       	ldi	r24, 0x01	; 1
   }
   return 0;
    166a:	0f 90       	pop	r0
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	1f 91       	pop	r17
    1672:	08 95       	ret

00001674 <main>:
 * Author : vetmo
 */ 
#include "LCD.h"

int main(void)
{
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	1f 92       	push	r1
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
	while(LCD_Init()!= OperationSuccess);
    167e:	0e 94 d1 05 	call	0xba2	; 0xba2 <LCD_Init>
    1682:	81 11       	cpse	r24, r1
    1684:	fc cf       	rjmp	.-8      	; 0x167e <main+0xa>
	while(LCD_SendData('A')!=OperationSuccess);
    1686:	81 e4       	ldi	r24, 0x41	; 65
    1688:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LCD_SendData>
    168c:	81 11       	cpse	r24, r1
    168e:	fb cf       	rjmp	.-10     	; 0x1686 <main+0x12>
	uint8_t x =0;
    1690:	19 82       	std	Y+1, r1	; 0x01
    //LCD_ReadDispLoc(1,&x);
	while (1) 
    {
		//LCD_SendCommand(0x1C);
		//for(volatile int i = 0; i<5000;i++);
		LCD_ReadDispLoc(LCD_CURS_Position0,&x);
    1692:	be 01       	movw	r22, r28
    1694:	6f 5f       	subi	r22, 0xFF	; 255
    1696:	7f 4f       	sbci	r23, 0xFF	; 255
    1698:	80 e8       	ldi	r24, 0x80	; 128
    169a:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_ReadDispLoc>
    169e:	f9 cf       	rjmp	.-14     	; 0x1692 <main+0x1e>

000016a0 <__cmpsf2>:
    16a0:	0e 94 33 0c 	call	0x1866	; 0x1866 <__fp_cmp>
    16a4:	08 f4       	brcc	.+2      	; 0x16a8 <__cmpsf2+0x8>
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	08 95       	ret

000016aa <__divsf3>:
    16aa:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__divsf3x>
    16ae:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_round>
    16b2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__fp_pscB>
    16b6:	58 f0       	brcs	.+22     	; 0x16ce <__divsf3+0x24>
    16b8:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__fp_pscA>
    16bc:	40 f0       	brcs	.+16     	; 0x16ce <__divsf3+0x24>
    16be:	29 f4       	brne	.+10     	; 0x16ca <__divsf3+0x20>
    16c0:	5f 3f       	cpi	r21, 0xFF	; 255
    16c2:	29 f0       	breq	.+10     	; 0x16ce <__divsf3+0x24>
    16c4:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <__fp_inf>
    16c8:	51 11       	cpse	r21, r1
    16ca:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__fp_szero>
    16ce:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__fp_nan>

000016d2 <__divsf3x>:
    16d2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__fp_split3>
    16d6:	68 f3       	brcs	.-38     	; 0x16b2 <__divsf3+0x8>

000016d8 <__divsf3_pse>:
    16d8:	99 23       	and	r25, r25
    16da:	b1 f3       	breq	.-20     	; 0x16c8 <__divsf3+0x1e>
    16dc:	55 23       	and	r21, r21
    16de:	91 f3       	breq	.-28     	; 0x16c4 <__divsf3+0x1a>
    16e0:	95 1b       	sub	r25, r21
    16e2:	55 0b       	sbc	r21, r21
    16e4:	bb 27       	eor	r27, r27
    16e6:	aa 27       	eor	r26, r26
    16e8:	62 17       	cp	r22, r18
    16ea:	73 07       	cpc	r23, r19
    16ec:	84 07       	cpc	r24, r20
    16ee:	38 f0       	brcs	.+14     	; 0x16fe <__divsf3_pse+0x26>
    16f0:	9f 5f       	subi	r25, 0xFF	; 255
    16f2:	5f 4f       	sbci	r21, 0xFF	; 255
    16f4:	22 0f       	add	r18, r18
    16f6:	33 1f       	adc	r19, r19
    16f8:	44 1f       	adc	r20, r20
    16fa:	aa 1f       	adc	r26, r26
    16fc:	a9 f3       	breq	.-22     	; 0x16e8 <__divsf3_pse+0x10>
    16fe:	35 d0       	rcall	.+106    	; 0x176a <__divsf3_pse+0x92>
    1700:	0e 2e       	mov	r0, r30
    1702:	3a f0       	brmi	.+14     	; 0x1712 <__divsf3_pse+0x3a>
    1704:	e0 e8       	ldi	r30, 0x80	; 128
    1706:	32 d0       	rcall	.+100    	; 0x176c <__divsf3_pse+0x94>
    1708:	91 50       	subi	r25, 0x01	; 1
    170a:	50 40       	sbci	r21, 0x00	; 0
    170c:	e6 95       	lsr	r30
    170e:	00 1c       	adc	r0, r0
    1710:	ca f7       	brpl	.-14     	; 0x1704 <__divsf3_pse+0x2c>
    1712:	2b d0       	rcall	.+86     	; 0x176a <__divsf3_pse+0x92>
    1714:	fe 2f       	mov	r31, r30
    1716:	29 d0       	rcall	.+82     	; 0x176a <__divsf3_pse+0x92>
    1718:	66 0f       	add	r22, r22
    171a:	77 1f       	adc	r23, r23
    171c:	88 1f       	adc	r24, r24
    171e:	bb 1f       	adc	r27, r27
    1720:	26 17       	cp	r18, r22
    1722:	37 07       	cpc	r19, r23
    1724:	48 07       	cpc	r20, r24
    1726:	ab 07       	cpc	r26, r27
    1728:	b0 e8       	ldi	r27, 0x80	; 128
    172a:	09 f0       	breq	.+2      	; 0x172e <__divsf3_pse+0x56>
    172c:	bb 0b       	sbc	r27, r27
    172e:	80 2d       	mov	r24, r0
    1730:	bf 01       	movw	r22, r30
    1732:	ff 27       	eor	r31, r31
    1734:	93 58       	subi	r25, 0x83	; 131
    1736:	5f 4f       	sbci	r21, 0xFF	; 255
    1738:	3a f0       	brmi	.+14     	; 0x1748 <__divsf3_pse+0x70>
    173a:	9e 3f       	cpi	r25, 0xFE	; 254
    173c:	51 05       	cpc	r21, r1
    173e:	78 f0       	brcs	.+30     	; 0x175e <__divsf3_pse+0x86>
    1740:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <__fp_inf>
    1744:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__fp_szero>
    1748:	5f 3f       	cpi	r21, 0xFF	; 255
    174a:	e4 f3       	brlt	.-8      	; 0x1744 <__divsf3_pse+0x6c>
    174c:	98 3e       	cpi	r25, 0xE8	; 232
    174e:	d4 f3       	brlt	.-12     	; 0x1744 <__divsf3_pse+0x6c>
    1750:	86 95       	lsr	r24
    1752:	77 95       	ror	r23
    1754:	67 95       	ror	r22
    1756:	b7 95       	ror	r27
    1758:	f7 95       	ror	r31
    175a:	9f 5f       	subi	r25, 0xFF	; 255
    175c:	c9 f7       	brne	.-14     	; 0x1750 <__divsf3_pse+0x78>
    175e:	88 0f       	add	r24, r24
    1760:	91 1d       	adc	r25, r1
    1762:	96 95       	lsr	r25
    1764:	87 95       	ror	r24
    1766:	97 f9       	bld	r25, 7
    1768:	08 95       	ret
    176a:	e1 e0       	ldi	r30, 0x01	; 1
    176c:	66 0f       	add	r22, r22
    176e:	77 1f       	adc	r23, r23
    1770:	88 1f       	adc	r24, r24
    1772:	bb 1f       	adc	r27, r27
    1774:	62 17       	cp	r22, r18
    1776:	73 07       	cpc	r23, r19
    1778:	84 07       	cpc	r24, r20
    177a:	ba 07       	cpc	r27, r26
    177c:	20 f0       	brcs	.+8      	; 0x1786 <__divsf3_pse+0xae>
    177e:	62 1b       	sub	r22, r18
    1780:	73 0b       	sbc	r23, r19
    1782:	84 0b       	sbc	r24, r20
    1784:	ba 0b       	sbc	r27, r26
    1786:	ee 1f       	adc	r30, r30
    1788:	88 f7       	brcc	.-30     	; 0x176c <__divsf3_pse+0x94>
    178a:	e0 95       	com	r30
    178c:	08 95       	ret

0000178e <__fixunssfsi>:
    178e:	0e 94 87 0c 	call	0x190e	; 0x190e <__fp_splitA>
    1792:	88 f0       	brcs	.+34     	; 0x17b6 <__fixunssfsi+0x28>
    1794:	9f 57       	subi	r25, 0x7F	; 127
    1796:	98 f0       	brcs	.+38     	; 0x17be <__fixunssfsi+0x30>
    1798:	b9 2f       	mov	r27, r25
    179a:	99 27       	eor	r25, r25
    179c:	b7 51       	subi	r27, 0x17	; 23
    179e:	b0 f0       	brcs	.+44     	; 0x17cc <__fixunssfsi+0x3e>
    17a0:	e1 f0       	breq	.+56     	; 0x17da <__fixunssfsi+0x4c>
    17a2:	66 0f       	add	r22, r22
    17a4:	77 1f       	adc	r23, r23
    17a6:	88 1f       	adc	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	1a f0       	brmi	.+6      	; 0x17b2 <__fixunssfsi+0x24>
    17ac:	ba 95       	dec	r27
    17ae:	c9 f7       	brne	.-14     	; 0x17a2 <__fixunssfsi+0x14>
    17b0:	14 c0       	rjmp	.+40     	; 0x17da <__fixunssfsi+0x4c>
    17b2:	b1 30       	cpi	r27, 0x01	; 1
    17b4:	91 f0       	breq	.+36     	; 0x17da <__fixunssfsi+0x4c>
    17b6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__fp_zero>
    17ba:	b1 e0       	ldi	r27, 0x01	; 1
    17bc:	08 95       	ret
    17be:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__fp_zero>
    17c2:	67 2f       	mov	r22, r23
    17c4:	78 2f       	mov	r23, r24
    17c6:	88 27       	eor	r24, r24
    17c8:	b8 5f       	subi	r27, 0xF8	; 248
    17ca:	39 f0       	breq	.+14     	; 0x17da <__fixunssfsi+0x4c>
    17cc:	b9 3f       	cpi	r27, 0xF9	; 249
    17ce:	cc f3       	brlt	.-14     	; 0x17c2 <__fixunssfsi+0x34>
    17d0:	86 95       	lsr	r24
    17d2:	77 95       	ror	r23
    17d4:	67 95       	ror	r22
    17d6:	b3 95       	inc	r27
    17d8:	d9 f7       	brne	.-10     	; 0x17d0 <__fixunssfsi+0x42>
    17da:	3e f4       	brtc	.+14     	; 0x17ea <__fixunssfsi+0x5c>
    17dc:	90 95       	com	r25
    17de:	80 95       	com	r24
    17e0:	70 95       	com	r23
    17e2:	61 95       	neg	r22
    17e4:	7f 4f       	sbci	r23, 0xFF	; 255
    17e6:	8f 4f       	sbci	r24, 0xFF	; 255
    17e8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ea:	08 95       	ret

000017ec <__floatunsisf>:
    17ec:	e8 94       	clt
    17ee:	09 c0       	rjmp	.+18     	; 0x1802 <__floatsisf+0x12>

000017f0 <__floatsisf>:
    17f0:	97 fb       	bst	r25, 7
    17f2:	3e f4       	brtc	.+14     	; 0x1802 <__floatsisf+0x12>
    17f4:	90 95       	com	r25
    17f6:	80 95       	com	r24
    17f8:	70 95       	com	r23
    17fa:	61 95       	neg	r22
    17fc:	7f 4f       	sbci	r23, 0xFF	; 255
    17fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1800:	9f 4f       	sbci	r25, 0xFF	; 255
    1802:	99 23       	and	r25, r25
    1804:	a9 f0       	breq	.+42     	; 0x1830 <__floatsisf+0x40>
    1806:	f9 2f       	mov	r31, r25
    1808:	96 e9       	ldi	r25, 0x96	; 150
    180a:	bb 27       	eor	r27, r27
    180c:	93 95       	inc	r25
    180e:	f6 95       	lsr	r31
    1810:	87 95       	ror	r24
    1812:	77 95       	ror	r23
    1814:	67 95       	ror	r22
    1816:	b7 95       	ror	r27
    1818:	f1 11       	cpse	r31, r1
    181a:	f8 cf       	rjmp	.-16     	; 0x180c <__floatsisf+0x1c>
    181c:	fa f4       	brpl	.+62     	; 0x185c <__floatsisf+0x6c>
    181e:	bb 0f       	add	r27, r27
    1820:	11 f4       	brne	.+4      	; 0x1826 <__floatsisf+0x36>
    1822:	60 ff       	sbrs	r22, 0
    1824:	1b c0       	rjmp	.+54     	; 0x185c <__floatsisf+0x6c>
    1826:	6f 5f       	subi	r22, 0xFF	; 255
    1828:	7f 4f       	sbci	r23, 0xFF	; 255
    182a:	8f 4f       	sbci	r24, 0xFF	; 255
    182c:	9f 4f       	sbci	r25, 0xFF	; 255
    182e:	16 c0       	rjmp	.+44     	; 0x185c <__floatsisf+0x6c>
    1830:	88 23       	and	r24, r24
    1832:	11 f0       	breq	.+4      	; 0x1838 <__floatsisf+0x48>
    1834:	96 e9       	ldi	r25, 0x96	; 150
    1836:	11 c0       	rjmp	.+34     	; 0x185a <__floatsisf+0x6a>
    1838:	77 23       	and	r23, r23
    183a:	21 f0       	breq	.+8      	; 0x1844 <__floatsisf+0x54>
    183c:	9e e8       	ldi	r25, 0x8E	; 142
    183e:	87 2f       	mov	r24, r23
    1840:	76 2f       	mov	r23, r22
    1842:	05 c0       	rjmp	.+10     	; 0x184e <__floatsisf+0x5e>
    1844:	66 23       	and	r22, r22
    1846:	71 f0       	breq	.+28     	; 0x1864 <__floatsisf+0x74>
    1848:	96 e8       	ldi	r25, 0x86	; 134
    184a:	86 2f       	mov	r24, r22
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	2a f0       	brmi	.+10     	; 0x185c <__floatsisf+0x6c>
    1852:	9a 95       	dec	r25
    1854:	66 0f       	add	r22, r22
    1856:	77 1f       	adc	r23, r23
    1858:	88 1f       	adc	r24, r24
    185a:	da f7       	brpl	.-10     	; 0x1852 <__floatsisf+0x62>
    185c:	88 0f       	add	r24, r24
    185e:	96 95       	lsr	r25
    1860:	87 95       	ror	r24
    1862:	97 f9       	bld	r25, 7
    1864:	08 95       	ret

00001866 <__fp_cmp>:
    1866:	99 0f       	add	r25, r25
    1868:	00 08       	sbc	r0, r0
    186a:	55 0f       	add	r21, r21
    186c:	aa 0b       	sbc	r26, r26
    186e:	e0 e8       	ldi	r30, 0x80	; 128
    1870:	fe ef       	ldi	r31, 0xFE	; 254
    1872:	16 16       	cp	r1, r22
    1874:	17 06       	cpc	r1, r23
    1876:	e8 07       	cpc	r30, r24
    1878:	f9 07       	cpc	r31, r25
    187a:	c0 f0       	brcs	.+48     	; 0x18ac <__fp_cmp+0x46>
    187c:	12 16       	cp	r1, r18
    187e:	13 06       	cpc	r1, r19
    1880:	e4 07       	cpc	r30, r20
    1882:	f5 07       	cpc	r31, r21
    1884:	98 f0       	brcs	.+38     	; 0x18ac <__fp_cmp+0x46>
    1886:	62 1b       	sub	r22, r18
    1888:	73 0b       	sbc	r23, r19
    188a:	84 0b       	sbc	r24, r20
    188c:	95 0b       	sbc	r25, r21
    188e:	39 f4       	brne	.+14     	; 0x189e <__fp_cmp+0x38>
    1890:	0a 26       	eor	r0, r26
    1892:	61 f0       	breq	.+24     	; 0x18ac <__fp_cmp+0x46>
    1894:	23 2b       	or	r18, r19
    1896:	24 2b       	or	r18, r20
    1898:	25 2b       	or	r18, r21
    189a:	21 f4       	brne	.+8      	; 0x18a4 <__fp_cmp+0x3e>
    189c:	08 95       	ret
    189e:	0a 26       	eor	r0, r26
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <__fp_cmp+0x3e>
    18a2:	a1 40       	sbci	r26, 0x01	; 1
    18a4:	a6 95       	lsr	r26
    18a6:	8f ef       	ldi	r24, 0xFF	; 255
    18a8:	81 1d       	adc	r24, r1
    18aa:	81 1d       	adc	r24, r1
    18ac:	08 95       	ret

000018ae <__fp_inf>:
    18ae:	97 f9       	bld	r25, 7
    18b0:	9f 67       	ori	r25, 0x7F	; 127
    18b2:	80 e8       	ldi	r24, 0x80	; 128
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	08 95       	ret

000018ba <__fp_nan>:
    18ba:	9f ef       	ldi	r25, 0xFF	; 255
    18bc:	80 ec       	ldi	r24, 0xC0	; 192
    18be:	08 95       	ret

000018c0 <__fp_pscA>:
    18c0:	00 24       	eor	r0, r0
    18c2:	0a 94       	dec	r0
    18c4:	16 16       	cp	r1, r22
    18c6:	17 06       	cpc	r1, r23
    18c8:	18 06       	cpc	r1, r24
    18ca:	09 06       	cpc	r0, r25
    18cc:	08 95       	ret

000018ce <__fp_pscB>:
    18ce:	00 24       	eor	r0, r0
    18d0:	0a 94       	dec	r0
    18d2:	12 16       	cp	r1, r18
    18d4:	13 06       	cpc	r1, r19
    18d6:	14 06       	cpc	r1, r20
    18d8:	05 06       	cpc	r0, r21
    18da:	08 95       	ret

000018dc <__fp_round>:
    18dc:	09 2e       	mov	r0, r25
    18de:	03 94       	inc	r0
    18e0:	00 0c       	add	r0, r0
    18e2:	11 f4       	brne	.+4      	; 0x18e8 <__fp_round+0xc>
    18e4:	88 23       	and	r24, r24
    18e6:	52 f0       	brmi	.+20     	; 0x18fc <__fp_round+0x20>
    18e8:	bb 0f       	add	r27, r27
    18ea:	40 f4       	brcc	.+16     	; 0x18fc <__fp_round+0x20>
    18ec:	bf 2b       	or	r27, r31
    18ee:	11 f4       	brne	.+4      	; 0x18f4 <__fp_round+0x18>
    18f0:	60 ff       	sbrs	r22, 0
    18f2:	04 c0       	rjmp	.+8      	; 0x18fc <__fp_round+0x20>
    18f4:	6f 5f       	subi	r22, 0xFF	; 255
    18f6:	7f 4f       	sbci	r23, 0xFF	; 255
    18f8:	8f 4f       	sbci	r24, 0xFF	; 255
    18fa:	9f 4f       	sbci	r25, 0xFF	; 255
    18fc:	08 95       	ret

000018fe <__fp_split3>:
    18fe:	57 fd       	sbrc	r21, 7
    1900:	90 58       	subi	r25, 0x80	; 128
    1902:	44 0f       	add	r20, r20
    1904:	55 1f       	adc	r21, r21
    1906:	59 f0       	breq	.+22     	; 0x191e <__fp_splitA+0x10>
    1908:	5f 3f       	cpi	r21, 0xFF	; 255
    190a:	71 f0       	breq	.+28     	; 0x1928 <__fp_splitA+0x1a>
    190c:	47 95       	ror	r20

0000190e <__fp_splitA>:
    190e:	88 0f       	add	r24, r24
    1910:	97 fb       	bst	r25, 7
    1912:	99 1f       	adc	r25, r25
    1914:	61 f0       	breq	.+24     	; 0x192e <__fp_splitA+0x20>
    1916:	9f 3f       	cpi	r25, 0xFF	; 255
    1918:	79 f0       	breq	.+30     	; 0x1938 <__fp_splitA+0x2a>
    191a:	87 95       	ror	r24
    191c:	08 95       	ret
    191e:	12 16       	cp	r1, r18
    1920:	13 06       	cpc	r1, r19
    1922:	14 06       	cpc	r1, r20
    1924:	55 1f       	adc	r21, r21
    1926:	f2 cf       	rjmp	.-28     	; 0x190c <__fp_split3+0xe>
    1928:	46 95       	lsr	r20
    192a:	f1 df       	rcall	.-30     	; 0x190e <__fp_splitA>
    192c:	08 c0       	rjmp	.+16     	; 0x193e <__fp_splitA+0x30>
    192e:	16 16       	cp	r1, r22
    1930:	17 06       	cpc	r1, r23
    1932:	18 06       	cpc	r1, r24
    1934:	99 1f       	adc	r25, r25
    1936:	f1 cf       	rjmp	.-30     	; 0x191a <__fp_splitA+0xc>
    1938:	86 95       	lsr	r24
    193a:	71 05       	cpc	r23, r1
    193c:	61 05       	cpc	r22, r1
    193e:	08 94       	sec
    1940:	08 95       	ret

00001942 <__fp_zero>:
    1942:	e8 94       	clt

00001944 <__fp_szero>:
    1944:	bb 27       	eor	r27, r27
    1946:	66 27       	eor	r22, r22
    1948:	77 27       	eor	r23, r23
    194a:	cb 01       	movw	r24, r22
    194c:	97 f9       	bld	r25, 7
    194e:	08 95       	ret

00001950 <__tablejump2__>:
    1950:	ee 0f       	add	r30, r30
    1952:	ff 1f       	adc	r31, r31
    1954:	05 90       	lpm	r0, Z+
    1956:	f4 91       	lpm	r31, Z
    1958:	e0 2d       	mov	r30, r0
    195a:	09 94       	ijmp

0000195c <__muluhisi3>:
    195c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__umulhisi3>
    1960:	a5 9f       	mul	r26, r21
    1962:	90 0d       	add	r25, r0
    1964:	b4 9f       	mul	r27, r20
    1966:	90 0d       	add	r25, r0
    1968:	a4 9f       	mul	r26, r20
    196a:	80 0d       	add	r24, r0
    196c:	91 1d       	adc	r25, r1
    196e:	11 24       	eor	r1, r1
    1970:	08 95       	ret

00001972 <__umulhisi3>:
    1972:	a2 9f       	mul	r26, r18
    1974:	b0 01       	movw	r22, r0
    1976:	b3 9f       	mul	r27, r19
    1978:	c0 01       	movw	r24, r0
    197a:	a3 9f       	mul	r26, r19
    197c:	70 0d       	add	r23, r0
    197e:	81 1d       	adc	r24, r1
    1980:	11 24       	eor	r1, r1
    1982:	91 1d       	adc	r25, r1
    1984:	b2 9f       	mul	r27, r18
    1986:	70 0d       	add	r23, r0
    1988:	81 1d       	adc	r24, r1
    198a:	11 24       	eor	r1, r1
    198c:	91 1d       	adc	r25, r1
    198e:	08 95       	ret

00001990 <_exit>:
    1990:	f8 94       	cli

00001992 <__stop_program>:
    1992:	ff cf       	rjmp	.-2      	; 0x1992 <__stop_program>
